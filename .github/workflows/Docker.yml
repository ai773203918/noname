name: 构建 Docker镜像  # Actions名称，docker
on:
  # 1. 当推送符合 'v*' 模式的标签时触发（例如 v1.0.0, v2.1.3）
  push:
    tag:
      - 'v*'
  # 2. 允许在 GitHub Actions 页面上手动触发工作流
  workflow_dispatch:
    # 手动触发时，可以提供输入参数
    inputs:  # 输入的参数
      tag:  # 输入的标签
        description: '发布的标签名称(例如 v0.0.0)' # 参数描述
        required: true # 是否为必填项
        default: 'v0.0.0' # 默认值

# 可以有多个工作流,多个工作流依次运行
# 一个工作流运行由一个或多个作业组成，这些作业可以顺序或并行运行
jobs:  # 工作流作业
  image:  # 作业名称,唯一标识
    name: 从 Dockerfile 构建映像  # 工作流作业名称
    runs-on: ubuntu-latest  # 在最新的Ubuntu环境中运行
    steps:  # 工作流步骤
      # 检出代码
      - name: 检查代码是否在工作目录  # 步骤名称
        uses: actions/checkout@v4 # 使用 v4 版本的 checkout action
        with:
          # ⭐指定要检出的分支(当前构建相关文件在该分支中)
          ref: build-tooling

      # 设置QEMU，用于构建多平台镜像
      - name: 设置 QEMU  # 步骤名称
        uses: docker/setup-qemu-action@v3  # 引用流程

      # 设置Docker Buildx，用于构建和推送多平台镜像
      - name: 设置 Docker Buildx  # 步骤名称
        uses: docker/setup-buildx-action@v3  # 引用流程

      # 获取当前日期（格式：年月日,如 20251009）
      - name: 获取当前日期
        id: get-date
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        shell: bash

      # 获取镜像标签名称
      - name: 获取 Image Tag  # 步骤名称
        # 注意 | 后注释会有问题故放在这
        # x${{ github.event.inputs.tag }} == x""，-z "${{ github.event.inputs.tag }}"，-n "${{ github.event.inputs.tag }}" 均为判断是否为空
        # 如果提供了标签，则使用提供的标签
        # 否则使用当前日期作为标签
        run: |
          if [ x${{ github.event.inputs.tag }} == x"" ]; then
            echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ steps.get-date.outputs.date }}" >> $GITHUB_ENV
          fi

      # 登录到Docker Hub
      - name: 登录 DockerHub  # 步骤名称
        uses: docker/login-action@v3  # 引用流程
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Docker Hub 用户名(需在secrets中配置)
          password: ${{ secrets.DOCKERHUB_PASSWORD }}  # Docker Hub Token(需在secrets中配置)

      # 准备镜像标签
      - name: 设置 Image Tags  # 步骤名称
        # 注意 | 后注释会有问题故放在这
        # 设置引用的Dockerfile路径(不需要,构建镜像时会定义标签) echo "DOCKERFILE_PATH=Dockerfile" >> $GITHUB_ENV
        # 设置构建的镜像标签:版本号+latest(注意tag全小写)
        run: |
          echo "TAG=${{ secrets.DOCKERHUB_USERNAME }}/noname:${{ env.TAG_NAME }}" >> $GITHUB_ENV
          echo "TAG_LATEST=${{ secrets.DOCKERHUB_USERNAME }}/noname:latest" >> $GITHUB_ENV

      # 构建并推送镜像
      - name: 编译并推送 noname镜像  # 步骤名称
        uses: docker/build-push-action@v5  # 引用流程
        with:  # 参数
          context: .  # 构建上下文
          file: ./Dockerfile  # 指定的Dockerfile
          platforms: linux/amd64  # 构建的平台(测试构建,少一些快一点),多架构一般取决于使用的基础镜像支持架构
          # platforms: linux/amd64,linux/386,linux/arm64/v8,linux/arm/v7,linux/arm/v6,linux/ppc64le,linux/riscv64,linux/s390x  # 构建的平台(正式构建,按需保留)
          push: true  # 推送到仓库
          # load: true  # 加载到本地(多构建平台不支持;若其它也需调用镜像则必须加载,如打包导出)
          # 注意 | 后注释会有问题故放在这
          # 传递构建参数(覆盖 ARG noname_VERSION=3.5.0 配置参数)
          # build-args: |
          #   noname_VERSION=${{ env.TAG_NAME }}
          # 注意 | 后注释会有问题故放在这
          # 推送的镜像标签(版本标签+latest)
          tags: |
            ${{ env.TAG }}
            ${{ env.TAG_LATEST }}

      # # 镜像打包为tar包
      # - name: 镜像打包为tar包  # 步骤名称
      #   # 注意 | 后注释会有问题故放在这
      #   # 运行的具体指令,每行指令依次运行
      #   run: |
      #     docker save -o noname.tar ${{ secrets.DOCKERHUB_USERNAME }}/noname:latest

      # # 将构建好的镜像导出为tar包
      # - name: Archive 导出内部文件  # 步骤名称
      #   uses: actions/upload-artifact@v4  # 引用流程
      #   with:  # 参数
      #     name: noname.tar  # 导出的文件名称
      #     path: noname.tar  # 导出的文件路径
