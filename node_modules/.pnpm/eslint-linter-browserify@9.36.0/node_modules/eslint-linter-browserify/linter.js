if (!global) {
  var global = globalThis || window;
}
function getDefaultExportFromNamespaceIfPresent(n2) {
  return n2 && Object.prototype.hasOwnProperty.call(n2, "default") ? n2["default"] : n2;
}
var eslintLinterBrowserify = {};
var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === "function") {
  cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === "function") {
  cachedClearTimeout = clearTimeout;
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e2) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e3) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e2) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e3) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      args[i2 - 1] = arguments[i2];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var title$1 = "browser";
var platform = "browser";
var browser$2 = true;
var env = {};
var argv = [];
var version$2 = "";
var versions = {};
var release = {};
var config$1 = {};
function noop() {
}
var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;
function binding(name) {
  throw new Error("process.binding is not supported");
}
function cwd() {
  return "/";
}
function chdir(dir) {
  throw new Error("process.chdir is not supported");
}
function umask() {
  return 0;
}
var performance = global$1.performance || {};
var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
  return (/* @__PURE__ */ new Date()).getTime();
};
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
var startTime = /* @__PURE__ */ new Date();
function uptime() {
  var currentTime = /* @__PURE__ */ new Date();
  var dif = currentTime - startTime;
  return dif / 1e3;
}
var browser$1$1 = {
  nextTick,
  title: title$1,
  browser: browser$2,
  env,
  argv,
  version: version$2,
  versions,
  on,
  addListener,
  once,
  off,
  removeListener,
  removeAllListeners,
  emit,
  binding,
  cwd,
  chdir,
  umask,
  hrtime,
  platform,
  release,
  config: config$1,
  uptime
};
function normalizeArray(parts, allowAboveRoot) {
  var up = 0;
  for (var i2 = parts.length - 1; i2 >= 0; i2--) {
    var last = parts[i2];
    if (last === ".") {
      parts.splice(i2, 1);
    } else if (last === "..") {
      parts.splice(i2, 1);
      up++;
    } else if (up) {
      parts.splice(i2, 1);
      up--;
    }
  }
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift("..");
    }
  }
  return parts;
}
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};
function resolve() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i2 = arguments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
    var path = i2 >= 0 ? arguments[i2] : "/";
    if (typeof path !== "string") {
      throw new TypeError("Arguments to path.resolve must be strings");
    } else if (!path) {
      continue;
    }
    resolvedPath = path + "/" + resolvedPath;
    resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p2) {
    return !!p2;
  }), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
}
function normalize(path) {
  var isPathAbsolute = isAbsolute(path), trailingSlash = substr(path, -1) === "/";
  path = normalizeArray(filter(path.split("/"), function(p2) {
    return !!p2;
  }), !isPathAbsolute).join("/");
  if (!path && !isPathAbsolute) {
    path = ".";
  }
  if (path && trailingSlash) {
    path += "/";
  }
  return (isPathAbsolute ? "/" : "") + path;
}
function isAbsolute(path) {
  return path.charAt(0) === "/";
}
function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function(p2, index) {
    if (typeof p2 !== "string") {
      throw new TypeError("Arguments to path.join must be strings");
    }
    return p2;
  }).join("/"));
}
function relative(from2, to) {
  from2 = resolve(from2).substr(1);
  to = resolve(to).substr(1);
  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== "") break;
    }
    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== "") break;
    }
    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from2.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i2 = 0; i2 < length; i2++) {
    if (fromParts[i2] !== toParts[i2]) {
      samePartsLength = i2;
      break;
    }
  }
  var outputParts = [];
  for (var i2 = samePartsLength; i2 < fromParts.length; i2++) {
    outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
}
var sep = "/";
var delimiter = ":";
function dirname(path) {
  var result = splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
    return ".";
  }
  if (dir) {
    dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
}
function basename(path, ext) {
  var f2 = splitPath(path)[2];
  if (ext && f2.substr(-1 * ext.length) === ext) {
    f2 = f2.substr(0, f2.length - ext.length);
  }
  return f2;
}
function extname(path) {
  return splitPath(path)[3];
}
var _polyfillNode_path = {
  extname,
  basename,
  dirname,
  sep,
  delimiter,
  relative,
  join,
  isAbsolute,
  normalize,
  resolve
};
function filter(xs, f2) {
  if (xs.filter) return xs.filter(f2);
  var res = [];
  for (var i2 = 0; i2 < xs.length; i2++) {
    if (f2(xs[i2], i2, xs)) res.push(xs[i2]);
  }
  return res;
}
var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
  return str.substr(start, len);
} : function(str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};
var _polyfillNode_path$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  basename,
  default: _polyfillNode_path,
  delimiter,
  dirname,
  extname,
  isAbsolute,
  join,
  normalize,
  relative,
  resolve,
  sep
});
var require$$0$1 = /* @__PURE__ */ getDefaultExportFromNamespaceIfPresent(_polyfillNode_path$1);
var eslintScope = {};
var estraverse = {};
var hasRequiredEstraverse;
function requireEstraverse() {
  if (hasRequiredEstraverse) return estraverse;
  hasRequiredEstraverse = 1;
  (function(exports) {
    (function clone(exports2) {
      var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;
      function deepCopy(obj) {
        var ret = {}, key, val;
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            val = obj[key];
            if (typeof val === "object" && val !== null) {
              ret[key] = deepCopy(val);
            } else {
              ret[key] = val;
            }
          }
        }
        return ret;
      }
      function upperBound(array, func) {
        var diff, len, i2, current;
        len = array.length;
        i2 = 0;
        while (len) {
          diff = len >>> 1;
          current = i2 + diff;
          if (func(array[current])) {
            len = diff;
          } else {
            i2 = current + 1;
            len -= diff + 1;
          }
        }
        return i2;
      }
      Syntax = {
        AssignmentExpression: "AssignmentExpression",
        AssignmentPattern: "AssignmentPattern",
        ArrayExpression: "ArrayExpression",
        ArrayPattern: "ArrayPattern",
        ArrowFunctionExpression: "ArrowFunctionExpression",
        AwaitExpression: "AwaitExpression",
        // CAUTION: It's deferred to ES7.
        BlockStatement: "BlockStatement",
        BinaryExpression: "BinaryExpression",
        BreakStatement: "BreakStatement",
        CallExpression: "CallExpression",
        CatchClause: "CatchClause",
        ChainExpression: "ChainExpression",
        ClassBody: "ClassBody",
        ClassDeclaration: "ClassDeclaration",
        ClassExpression: "ClassExpression",
        ComprehensionBlock: "ComprehensionBlock",
        // CAUTION: It's deferred to ES7.
        ComprehensionExpression: "ComprehensionExpression",
        // CAUTION: It's deferred to ES7.
        ConditionalExpression: "ConditionalExpression",
        ContinueStatement: "ContinueStatement",
        DebuggerStatement: "DebuggerStatement",
        DirectiveStatement: "DirectiveStatement",
        DoWhileStatement: "DoWhileStatement",
        EmptyStatement: "EmptyStatement",
        ExportAllDeclaration: "ExportAllDeclaration",
        ExportDefaultDeclaration: "ExportDefaultDeclaration",
        ExportNamedDeclaration: "ExportNamedDeclaration",
        ExportSpecifier: "ExportSpecifier",
        ExpressionStatement: "ExpressionStatement",
        ForStatement: "ForStatement",
        ForInStatement: "ForInStatement",
        ForOfStatement: "ForOfStatement",
        FunctionDeclaration: "FunctionDeclaration",
        FunctionExpression: "FunctionExpression",
        GeneratorExpression: "GeneratorExpression",
        // CAUTION: It's deferred to ES7.
        Identifier: "Identifier",
        IfStatement: "IfStatement",
        ImportExpression: "ImportExpression",
        ImportDeclaration: "ImportDeclaration",
        ImportDefaultSpecifier: "ImportDefaultSpecifier",
        ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
        ImportSpecifier: "ImportSpecifier",
        Literal: "Literal",
        LabeledStatement: "LabeledStatement",
        LogicalExpression: "LogicalExpression",
        MemberExpression: "MemberExpression",
        MetaProperty: "MetaProperty",
        MethodDefinition: "MethodDefinition",
        ModuleSpecifier: "ModuleSpecifier",
        NewExpression: "NewExpression",
        ObjectExpression: "ObjectExpression",
        ObjectPattern: "ObjectPattern",
        PrivateIdentifier: "PrivateIdentifier",
        Program: "Program",
        Property: "Property",
        PropertyDefinition: "PropertyDefinition",
        RestElement: "RestElement",
        ReturnStatement: "ReturnStatement",
        SequenceExpression: "SequenceExpression",
        SpreadElement: "SpreadElement",
        Super: "Super",
        SwitchStatement: "SwitchStatement",
        SwitchCase: "SwitchCase",
        TaggedTemplateExpression: "TaggedTemplateExpression",
        TemplateElement: "TemplateElement",
        TemplateLiteral: "TemplateLiteral",
        ThisExpression: "ThisExpression",
        ThrowStatement: "ThrowStatement",
        TryStatement: "TryStatement",
        UnaryExpression: "UnaryExpression",
        UpdateExpression: "UpdateExpression",
        VariableDeclaration: "VariableDeclaration",
        VariableDeclarator: "VariableDeclarator",
        WhileStatement: "WhileStatement",
        WithStatement: "WithStatement",
        YieldExpression: "YieldExpression"
      };
      VisitorKeys = {
        AssignmentExpression: ["left", "right"],
        AssignmentPattern: ["left", "right"],
        ArrayExpression: ["elements"],
        ArrayPattern: ["elements"],
        ArrowFunctionExpression: ["params", "body"],
        AwaitExpression: ["argument"],
        // CAUTION: It's deferred to ES7.
        BlockStatement: ["body"],
        BinaryExpression: ["left", "right"],
        BreakStatement: ["label"],
        CallExpression: ["callee", "arguments"],
        CatchClause: ["param", "body"],
        ChainExpression: ["expression"],
        ClassBody: ["body"],
        ClassDeclaration: ["id", "superClass", "body"],
        ClassExpression: ["id", "superClass", "body"],
        ComprehensionBlock: ["left", "right"],
        // CAUTION: It's deferred to ES7.
        ComprehensionExpression: ["blocks", "filter", "body"],
        // CAUTION: It's deferred to ES7.
        ConditionalExpression: ["test", "consequent", "alternate"],
        ContinueStatement: ["label"],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: ["body", "test"],
        EmptyStatement: [],
        ExportAllDeclaration: ["source"],
        ExportDefaultDeclaration: ["declaration"],
        ExportNamedDeclaration: ["declaration", "specifiers", "source"],
        ExportSpecifier: ["exported", "local"],
        ExpressionStatement: ["expression"],
        ForStatement: ["init", "test", "update", "body"],
        ForInStatement: ["left", "right", "body"],
        ForOfStatement: ["left", "right", "body"],
        FunctionDeclaration: ["id", "params", "body"],
        FunctionExpression: ["id", "params", "body"],
        GeneratorExpression: ["blocks", "filter", "body"],
        // CAUTION: It's deferred to ES7.
        Identifier: [],
        IfStatement: ["test", "consequent", "alternate"],
        ImportExpression: ["source"],
        ImportDeclaration: ["specifiers", "source"],
        ImportDefaultSpecifier: ["local"],
        ImportNamespaceSpecifier: ["local"],
        ImportSpecifier: ["imported", "local"],
        Literal: [],
        LabeledStatement: ["label", "body"],
        LogicalExpression: ["left", "right"],
        MemberExpression: ["object", "property"],
        MetaProperty: ["meta", "property"],
        MethodDefinition: ["key", "value"],
        ModuleSpecifier: [],
        NewExpression: ["callee", "arguments"],
        ObjectExpression: ["properties"],
        ObjectPattern: ["properties"],
        PrivateIdentifier: [],
        Program: ["body"],
        Property: ["key", "value"],
        PropertyDefinition: ["key", "value"],
        RestElement: ["argument"],
        ReturnStatement: ["argument"],
        SequenceExpression: ["expressions"],
        SpreadElement: ["argument"],
        Super: [],
        SwitchStatement: ["discriminant", "cases"],
        SwitchCase: ["test", "consequent"],
        TaggedTemplateExpression: ["tag", "quasi"],
        TemplateElement: [],
        TemplateLiteral: ["quasis", "expressions"],
        ThisExpression: [],
        ThrowStatement: ["argument"],
        TryStatement: ["block", "handler", "finalizer"],
        UnaryExpression: ["argument"],
        UpdateExpression: ["argument"],
        VariableDeclaration: ["declarations"],
        VariableDeclarator: ["id", "init"],
        WhileStatement: ["test", "body"],
        WithStatement: ["object", "body"],
        YieldExpression: ["argument"]
      };
      BREAK = {};
      SKIP = {};
      REMOVE = {};
      VisitorOption = {
        Break: BREAK,
        Skip: SKIP,
        Remove: REMOVE
      };
      function Reference(parent, key) {
        this.parent = parent;
        this.key = key;
      }
      Reference.prototype.replace = function replace2(node2) {
        this.parent[this.key] = node2;
      };
      Reference.prototype.remove = function remove() {
        if (Array.isArray(this.parent)) {
          this.parent.splice(this.key, 1);
          return true;
        } else {
          this.replace(null);
          return false;
        }
      };
      function Element(node2, path, wrap, ref2) {
        this.node = node2;
        this.path = path;
        this.wrap = wrap;
        this.ref = ref2;
      }
      function Controller() {
      }
      Controller.prototype.path = function path() {
        var i2, iz, j, jz, result, element;
        function addToPath(result2, path2) {
          if (Array.isArray(path2)) {
            for (j = 0, jz = path2.length; j < jz; ++j) {
              result2.push(path2[j]);
            }
          } else {
            result2.push(path2);
          }
        }
        if (!this.__current.path) {
          return null;
        }
        result = [];
        for (i2 = 2, iz = this.__leavelist.length; i2 < iz; ++i2) {
          element = this.__leavelist[i2];
          addToPath(result, element.path);
        }
        addToPath(result, this.__current.path);
        return result;
      };
      Controller.prototype.type = function() {
        var node2 = this.current();
        return node2.type || this.__current.wrap;
      };
      Controller.prototype.parents = function parents() {
        var i2, iz, result;
        result = [];
        for (i2 = 1, iz = this.__leavelist.length; i2 < iz; ++i2) {
          result.push(this.__leavelist[i2].node);
        }
        return result;
      };
      Controller.prototype.current = function current() {
        return this.__current.node;
      };
      Controller.prototype.__execute = function __execute(callback, element) {
        var previous, result;
        result = void 0;
        previous = this.__current;
        this.__current = element;
        this.__state = null;
        if (callback) {
          result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
        }
        this.__current = previous;
        return result;
      };
      Controller.prototype.notify = function notify(flag) {
        this.__state = flag;
      };
      Controller.prototype.skip = function() {
        this.notify(SKIP);
      };
      Controller.prototype["break"] = function() {
        this.notify(BREAK);
      };
      Controller.prototype.remove = function() {
        this.notify(REMOVE);
      };
      Controller.prototype.__initialize = function(root, visitor) {
        this.visitor = visitor;
        this.root = root;
        this.__worklist = [];
        this.__leavelist = [];
        this.__current = null;
        this.__state = null;
        this.__fallback = null;
        if (visitor.fallback === "iteration") {
          this.__fallback = Object.keys;
        } else if (typeof visitor.fallback === "function") {
          this.__fallback = visitor.fallback;
        }
        this.__keys = VisitorKeys;
        if (visitor.keys) {
          this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);
        }
      };
      function isNode(node2) {
        if (node2 == null) {
          return false;
        }
        return typeof node2 === "object" && typeof node2.type === "string";
      }
      function isProperty(nodeType, key) {
        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && "properties" === key;
      }
      function candidateExistsInLeaveList(leavelist, candidate) {
        for (var i2 = leavelist.length - 1; i2 >= 0; --i2) {
          if (leavelist[i2].node === candidate) {
            return true;
          }
        }
        return false;
      }
      Controller.prototype.traverse = function traverse2(root, visitor) {
        var worklist, leavelist, element, node2, nodeType, ret, key, current, current2, candidates, candidate, sentinel;
        this.__initialize(root, visitor);
        sentinel = {};
        worklist = this.__worklist;
        leavelist = this.__leavelist;
        worklist.push(new Element(root, null, null, null));
        leavelist.push(new Element(null, null, null, null));
        while (worklist.length) {
          element = worklist.pop();
          if (element === sentinel) {
            element = leavelist.pop();
            ret = this.__execute(visitor.leave, element);
            if (this.__state === BREAK || ret === BREAK) {
              return;
            }
            continue;
          }
          if (element.node) {
            ret = this.__execute(visitor.enter, element);
            if (this.__state === BREAK || ret === BREAK) {
              return;
            }
            worklist.push(sentinel);
            leavelist.push(element);
            if (this.__state === SKIP || ret === SKIP) {
              continue;
            }
            node2 = element.node;
            nodeType = node2.type || element.wrap;
            candidates = this.__keys[nodeType];
            if (!candidates) {
              if (this.__fallback) {
                candidates = this.__fallback(node2);
              } else {
                throw new Error("Unknown node type " + nodeType + ".");
              }
            }
            current = candidates.length;
            while ((current -= 1) >= 0) {
              key = candidates[current];
              candidate = node2[key];
              if (!candidate) {
                continue;
              }
              if (Array.isArray(candidate)) {
                current2 = candidate.length;
                while ((current2 -= 1) >= 0) {
                  if (!candidate[current2]) {
                    continue;
                  }
                  if (candidateExistsInLeaveList(leavelist, candidate[current2])) {
                    continue;
                  }
                  if (isProperty(nodeType, candidates[current])) {
                    element = new Element(candidate[current2], [key, current2], "Property", null);
                  } else if (isNode(candidate[current2])) {
                    element = new Element(candidate[current2], [key, current2], null, null);
                  } else {
                    continue;
                  }
                  worklist.push(element);
                }
              } else if (isNode(candidate)) {
                if (candidateExistsInLeaveList(leavelist, candidate)) {
                  continue;
                }
                worklist.push(new Element(candidate, key, null, null));
              }
            }
          }
        }
      };
      Controller.prototype.replace = function replace2(root, visitor) {
        var worklist, leavelist, node2, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;
        function removeElem(element2) {
          var i2, key2, nextElem, parent;
          if (element2.ref.remove()) {
            key2 = element2.ref.key;
            parent = element2.ref.parent;
            i2 = worklist.length;
            while (i2--) {
              nextElem = worklist[i2];
              if (nextElem.ref && nextElem.ref.parent === parent) {
                if (nextElem.ref.key < key2) {
                  break;
                }
                --nextElem.ref.key;
              }
            }
          }
        }
        this.__initialize(root, visitor);
        sentinel = {};
        worklist = this.__worklist;
        leavelist = this.__leavelist;
        outer = {
          root
        };
        element = new Element(root, null, null, new Reference(outer, "root"));
        worklist.push(element);
        leavelist.push(element);
        while (worklist.length) {
          element = worklist.pop();
          if (element === sentinel) {
            element = leavelist.pop();
            target = this.__execute(visitor.leave, element);
            if (target !== void 0 && target !== BREAK && target !== SKIP && target !== REMOVE) {
              element.ref.replace(target);
            }
            if (this.__state === REMOVE || target === REMOVE) {
              removeElem(element);
            }
            if (this.__state === BREAK || target === BREAK) {
              return outer.root;
            }
            continue;
          }
          target = this.__execute(visitor.enter, element);
          if (target !== void 0 && target !== BREAK && target !== SKIP && target !== REMOVE) {
            element.ref.replace(target);
            element.node = target;
          }
          if (this.__state === REMOVE || target === REMOVE) {
            removeElem(element);
            element.node = null;
          }
          if (this.__state === BREAK || target === BREAK) {
            return outer.root;
          }
          node2 = element.node;
          if (!node2) {
            continue;
          }
          worklist.push(sentinel);
          leavelist.push(element);
          if (this.__state === SKIP || target === SKIP) {
            continue;
          }
          nodeType = node2.type || element.wrap;
          candidates = this.__keys[nodeType];
          if (!candidates) {
            if (this.__fallback) {
              candidates = this.__fallback(node2);
            } else {
              throw new Error("Unknown node type " + nodeType + ".");
            }
          }
          current = candidates.length;
          while ((current -= 1) >= 0) {
            key = candidates[current];
            candidate = node2[key];
            if (!candidate) {
              continue;
            }
            if (Array.isArray(candidate)) {
              current2 = candidate.length;
              while ((current2 -= 1) >= 0) {
                if (!candidate[current2]) {
                  continue;
                }
                if (isProperty(nodeType, candidates[current])) {
                  element = new Element(candidate[current2], [key, current2], "Property", new Reference(candidate, current2));
                } else if (isNode(candidate[current2])) {
                  element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
                } else {
                  continue;
                }
                worklist.push(element);
              }
            } else if (isNode(candidate)) {
              worklist.push(new Element(candidate, key, null, new Reference(node2, key)));
            }
          }
        }
        return outer.root;
      };
      function traverse(root, visitor) {
        var controller = new Controller();
        return controller.traverse(root, visitor);
      }
      function replace(root, visitor) {
        var controller = new Controller();
        return controller.replace(root, visitor);
      }
      function extendCommentRange(comment2, tokens) {
        var target;
        target = upperBound(tokens, function search(token) {
          return token.range[0] > comment2.range[0];
        });
        comment2.extendedRange = [comment2.range[0], comment2.range[1]];
        if (target !== tokens.length) {
          comment2.extendedRange[1] = tokens[target].range[0];
        }
        target -= 1;
        if (target >= 0) {
          comment2.extendedRange[0] = tokens[target].range[1];
        }
        return comment2;
      }
      function attachComments(tree, providedComments, tokens) {
        var comments = [], comment2, len, i2, cursor2;
        if (!tree.range) {
          throw new Error("attachComments needs range information");
        }
        if (!tokens.length) {
          if (providedComments.length) {
            for (i2 = 0, len = providedComments.length; i2 < len; i2 += 1) {
              comment2 = deepCopy(providedComments[i2]);
              comment2.extendedRange = [0, tree.range[0]];
              comments.push(comment2);
            }
            tree.leadingComments = comments;
          }
          return tree;
        }
        for (i2 = 0, len = providedComments.length; i2 < len; i2 += 1) {
          comments.push(extendCommentRange(deepCopy(providedComments[i2]), tokens));
        }
        cursor2 = 0;
        traverse(tree, {
          enter: function(node2) {
            var comment3;
            while (cursor2 < comments.length) {
              comment3 = comments[cursor2];
              if (comment3.extendedRange[1] > node2.range[0]) {
                break;
              }
              if (comment3.extendedRange[1] === node2.range[0]) {
                if (!node2.leadingComments) {
                  node2.leadingComments = [];
                }
                node2.leadingComments.push(comment3);
                comments.splice(cursor2, 1);
              } else {
                cursor2 += 1;
              }
            }
            if (cursor2 === comments.length) {
              return VisitorOption.Break;
            }
            if (comments[cursor2].extendedRange[0] > node2.range[1]) {
              return VisitorOption.Skip;
            }
          }
        });
        cursor2 = 0;
        traverse(tree, {
          leave: function(node2) {
            var comment3;
            while (cursor2 < comments.length) {
              comment3 = comments[cursor2];
              if (node2.range[1] < comment3.extendedRange[0]) {
                break;
              }
              if (node2.range[1] === comment3.extendedRange[0]) {
                if (!node2.trailingComments) {
                  node2.trailingComments = [];
                }
                node2.trailingComments.push(comment3);
                comments.splice(cursor2, 1);
              } else {
                cursor2 += 1;
              }
            }
            if (cursor2 === comments.length) {
              return VisitorOption.Break;
            }
            if (comments[cursor2].extendedRange[0] > node2.range[1]) {
              return VisitorOption.Skip;
            }
          }
        });
        return tree;
      }
      exports2.Syntax = Syntax;
      exports2.traverse = traverse;
      exports2.replace = replace;
      exports2.attachComments = attachComments;
      exports2.VisitorKeys = VisitorKeys;
      exports2.VisitorOption = VisitorOption;
      exports2.Controller = Controller;
      exports2.cloneEnvironment = function() {
        return clone({});
      };
      return exports2;
    })(exports);
  })(estraverse);
  return estraverse;
}
var esrecurse = {};
var version$1 = "4.3.0";
var require$$1$2 = {
  version: version$1
};
var hasRequiredEsrecurse;
function requireEsrecurse() {
  if (hasRequiredEsrecurse) return esrecurse;
  hasRequiredEsrecurse = 1;
  (function() {
    var estraverse2 = requireEstraverse();
    function isNode(node2) {
      if (node2 == null) {
        return false;
      }
      return typeof node2 === "object" && typeof node2.type === "string";
    }
    function isProperty(nodeType, key) {
      return (nodeType === estraverse2.Syntax.ObjectExpression || nodeType === estraverse2.Syntax.ObjectPattern) && key === "properties";
    }
    function Visitor(visitor, options) {
      options = options || {};
      this.__visitor = visitor || this;
      this.__childVisitorKeys = options.childVisitorKeys ? Object.assign({}, estraverse2.VisitorKeys, options.childVisitorKeys) : estraverse2.VisitorKeys;
      if (options.fallback === "iteration") {
        this.__fallback = Object.keys;
      } else if (typeof options.fallback === "function") {
        this.__fallback = options.fallback;
      }
    }
    Visitor.prototype.visitChildren = function(node2) {
      var type2, children, i2, iz, j, jz, child;
      if (node2 == null) {
        return;
      }
      type2 = node2.type || estraverse2.Syntax.Property;
      children = this.__childVisitorKeys[type2];
      if (!children) {
        if (this.__fallback) {
          children = this.__fallback(node2);
        } else {
          throw new Error("Unknown node type " + type2 + ".");
        }
      }
      for (i2 = 0, iz = children.length; i2 < iz; ++i2) {
        child = node2[children[i2]];
        if (child) {
          if (Array.isArray(child)) {
            for (j = 0, jz = child.length; j < jz; ++j) {
              if (child[j]) {
                if (isNode(child[j]) || isProperty(type2, children[i2])) {
                  this.visit(child[j]);
                }
              }
            }
          } else if (isNode(child)) {
            this.visit(child);
          }
        }
      }
    };
    Visitor.prototype.visit = function(node2) {
      var type2;
      if (node2 == null) {
        return;
      }
      type2 = node2.type || estraverse2.Syntax.Property;
      if (this.__visitor[type2]) {
        this.__visitor[type2].call(this, node2);
        return;
      }
      this.visitChildren(node2);
    };
    esrecurse.version = require$$1$2.version;
    esrecurse.Visitor = Visitor;
    esrecurse.visit = function(node2, visitor, options) {
      var v2 = new Visitor(visitor, options);
      v2.visit(node2);
    };
  })();
  return esrecurse;
}
var hasRequiredEslintScope;
function requireEslintScope() {
  if (hasRequiredEslintScope) return eslintScope;
  hasRequiredEslintScope = 1;
  Object.defineProperty(eslintScope, "__esModule", { value: true });
  var estraverse2 = requireEstraverse();
  var esrecurse2 = requireEsrecurse();
  function _interopDefaultLegacy(e2) {
    return e2 && typeof e2 === "object" && "default" in e2 ? e2 : { "default": e2 };
  }
  var estraverse__default = /* @__PURE__ */ _interopDefaultLegacy(estraverse2);
  var esrecurse__default = /* @__PURE__ */ _interopDefaultLegacy(esrecurse2);
  function assert2(condition, message = "Assertion failed.") {
    if (!condition) {
      throw new Error(message);
    }
  }
  const READ = 1;
  const WRITE = 2;
  const RW = READ | WRITE;
  class Reference {
    constructor(ident, scope, flag, writeExpr, maybeImplicitGlobal, partial, init2) {
      this.identifier = ident;
      this.from = scope;
      this.tainted = false;
      this.resolved = null;
      this.flag = flag;
      if (this.isWrite()) {
        this.writeExpr = writeExpr;
        this.partial = partial;
        this.init = init2;
      }
      this.__maybeImplicitGlobal = maybeImplicitGlobal;
    }
    /**
     * Whether the reference is static.
     * @function Reference#isStatic
     * @returns {boolean} static
     */
    isStatic() {
      return !this.tainted && this.resolved && this.resolved.scope.isStatic();
    }
    /**
     * Whether the reference is writeable.
     * @function Reference#isWrite
     * @returns {boolean} write
     */
    isWrite() {
      return !!(this.flag & Reference.WRITE);
    }
    /**
     * Whether the reference is readable.
     * @function Reference#isRead
     * @returns {boolean} read
     */
    isRead() {
      return !!(this.flag & Reference.READ);
    }
    /**
     * Whether the reference is read-only.
     * @function Reference#isReadOnly
     * @returns {boolean} read only
     */
    isReadOnly() {
      return this.flag === Reference.READ;
    }
    /**
     * Whether the reference is write-only.
     * @function Reference#isWriteOnly
     * @returns {boolean} write only
     */
    isWriteOnly() {
      return this.flag === Reference.WRITE;
    }
    /**
     * Whether the reference is read-write.
     * @function Reference#isReadWrite
     * @returns {boolean} read write
     */
    isReadWrite() {
      return this.flag === Reference.RW;
    }
  }
  Reference.READ = READ;
  Reference.WRITE = WRITE;
  Reference.RW = RW;
  class Variable {
    constructor(name, scope) {
      this.name = name;
      this.identifiers = [];
      this.references = [];
      this.defs = [];
      this.tainted = false;
      this.stack = true;
      this.scope = scope;
    }
  }
  Variable.CatchClause = "CatchClause";
  Variable.Parameter = "Parameter";
  Variable.FunctionName = "FunctionName";
  Variable.ClassName = "ClassName";
  Variable.Variable = "Variable";
  Variable.ImportBinding = "ImportBinding";
  Variable.ImplicitGlobalVariable = "ImplicitGlobalVariable";
  class Definition {
    constructor(type2, name, node2, parent, index, kind) {
      this.type = type2;
      this.name = name;
      this.node = node2;
      this.parent = parent;
      this.index = index;
      this.kind = kind;
    }
  }
  class ParameterDefinition extends Definition {
    constructor(name, node2, index, rest) {
      super(Variable.Parameter, name, node2, null, index, null);
      this.rest = rest;
    }
  }
  const { Syntax: Syntax$2 } = estraverse__default["default"];
  function isStrictScope(scope, block, isMethodDefinition) {
    let body;
    if (scope.upper && scope.upper.isStrict) {
      return true;
    }
    if (isMethodDefinition) {
      return true;
    }
    if (scope.type === "class" || scope.type === "module") {
      return true;
    }
    if (scope.type === "block" || scope.type === "switch") {
      return false;
    }
    if (scope.type === "function") {
      if (block.type === Syntax$2.ArrowFunctionExpression && block.body.type !== Syntax$2.BlockStatement) {
        return false;
      }
      if (block.type === Syntax$2.Program) {
        body = block;
      } else {
        body = block.body;
      }
      if (!body) {
        return false;
      }
    } else if (scope.type === "global") {
      body = block;
    } else {
      return false;
    }
    for (let i2 = 0, iz = body.body.length; i2 < iz; ++i2) {
      const stmt = body.body[i2];
      if (typeof stmt.directive !== "string") {
        break;
      }
      if (stmt.directive === "use strict") {
        return true;
      }
    }
    return false;
  }
  function registerScope(scopeManager, scope) {
    scopeManager.scopes.push(scope);
    const scopes = scopeManager.__nodeToScope.get(scope.block);
    if (scopes) {
      scopes.push(scope);
    } else {
      scopeManager.__nodeToScope.set(scope.block, [scope]);
    }
  }
  function shouldBeStatically(def) {
    return def.type === Variable.ClassName || def.type === Variable.Variable && def.parent.kind !== "var";
  }
  class Scope {
    constructor(scopeManager, type2, upperScope, block, isMethodDefinition) {
      this.type = type2;
      this.set = /* @__PURE__ */ new Map();
      this.taints = /* @__PURE__ */ new Map();
      this.dynamic = this.type === "global" || this.type === "with";
      this.block = block;
      this.through = [];
      this.variables = [];
      this.references = [];
      this.variableScope = this.type === "global" || this.type === "module" || this.type === "function" || this.type === "class-field-initializer" || this.type === "class-static-block" ? this : upperScope.variableScope;
      this.functionExpressionScope = false;
      this.directCallToEvalScope = false;
      this.thisFound = false;
      this.__left = [];
      this.upper = upperScope;
      this.isStrict = scopeManager.isStrictModeSupported() ? isStrictScope(this, block, isMethodDefinition) : false;
      this.childScopes = [];
      if (this.upper) {
        this.upper.childScopes.push(this);
      }
      this.__declaredVariables = scopeManager.__declaredVariables;
      registerScope(scopeManager, this);
    }
    __shouldStaticallyClose(scopeManager) {
      return !this.dynamic || scopeManager.__isOptimistic();
    }
    __shouldStaticallyCloseForGlobal(ref2) {
      const name = ref2.identifier.name;
      if (!this.set.has(name)) {
        return false;
      }
      const variable = this.set.get(name);
      const defs = variable.defs;
      return defs.length > 0 && defs.every(shouldBeStatically);
    }
    __staticCloseRef(ref2) {
      if (!this.__resolve(ref2)) {
        this.__delegateToUpperScope(ref2);
      }
    }
    __dynamicCloseRef(ref2) {
      let current = this;
      do {
        current.through.push(ref2);
        current = current.upper;
      } while (current);
    }
    __globalCloseRef(ref2) {
      if (this.__shouldStaticallyCloseForGlobal(ref2)) {
        this.__staticCloseRef(ref2);
      } else {
        this.__dynamicCloseRef(ref2);
      }
    }
    __close(scopeManager) {
      let closeRef;
      if (this.__shouldStaticallyClose(scopeManager)) {
        closeRef = this.__staticCloseRef;
      } else if (this.type !== "global") {
        closeRef = this.__dynamicCloseRef;
      } else {
        closeRef = this.__globalCloseRef;
      }
      for (let i2 = 0, iz = this.__left.length; i2 < iz; ++i2) {
        const ref2 = this.__left[i2];
        closeRef.call(this, ref2);
      }
      this.__left = null;
      return this.upper;
    }
    // To override by function scopes.
    // References in default parameters isn't resolved to variables which are in their function body.
    __isValidResolution(ref2, variable) {
      return true;
    }
    __resolve(ref2) {
      const name = ref2.identifier.name;
      if (!this.set.has(name)) {
        return false;
      }
      const variable = this.set.get(name);
      if (!this.__isValidResolution(ref2, variable)) {
        return false;
      }
      variable.references.push(ref2);
      variable.stack = variable.stack && ref2.from.variableScope === this.variableScope;
      if (ref2.tainted) {
        variable.tainted = true;
        this.taints.set(variable.name, true);
      }
      ref2.resolved = variable;
      return true;
    }
    __delegateToUpperScope(ref2) {
      if (this.upper) {
        this.upper.__left.push(ref2);
      }
      this.through.push(ref2);
    }
    __addDeclaredVariablesOfNode(variable, node2) {
      if (node2 === null || node2 === void 0) {
        return;
      }
      let variables = this.__declaredVariables.get(node2);
      if (variables === null || variables === void 0) {
        variables = [];
        this.__declaredVariables.set(node2, variables);
      }
      if (!variables.includes(variable)) {
        variables.push(variable);
      }
    }
    __defineGeneric(name, set, variables, node2, def) {
      let variable;
      variable = set.get(name);
      if (!variable) {
        variable = new Variable(name, this);
        set.set(name, variable);
        variables.push(variable);
      }
      if (def) {
        variable.defs.push(def);
        this.__addDeclaredVariablesOfNode(variable, def.node);
        this.__addDeclaredVariablesOfNode(variable, def.parent);
      }
      if (node2) {
        variable.identifiers.push(node2);
      }
    }
    __define(node2, def) {
      if (node2 && node2.type === Syntax$2.Identifier) {
        this.__defineGeneric(
          node2.name,
          this.set,
          this.variables,
          node2,
          def
        );
      }
    }
    __referencing(node2, assign, writeExpr, maybeImplicitGlobal, partial, init2) {
      if (!node2 || node2.type !== Syntax$2.Identifier && node2.type !== "JSXIdentifier") {
        return;
      }
      if (node2.name === "super") {
        return;
      }
      const ref2 = new Reference(node2, this, assign || Reference.READ, writeExpr, maybeImplicitGlobal, !!partial, !!init2);
      this.references.push(ref2);
      this.__left.push(ref2);
    }
    __detectEval() {
      let current = this;
      this.directCallToEvalScope = true;
      do {
        current.dynamic = true;
        current = current.upper;
      } while (current);
    }
    __detectThis() {
      this.thisFound = true;
    }
    __isClosed() {
      return this.__left === null;
    }
    /**
     * returns resolved {Reference}
     * @function Scope#resolve
     * @param {Espree.Identifier} ident identifier to be resolved.
     * @returns {Reference} reference
     */
    resolve(ident) {
      let ref2, i2, iz;
      assert2(this.__isClosed(), "Scope should be closed.");
      assert2(ident.type === Syntax$2.Identifier, "Target should be identifier.");
      for (i2 = 0, iz = this.references.length; i2 < iz; ++i2) {
        ref2 = this.references[i2];
        if (ref2.identifier === ident) {
          return ref2;
        }
      }
      return null;
    }
    /**
     * returns this scope is static
     * @function Scope#isStatic
     * @returns {boolean} static
     */
    isStatic() {
      return !this.dynamic;
    }
    /**
     * returns this scope has materialized arguments
     * @function Scope#isArgumentsMaterialized
     * @returns {boolean} arguemnts materialized
     */
    isArgumentsMaterialized() {
      return true;
    }
    /**
     * returns this scope has materialized `this` reference
     * @function Scope#isThisMaterialized
     * @returns {boolean} this materialized
     */
    isThisMaterialized() {
      return true;
    }
    isUsedName(name) {
      if (this.set.has(name)) {
        return true;
      }
      for (let i2 = 0, iz = this.through.length; i2 < iz; ++i2) {
        if (this.through[i2].identifier.name === name) {
          return true;
        }
      }
      return false;
    }
  }
  class GlobalScope extends Scope {
    constructor(scopeManager, block) {
      super(scopeManager, "global", null, block, false);
      this.implicit = {
        set: /* @__PURE__ */ new Map(),
        variables: [],
        /**
         * List of {@link Reference}s that are left to be resolved (i.e. which
         * need to be linked to the variable they refer to).
         * @member {Reference[]} Scope#implicit#left
         */
        left: []
      };
    }
    __close(scopeManager) {
      const implicit = [];
      for (let i2 = 0, iz = this.__left.length; i2 < iz; ++i2) {
        const ref2 = this.__left[i2];
        if (ref2.__maybeImplicitGlobal && !this.set.has(ref2.identifier.name)) {
          implicit.push(ref2.__maybeImplicitGlobal);
        }
      }
      for (let i2 = 0, iz = implicit.length; i2 < iz; ++i2) {
        const info = implicit[i2];
        this.__defineImplicit(
          info.pattern,
          new Definition(
            Variable.ImplicitGlobalVariable,
            info.pattern,
            info.node,
            null,
            null,
            null
          )
        );
      }
      this.implicit.left = this.__left;
      return super.__close(scopeManager);
    }
    __defineImplicit(node2, def) {
      if (node2 && node2.type === Syntax$2.Identifier) {
        this.__defineGeneric(
          node2.name,
          this.implicit.set,
          this.implicit.variables,
          node2,
          def
        );
      }
    }
  }
  class ModuleScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "module", upperScope, block, false);
    }
  }
  class FunctionExpressionNameScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "function-expression-name", upperScope, block, false);
      this.__define(
        block.id,
        new Definition(
          Variable.FunctionName,
          block.id,
          block,
          null,
          null,
          null
        )
      );
      this.functionExpressionScope = true;
    }
  }
  class CatchScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "catch", upperScope, block, false);
    }
  }
  class WithScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "with", upperScope, block, false);
    }
    __close(scopeManager) {
      if (this.__shouldStaticallyClose(scopeManager)) {
        return super.__close(scopeManager);
      }
      for (let i2 = 0, iz = this.__left.length; i2 < iz; ++i2) {
        const ref2 = this.__left[i2];
        ref2.tainted = true;
        this.__delegateToUpperScope(ref2);
      }
      this.__left = null;
      return this.upper;
    }
  }
  class BlockScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "block", upperScope, block, false);
    }
  }
  class SwitchScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "switch", upperScope, block, false);
    }
  }
  class FunctionScope extends Scope {
    constructor(scopeManager, upperScope, block, isMethodDefinition) {
      super(scopeManager, "function", upperScope, block, isMethodDefinition);
      if (this.block.type !== Syntax$2.ArrowFunctionExpression) {
        this.__defineArguments();
      }
    }
    isArgumentsMaterialized() {
      if (this.block.type === Syntax$2.ArrowFunctionExpression) {
        return false;
      }
      if (!this.isStatic()) {
        return true;
      }
      const variable = this.set.get("arguments");
      assert2(variable, "Always have arguments variable.");
      return variable.tainted || variable.references.length !== 0;
    }
    isThisMaterialized() {
      if (!this.isStatic()) {
        return true;
      }
      return this.thisFound;
    }
    __defineArguments() {
      this.__defineGeneric(
        "arguments",
        this.set,
        this.variables,
        null,
        null
      );
      this.taints.set("arguments", true);
    }
    // References in default parameters isn't resolved to variables which are in their function body.
    //     const x = 1
    //     function f(a = x) { // This `x` is resolved to the `x` in the outer scope.
    //         const x = 2
    //         console.log(a)
    //     }
    __isValidResolution(ref2, variable) {
      if (this.block.type === "Program") {
        return true;
      }
      const bodyStart = this.block.body.range[0];
      return !(variable.scope === this && ref2.identifier.range[0] < bodyStart && // the reference is in the parameter part.
      variable.defs.every((d2) => d2.name.range[0] >= bodyStart));
    }
  }
  class ForScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "for", upperScope, block, false);
    }
  }
  class ClassScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "class", upperScope, block, false);
    }
  }
  class ClassFieldInitializerScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "class-field-initializer", upperScope, block, true);
    }
  }
  class ClassStaticBlockScope extends Scope {
    constructor(scopeManager, upperScope, block) {
      super(scopeManager, "class-static-block", upperScope, block, true);
    }
  }
  class ScopeManager {
    constructor(options) {
      this.scopes = [];
      this.globalScope = null;
      this.__nodeToScope = /* @__PURE__ */ new WeakMap();
      this.__currentScope = null;
      this.__options = options;
      this.__declaredVariables = /* @__PURE__ */ new WeakMap();
    }
    __isOptimistic() {
      return this.__options.optimistic;
    }
    __ignoreEval() {
      return this.__options.ignoreEval;
    }
    __isJSXEnabled() {
      return this.__options.jsx === true;
    }
    isGlobalReturn() {
      return this.__options.nodejsScope || this.__options.sourceType === "commonjs";
    }
    isModule() {
      return this.__options.sourceType === "module";
    }
    isImpliedStrict() {
      return this.__options.impliedStrict;
    }
    isStrictModeSupported() {
      return this.__options.ecmaVersion >= 5;
    }
    // Returns appropriate scope for this node.
    __get(node2) {
      return this.__nodeToScope.get(node2);
    }
    /**
     * Get variables that are declared by the node.
     *
     * "are declared by the node" means the node is same as `Variable.defs[].node` or `Variable.defs[].parent`.
     * If the node declares nothing, this method returns an empty array.
     * CAUTION: This API is experimental. See https://github.com/estools/escope/pull/69 for more details.
     * @param {Espree.Node} node a node to get.
     * @returns {Variable[]} variables that declared by the node.
     */
    getDeclaredVariables(node2) {
      return this.__declaredVariables.get(node2) || [];
    }
    /**
     * acquire scope from node.
     * @function ScopeManager#acquire
     * @param {Espree.Node} node node for the acquired scope.
     * @param {?boolean} [inner=false] look up the most inner scope, default value is false.
     * @returns {Scope?} Scope from node
     */
    acquire(node2, inner) {
      function predicate(testScope) {
        if (testScope.type === "function" && testScope.functionExpressionScope) {
          return false;
        }
        return true;
      }
      const scopes = this.__get(node2);
      if (!scopes || scopes.length === 0) {
        return null;
      }
      if (scopes.length === 1) {
        return scopes[0];
      }
      if (inner) {
        for (let i2 = scopes.length - 1; i2 >= 0; --i2) {
          const scope = scopes[i2];
          if (predicate(scope)) {
            return scope;
          }
        }
      } else {
        for (let i2 = 0, iz = scopes.length; i2 < iz; ++i2) {
          const scope = scopes[i2];
          if (predicate(scope)) {
            return scope;
          }
        }
      }
      return null;
    }
    /**
     * acquire all scopes from node.
     * @function ScopeManager#acquireAll
     * @param {Espree.Node} node node for the acquired scope.
     * @returns {Scopes?} Scope array
     */
    acquireAll(node2) {
      return this.__get(node2);
    }
    /**
     * release the node.
     * @function ScopeManager#release
     * @param {Espree.Node} node releasing node.
     * @param {?boolean} [inner=false] look up the most inner scope, default value is false.
     * @returns {Scope?} upper scope for the node.
     */
    release(node2, inner) {
      const scopes = this.__get(node2);
      if (scopes && scopes.length) {
        const scope = scopes[0].upper;
        if (!scope) {
          return null;
        }
        return this.acquire(scope.block, inner);
      }
      return null;
    }
    attach() {
    }
    // eslint-disable-line class-methods-use-this -- Desired as instance method
    detach() {
    }
    // eslint-disable-line class-methods-use-this -- Desired as instance method
    __nestScope(scope) {
      if (scope instanceof GlobalScope) {
        assert2(this.__currentScope === null);
        this.globalScope = scope;
      }
      this.__currentScope = scope;
      return scope;
    }
    __nestGlobalScope(node2) {
      return this.__nestScope(new GlobalScope(this, node2));
    }
    __nestBlockScope(node2) {
      return this.__nestScope(new BlockScope(this, this.__currentScope, node2));
    }
    __nestFunctionScope(node2, isMethodDefinition) {
      return this.__nestScope(new FunctionScope(this, this.__currentScope, node2, isMethodDefinition));
    }
    __nestForScope(node2) {
      return this.__nestScope(new ForScope(this, this.__currentScope, node2));
    }
    __nestCatchScope(node2) {
      return this.__nestScope(new CatchScope(this, this.__currentScope, node2));
    }
    __nestWithScope(node2) {
      return this.__nestScope(new WithScope(this, this.__currentScope, node2));
    }
    __nestClassScope(node2) {
      return this.__nestScope(new ClassScope(this, this.__currentScope, node2));
    }
    __nestClassFieldInitializerScope(node2) {
      return this.__nestScope(new ClassFieldInitializerScope(this, this.__currentScope, node2));
    }
    __nestClassStaticBlockScope(node2) {
      return this.__nestScope(new ClassStaticBlockScope(this, this.__currentScope, node2));
    }
    __nestSwitchScope(node2) {
      return this.__nestScope(new SwitchScope(this, this.__currentScope, node2));
    }
    __nestModuleScope(node2) {
      return this.__nestScope(new ModuleScope(this, this.__currentScope, node2));
    }
    __nestFunctionExpressionNameScope(node2) {
      return this.__nestScope(new FunctionExpressionNameScope(this, this.__currentScope, node2));
    }
    __isES6() {
      return this.__options.ecmaVersion >= 6;
    }
  }
  const { Syntax: Syntax$1 } = estraverse__default["default"];
  function getLast(xs) {
    return xs.at(-1) || null;
  }
  class PatternVisitor extends esrecurse__default["default"].Visitor {
    static isPattern(node2) {
      const nodeType = node2.type;
      return nodeType === Syntax$1.Identifier || nodeType === Syntax$1.ObjectPattern || nodeType === Syntax$1.ArrayPattern || nodeType === Syntax$1.SpreadElement || nodeType === Syntax$1.RestElement || nodeType === Syntax$1.AssignmentPattern;
    }
    constructor(options, rootPattern, callback) {
      super(null, options);
      this.rootPattern = rootPattern;
      this.callback = callback;
      this.assignments = [];
      this.rightHandNodes = [];
      this.restElements = [];
    }
    Identifier(pattern2) {
      const lastRestElement = getLast(this.restElements);
      this.callback(pattern2, {
        topLevel: pattern2 === this.rootPattern,
        rest: lastRestElement !== null && lastRestElement !== void 0 && lastRestElement.argument === pattern2,
        assignments: this.assignments
      });
    }
    Property(property) {
      if (property.computed) {
        this.rightHandNodes.push(property.key);
      }
      this.visit(property.value);
    }
    ArrayPattern(pattern2) {
      for (let i2 = 0, iz = pattern2.elements.length; i2 < iz; ++i2) {
        const element = pattern2.elements[i2];
        this.visit(element);
      }
    }
    AssignmentPattern(pattern2) {
      this.assignments.push(pattern2);
      this.visit(pattern2.left);
      this.rightHandNodes.push(pattern2.right);
      this.assignments.pop();
    }
    RestElement(pattern2) {
      this.restElements.push(pattern2);
      this.visit(pattern2.argument);
      this.restElements.pop();
    }
    MemberExpression(node2) {
      if (node2.computed) {
        this.rightHandNodes.push(node2.property);
      }
      this.rightHandNodes.push(node2.object);
    }
    //
    // ForInStatement.left and AssignmentExpression.left are LeftHandSideExpression.
    // By spec, LeftHandSideExpression is Pattern or MemberExpression.
    //   (see also: https://github.com/estree/estree/pull/20#issuecomment-74584758)
    // But espree 2.0 parses to ArrayExpression, ObjectExpression, etc...
    //
    SpreadElement(node2) {
      this.visit(node2.argument);
    }
    ArrayExpression(node2) {
      node2.elements.forEach(this.visit, this);
    }
    AssignmentExpression(node2) {
      this.assignments.push(node2);
      this.visit(node2.left);
      this.rightHandNodes.push(node2.right);
      this.assignments.pop();
    }
    CallExpression(node2) {
      node2.arguments.forEach((a2) => {
        this.rightHandNodes.push(a2);
      });
      this.visit(node2.callee);
    }
  }
  const { Syntax } = estraverse__default["default"];
  function traverseIdentifierInPattern(options, rootPattern, referencer, callback) {
    const visitor = new PatternVisitor(options, rootPattern, callback);
    visitor.visit(rootPattern);
    if (referencer !== null && referencer !== void 0) {
      visitor.rightHandNodes.forEach(referencer.visit, referencer);
    }
  }
  class Importer extends esrecurse__default["default"].Visitor {
    constructor(declaration, referencer) {
      super(null, referencer.options);
      this.declaration = declaration;
      this.referencer = referencer;
    }
    visitImport(id2, specifier) {
      this.referencer.visitPattern(id2, (pattern2) => {
        this.referencer.currentScope().__define(
          pattern2,
          new Definition(
            Variable.ImportBinding,
            pattern2,
            specifier,
            this.declaration,
            null,
            null
          )
        );
      });
    }
    ImportNamespaceSpecifier(node2) {
      const local = node2.local || node2.id;
      if (local) {
        this.visitImport(local, node2);
      }
    }
    ImportDefaultSpecifier(node2) {
      const local = node2.local || node2.id;
      this.visitImport(local, node2);
    }
    ImportSpecifier(node2) {
      const local = node2.local || node2.id;
      if (node2.name) {
        this.visitImport(node2.name, node2);
      } else {
        this.visitImport(local, node2);
      }
    }
  }
  class Referencer extends esrecurse__default["default"].Visitor {
    constructor(options, scopeManager) {
      super(null, options);
      this.options = options;
      this.scopeManager = scopeManager;
      this.parent = null;
      this.isInnerMethodDefinition = false;
    }
    currentScope() {
      return this.scopeManager.__currentScope;
    }
    close(node2) {
      while (this.currentScope() && node2 === this.currentScope().block) {
        this.scopeManager.__currentScope = this.currentScope().__close(this.scopeManager);
      }
    }
    pushInnerMethodDefinition(isInnerMethodDefinition) {
      const previous = this.isInnerMethodDefinition;
      this.isInnerMethodDefinition = isInnerMethodDefinition;
      return previous;
    }
    popInnerMethodDefinition(isInnerMethodDefinition) {
      this.isInnerMethodDefinition = isInnerMethodDefinition;
    }
    referencingDefaultValue(pattern2, assignments, maybeImplicitGlobal, init2) {
      const scope = this.currentScope();
      assignments.forEach((assignment) => {
        scope.__referencing(
          pattern2,
          Reference.WRITE,
          assignment.right,
          maybeImplicitGlobal,
          pattern2 !== assignment.left,
          init2
        );
      });
    }
    visitPattern(node2, options, callback) {
      let visitPatternOptions = options;
      let visitPatternCallback = callback;
      if (typeof options === "function") {
        visitPatternCallback = options;
        visitPatternOptions = { processRightHandNodes: false };
      }
      traverseIdentifierInPattern(
        this.options,
        node2,
        visitPatternOptions.processRightHandNodes ? this : null,
        visitPatternCallback
      );
    }
    visitFunction(node2) {
      let i2, iz;
      if (node2.type === Syntax.FunctionDeclaration) {
        this.currentScope().__define(
          node2.id,
          new Definition(
            Variable.FunctionName,
            node2.id,
            node2,
            null,
            null,
            null
          )
        );
      }
      if (node2.type === Syntax.FunctionExpression && node2.id) {
        this.scopeManager.__nestFunctionExpressionNameScope(node2);
      }
      this.scopeManager.__nestFunctionScope(node2, this.isInnerMethodDefinition);
      const that = this;
      function visitPatternCallback(pattern2, info) {
        that.currentScope().__define(
          pattern2,
          new ParameterDefinition(
            pattern2,
            node2,
            i2,
            info.rest
          )
        );
        that.referencingDefaultValue(pattern2, info.assignments, null, true);
      }
      for (i2 = 0, iz = node2.params.length; i2 < iz; ++i2) {
        this.visitPattern(node2.params[i2], { processRightHandNodes: true }, visitPatternCallback);
      }
      if (node2.rest) {
        this.visitPattern({
          type: "RestElement",
          argument: node2.rest
        }, (pattern2) => {
          this.currentScope().__define(
            pattern2,
            new ParameterDefinition(
              pattern2,
              node2,
              node2.params.length,
              true
            )
          );
        });
      }
      if (node2.body) {
        if (node2.body.type === Syntax.BlockStatement) {
          this.visitChildren(node2.body);
        } else {
          this.visit(node2.body);
        }
      }
      this.close(node2);
    }
    visitClass(node2) {
      if (node2.type === Syntax.ClassDeclaration) {
        this.currentScope().__define(
          node2.id,
          new Definition(
            Variable.ClassName,
            node2.id,
            node2,
            null,
            null,
            null
          )
        );
      }
      this.scopeManager.__nestClassScope(node2);
      if (node2.id) {
        this.currentScope().__define(
          node2.id,
          new Definition(
            Variable.ClassName,
            node2.id,
            node2
          )
        );
      }
      this.visit(node2.superClass);
      this.visit(node2.body);
      this.close(node2);
    }
    visitProperty(node2) {
      let previous;
      if (node2.computed) {
        this.visit(node2.key);
      }
      const isMethodDefinition = node2.type === Syntax.MethodDefinition;
      if (isMethodDefinition) {
        previous = this.pushInnerMethodDefinition(true);
      }
      this.visit(node2.value);
      if (isMethodDefinition) {
        this.popInnerMethodDefinition(previous);
      }
    }
    visitForIn(node2) {
      if (node2.left.type === Syntax.VariableDeclaration && node2.left.kind !== "var") {
        this.scopeManager.__nestForScope(node2);
      }
      if (node2.left.type === Syntax.VariableDeclaration) {
        this.visit(node2.left);
        this.visitPattern(node2.left.declarations[0].id, (pattern2) => {
          this.currentScope().__referencing(pattern2, Reference.WRITE, node2.right, null, true, true);
        });
      } else {
        this.visitPattern(node2.left, { processRightHandNodes: true }, (pattern2, info) => {
          let maybeImplicitGlobal = null;
          if (!this.currentScope().isStrict) {
            maybeImplicitGlobal = {
              pattern: pattern2,
              node: node2
            };
          }
          this.referencingDefaultValue(pattern2, info.assignments, maybeImplicitGlobal, false);
          this.currentScope().__referencing(pattern2, Reference.WRITE, node2.right, maybeImplicitGlobal, true, false);
        });
      }
      this.visit(node2.right);
      this.visit(node2.body);
      this.close(node2);
    }
    visitVariableDeclaration(variableTargetScope, type2, node2, index) {
      const decl = node2.declarations[index];
      const init2 = decl.init;
      this.visitPattern(decl.id, { processRightHandNodes: true }, (pattern2, info) => {
        variableTargetScope.__define(
          pattern2,
          new Definition(
            type2,
            pattern2,
            decl,
            node2,
            index,
            node2.kind
          )
        );
        this.referencingDefaultValue(pattern2, info.assignments, null, true);
        if (init2) {
          this.currentScope().__referencing(pattern2, Reference.WRITE, init2, null, !info.topLevel, true);
        }
      });
    }
    AssignmentExpression(node2) {
      if (PatternVisitor.isPattern(node2.left)) {
        if (node2.operator === "=") {
          this.visitPattern(node2.left, { processRightHandNodes: true }, (pattern2, info) => {
            let maybeImplicitGlobal = null;
            if (!this.currentScope().isStrict) {
              maybeImplicitGlobal = {
                pattern: pattern2,
                node: node2
              };
            }
            this.referencingDefaultValue(pattern2, info.assignments, maybeImplicitGlobal, false);
            this.currentScope().__referencing(pattern2, Reference.WRITE, node2.right, maybeImplicitGlobal, !info.topLevel, false);
          });
        } else {
          this.currentScope().__referencing(node2.left, Reference.RW, node2.right);
        }
      } else {
        this.visit(node2.left);
      }
      this.visit(node2.right);
    }
    CatchClause(node2) {
      this.scopeManager.__nestCatchScope(node2);
      this.visitPattern(node2.param, { processRightHandNodes: true }, (pattern2, info) => {
        this.currentScope().__define(
          pattern2,
          new Definition(
            Variable.CatchClause,
            pattern2,
            node2,
            null,
            null,
            null
          )
        );
        this.referencingDefaultValue(pattern2, info.assignments, null, true);
      });
      this.visit(node2.body);
      this.close(node2);
    }
    Program(node2) {
      this.scopeManager.__nestGlobalScope(node2);
      if (this.scopeManager.isGlobalReturn()) {
        this.currentScope().isStrict = false;
        this.scopeManager.__nestFunctionScope(node2, false);
      }
      if (this.scopeManager.__isES6() && this.scopeManager.isModule()) {
        this.scopeManager.__nestModuleScope(node2);
      }
      if (this.scopeManager.isStrictModeSupported() && this.scopeManager.isImpliedStrict()) {
        this.currentScope().isStrict = true;
      }
      this.visitChildren(node2);
      this.close(node2);
    }
    Identifier(node2) {
      this.currentScope().__referencing(node2);
    }
    // eslint-disable-next-line class-methods-use-this -- Desired as instance method
    PrivateIdentifier() {
    }
    UpdateExpression(node2) {
      if (PatternVisitor.isPattern(node2.argument)) {
        this.currentScope().__referencing(node2.argument, Reference.RW, null);
      } else {
        this.visitChildren(node2);
      }
    }
    MemberExpression(node2) {
      this.visit(node2.object);
      if (node2.computed) {
        this.visit(node2.property);
      }
    }
    Property(node2) {
      this.visitProperty(node2);
    }
    PropertyDefinition(node2) {
      const { computed, key, value } = node2;
      if (computed) {
        this.visit(key);
      }
      if (value) {
        this.scopeManager.__nestClassFieldInitializerScope(value);
        this.visit(value);
        this.close(value);
      }
    }
    StaticBlock(node2) {
      this.scopeManager.__nestClassStaticBlockScope(node2);
      this.visitChildren(node2);
      this.close(node2);
    }
    MethodDefinition(node2) {
      this.visitProperty(node2);
    }
    BreakStatement() {
    }
    // eslint-disable-line class-methods-use-this -- Desired as instance method
    ContinueStatement() {
    }
    // eslint-disable-line class-methods-use-this -- Desired as instance method
    LabeledStatement(node2) {
      this.visit(node2.body);
    }
    ForStatement(node2) {
      if (node2.init && node2.init.type === Syntax.VariableDeclaration && node2.init.kind !== "var") {
        this.scopeManager.__nestForScope(node2);
      }
      this.visitChildren(node2);
      this.close(node2);
    }
    ClassExpression(node2) {
      this.visitClass(node2);
    }
    ClassDeclaration(node2) {
      this.visitClass(node2);
    }
    CallExpression(node2) {
      if (!this.scopeManager.__ignoreEval() && node2.callee.type === Syntax.Identifier && node2.callee.name === "eval") {
        this.currentScope().variableScope.__detectEval();
      }
      this.visitChildren(node2);
    }
    BlockStatement(node2) {
      if (this.scopeManager.__isES6()) {
        this.scopeManager.__nestBlockScope(node2);
      }
      this.visitChildren(node2);
      this.close(node2);
    }
    ThisExpression() {
      this.currentScope().variableScope.__detectThis();
    }
    WithStatement(node2) {
      this.visit(node2.object);
      this.scopeManager.__nestWithScope(node2);
      this.visit(node2.body);
      this.close(node2);
    }
    VariableDeclaration(node2) {
      const variableTargetScope = node2.kind === "var" ? this.currentScope().variableScope : this.currentScope();
      for (let i2 = 0, iz = node2.declarations.length; i2 < iz; ++i2) {
        const decl = node2.declarations[i2];
        this.visitVariableDeclaration(variableTargetScope, Variable.Variable, node2, i2);
        if (decl.init) {
          this.visit(decl.init);
        }
      }
    }
    // sec 13.11.8
    SwitchStatement(node2) {
      this.visit(node2.discriminant);
      if (this.scopeManager.__isES6()) {
        this.scopeManager.__nestSwitchScope(node2);
      }
      for (let i2 = 0, iz = node2.cases.length; i2 < iz; ++i2) {
        this.visit(node2.cases[i2]);
      }
      this.close(node2);
    }
    FunctionDeclaration(node2) {
      this.visitFunction(node2);
    }
    FunctionExpression(node2) {
      this.visitFunction(node2);
    }
    ForOfStatement(node2) {
      this.visitForIn(node2);
    }
    ForInStatement(node2) {
      this.visitForIn(node2);
    }
    ArrowFunctionExpression(node2) {
      this.visitFunction(node2);
    }
    ImportDeclaration(node2) {
      assert2(this.scopeManager.__isES6() && this.scopeManager.isModule(), "ImportDeclaration should appear when the mode is ES6 and in the module context.");
      const importer = new Importer(node2, this);
      importer.visit(node2);
    }
    visitExportDeclaration(node2) {
      if (node2.source) {
        return;
      }
      if (node2.declaration) {
        this.visit(node2.declaration);
        return;
      }
      this.visitChildren(node2);
    }
    // TODO: ExportDeclaration doesn't exist. for bc?
    ExportDeclaration(node2) {
      this.visitExportDeclaration(node2);
    }
    ExportAllDeclaration(node2) {
      this.visitExportDeclaration(node2);
    }
    ExportDefaultDeclaration(node2) {
      this.visitExportDeclaration(node2);
    }
    ExportNamedDeclaration(node2) {
      this.visitExportDeclaration(node2);
    }
    ExportSpecifier(node2) {
      const local = node2.id || node2.local;
      this.visit(local);
    }
    MetaProperty() {
    }
    JSXIdentifier(node2) {
      if (this.scopeManager.__isJSXEnabled() && node2.name !== "this") {
        this.currentScope().__referencing(node2);
      }
    }
    JSXMemberExpression(node2) {
      this.visit(node2.object);
    }
    JSXElement(node2) {
      if (this.scopeManager.__isJSXEnabled()) {
        this.visit(node2.openingElement);
        node2.children.forEach(this.visit, this);
      } else {
        this.visitChildren(node2);
      }
    }
    JSXOpeningElement(node2) {
      if (this.scopeManager.__isJSXEnabled()) {
        const nameNode = node2.name;
        const isComponentName = nameNode.type === "JSXIdentifier" && nameNode.name[0].toUpperCase() === nameNode.name[0];
        const isComponent = isComponentName || nameNode.type === "JSXMemberExpression";
        if (isComponent) {
          this.visit(nameNode);
        }
      }
      node2.attributes.forEach(this.visit, this);
    }
    JSXAttribute(node2) {
      if (node2.value) {
        this.visit(node2.value);
      }
    }
    JSXExpressionContainer(node2) {
      this.visit(node2.expression);
    }
    JSXNamespacedName(node2) {
      this.visit(node2.namespace);
      this.visit(node2.name);
    }
  }
  const version2 = "8.4.0";
  function defaultOptions() {
    return {
      optimistic: false,
      nodejsScope: false,
      impliedStrict: false,
      sourceType: "script",
      // one of ['script', 'module', 'commonjs']
      ecmaVersion: 5,
      childVisitorKeys: null,
      fallback: "iteration"
    };
  }
  function updateDeeply(target, override) {
    function isHashObject(value) {
      return typeof value === "object" && value instanceof Object && !(value instanceof Array) && !(value instanceof RegExp);
    }
    for (const key in override) {
      if (Object.hasOwn(override, key)) {
        const val = override[key];
        if (isHashObject(val)) {
          if (isHashObject(target[key])) {
            updateDeeply(target[key], val);
          } else {
            target[key] = updateDeeply({}, val);
          }
        } else {
          target[key] = val;
        }
      }
    }
    return target;
  }
  function analyze(tree, providedOptions) {
    const options = updateDeeply(defaultOptions(), providedOptions);
    const scopeManager = new ScopeManager(options);
    const referencer = new Referencer(options, scopeManager);
    referencer.visit(tree);
    assert2(scopeManager.__currentScope === null, "currentScope should be null.");
    return scopeManager;
  }
  eslintScope.Definition = Definition;
  eslintScope.PatternVisitor = PatternVisitor;
  eslintScope.Reference = Reference;
  eslintScope.Referencer = Referencer;
  eslintScope.Scope = Scope;
  eslintScope.ScopeManager = ScopeManager;
  eslintScope.Variable = Variable;
  eslintScope.analyze = analyze;
  eslintScope.version = version2;
  return eslintScope;
}
var eslintVisitorKeys$2 = {};
var hasRequiredEslintVisitorKeys$2;
function requireEslintVisitorKeys$2() {
  if (hasRequiredEslintVisitorKeys$2) return eslintVisitorKeys$2;
  hasRequiredEslintVisitorKeys$2 = 1;
  const KEYS = {
    ArrayExpression: [
      "elements"
    ],
    ArrayPattern: [
      "elements"
    ],
    ArrowFunctionExpression: [
      "params",
      "body"
    ],
    AssignmentExpression: [
      "left",
      "right"
    ],
    AssignmentPattern: [
      "left",
      "right"
    ],
    AwaitExpression: [
      "argument"
    ],
    BinaryExpression: [
      "left",
      "right"
    ],
    BlockStatement: [
      "body"
    ],
    BreakStatement: [
      "label"
    ],
    CallExpression: [
      "callee",
      "arguments"
    ],
    CatchClause: [
      "param",
      "body"
    ],
    ChainExpression: [
      "expression"
    ],
    ClassBody: [
      "body"
    ],
    ClassDeclaration: [
      "id",
      "superClass",
      "body"
    ],
    ClassExpression: [
      "id",
      "superClass",
      "body"
    ],
    ConditionalExpression: [
      "test",
      "consequent",
      "alternate"
    ],
    ContinueStatement: [
      "label"
    ],
    DebuggerStatement: [],
    DoWhileStatement: [
      "body",
      "test"
    ],
    EmptyStatement: [],
    ExperimentalRestProperty: [
      "argument"
    ],
    ExperimentalSpreadProperty: [
      "argument"
    ],
    ExportAllDeclaration: [
      "exported",
      "source",
      "attributes"
    ],
    ExportDefaultDeclaration: [
      "declaration"
    ],
    ExportNamedDeclaration: [
      "declaration",
      "specifiers",
      "source",
      "attributes"
    ],
    ExportSpecifier: [
      "local",
      "exported"
    ],
    ExpressionStatement: [
      "expression"
    ],
    ForInStatement: [
      "left",
      "right",
      "body"
    ],
    ForOfStatement: [
      "left",
      "right",
      "body"
    ],
    ForStatement: [
      "init",
      "test",
      "update",
      "body"
    ],
    FunctionDeclaration: [
      "id",
      "params",
      "body"
    ],
    FunctionExpression: [
      "id",
      "params",
      "body"
    ],
    Identifier: [],
    IfStatement: [
      "test",
      "consequent",
      "alternate"
    ],
    ImportAttribute: [
      "key",
      "value"
    ],
    ImportDeclaration: [
      "specifiers",
      "source",
      "attributes"
    ],
    ImportDefaultSpecifier: [
      "local"
    ],
    ImportExpression: [
      "source",
      "options"
    ],
    ImportNamespaceSpecifier: [
      "local"
    ],
    ImportSpecifier: [
      "imported",
      "local"
    ],
    JSXAttribute: [
      "name",
      "value"
    ],
    JSXClosingElement: [
      "name"
    ],
    JSXClosingFragment: [],
    JSXElement: [
      "openingElement",
      "children",
      "closingElement"
    ],
    JSXEmptyExpression: [],
    JSXExpressionContainer: [
      "expression"
    ],
    JSXFragment: [
      "openingFragment",
      "children",
      "closingFragment"
    ],
    JSXIdentifier: [],
    JSXMemberExpression: [
      "object",
      "property"
    ],
    JSXNamespacedName: [
      "namespace",
      "name"
    ],
    JSXOpeningElement: [
      "name",
      "attributes"
    ],
    JSXOpeningFragment: [],
    JSXSpreadAttribute: [
      "argument"
    ],
    JSXSpreadChild: [
      "expression"
    ],
    JSXText: [],
    LabeledStatement: [
      "label",
      "body"
    ],
    Literal: [],
    LogicalExpression: [
      "left",
      "right"
    ],
    MemberExpression: [
      "object",
      "property"
    ],
    MetaProperty: [
      "meta",
      "property"
    ],
    MethodDefinition: [
      "key",
      "value"
    ],
    NewExpression: [
      "callee",
      "arguments"
    ],
    ObjectExpression: [
      "properties"
    ],
    ObjectPattern: [
      "properties"
    ],
    PrivateIdentifier: [],
    Program: [
      "body"
    ],
    Property: [
      "key",
      "value"
    ],
    PropertyDefinition: [
      "key",
      "value"
    ],
    RestElement: [
      "argument"
    ],
    ReturnStatement: [
      "argument"
    ],
    SequenceExpression: [
      "expressions"
    ],
    SpreadElement: [
      "argument"
    ],
    StaticBlock: [
      "body"
    ],
    Super: [],
    SwitchCase: [
      "test",
      "consequent"
    ],
    SwitchStatement: [
      "discriminant",
      "cases"
    ],
    TaggedTemplateExpression: [
      "tag",
      "quasi"
    ],
    TemplateElement: [],
    TemplateLiteral: [
      "quasis",
      "expressions"
    ],
    ThisExpression: [],
    ThrowStatement: [
      "argument"
    ],
    TryStatement: [
      "block",
      "handler",
      "finalizer"
    ],
    UnaryExpression: [
      "argument"
    ],
    UpdateExpression: [
      "argument"
    ],
    VariableDeclaration: [
      "declarations"
    ],
    VariableDeclarator: [
      "id",
      "init"
    ],
    WhileStatement: [
      "test",
      "body"
    ],
    WithStatement: [
      "object",
      "body"
    ],
    YieldExpression: [
      "argument"
    ]
  };
  const NODE_TYPES = Object.keys(KEYS);
  for (const type2 of NODE_TYPES) {
    Object.freeze(KEYS[type2]);
  }
  Object.freeze(KEYS);
  const KEY_BLACKLIST = /* @__PURE__ */ new Set([
    "parent",
    "leadingComments",
    "trailingComments"
  ]);
  function filterKey(key) {
    return !KEY_BLACKLIST.has(key) && key[0] !== "_";
  }
  function getKeys(node2) {
    return Object.keys(node2).filter(filterKey);
  }
  function unionWith(additionalKeys) {
    const retv = (
      /** @type {{ [type: string]: ReadonlyArray<string> }} */
      Object.assign({}, KEYS)
    );
    for (const type2 of Object.keys(additionalKeys)) {
      if (Object.hasOwn(retv, type2)) {
        const keys = new Set(additionalKeys[type2]);
        for (const key of retv[type2]) {
          keys.add(key);
        }
        retv[type2] = Object.freeze(Array.from(keys));
      } else {
        retv[type2] = Object.freeze(Array.from(additionalKeys[type2]));
      }
    }
    return Object.freeze(retv);
  }
  eslintVisitorKeys$2.KEYS = KEYS;
  eslintVisitorKeys$2.getKeys = getKeys;
  eslintVisitorKeys$2.unionWith = unionWith;
  return eslintVisitorKeys$2;
}
var espree = {};
var acorn = { exports: {} };
var hasRequiredAcorn;
function requireAcorn() {
  if (hasRequiredAcorn) return acorn.exports;
  hasRequiredAcorn = 1;
  (function(module, exports) {
    (function(global, factory) {
      factory(exports);
    })(this, (function(exports2) {
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
      var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
      var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
      var reservedWords = {
        3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
        5: "class enum extends super const export import",
        6: "enum",
        strict: "implements interface let package private protected public static yield",
        strictBind: "eval arguments"
      };
      var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
      var keywords$1 = {
        5: ecma5AndLessKeywords,
        "5module": ecma5AndLessKeywords + " export import",
        6: ecma5AndLessKeywords + " const class extends export import super"
      };
      var keywordRelationalOperator = /^in(stanceof)?$/;
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      function isInAstralSet(code2, set) {
        var pos = 65536;
        for (var i3 = 0; i3 < set.length; i3 += 2) {
          pos += set[i3];
          if (pos > code2) {
            return false;
          }
          pos += set[i3 + 1];
          if (pos >= code2) {
            return true;
          }
        }
        return false;
      }
      function isIdentifierStart(code2, astral) {
        if (code2 < 65) {
          return code2 === 36;
        }
        if (code2 < 91) {
          return true;
        }
        if (code2 < 97) {
          return code2 === 95;
        }
        if (code2 < 123) {
          return true;
        }
        if (code2 <= 65535) {
          return code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet(code2, astralIdentifierStartCodes);
      }
      function isIdentifierChar(code2, astral) {
        if (code2 < 48) {
          return code2 === 36;
        }
        if (code2 < 58) {
          return true;
        }
        if (code2 < 65) {
          return false;
        }
        if (code2 < 91) {
          return true;
        }
        if (code2 < 97) {
          return code2 === 95;
        }
        if (code2 < 123) {
          return true;
        }
        if (code2 <= 65535) {
          return code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes);
      }
      var TokenType = function TokenType2(label, conf) {
        if (conf === void 0) conf = {};
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop || null;
        this.updateContext = null;
      };
      function binop(name, prec) {
        return new TokenType(name, { beforeExpr: true, binop: prec });
      }
      var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true };
      var keywords2 = {};
      function kw(name, options) {
        if (options === void 0) options = {};
        options.keyword = name;
        return keywords2[name] = new TokenType(name, options);
      }
      var types$1 = {
        num: new TokenType("num", startsExpr),
        regexp: new TokenType("regexp", startsExpr),
        string: new TokenType("string", startsExpr),
        name: new TokenType("name", startsExpr),
        privateId: new TokenType("privateId", startsExpr),
        eof: new TokenType("eof"),
        // Punctuation token types.
        bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
        bracketR: new TokenType("]"),
        braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
        braceR: new TokenType("}"),
        parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
        parenR: new TokenType(")"),
        comma: new TokenType(",", beforeExpr),
        semi: new TokenType(";", beforeExpr),
        colon: new TokenType(":", beforeExpr),
        dot: new TokenType("."),
        question: new TokenType("?", beforeExpr),
        questionDot: new TokenType("?."),
        arrow: new TokenType("=>", beforeExpr),
        template: new TokenType("template"),
        invalidTemplate: new TokenType("invalidTemplate"),
        ellipsis: new TokenType("...", beforeExpr),
        backQuote: new TokenType("`", startsExpr),
        dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
        // Operators. These carry several kinds of properties to help the
        // parser use them properly (the presence of these properties is
        // what categorizes them as operators).
        //
        // `binop`, when present, specifies that this operator is a binary
        // operator, and will refer to its precedence.
        //
        // `prefix` and `postfix` mark the operator as a prefix or postfix
        // unary operator.
        //
        // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
        // binary operators with a very low precedence, that should result
        // in AssignmentExpression nodes.
        eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
        assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
        incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
        prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
        logicalOR: binop("||", 1),
        logicalAND: binop("&&", 2),
        bitwiseOR: binop("|", 3),
        bitwiseXOR: binop("^", 4),
        bitwiseAND: binop("&", 5),
        equality: binop("==/!=/===/!==", 6),
        relational: binop("</>/<=/>=", 7),
        bitShift: binop("<</>>/>>>", 8),
        plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
        modulo: binop("%", 10),
        star: binop("*", 10),
        slash: binop("/", 10),
        starstar: new TokenType("**", { beforeExpr: true }),
        coalesce: binop("??", 1),
        // Keyword token types.
        _break: kw("break"),
        _case: kw("case", beforeExpr),
        _catch: kw("catch"),
        _continue: kw("continue"),
        _debugger: kw("debugger"),
        _default: kw("default", beforeExpr),
        _do: kw("do", { isLoop: true, beforeExpr: true }),
        _else: kw("else", beforeExpr),
        _finally: kw("finally"),
        _for: kw("for", { isLoop: true }),
        _function: kw("function", startsExpr),
        _if: kw("if"),
        _return: kw("return", beforeExpr),
        _switch: kw("switch"),
        _throw: kw("throw", beforeExpr),
        _try: kw("try"),
        _var: kw("var"),
        _const: kw("const"),
        _while: kw("while", { isLoop: true }),
        _with: kw("with"),
        _new: kw("new", { beforeExpr: true, startsExpr: true }),
        _this: kw("this", startsExpr),
        _super: kw("super", startsExpr),
        _class: kw("class", startsExpr),
        _extends: kw("extends", beforeExpr),
        _export: kw("export"),
        _import: kw("import", startsExpr),
        _null: kw("null", startsExpr),
        _true: kw("true", startsExpr),
        _false: kw("false", startsExpr),
        _in: kw("in", { beforeExpr: true, binop: 7 }),
        _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
        _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
        _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
        _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
      };
      var lineBreak = /\r\n?|\n|\u2028|\u2029/;
      var lineBreakG = new RegExp(lineBreak.source, "g");
      function isNewLine(code2) {
        return code2 === 10 || code2 === 13 || code2 === 8232 || code2 === 8233;
      }
      function nextLineBreak(code2, from2, end) {
        if (end === void 0) end = code2.length;
        for (var i3 = from2; i3 < end; i3++) {
          var next = code2.charCodeAt(i3);
          if (isNewLine(next)) {
            return i3 < end - 1 && next === 13 && code2.charCodeAt(i3 + 1) === 10 ? i3 + 2 : i3 + 1;
          }
        }
        return -1;
      }
      var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
      var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
      var ref2 = Object.prototype;
      var hasOwnProperty2 = ref2.hasOwnProperty;
      var toString3 = ref2.toString;
      var hasOwn = Object.hasOwn || (function(obj, propName) {
        return hasOwnProperty2.call(obj, propName);
      });
      var isArray2 = Array.isArray || (function(obj) {
        return toString3.call(obj) === "[object Array]";
      });
      var regexpCache = /* @__PURE__ */ Object.create(null);
      function wordsRegexp(words) {
        return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
      }
      function codePointToString(code2) {
        if (code2 <= 65535) {
          return String.fromCharCode(code2);
        }
        code2 -= 65536;
        return String.fromCharCode((code2 >> 10) + 55296, (code2 & 1023) + 56320);
      }
      var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
      var Position = function Position2(line, col) {
        this.line = line;
        this.column = col;
      };
      Position.prototype.offset = function offset(n2) {
        return new Position(this.line, this.column + n2);
      };
      var SourceLocation = function SourceLocation2(p2, start, end) {
        this.start = start;
        this.end = end;
        if (p2.sourceFile !== null) {
          this.source = p2.sourceFile;
        }
      };
      function getLineInfo(input, offset) {
        for (var line = 1, cur = 0; ; ) {
          var nextBreak = nextLineBreak(input, cur, offset);
          if (nextBreak < 0) {
            return new Position(line, offset - cur);
          }
          ++line;
          cur = nextBreak;
        }
      }
      var defaultOptions = {
        // `ecmaVersion` indicates the ECMAScript version to parse. Must be
        // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
        // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `"latest"`
        // (the latest version the library supports). This influences
        // support for strict mode, the set of reserved words, and support
        // for new syntax features.
        ecmaVersion: null,
        // `sourceType` indicates the mode the code should be parsed in.
        // Can be either `"script"` or `"module"`. This influences global
        // strict mode and parsing of `import` and `export` declarations.
        sourceType: "script",
        // `onInsertedSemicolon` can be a callback that will be called when
        // a semicolon is automatically inserted. It will be passed the
        // position of the inserted semicolon as an offset, and if
        // `locations` is enabled, it is given the location as a `{line,
        // column}` object as second argument.
        onInsertedSemicolon: null,
        // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
        // trailing commas.
        onTrailingComma: null,
        // By default, reserved words are only enforced if ecmaVersion >= 5.
        // Set `allowReserved` to a boolean value to explicitly turn this on
        // an off. When this option has the value "never", reserved words
        // and keywords can also not be used as property names.
        allowReserved: null,
        // When enabled, a return at the top level is not considered an
        // error.
        allowReturnOutsideFunction: false,
        // When enabled, import/export statements are not constrained to
        // appearing at the top of the program, and an import.meta expression
        // in a script isn't considered an error.
        allowImportExportEverywhere: false,
        // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
        // When enabled, await identifiers are allowed to appear at the top-level scope,
        // but they are still not allowed in non-async functions.
        allowAwaitOutsideFunction: null,
        // When enabled, super identifiers are not constrained to
        // appearing in methods and do not raise an error when they appear elsewhere.
        allowSuperOutsideMethod: null,
        // When enabled, hashbang directive in the beginning of file is
        // allowed and treated as a line comment. Enabled by default when
        // `ecmaVersion` >= 2023.
        allowHashBang: false,
        // By default, the parser will verify that private properties are
        // only used in places where they are valid and have been declared.
        // Set this to false to turn such checks off.
        checkPrivateFields: true,
        // When `locations` is on, `loc` properties holding objects with
        // `start` and `end` properties in `{line, column}` form (with
        // line being 1-based and column 0-based) will be attached to the
        // nodes.
        locations: false,
        // A function can be passed as `onToken` option, which will
        // cause Acorn to call that function with object in the same
        // format as tokens returned from `tokenizer().getToken()`. Note
        // that you are not allowed to call the parser from the
        // callback—that will corrupt its internal state.
        onToken: null,
        // A function can be passed as `onComment` option, which will
        // cause Acorn to call that function with `(block, text, start,
        // end)` parameters whenever a comment is skipped. `block` is a
        // boolean indicating whether this is a block (`/* */`) comment,
        // `text` is the content of the comment, and `start` and `end` are
        // character offsets that denote the start and end of the comment.
        // When the `locations` option is on, two more parameters are
        // passed, the full `{line, column}` locations of the start and
        // end of the comments. Note that you are not allowed to call the
        // parser from the callback—that will corrupt its internal state.
        // When this option has an array as value, objects representing the
        // comments are pushed to it.
        onComment: null,
        // Nodes have their start and end characters offsets recorded in
        // `start` and `end` properties (directly on the node, rather than
        // the `loc` object, which holds line/column data. To also add a
        // [semi-standardized][range] `range` property holding a `[start,
        // end]` array with the same numbers, set the `ranges` option to
        // `true`.
        //
        // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
        ranges: false,
        // It is possible to parse multiple files into a single AST by
        // passing the tree produced by parsing the first file as
        // `program` option in subsequent parses. This will add the
        // toplevel forms of the parsed file to the `Program` (top) node
        // of an existing parse tree.
        program: null,
        // When `locations` is on, you can pass this to record the source
        // file in every node's `loc` object.
        sourceFile: null,
        // This value, if given, is stored in every node, whether
        // `locations` is on or off.
        directSourceFile: null,
        // When enabled, parenthesized expressions are represented by
        // (non-standard) ParenthesizedExpression nodes
        preserveParens: false
      };
      var warnedAboutEcmaVersion = false;
      function getOptions(opts) {
        var options = {};
        for (var opt in defaultOptions) {
          options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
        }
        if (options.ecmaVersion === "latest") {
          options.ecmaVersion = 1e8;
        } else if (options.ecmaVersion == null) {
          if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
            warnedAboutEcmaVersion = true;
            console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
          }
          options.ecmaVersion = 11;
        } else if (options.ecmaVersion >= 2015) {
          options.ecmaVersion -= 2009;
        }
        if (options.allowReserved == null) {
          options.allowReserved = options.ecmaVersion < 5;
        }
        if (!opts || opts.allowHashBang == null) {
          options.allowHashBang = options.ecmaVersion >= 14;
        }
        if (isArray2(options.onToken)) {
          var tokens = options.onToken;
          options.onToken = function(token) {
            return tokens.push(token);
          };
        }
        if (isArray2(options.onComment)) {
          options.onComment = pushComment(options, options.onComment);
        }
        return options;
      }
      function pushComment(options, array) {
        return function(block, text, start, end, startLoc, endLoc) {
          var comment2 = {
            type: block ? "Block" : "Line",
            value: text,
            start,
            end
          };
          if (options.locations) {
            comment2.loc = new SourceLocation(this, startLoc, endLoc);
          }
          if (options.ranges) {
            comment2.range = [start, end];
          }
          array.push(comment2);
        };
      }
      var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128, SCOPE_CLASS_STATIC_BLOCK = 256, SCOPE_CLASS_FIELD_INIT = 512, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;
      function functionFlags(async2, generator) {
        return SCOPE_FUNCTION | (async2 ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
      }
      var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5;
      var Parser = function Parser2(options, input, startPos) {
        this.options = options = getOptions(options);
        this.sourceFile = options.sourceFile;
        this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
        var reserved = "";
        if (options.allowReserved !== true) {
          reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
          if (options.sourceType === "module") {
            reserved += " await";
          }
        }
        this.reservedWords = wordsRegexp(reserved);
        var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
        this.reservedWordsStrict = wordsRegexp(reservedStrict);
        this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
        this.input = String(input);
        this.containsEsc = false;
        if (startPos) {
          this.pos = startPos;
          this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
          this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
        } else {
          this.pos = this.lineStart = 0;
          this.curLine = 1;
        }
        this.type = types$1.eof;
        this.value = null;
        this.start = this.end = this.pos;
        this.startLoc = this.endLoc = this.curPosition();
        this.lastTokEndLoc = this.lastTokStartLoc = null;
        this.lastTokStart = this.lastTokEnd = this.pos;
        this.context = this.initialContext();
        this.exprAllowed = true;
        this.inModule = options.sourceType === "module";
        this.strict = this.inModule || this.strictDirective(this.pos);
        this.potentialArrowAt = -1;
        this.potentialArrowInForAwait = false;
        this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
        this.labels = [];
        this.undefinedExports = /* @__PURE__ */ Object.create(null);
        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
          this.skipLineComment(2);
        }
        this.scopeStack = [];
        this.enterScope(SCOPE_TOP);
        this.regexpState = null;
        this.privateNameStack = [];
      };
      var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
      Parser.prototype.parse = function parse2() {
        var node2 = this.options.program || this.startNode();
        this.nextToken();
        return this.parseTopLevel(node2);
      };
      prototypeAccessors.inFunction.get = function() {
        return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
      };
      prototypeAccessors.inGenerator.get = function() {
        return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
      };
      prototypeAccessors.inAsync.get = function() {
        return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
      };
      prototypeAccessors.canAwait.get = function() {
        for (var i3 = this.scopeStack.length - 1; i3 >= 0; i3--) {
          var ref3 = this.scopeStack[i3];
          var flags2 = ref3.flags;
          if (flags2 & (SCOPE_CLASS_STATIC_BLOCK | SCOPE_CLASS_FIELD_INIT)) {
            return false;
          }
          if (flags2 & SCOPE_FUNCTION) {
            return (flags2 & SCOPE_ASYNC) > 0;
          }
        }
        return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
      };
      prototypeAccessors.allowSuper.get = function() {
        var ref3 = this.currentThisScope();
        var flags2 = ref3.flags;
        return (flags2 & SCOPE_SUPER) > 0 || this.options.allowSuperOutsideMethod;
      };
      prototypeAccessors.allowDirectSuper.get = function() {
        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
      };
      prototypeAccessors.treatFunctionsAsVar.get = function() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      };
      prototypeAccessors.allowNewDotTarget.get = function() {
        for (var i3 = this.scopeStack.length - 1; i3 >= 0; i3--) {
          var ref3 = this.scopeStack[i3];
          var flags2 = ref3.flags;
          if (flags2 & (SCOPE_CLASS_STATIC_BLOCK | SCOPE_CLASS_FIELD_INIT) || flags2 & SCOPE_FUNCTION && !(flags2 & SCOPE_ARROW)) {
            return true;
          }
        }
        return false;
      };
      prototypeAccessors.inClassStaticBlock.get = function() {
        return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0;
      };
      Parser.extend = function extend() {
        var plugins = [], len = arguments.length;
        while (len--) plugins[len] = arguments[len];
        var cls = this;
        for (var i3 = 0; i3 < plugins.length; i3++) {
          cls = plugins[i3](cls);
        }
        return cls;
      };
      Parser.parse = function parse2(input, options) {
        return new this(options, input).parse();
      };
      Parser.parseExpressionAt = function parseExpressionAt2(input, pos, options) {
        var parser = new this(options, input, pos);
        parser.nextToken();
        return parser.parseExpression();
      };
      Parser.tokenizer = function tokenizer2(input, options) {
        return new this(options, input);
      };
      Object.defineProperties(Parser.prototype, prototypeAccessors);
      var pp$9 = Parser.prototype;
      var literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
      pp$9.strictDirective = function(start) {
        if (this.options.ecmaVersion < 5) {
          return false;
        }
        for (; ; ) {
          skipWhiteSpace.lastIndex = start;
          start += skipWhiteSpace.exec(this.input)[0].length;
          var match = literal.exec(this.input.slice(start));
          if (!match) {
            return false;
          }
          if ((match[1] || match[2]) === "use strict") {
            skipWhiteSpace.lastIndex = start + match[0].length;
            var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
            var next = this.input.charAt(end);
            return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
          }
          start += match[0].length;
          skipWhiteSpace.lastIndex = start;
          start += skipWhiteSpace.exec(this.input)[0].length;
          if (this.input[start] === ";") {
            start++;
          }
        }
      };
      pp$9.eat = function(type2) {
        if (this.type === type2) {
          this.next();
          return true;
        } else {
          return false;
        }
      };
      pp$9.isContextual = function(name) {
        return this.type === types$1.name && this.value === name && !this.containsEsc;
      };
      pp$9.eatContextual = function(name) {
        if (!this.isContextual(name)) {
          return false;
        }
        this.next();
        return true;
      };
      pp$9.expectContextual = function(name) {
        if (!this.eatContextual(name)) {
          this.unexpected();
        }
      };
      pp$9.canInsertSemicolon = function() {
        return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp$9.insertSemicolon = function() {
        if (this.canInsertSemicolon()) {
          if (this.options.onInsertedSemicolon) {
            this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
          }
          return true;
        }
      };
      pp$9.semicolon = function() {
        if (!this.eat(types$1.semi) && !this.insertSemicolon()) {
          this.unexpected();
        }
      };
      pp$9.afterTrailingComma = function(tokType, notNext) {
        if (this.type === tokType) {
          if (this.options.onTrailingComma) {
            this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
          }
          if (!notNext) {
            this.next();
          }
          return true;
        }
      };
      pp$9.expect = function(type2) {
        this.eat(type2) || this.unexpected();
      };
      pp$9.unexpected = function(pos) {
        this.raise(pos != null ? pos : this.start, "Unexpected token");
      };
      var DestructuringErrors = function DestructuringErrors2() {
        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
      };
      pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
        if (!refDestructuringErrors) {
          return;
        }
        if (refDestructuringErrors.trailingComma > -1) {
          this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
        }
        var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
        if (parens > -1) {
          this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
        }
      };
      pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
        if (!refDestructuringErrors) {
          return false;
        }
        var shorthandAssign = refDestructuringErrors.shorthandAssign;
        var doubleProto = refDestructuringErrors.doubleProto;
        if (!andThrow) {
          return shorthandAssign >= 0 || doubleProto >= 0;
        }
        if (shorthandAssign >= 0) {
          this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
        }
        if (doubleProto >= 0) {
          this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }
      };
      pp$9.checkYieldAwaitInDefaultParams = function() {
        if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
          this.raise(this.yieldPos, "Yield expression cannot be a default value");
        }
        if (this.awaitPos) {
          this.raise(this.awaitPos, "Await expression cannot be a default value");
        }
      };
      pp$9.isSimpleAssignTarget = function(expr) {
        if (expr.type === "ParenthesizedExpression") {
          return this.isSimpleAssignTarget(expr.expression);
        }
        return expr.type === "Identifier" || expr.type === "MemberExpression";
      };
      var pp$8 = Parser.prototype;
      pp$8.parseTopLevel = function(node2) {
        var exports3 = /* @__PURE__ */ Object.create(null);
        if (!node2.body) {
          node2.body = [];
        }
        while (this.type !== types$1.eof) {
          var stmt = this.parseStatement(null, true, exports3);
          node2.body.push(stmt);
        }
        if (this.inModule) {
          for (var i3 = 0, list2 = Object.keys(this.undefinedExports); i3 < list2.length; i3 += 1) {
            var name = list2[i3];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
        }
        this.adaptDirectivePrologue(node2.body);
        this.next();
        node2.sourceType = this.options.sourceType;
        return this.finishNode(node2, "Program");
      };
      var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
      pp$8.isLet = function(context) {
        if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
          return false;
        }
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 91 || nextCh === 92) {
          return true;
        }
        if (context) {
          return false;
        }
        if (nextCh === 123 || nextCh > 55295 && nextCh < 56320) {
          return true;
        }
        if (isIdentifierStart(nextCh, true)) {
          var pos = next + 1;
          while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) {
            ++pos;
          }
          if (nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
            return true;
          }
          var ident = this.input.slice(next, pos);
          if (!keywordRelationalOperator.test(ident)) {
            return true;
          }
        }
        return false;
      };
      pp$8.isAsyncFunction = function() {
        if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
          return false;
        }
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length, after;
        return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
      };
      pp$8.isUsingKeyword = function(isAwaitUsing, isFor) {
        if (this.options.ecmaVersion < 17 || !this.isContextual(isAwaitUsing ? "await" : "using")) {
          return false;
        }
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length;
        if (lineBreak.test(this.input.slice(this.pos, next))) {
          return false;
        }
        if (isAwaitUsing) {
          var awaitEndPos = next + 5, after;
          if (this.input.slice(next, awaitEndPos) !== "using" || awaitEndPos === this.input.length || isIdentifierChar(after = this.input.charCodeAt(awaitEndPos)) || after > 55295 && after < 56320) {
            return false;
          }
          skipWhiteSpace.lastIndex = awaitEndPos;
          var skipAfterUsing = skipWhiteSpace.exec(this.input);
          if (skipAfterUsing && lineBreak.test(this.input.slice(awaitEndPos, awaitEndPos + skipAfterUsing[0].length))) {
            return false;
          }
        }
        if (isFor) {
          var ofEndPos = next + 2, after$1;
          if (this.input.slice(next, ofEndPos) === "of") {
            if (ofEndPos === this.input.length || !isIdentifierChar(after$1 = this.input.charCodeAt(ofEndPos)) && !(after$1 > 55295 && after$1 < 56320)) {
              return false;
            }
          }
        }
        var ch = this.input.charCodeAt(next);
        return isIdentifierStart(ch, true) || ch === 92;
      };
      pp$8.isAwaitUsing = function(isFor) {
        return this.isUsingKeyword(true, isFor);
      };
      pp$8.isUsing = function(isFor) {
        return this.isUsingKeyword(false, isFor);
      };
      pp$8.parseStatement = function(context, topLevel, exports3) {
        var starttype = this.type, node2 = this.startNode(), kind;
        if (this.isLet(context)) {
          starttype = types$1._var;
          kind = "let";
        }
        switch (starttype) {
          case types$1._break:
          case types$1._continue:
            return this.parseBreakContinueStatement(node2, starttype.keyword);
          case types$1._debugger:
            return this.parseDebuggerStatement(node2);
          case types$1._do:
            return this.parseDoStatement(node2);
          case types$1._for:
            return this.parseForStatement(node2);
          case types$1._function:
            if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
              this.unexpected();
            }
            return this.parseFunctionStatement(node2, false, !context);
          case types$1._class:
            if (context) {
              this.unexpected();
            }
            return this.parseClass(node2, true);
          case types$1._if:
            return this.parseIfStatement(node2);
          case types$1._return:
            return this.parseReturnStatement(node2);
          case types$1._switch:
            return this.parseSwitchStatement(node2);
          case types$1._throw:
            return this.parseThrowStatement(node2);
          case types$1._try:
            return this.parseTryStatement(node2);
          case types$1._const:
          case types$1._var:
            kind = kind || this.value;
            if (context && kind !== "var") {
              this.unexpected();
            }
            return this.parseVarStatement(node2, kind);
          case types$1._while:
            return this.parseWhileStatement(node2);
          case types$1._with:
            return this.parseWithStatement(node2);
          case types$1.braceL:
            return this.parseBlock(true, node2);
          case types$1.semi:
            return this.parseEmptyStatement(node2);
          case types$1._export:
          case types$1._import:
            if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
              skipWhiteSpace.lastIndex = this.pos;
              var skip = skipWhiteSpace.exec(this.input);
              var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
              if (nextCh === 40 || nextCh === 46) {
                return this.parseExpressionStatement(node2, this.parseExpression());
              }
            }
            if (!this.options.allowImportExportEverywhere) {
              if (!topLevel) {
                this.raise(this.start, "'import' and 'export' may only appear at the top level");
              }
              if (!this.inModule) {
                this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
              }
            }
            return starttype === types$1._import ? this.parseImport(node2) : this.parseExport(node2, exports3);
          // If the statement does not start with a statement keyword or a
          // brace, it's an ExpressionStatement or LabeledStatement. We
          // simply start parsing an expression, and afterwards, if the
          // next token is a colon and the expression was a simple
          // Identifier node, we switch to interpreting it as a label.
          default:
            if (this.isAsyncFunction()) {
              if (context) {
                this.unexpected();
              }
              this.next();
              return this.parseFunctionStatement(node2, true, !context);
            }
            var usingKind = this.isAwaitUsing(false) ? "await using" : this.isUsing(false) ? "using" : null;
            if (usingKind) {
              if (topLevel && this.options.sourceType === "script") {
                this.raise(this.start, "Using declaration cannot appear in the top level when source type is `script`");
              }
              if (usingKind === "await using") {
                if (!this.canAwait) {
                  this.raise(this.start, "Await using cannot appear outside of async function");
                }
                this.next();
              }
              this.next();
              this.parseVar(node2, false, usingKind);
              this.semicolon();
              return this.finishNode(node2, "VariableDeclaration");
            }
            var maybeName = this.value, expr = this.parseExpression();
            if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon)) {
              return this.parseLabeledStatement(node2, maybeName, expr, context);
            } else {
              return this.parseExpressionStatement(node2, expr);
            }
        }
      };
      pp$8.parseBreakContinueStatement = function(node2, keyword2) {
        var isBreak = keyword2 === "break";
        this.next();
        if (this.eat(types$1.semi) || this.insertSemicolon()) {
          node2.label = null;
        } else if (this.type !== types$1.name) {
          this.unexpected();
        } else {
          node2.label = this.parseIdent();
          this.semicolon();
        }
        var i3 = 0;
        for (; i3 < this.labels.length; ++i3) {
          var lab = this.labels[i3];
          if (node2.label == null || lab.name === node2.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop")) {
              break;
            }
            if (node2.label && isBreak) {
              break;
            }
          }
        }
        if (i3 === this.labels.length) {
          this.raise(node2.start, "Unsyntactic " + keyword2);
        }
        return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
      };
      pp$8.parseDebuggerStatement = function(node2) {
        this.next();
        this.semicolon();
        return this.finishNode(node2, "DebuggerStatement");
      };
      pp$8.parseDoStatement = function(node2) {
        this.next();
        this.labels.push(loopLabel);
        node2.body = this.parseStatement("do");
        this.labels.pop();
        this.expect(types$1._while);
        node2.test = this.parseParenExpression();
        if (this.options.ecmaVersion >= 6) {
          this.eat(types$1.semi);
        } else {
          this.semicolon();
        }
        return this.finishNode(node2, "DoWhileStatement");
      };
      pp$8.parseForStatement = function(node2) {
        this.next();
        var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
        this.labels.push(loopLabel);
        this.enterScope(0);
        this.expect(types$1.parenL);
        if (this.type === types$1.semi) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, null);
        }
        var isLet = this.isLet();
        if (this.type === types$1._var || this.type === types$1._const || isLet) {
          var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
          this.next();
          this.parseVar(init$1, true, kind);
          this.finishNode(init$1, "VariableDeclaration");
          return this.parseForAfterInit(node2, init$1, awaitAt);
        }
        var startsWithLet = this.isContextual("let"), isForOf = false;
        var usingKind = this.isUsing(true) ? "using" : this.isAwaitUsing(true) ? "await using" : null;
        if (usingKind) {
          var init$2 = this.startNode();
          this.next();
          if (usingKind === "await using") {
            this.next();
          }
          this.parseVar(init$2, true, usingKind);
          this.finishNode(init$2, "VariableDeclaration");
          return this.parseForAfterInit(node2, init$2, awaitAt);
        }
        var containsEsc = this.containsEsc;
        var refDestructuringErrors = new DestructuringErrors();
        var initPos = this.start;
        var init2 = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
        if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
          if (awaitAt > -1) {
            if (this.type === types$1._in) {
              this.unexpected(awaitAt);
            }
            node2.await = true;
          } else if (isForOf && this.options.ecmaVersion >= 8) {
            if (init2.start === initPos && !containsEsc && init2.type === "Identifier" && init2.name === "async") {
              this.unexpected();
            } else if (this.options.ecmaVersion >= 9) {
              node2.await = false;
            }
          }
          if (startsWithLet && isForOf) {
            this.raise(init2.start, "The left-hand side of a for-of loop may not start with 'let'.");
          }
          this.toAssignable(init2, false, refDestructuringErrors);
          this.checkLValPattern(init2);
          return this.parseForIn(node2, init2);
        } else {
          this.checkExpressionErrors(refDestructuringErrors, true);
        }
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node2, init2);
      };
      pp$8.parseForAfterInit = function(node2, init2, awaitAt) {
        if ((this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init2.declarations.length === 1) {
          if (this.options.ecmaVersion >= 9) {
            if (this.type === types$1._in) {
              if (awaitAt > -1) {
                this.unexpected(awaitAt);
              }
            } else {
              node2.await = awaitAt > -1;
            }
          }
          return this.parseForIn(node2, init2);
        }
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node2, init2);
      };
      pp$8.parseFunctionStatement = function(node2, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node2, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
      };
      pp$8.parseIfStatement = function(node2) {
        this.next();
        node2.test = this.parseParenExpression();
        node2.consequent = this.parseStatement("if");
        node2.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
        return this.finishNode(node2, "IfStatement");
      };
      pp$8.parseReturnStatement = function(node2) {
        if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
          this.raise(this.start, "'return' outside of function");
        }
        this.next();
        if (this.eat(types$1.semi) || this.insertSemicolon()) {
          node2.argument = null;
        } else {
          node2.argument = this.parseExpression();
          this.semicolon();
        }
        return this.finishNode(node2, "ReturnStatement");
      };
      pp$8.parseSwitchStatement = function(node2) {
        this.next();
        node2.discriminant = this.parseParenExpression();
        node2.cases = [];
        this.expect(types$1.braceL);
        this.labels.push(switchLabel);
        this.enterScope(0);
        var cur;
        for (var sawDefault = false; this.type !== types$1.braceR; ) {
          if (this.type === types$1._case || this.type === types$1._default) {
            var isCase = this.type === types$1._case;
            if (cur) {
              this.finishNode(cur, "SwitchCase");
            }
            node2.cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();
            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
              }
              sawDefault = true;
              cur.test = null;
            }
            this.expect(types$1.colon);
          } else {
            if (!cur) {
              this.unexpected();
            }
            cur.consequent.push(this.parseStatement(null));
          }
        }
        this.exitScope();
        if (cur) {
          this.finishNode(cur, "SwitchCase");
        }
        this.next();
        this.labels.pop();
        return this.finishNode(node2, "SwitchStatement");
      };
      pp$8.parseThrowStatement = function(node2) {
        this.next();
        if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
          this.raise(this.lastTokEnd, "Illegal newline after throw");
        }
        node2.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node2, "ThrowStatement");
      };
      var empty$1 = [];
      pp$8.parseCatchClauseParam = function() {
        var param = this.parseBindingAtom();
        var simple = param.type === "Identifier";
        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
        this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
        this.expect(types$1.parenR);
        return param;
      };
      pp$8.parseTryStatement = function(node2) {
        this.next();
        node2.block = this.parseBlock();
        node2.handler = null;
        if (this.type === types$1._catch) {
          var clause = this.startNode();
          this.next();
          if (this.eat(types$1.parenL)) {
            clause.param = this.parseCatchClauseParam();
          } else {
            if (this.options.ecmaVersion < 10) {
              this.unexpected();
            }
            clause.param = null;
            this.enterScope(0);
          }
          clause.body = this.parseBlock(false);
          this.exitScope();
          node2.handler = this.finishNode(clause, "CatchClause");
        }
        node2.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
        if (!node2.handler && !node2.finalizer) {
          this.raise(node2.start, "Missing catch or finally clause");
        }
        return this.finishNode(node2, "TryStatement");
      };
      pp$8.parseVarStatement = function(node2, kind, allowMissingInitializer) {
        this.next();
        this.parseVar(node2, false, kind, allowMissingInitializer);
        this.semicolon();
        return this.finishNode(node2, "VariableDeclaration");
      };
      pp$8.parseWhileStatement = function(node2) {
        this.next();
        node2.test = this.parseParenExpression();
        this.labels.push(loopLabel);
        node2.body = this.parseStatement("while");
        this.labels.pop();
        return this.finishNode(node2, "WhileStatement");
      };
      pp$8.parseWithStatement = function(node2) {
        if (this.strict) {
          this.raise(this.start, "'with' in strict mode");
        }
        this.next();
        node2.object = this.parseParenExpression();
        node2.body = this.parseStatement("with");
        return this.finishNode(node2, "WithStatement");
      };
      pp$8.parseEmptyStatement = function(node2) {
        this.next();
        return this.finishNode(node2, "EmptyStatement");
      };
      pp$8.parseLabeledStatement = function(node2, maybeName, expr, context) {
        for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
          var label = list2[i$1];
          if (label.name === maybeName) {
            this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
        }
        var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
        for (var i3 = this.labels.length - 1; i3 >= 0; i3--) {
          var label$1 = this.labels[i3];
          if (label$1.statementStart === node2.start) {
            label$1.statementStart = this.start;
            label$1.kind = kind;
          } else {
            break;
          }
        }
        this.labels.push({ name: maybeName, kind, statementStart: this.start });
        node2.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.labels.pop();
        node2.label = expr;
        return this.finishNode(node2, "LabeledStatement");
      };
      pp$8.parseExpressionStatement = function(node2, expr) {
        node2.expression = expr;
        this.semicolon();
        return this.finishNode(node2, "ExpressionStatement");
      };
      pp$8.parseBlock = function(createNewLexicalScope, node2, exitStrict) {
        if (createNewLexicalScope === void 0) createNewLexicalScope = true;
        if (node2 === void 0) node2 = this.startNode();
        node2.body = [];
        this.expect(types$1.braceL);
        if (createNewLexicalScope) {
          this.enterScope(0);
        }
        while (this.type !== types$1.braceR) {
          var stmt = this.parseStatement(null);
          node2.body.push(stmt);
        }
        if (exitStrict) {
          this.strict = false;
        }
        this.next();
        if (createNewLexicalScope) {
          this.exitScope();
        }
        return this.finishNode(node2, "BlockStatement");
      };
      pp$8.parseFor = function(node2, init2) {
        node2.init = init2;
        this.expect(types$1.semi);
        node2.test = this.type === types$1.semi ? null : this.parseExpression();
        this.expect(types$1.semi);
        node2.update = this.type === types$1.parenR ? null : this.parseExpression();
        this.expect(types$1.parenR);
        node2.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node2, "ForStatement");
      };
      pp$8.parseForIn = function(node2, init2) {
        var isForIn = this.type === types$1._in;
        this.next();
        if (init2.type === "VariableDeclaration" && init2.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init2.kind !== "var" || init2.declarations[0].id.type !== "Identifier")) {
          this.raise(
            init2.start,
            (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
          );
        }
        node2.left = init2;
        node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
        this.expect(types$1.parenR);
        node2.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
      };
      pp$8.parseVar = function(node2, isFor, kind, allowMissingInitializer) {
        node2.declarations = [];
        node2.kind = kind;
        for (; ; ) {
          var decl = this.startNode();
          this.parseVarId(decl, kind);
          if (this.eat(types$1.eq)) {
            decl.init = this.parseMaybeAssign(isFor);
          } else if (!allowMissingInitializer && kind === "const" && !(this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
            this.unexpected();
          } else if (!allowMissingInitializer && (kind === "using" || kind === "await using") && this.options.ecmaVersion >= 17 && this.type !== types$1._in && !this.isContextual("of")) {
            this.raise(this.lastTokEnd, "Missing initializer in " + kind + " declaration");
          } else if (!allowMissingInitializer && decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {
            this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
          } else {
            decl.init = null;
          }
          node2.declarations.push(this.finishNode(decl, "VariableDeclarator"));
          if (!this.eat(types$1.comma)) {
            break;
          }
        }
        return node2;
      };
      pp$8.parseVarId = function(decl, kind) {
        decl.id = kind === "using" || kind === "await using" ? this.parseIdent() : this.parseBindingAtom();
        this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
      };
      var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;
      pp$8.parseFunction = function(node2, statement, allowExpressionBody, isAsync, forInit) {
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
          if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) {
            this.unexpected();
          }
          node2.generator = this.eat(types$1.star);
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        if (statement & FUNC_STATEMENT) {
          node2.id = statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent();
          if (node2.id && !(statement & FUNC_HANGING_STATEMENT)) {
            this.checkLValSimple(node2.id, this.strict || node2.generator || node2.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
          }
        }
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags(node2.async, node2.generator));
        if (!(statement & FUNC_STATEMENT)) {
          node2.id = this.type === types$1.name ? this.parseIdent() : null;
        }
        this.parseFunctionParams(node2);
        this.parseFunctionBody(node2, allowExpressionBody, false, forInit);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
      };
      pp$8.parseFunctionParams = function(node2) {
        this.expect(types$1.parenL);
        node2.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
      };
      pp$8.parseClass = function(node2, isStatement) {
        this.next();
        var oldStrict = this.strict;
        this.strict = true;
        this.parseClassId(node2, isStatement);
        this.parseClassSuper(node2);
        var privateNameMap = this.enterClassBody();
        var classBody = this.startNode();
        var hadConstructor = false;
        classBody.body = [];
        this.expect(types$1.braceL);
        while (this.type !== types$1.braceR) {
          var element = this.parseClassElement(node2.superClass !== null);
          if (element) {
            classBody.body.push(element);
            if (element.type === "MethodDefinition" && element.kind === "constructor") {
              if (hadConstructor) {
                this.raiseRecoverable(element.start, "Duplicate constructor in the same class");
              }
              hadConstructor = true;
            } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
              this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared");
            }
          }
        }
        this.strict = oldStrict;
        this.next();
        node2.body = this.finishNode(classBody, "ClassBody");
        this.exitClassBody();
        return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
      };
      pp$8.parseClassElement = function(constructorAllowsSuper) {
        if (this.eat(types$1.semi)) {
          return null;
        }
        var ecmaVersion3 = this.options.ecmaVersion;
        var node2 = this.startNode();
        var keyName = "";
        var isGenerator = false;
        var isAsync = false;
        var kind = "method";
        var isStatic = false;
        if (this.eatContextual("static")) {
          if (ecmaVersion3 >= 13 && this.eat(types$1.braceL)) {
            this.parseClassStaticBlock(node2);
            return node2;
          }
          if (this.isClassElementNameStart() || this.type === types$1.star) {
            isStatic = true;
          } else {
            keyName = "static";
          }
        }
        node2.static = isStatic;
        if (!keyName && ecmaVersion3 >= 8 && this.eatContextual("async")) {
          if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {
            isAsync = true;
          } else {
            keyName = "async";
          }
        }
        if (!keyName && (ecmaVersion3 >= 9 || !isAsync) && this.eat(types$1.star)) {
          isGenerator = true;
        }
        if (!keyName && !isAsync && !isGenerator) {
          var lastValue = this.value;
          if (this.eatContextual("get") || this.eatContextual("set")) {
            if (this.isClassElementNameStart()) {
              kind = lastValue;
            } else {
              keyName = lastValue;
            }
          }
        }
        if (keyName) {
          node2.computed = false;
          node2.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
          node2.key.name = keyName;
          this.finishNode(node2.key, "Identifier");
        } else {
          this.parseClassElementName(node2);
        }
        if (ecmaVersion3 < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
          var isConstructor = !node2.static && checkKeyName(node2, "constructor");
          var allowsDirectSuper = isConstructor && constructorAllowsSuper;
          if (isConstructor && kind !== "method") {
            this.raise(node2.key.start, "Constructor can't have get/set modifier");
          }
          node2.kind = isConstructor ? "constructor" : kind;
          this.parseClassMethod(node2, isGenerator, isAsync, allowsDirectSuper);
        } else {
          this.parseClassField(node2);
        }
        return node2;
      };
      pp$8.isClassElementNameStart = function() {
        return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
      };
      pp$8.parseClassElementName = function(element) {
        if (this.type === types$1.privateId) {
          if (this.value === "constructor") {
            this.raise(this.start, "Classes can't have an element named '#constructor'");
          }
          element.computed = false;
          element.key = this.parsePrivateIdent();
        } else {
          this.parsePropertyName(element);
        }
      };
      pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
        var key = method.key;
        if (method.kind === "constructor") {
          if (isGenerator) {
            this.raise(key.start, "Constructor can't be a generator");
          }
          if (isAsync) {
            this.raise(key.start, "Constructor can't be an async method");
          }
        } else if (method.static && checkKeyName(method, "prototype")) {
          this.raise(key.start, "Classes may not have a static property named prototype");
        }
        var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
        if (method.kind === "get" && value.params.length !== 0) {
          this.raiseRecoverable(value.start, "getter should have no params");
        }
        if (method.kind === "set" && value.params.length !== 1) {
          this.raiseRecoverable(value.start, "setter should have exactly one param");
        }
        if (method.kind === "set" && value.params[0].type === "RestElement") {
          this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
        }
        return this.finishNode(method, "MethodDefinition");
      };
      pp$8.parseClassField = function(field) {
        if (checkKeyName(field, "constructor")) {
          this.raise(field.key.start, "Classes can't have a field named 'constructor'");
        } else if (field.static && checkKeyName(field, "prototype")) {
          this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
        }
        if (this.eat(types$1.eq)) {
          this.enterScope(SCOPE_CLASS_FIELD_INIT | SCOPE_SUPER);
          field.value = this.parseMaybeAssign();
          this.exitScope();
        } else {
          field.value = null;
        }
        this.semicolon();
        return this.finishNode(field, "PropertyDefinition");
      };
      pp$8.parseClassStaticBlock = function(node2) {
        node2.body = [];
        var oldLabels = this.labels;
        this.labels = [];
        this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
        while (this.type !== types$1.braceR) {
          var stmt = this.parseStatement(null);
          node2.body.push(stmt);
        }
        this.next();
        this.exitScope();
        this.labels = oldLabels;
        return this.finishNode(node2, "StaticBlock");
      };
      pp$8.parseClassId = function(node2, isStatement) {
        if (this.type === types$1.name) {
          node2.id = this.parseIdent();
          if (isStatement) {
            this.checkLValSimple(node2.id, BIND_LEXICAL, false);
          }
        } else {
          if (isStatement === true) {
            this.unexpected();
          }
          node2.id = null;
        }
      };
      pp$8.parseClassSuper = function(node2) {
        node2.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
      };
      pp$8.enterClassBody = function() {
        var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
        this.privateNameStack.push(element);
        return element.declared;
      };
      pp$8.exitClassBody = function() {
        var ref3 = this.privateNameStack.pop();
        var declared = ref3.declared;
        var used = ref3.used;
        if (!this.options.checkPrivateFields) {
          return;
        }
        var len = this.privateNameStack.length;
        var parent = len === 0 ? null : this.privateNameStack[len - 1];
        for (var i3 = 0; i3 < used.length; ++i3) {
          var id2 = used[i3];
          if (!hasOwn(declared, id2.name)) {
            if (parent) {
              parent.used.push(id2);
            } else {
              this.raiseRecoverable(id2.start, "Private field '#" + id2.name + "' must be declared in an enclosing class");
            }
          }
        }
      };
      function isPrivateNameConflicted(privateNameMap, element) {
        var name = element.key.name;
        var curr = privateNameMap[name];
        var next = "true";
        if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
          next = (element.static ? "s" : "i") + element.kind;
        }
        if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
          privateNameMap[name] = "true";
          return false;
        } else if (!curr) {
          privateNameMap[name] = next;
          return false;
        } else {
          return true;
        }
      }
      function checkKeyName(node2, name) {
        var computed = node2.computed;
        var key = node2.key;
        return !computed && (key.type === "Identifier" && key.name === name || key.type === "Literal" && key.value === name);
      }
      pp$8.parseExportAllDeclaration = function(node2, exports3) {
        if (this.options.ecmaVersion >= 11) {
          if (this.eatContextual("as")) {
            node2.exported = this.parseModuleExportName();
            this.checkExport(exports3, node2.exported, this.lastTokStart);
          } else {
            node2.exported = null;
          }
        }
        this.expectContextual("from");
        if (this.type !== types$1.string) {
          this.unexpected();
        }
        node2.source = this.parseExprAtom();
        if (this.options.ecmaVersion >= 16) {
          node2.attributes = this.parseWithClause();
        }
        this.semicolon();
        return this.finishNode(node2, "ExportAllDeclaration");
      };
      pp$8.parseExport = function(node2, exports3) {
        this.next();
        if (this.eat(types$1.star)) {
          return this.parseExportAllDeclaration(node2, exports3);
        }
        if (this.eat(types$1._default)) {
          this.checkExport(exports3, "default", this.lastTokStart);
          node2.declaration = this.parseExportDefaultDeclaration();
          return this.finishNode(node2, "ExportDefaultDeclaration");
        }
        if (this.shouldParseExportStatement()) {
          node2.declaration = this.parseExportDeclaration(node2);
          if (node2.declaration.type === "VariableDeclaration") {
            this.checkVariableExport(exports3, node2.declaration.declarations);
          } else {
            this.checkExport(exports3, node2.declaration.id, node2.declaration.id.start);
          }
          node2.specifiers = [];
          node2.source = null;
          if (this.options.ecmaVersion >= 16) {
            node2.attributes = [];
          }
        } else {
          node2.declaration = null;
          node2.specifiers = this.parseExportSpecifiers(exports3);
          if (this.eatContextual("from")) {
            if (this.type !== types$1.string) {
              this.unexpected();
            }
            node2.source = this.parseExprAtom();
            if (this.options.ecmaVersion >= 16) {
              node2.attributes = this.parseWithClause();
            }
          } else {
            for (var i3 = 0, list2 = node2.specifiers; i3 < list2.length; i3 += 1) {
              var spec = list2[i3];
              this.checkUnreserved(spec.local);
              this.checkLocalExport(spec.local);
              if (spec.local.type === "Literal") {
                this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
            }
            node2.source = null;
            if (this.options.ecmaVersion >= 16) {
              node2.attributes = [];
            }
          }
          this.semicolon();
        }
        return this.finishNode(node2, "ExportNamedDeclaration");
      };
      pp$8.parseExportDeclaration = function(node2) {
        return this.parseStatement(null);
      };
      pp$8.parseExportDefaultDeclaration = function() {
        var isAsync;
        if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
          var fNode = this.startNode();
          this.next();
          if (isAsync) {
            this.next();
          }
          return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
        } else if (this.type === types$1._class) {
          var cNode = this.startNode();
          return this.parseClass(cNode, "nullableID");
        } else {
          var declaration = this.parseMaybeAssign();
          this.semicolon();
          return declaration;
        }
      };
      pp$8.checkExport = function(exports3, name, pos) {
        if (!exports3) {
          return;
        }
        if (typeof name !== "string") {
          name = name.type === "Identifier" ? name.name : name.value;
        }
        if (hasOwn(exports3, name)) {
          this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
        }
        exports3[name] = true;
      };
      pp$8.checkPatternExport = function(exports3, pat) {
        var type2 = pat.type;
        if (type2 === "Identifier") {
          this.checkExport(exports3, pat, pat.start);
        } else if (type2 === "ObjectPattern") {
          for (var i3 = 0, list2 = pat.properties; i3 < list2.length; i3 += 1) {
            var prop = list2[i3];
            this.checkPatternExport(exports3, prop);
          }
        } else if (type2 === "ArrayPattern") {
          for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            if (elt) {
              this.checkPatternExport(exports3, elt);
            }
          }
        } else if (type2 === "Property") {
          this.checkPatternExport(exports3, pat.value);
        } else if (type2 === "AssignmentPattern") {
          this.checkPatternExport(exports3, pat.left);
        } else if (type2 === "RestElement") {
          this.checkPatternExport(exports3, pat.argument);
        }
      };
      pp$8.checkVariableExport = function(exports3, decls) {
        if (!exports3) {
          return;
        }
        for (var i3 = 0, list2 = decls; i3 < list2.length; i3 += 1) {
          var decl = list2[i3];
          this.checkPatternExport(exports3, decl.id);
        }
      };
      pp$8.shouldParseExportStatement = function() {
        return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
      };
      pp$8.parseExportSpecifier = function(exports3) {
        var node2 = this.startNode();
        node2.local = this.parseModuleExportName();
        node2.exported = this.eatContextual("as") ? this.parseModuleExportName() : node2.local;
        this.checkExport(
          exports3,
          node2.exported,
          node2.exported.start
        );
        return this.finishNode(node2, "ExportSpecifier");
      };
      pp$8.parseExportSpecifiers = function(exports3) {
        var nodes = [], first = true;
        this.expect(types$1.braceL);
        while (!this.eat(types$1.braceR)) {
          if (!first) {
            this.expect(types$1.comma);
            if (this.afterTrailingComma(types$1.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          nodes.push(this.parseExportSpecifier(exports3));
        }
        return nodes;
      };
      pp$8.parseImport = function(node2) {
        this.next();
        if (this.type === types$1.string) {
          node2.specifiers = empty$1;
          node2.source = this.parseExprAtom();
        } else {
          node2.specifiers = this.parseImportSpecifiers();
          this.expectContextual("from");
          node2.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
        }
        if (this.options.ecmaVersion >= 16) {
          node2.attributes = this.parseWithClause();
        }
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      };
      pp$8.parseImportSpecifier = function() {
        var node2 = this.startNode();
        node2.imported = this.parseModuleExportName();
        if (this.eatContextual("as")) {
          node2.local = this.parseIdent();
        } else {
          this.checkUnreserved(node2.imported);
          node2.local = node2.imported;
        }
        this.checkLValSimple(node2.local, BIND_LEXICAL);
        return this.finishNode(node2, "ImportSpecifier");
      };
      pp$8.parseImportDefaultSpecifier = function() {
        var node2 = this.startNode();
        node2.local = this.parseIdent();
        this.checkLValSimple(node2.local, BIND_LEXICAL);
        return this.finishNode(node2, "ImportDefaultSpecifier");
      };
      pp$8.parseImportNamespaceSpecifier = function() {
        var node2 = this.startNode();
        this.next();
        this.expectContextual("as");
        node2.local = this.parseIdent();
        this.checkLValSimple(node2.local, BIND_LEXICAL);
        return this.finishNode(node2, "ImportNamespaceSpecifier");
      };
      pp$8.parseImportSpecifiers = function() {
        var nodes = [], first = true;
        if (this.type === types$1.name) {
          nodes.push(this.parseImportDefaultSpecifier());
          if (!this.eat(types$1.comma)) {
            return nodes;
          }
        }
        if (this.type === types$1.star) {
          nodes.push(this.parseImportNamespaceSpecifier());
          return nodes;
        }
        this.expect(types$1.braceL);
        while (!this.eat(types$1.braceR)) {
          if (!first) {
            this.expect(types$1.comma);
            if (this.afterTrailingComma(types$1.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          nodes.push(this.parseImportSpecifier());
        }
        return nodes;
      };
      pp$8.parseWithClause = function() {
        var nodes = [];
        if (!this.eat(types$1._with)) {
          return nodes;
        }
        this.expect(types$1.braceL);
        var attributeKeys = {};
        var first = true;
        while (!this.eat(types$1.braceR)) {
          if (!first) {
            this.expect(types$1.comma);
            if (this.afterTrailingComma(types$1.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var attr = this.parseImportAttribute();
          var keyName = attr.key.type === "Identifier" ? attr.key.name : attr.key.value;
          if (hasOwn(attributeKeys, keyName)) {
            this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'");
          }
          attributeKeys[keyName] = true;
          nodes.push(attr);
        }
        return nodes;
      };
      pp$8.parseImportAttribute = function() {
        var node2 = this.startNode();
        node2.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
        this.expect(types$1.colon);
        if (this.type !== types$1.string) {
          this.unexpected();
        }
        node2.value = this.parseExprAtom();
        return this.finishNode(node2, "ImportAttribute");
      };
      pp$8.parseModuleExportName = function() {
        if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
          var stringLiteral = this.parseLiteral(this.value);
          if (loneSurrogate.test(stringLiteral.value)) {
            this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
          }
          return stringLiteral;
        }
        return this.parseIdent(true);
      };
      pp$8.adaptDirectivePrologue = function(statements) {
        for (var i3 = 0; i3 < statements.length && this.isDirectiveCandidate(statements[i3]); ++i3) {
          statements[i3].directive = statements[i3].expression.raw.slice(1, -1);
        }
      };
      pp$8.isDirectiveCandidate = function(statement) {
        return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && // Reject parenthesized strings.
        (this.input[statement.start] === '"' || this.input[statement.start] === "'");
      };
      var pp$7 = Parser.prototype;
      pp$7.toAssignable = function(node2, isBinding, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 6 && node2) {
          switch (node2.type) {
            case "Identifier":
              if (this.inAsync && node2.name === "await") {
                this.raise(node2.start, "Cannot use 'await' as identifier inside an async function");
              }
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node2.type = "ObjectPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              for (var i3 = 0, list2 = node2.properties; i3 < list2.length; i3 += 1) {
                var prop = list2[i3];
                this.toAssignable(prop, isBinding);
                if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                  this.raise(prop.argument.start, "Unexpected token");
                }
              }
              break;
            case "Property":
              if (node2.kind !== "init") {
                this.raise(node2.key.start, "Object pattern can't contain getter or setter");
              }
              this.toAssignable(node2.value, isBinding);
              break;
            case "ArrayExpression":
              node2.type = "ArrayPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              this.toAssignableList(node2.elements, isBinding);
              break;
            case "SpreadElement":
              node2.type = "RestElement";
              this.toAssignable(node2.argument, isBinding);
              if (node2.argument.type === "AssignmentPattern") {
                this.raise(node2.argument.start, "Rest elements cannot have a default value");
              }
              break;
            case "AssignmentExpression":
              if (node2.operator !== "=") {
                this.raise(node2.left.end, "Only '=' operator can be used for specifying default value.");
              }
              node2.type = "AssignmentPattern";
              delete node2.operator;
              this.toAssignable(node2.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node2.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node2.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) {
                break;
              }
            default:
              this.raise(node2.start, "Assigning to rvalue");
          }
        } else if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        return node2;
      };
      pp$7.toAssignableList = function(exprList, isBinding) {
        var end = exprList.length;
        for (var i3 = 0; i3 < end; i3++) {
          var elt = exprList[i3];
          if (elt) {
            this.toAssignable(elt, isBinding);
          }
        }
        if (end) {
          var last = exprList[end - 1];
          if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
            this.unexpected(last.argument.start);
          }
        }
        return exprList;
      };
      pp$7.parseSpread = function(refDestructuringErrors) {
        var node2 = this.startNode();
        this.next();
        node2.argument = this.parseMaybeAssign(false, refDestructuringErrors);
        return this.finishNode(node2, "SpreadElement");
      };
      pp$7.parseRestBinding = function() {
        var node2 = this.startNode();
        this.next();
        if (this.options.ecmaVersion === 6 && this.type !== types$1.name) {
          this.unexpected();
        }
        node2.argument = this.parseBindingAtom();
        return this.finishNode(node2, "RestElement");
      };
      pp$7.parseBindingAtom = function() {
        if (this.options.ecmaVersion >= 6) {
          switch (this.type) {
            case types$1.bracketL:
              var node2 = this.startNode();
              this.next();
              node2.elements = this.parseBindingList(types$1.bracketR, true, true);
              return this.finishNode(node2, "ArrayPattern");
            case types$1.braceL:
              return this.parseObj(true);
          }
        }
        return this.parseIdent();
      };
      pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(types$1.comma);
          }
          if (allowEmpty && this.type === types$1.comma) {
            elts.push(null);
          } else if (allowTrailingComma && this.afterTrailingComma(close)) {
            break;
          } else if (this.type === types$1.ellipsis) {
            var rest = this.parseRestBinding();
            this.parseBindingListItem(rest);
            elts.push(rest);
            if (this.type === types$1.comma) {
              this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
            }
            this.expect(close);
            break;
          } else {
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
        }
        return elts;
      };
      pp$7.parseAssignableListItem = function(allowModifiers) {
        var elem = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(elem);
        return elem;
      };
      pp$7.parseBindingListItem = function(param) {
        return param;
      };
      pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
        left = left || this.parseBindingAtom();
        if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) {
          return left;
        }
        var node2 = this.startNodeAt(startPos, startLoc);
        node2.left = left;
        node2.right = this.parseMaybeAssign();
        return this.finishNode(node2, "AssignmentPattern");
      };
      pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0) bindingType = BIND_NONE;
        var isBind = bindingType !== BIND_NONE;
        switch (expr.type) {
          case "Identifier":
            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
              this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
            }
            if (isBind) {
              if (bindingType === BIND_LEXICAL && expr.name === "let") {
                this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
              }
              if (checkClashes) {
                if (hasOwn(checkClashes, expr.name)) {
                  this.raiseRecoverable(expr.start, "Argument name clash");
                }
                checkClashes[expr.name] = true;
              }
              if (bindingType !== BIND_OUTSIDE) {
                this.declareName(expr.name, bindingType, expr.start);
              }
            }
            break;
          case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
          case "MemberExpression":
            if (isBind) {
              this.raiseRecoverable(expr.start, "Binding member expression");
            }
            break;
          case "ParenthesizedExpression":
            if (isBind) {
              this.raiseRecoverable(expr.start, "Binding parenthesized expression");
            }
            return this.checkLValSimple(expr.expression, bindingType, checkClashes);
          default:
            this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
        }
      };
      pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0) bindingType = BIND_NONE;
        switch (expr.type) {
          case "ObjectPattern":
            for (var i3 = 0, list2 = expr.properties; i3 < list2.length; i3 += 1) {
              var prop = list2[i3];
              this.checkLValInnerPattern(prop, bindingType, checkClashes);
            }
            break;
          case "ArrayPattern":
            for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
              var elem = list$1[i$1];
              if (elem) {
                this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
            }
            break;
          default:
            this.checkLValSimple(expr, bindingType, checkClashes);
        }
      };
      pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0) bindingType = BIND_NONE;
        switch (expr.type) {
          case "Property":
            this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
            break;
          case "AssignmentPattern":
            this.checkLValPattern(expr.left, bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLValPattern(expr.argument, bindingType, checkClashes);
            break;
          default:
            this.checkLValPattern(expr, bindingType, checkClashes);
        }
      };
      var TokContext = function TokContext2(token, isExpr, preserveSpace, override, generator) {
        this.token = token;
        this.isExpr = !!isExpr;
        this.preserveSpace = !!preserveSpace;
        this.override = override;
        this.generator = !!generator;
      };
      var types = {
        b_stat: new TokContext("{", false),
        b_expr: new TokContext("{", true),
        b_tmpl: new TokContext("${", false),
        p_stat: new TokContext("(", false),
        p_expr: new TokContext("(", true),
        q_tmpl: new TokContext("`", true, true, function(p2) {
          return p2.tryReadTemplateToken();
        }),
        f_stat: new TokContext("function", false),
        f_expr: new TokContext("function", true),
        f_expr_gen: new TokContext("function", true, false, null, true),
        f_gen: new TokContext("function", false, false, null, true)
      };
      var pp$6 = Parser.prototype;
      pp$6.initialContext = function() {
        return [types.b_stat];
      };
      pp$6.curContext = function() {
        return this.context[this.context.length - 1];
      };
      pp$6.braceIsBlock = function(prevType) {
        var parent = this.curContext();
        if (parent === types.f_expr || parent === types.f_stat) {
          return true;
        }
        if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) {
          return !parent.isExpr;
        }
        if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed) {
          return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }
        if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {
          return true;
        }
        if (prevType === types$1.braceL) {
          return parent === types.b_stat;
        }
        if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {
          return false;
        }
        return !this.exprAllowed;
      };
      pp$6.inGeneratorContext = function() {
        for (var i3 = this.context.length - 1; i3 >= 1; i3--) {
          var context = this.context[i3];
          if (context.token === "function") {
            return context.generator;
          }
        }
        return false;
      };
      pp$6.updateContext = function(prevType) {
        var update, type2 = this.type;
        if (type2.keyword && prevType === types$1.dot) {
          this.exprAllowed = false;
        } else if (update = type2.updateContext) {
          update.call(this, prevType);
        } else {
          this.exprAllowed = type2.beforeExpr;
        }
      };
      pp$6.overrideContext = function(tokenCtx) {
        if (this.curContext() !== tokenCtx) {
          this.context[this.context.length - 1] = tokenCtx;
        }
      };
      types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
        if (this.context.length === 1) {
          this.exprAllowed = true;
          return;
        }
        var out = this.context.pop();
        if (out === types.b_stat && this.curContext().token === "function") {
          out = this.context.pop();
        }
        this.exprAllowed = !out.isExpr;
      };
      types$1.braceL.updateContext = function(prevType) {
        this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
        this.exprAllowed = true;
      };
      types$1.dollarBraceL.updateContext = function() {
        this.context.push(types.b_tmpl);
        this.exprAllowed = true;
      };
      types$1.parenL.updateContext = function(prevType) {
        var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
        this.context.push(statementParens ? types.p_stat : types.p_expr);
        this.exprAllowed = true;
      };
      types$1.incDec.updateContext = function() {
      };
      types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
        if (prevType.beforeExpr && prevType !== types$1._else && !(prevType === types$1.semi && this.curContext() !== types.p_stat) && !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {
          this.context.push(types.f_expr);
        } else {
          this.context.push(types.f_stat);
        }
        this.exprAllowed = false;
      };
      types$1.colon.updateContext = function() {
        if (this.curContext().token === "function") {
          this.context.pop();
        }
        this.exprAllowed = true;
      };
      types$1.backQuote.updateContext = function() {
        if (this.curContext() === types.q_tmpl) {
          this.context.pop();
        } else {
          this.context.push(types.q_tmpl);
        }
        this.exprAllowed = false;
      };
      types$1.star.updateContext = function(prevType) {
        if (prevType === types$1._function) {
          var index = this.context.length - 1;
          if (this.context[index] === types.f_expr) {
            this.context[index] = types.f_expr_gen;
          } else {
            this.context[index] = types.f_gen;
          }
        }
        this.exprAllowed = true;
      };
      types$1.name.updateContext = function(prevType) {
        var allowed = false;
        if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
          if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
            allowed = true;
          }
        }
        this.exprAllowed = allowed;
      };
      var pp$5 = Parser.prototype;
      pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
          return;
        }
        if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
          return;
        }
        var key = prop.key;
        var name;
        switch (key.type) {
          case "Identifier":
            name = key.name;
            break;
          case "Literal":
            name = String(key.value);
            break;
          default:
            return;
        }
        var kind = prop.kind;
        if (this.options.ecmaVersion >= 6) {
          if (name === "__proto__" && kind === "init") {
            if (propHash.proto) {
              if (refDestructuringErrors) {
                if (refDestructuringErrors.doubleProto < 0) {
                  refDestructuringErrors.doubleProto = key.start;
                }
              } else {
                this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
              }
            }
            propHash.proto = true;
          }
          return;
        }
        name = "$" + name;
        var other = propHash[name];
        if (other) {
          var redefinition;
          if (kind === "init") {
            redefinition = this.strict && other.init || other.get || other.set;
          } else {
            redefinition = other.init || other[kind];
          }
          if (redefinition) {
            this.raiseRecoverable(key.start, "Redefinition of property");
          }
        } else {
          other = propHash[name] = {
            init: false,
            get: false,
            set: false
          };
        }
        other[kind] = true;
      };
      pp$5.parseExpression = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
        if (this.type === types$1.comma) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.expressions = [expr];
          while (this.eat(types$1.comma)) {
            node2.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
          }
          return this.finishNode(node2, "SequenceExpression");
        }
        return expr;
      };
      pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
        if (this.isContextual("yield")) {
          if (this.inGenerator) {
            return this.parseYield(forInit);
          } else {
            this.exprAllowed = false;
          }
        }
        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
        if (refDestructuringErrors) {
          oldParenAssign = refDestructuringErrors.parenthesizedAssign;
          oldTrailingComma = refDestructuringErrors.trailingComma;
          oldDoubleProto = refDestructuringErrors.doubleProto;
          refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
        } else {
          refDestructuringErrors = new DestructuringErrors();
          ownDestructuringErrors = true;
        }
        var startPos = this.start, startLoc = this.startLoc;
        if (this.type === types$1.parenL || this.type === types$1.name) {
          this.potentialArrowAt = this.start;
          this.potentialArrowInForAwait = forInit === "await";
        }
        var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }
        if (this.type.isAssign) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.operator = this.value;
          if (this.type === types$1.eq) {
            left = this.toAssignable(left, false, refDestructuringErrors);
          }
          if (!ownDestructuringErrors) {
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
          }
          if (refDestructuringErrors.shorthandAssign >= left.start) {
            refDestructuringErrors.shorthandAssign = -1;
          }
          if (this.type === types$1.eq) {
            this.checkLValPattern(left);
          } else {
            this.checkLValSimple(left);
          }
          node2.left = left;
          this.next();
          node2.right = this.parseMaybeAssign(forInit);
          if (oldDoubleProto > -1) {
            refDestructuringErrors.doubleProto = oldDoubleProto;
          }
          return this.finishNode(node2, "AssignmentExpression");
        } else {
          if (ownDestructuringErrors) {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }
        }
        if (oldParenAssign > -1) {
          refDestructuringErrors.parenthesizedAssign = oldParenAssign;
        }
        if (oldTrailingComma > -1) {
          refDestructuringErrors.trailingComma = oldTrailingComma;
        }
        return left;
      };
      pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprOps(forInit, refDestructuringErrors);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        if (this.eat(types$1.question)) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.test = expr;
          node2.consequent = this.parseMaybeAssign();
          this.expect(types$1.colon);
          node2.alternate = this.parseMaybeAssign(forInit);
          return this.finishNode(node2, "ConditionalExpression");
        }
        return expr;
      };
      pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
      };
      pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
        var prec = this.type.binop;
        if (prec != null && (!forInit || this.type !== types$1._in)) {
          if (prec > minPrec) {
            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
            var coalesce = this.type === types$1.coalesce;
            if (coalesce) {
              prec = types$1.logicalAND.binop;
            }
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc;
            var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
            var node2 = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            if (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) {
              this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
            }
            return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec, forInit);
          }
        }
        return left;
      };
      pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
        if (right.type === "PrivateIdentifier") {
          this.raise(right.start, "Private identifier can only be left side of binary expression");
        }
        var node2 = this.startNodeAt(startPos, startLoc);
        node2.left = left;
        node2.operator = op;
        node2.right = right;
        return this.finishNode(node2, logical ? "LogicalExpression" : "BinaryExpression");
      };
      pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
        var startPos = this.start, startLoc = this.startLoc, expr;
        if (this.isContextual("await") && this.canAwait) {
          expr = this.parseAwait(forInit);
          sawUnary = true;
        } else if (this.type.prefix) {
          var node2 = this.startNode(), update = this.type === types$1.incDec;
          node2.operator = this.value;
          node2.prefix = true;
          this.next();
          node2.argument = this.parseMaybeUnary(null, true, update, forInit);
          this.checkExpressionErrors(refDestructuringErrors, true);
          if (update) {
            this.checkLValSimple(node2.argument);
          } else if (this.strict && node2.operator === "delete" && isLocalVariableAccess(node2.argument)) {
            this.raiseRecoverable(node2.start, "Deleting local variable in strict mode");
          } else if (node2.operator === "delete" && isPrivateFieldAccess(node2.argument)) {
            this.raiseRecoverable(node2.start, "Private fields can not be deleted");
          } else {
            sawUnary = true;
          }
          expr = this.finishNode(node2, update ? "UpdateExpression" : "UnaryExpression");
        } else if (!sawUnary && this.type === types$1.privateId) {
          if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) {
            this.unexpected();
          }
          expr = this.parsePrivateIdent();
          if (this.type !== types$1._in) {
            this.unexpected();
          }
        } else {
          expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          while (this.type.postfix && !this.canInsertSemicolon()) {
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.operator = this.value;
            node$1.prefix = false;
            node$1.argument = expr;
            this.checkLValSimple(expr);
            this.next();
            expr = this.finishNode(node$1, "UpdateExpression");
          }
        }
        if (!incDec && this.eat(types$1.starstar)) {
          if (sawUnary) {
            this.unexpected(this.lastTokStart);
          } else {
            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
          }
        } else {
          return expr;
        }
      };
      function isLocalVariableAccess(node2) {
        return node2.type === "Identifier" || node2.type === "ParenthesizedExpression" && isLocalVariableAccess(node2.expression);
      }
      function isPrivateFieldAccess(node2) {
        return node2.type === "MemberExpression" && node2.property.type === "PrivateIdentifier" || node2.type === "ChainExpression" && isPrivateFieldAccess(node2.expression) || node2.type === "ParenthesizedExpression" && isPrivateFieldAccess(node2.expression);
      }
      pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprAtom(refDestructuringErrors, forInit);
        if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
          return expr;
        }
        var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
        if (refDestructuringErrors && result.type === "MemberExpression") {
          if (refDestructuringErrors.parenthesizedAssign >= result.start) {
            refDestructuringErrors.parenthesizedAssign = -1;
          }
          if (refDestructuringErrors.parenthesizedBind >= result.start) {
            refDestructuringErrors.parenthesizedBind = -1;
          }
          if (refDestructuringErrors.trailingComma >= result.start) {
            refDestructuringErrors.trailingComma = -1;
          }
        }
        return result;
      };
      pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
        var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
        var optionalChained = false;
        while (true) {
          var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
          if (element.optional) {
            optionalChained = true;
          }
          if (element === base || element.type === "ArrowFunctionExpression") {
            if (optionalChained) {
              var chainNode = this.startNodeAt(startPos, startLoc);
              chainNode.expression = element;
              element = this.finishNode(chainNode, "ChainExpression");
            }
            return element;
          }
          base = element;
        }
      };
      pp$5.shouldParseAsyncArrow = function() {
        return !this.canInsertSemicolon() && this.eat(types$1.arrow);
      };
      pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
      };
      pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
        var optionalSupported = this.options.ecmaVersion >= 11;
        var optional = optionalSupported && this.eat(types$1.questionDot);
        if (noCalls && optional) {
          this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
        }
        var computed = this.eat(types$1.bracketL);
        if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.object = base;
          if (computed) {
            node2.property = this.parseExpression();
            this.expect(types$1.bracketR);
          } else if (this.type === types$1.privateId && base.type !== "Super") {
            node2.property = this.parsePrivateIdent();
          } else {
            node2.property = this.parseIdent(this.options.allowReserved !== "never");
          }
          node2.computed = !!computed;
          if (optionalSupported) {
            node2.optional = optional;
          }
          base = this.finishNode(node2, "MemberExpression");
        } else if (!noCalls && this.eat(types$1.parenL)) {
          var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
          if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            if (this.awaitIdentPos > 0) {
              this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
            }
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            this.awaitIdentPos = oldAwaitIdentPos;
            return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
          var node$1 = this.startNodeAt(startPos, startLoc);
          node$1.callee = base;
          node$1.arguments = exprList;
          if (optionalSupported) {
            node$1.optional = optional;
          }
          base = this.finishNode(node$1, "CallExpression");
        } else if (this.type === types$1.backQuote) {
          if (optional || optionalChained) {
            this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
          }
          var node$2 = this.startNodeAt(startPos, startLoc);
          node$2.tag = base;
          node$2.quasi = this.parseTemplate({ isTagged: true });
          base = this.finishNode(node$2, "TaggedTemplateExpression");
        }
        return base;
      };
      pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
        if (this.type === types$1.slash) {
          this.readRegexp();
        }
        var node2, canBeArrow = this.potentialArrowAt === this.start;
        switch (this.type) {
          case types$1._super:
            if (!this.allowSuper) {
              this.raise(this.start, "'super' keyword outside a method");
            }
            node2 = this.startNode();
            this.next();
            if (this.type === types$1.parenL && !this.allowDirectSuper) {
              this.raise(node2.start, "super() call outside constructor of a subclass");
            }
            if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL) {
              this.unexpected();
            }
            return this.finishNode(node2, "Super");
          case types$1._this:
            node2 = this.startNode();
            this.next();
            return this.finishNode(node2, "ThisExpression");
          case types$1.name:
            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
            var id2 = this.parseIdent(false);
            if (this.options.ecmaVersion >= 8 && !containsEsc && id2.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {
              this.overrideContext(types.f_expr);
              return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
            }
            if (canBeArrow && !this.canInsertSemicolon()) {
              if (this.eat(types$1.arrow)) {
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id2], false, forInit);
              }
              if (this.options.ecmaVersion >= 8 && id2.name === "async" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
                id2 = this.parseIdent(false);
                if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) {
                  this.unexpected();
                }
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id2], true, forInit);
              }
            }
            return id2;
          case types$1.regexp:
            var value = this.value;
            node2 = this.parseLiteral(value.value);
            node2.regex = { pattern: value.pattern, flags: value.flags };
            return node2;
          case types$1.num:
          case types$1.string:
            return this.parseLiteral(this.value);
          case types$1._null:
          case types$1._true:
          case types$1._false:
            node2 = this.startNode();
            node2.value = this.type === types$1._null ? null : this.type === types$1._true;
            node2.raw = this.type.keyword;
            this.next();
            return this.finishNode(node2, "Literal");
          case types$1.parenL:
            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
            if (refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                refDestructuringErrors.parenthesizedAssign = start;
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = start;
              }
            }
            return expr;
          case types$1.bracketL:
            node2 = this.startNode();
            this.next();
            node2.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
            return this.finishNode(node2, "ArrayExpression");
          case types$1.braceL:
            this.overrideContext(types.b_expr);
            return this.parseObj(false, refDestructuringErrors);
          case types$1._function:
            node2 = this.startNode();
            this.next();
            return this.parseFunction(node2, 0);
          case types$1._class:
            return this.parseClass(this.startNode(), false);
          case types$1._new:
            return this.parseNew();
          case types$1.backQuote:
            return this.parseTemplate();
          case types$1._import:
            if (this.options.ecmaVersion >= 11) {
              return this.parseExprImport(forNew);
            } else {
              return this.unexpected();
            }
          default:
            return this.parseExprAtomDefault();
        }
      };
      pp$5.parseExprAtomDefault = function() {
        this.unexpected();
      };
      pp$5.parseExprImport = function(forNew) {
        var node2 = this.startNode();
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword import");
        }
        this.next();
        if (this.type === types$1.parenL && !forNew) {
          return this.parseDynamicImport(node2);
        } else if (this.type === types$1.dot) {
          var meta = this.startNodeAt(node2.start, node2.loc && node2.loc.start);
          meta.name = "import";
          node2.meta = this.finishNode(meta, "Identifier");
          return this.parseImportMeta(node2);
        } else {
          this.unexpected();
        }
      };
      pp$5.parseDynamicImport = function(node2) {
        this.next();
        node2.source = this.parseMaybeAssign();
        if (this.options.ecmaVersion >= 16) {
          if (!this.eat(types$1.parenR)) {
            this.expect(types$1.comma);
            if (!this.afterTrailingComma(types$1.parenR)) {
              node2.options = this.parseMaybeAssign();
              if (!this.eat(types$1.parenR)) {
                this.expect(types$1.comma);
                if (!this.afterTrailingComma(types$1.parenR)) {
                  this.unexpected();
                }
              }
            } else {
              node2.options = null;
            }
          } else {
            node2.options = null;
          }
        } else {
          if (!this.eat(types$1.parenR)) {
            var errorPos = this.start;
            if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
              this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
            } else {
              this.unexpected(errorPos);
            }
          }
        }
        return this.finishNode(node2, "ImportExpression");
      };
      pp$5.parseImportMeta = function(node2) {
        this.next();
        var containsEsc = this.containsEsc;
        node2.property = this.parseIdent(true);
        if (node2.property.name !== "meta") {
          this.raiseRecoverable(node2.property.start, "The only valid meta property for import is 'import.meta'");
        }
        if (containsEsc) {
          this.raiseRecoverable(node2.start, "'import.meta' must not contain escaped characters");
        }
        if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) {
          this.raiseRecoverable(node2.start, "Cannot use 'import.meta' outside a module");
        }
        return this.finishNode(node2, "MetaProperty");
      };
      pp$5.parseLiteral = function(value) {
        var node2 = this.startNode();
        node2.value = value;
        node2.raw = this.input.slice(this.start, this.end);
        if (node2.raw.charCodeAt(node2.raw.length - 1) === 110) {
          node2.bigint = node2.value != null ? node2.value.toString() : node2.raw.slice(0, -1).replace(/_/g, "");
        }
        this.next();
        return this.finishNode(node2, "Literal");
      };
      pp$5.parseParenExpression = function() {
        this.expect(types$1.parenL);
        var val = this.parseExpression();
        this.expect(types$1.parenR);
        return val;
      };
      pp$5.shouldParseArrow = function(exprList) {
        return !this.canInsertSemicolon();
      };
      pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
        var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
        if (this.options.ecmaVersion >= 6) {
          this.next();
          var innerStartPos = this.start, innerStartLoc = this.startLoc;
          var exprList = [], first = true, lastIsComma = false;
          var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
          this.yieldPos = 0;
          this.awaitPos = 0;
          while (this.type !== types$1.parenR) {
            first ? first = false : this.expect(types$1.comma);
            if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
              lastIsComma = true;
              break;
            } else if (this.type === types$1.ellipsis) {
              spreadStart = this.start;
              exprList.push(this.parseParenItem(this.parseRestBinding()));
              if (this.type === types$1.comma) {
                this.raiseRecoverable(
                  this.start,
                  "Comma is not permitted after the rest element"
                );
              }
              break;
            } else {
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
          }
          var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
          this.expect(types$1.parenR);
          if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            return this.parseParenArrowList(startPos, startLoc, exprList, forInit);
          }
          if (!exprList.length || lastIsComma) {
            this.unexpected(this.lastTokStart);
          }
          if (spreadStart) {
            this.unexpected(spreadStart);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          if (exprList.length > 1) {
            val = this.startNodeAt(innerStartPos, innerStartLoc);
            val.expressions = exprList;
            this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
          } else {
            val = exprList[0];
          }
        } else {
          val = this.parseParenExpression();
        }
        if (this.options.preserveParens) {
          var par = this.startNodeAt(startPos, startLoc);
          par.expression = val;
          return this.finishNode(par, "ParenthesizedExpression");
        } else {
          return val;
        }
      };
      pp$5.parseParenItem = function(item) {
        return item;
      };
      pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
      };
      var empty = [];
      pp$5.parseNew = function() {
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword new");
        }
        var node2 = this.startNode();
        this.next();
        if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
          var meta = this.startNodeAt(node2.start, node2.loc && node2.loc.start);
          meta.name = "new";
          node2.meta = this.finishNode(meta, "Identifier");
          this.next();
          var containsEsc = this.containsEsc;
          node2.property = this.parseIdent(true);
          if (node2.property.name !== "target") {
            this.raiseRecoverable(node2.property.start, "The only valid meta property for new is 'new.target'");
          }
          if (containsEsc) {
            this.raiseRecoverable(node2.start, "'new.target' must not contain escaped characters");
          }
          if (!this.allowNewDotTarget) {
            this.raiseRecoverable(node2.start, "'new.target' can only be used in functions and class static block");
          }
          return this.finishNode(node2, "MetaProperty");
        }
        var startPos = this.start, startLoc = this.startLoc;
        node2.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);
        if (this.eat(types$1.parenL)) {
          node2.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false);
        } else {
          node2.arguments = empty;
        }
        return this.finishNode(node2, "NewExpression");
      };
      pp$5.parseTemplateElement = function(ref3) {
        var isTagged = ref3.isTagged;
        var elem = this.startNode();
        if (this.type === types$1.invalidTemplate) {
          if (!isTagged) {
            this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
          }
          elem.value = {
            raw: this.value.replace(/\r\n?/g, "\n"),
            cooked: null
          };
        } else {
          elem.value = {
            raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
            cooked: this.value
          };
        }
        this.next();
        elem.tail = this.type === types$1.backQuote;
        return this.finishNode(elem, "TemplateElement");
      };
      pp$5.parseTemplate = function(ref3) {
        if (ref3 === void 0) ref3 = {};
        var isTagged = ref3.isTagged;
        if (isTagged === void 0) isTagged = false;
        var node2 = this.startNode();
        this.next();
        node2.expressions = [];
        var curElt = this.parseTemplateElement({ isTagged });
        node2.quasis = [curElt];
        while (!curElt.tail) {
          if (this.type === types$1.eof) {
            this.raise(this.pos, "Unterminated template literal");
          }
          this.expect(types$1.dollarBraceL);
          node2.expressions.push(this.parseExpression());
          this.expect(types$1.braceR);
          node2.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
        }
        this.next();
        return this.finishNode(node2, "TemplateLiteral");
      };
      pp$5.isAsyncProp = function(prop) {
        return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp$5.parseObj = function(isPattern, refDestructuringErrors) {
        var node2 = this.startNode(), first = true, propHash = {};
        node2.properties = [];
        this.next();
        while (!this.eat(types$1.braceR)) {
          if (!first) {
            this.expect(types$1.comma);
            if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var prop = this.parseProperty(isPattern, refDestructuringErrors);
          if (!isPattern) {
            this.checkPropClash(prop, propHash, refDestructuringErrors);
          }
          node2.properties.push(prop);
        }
        return this.finishNode(node2, isPattern ? "ObjectPattern" : "ObjectExpression");
      };
      pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
        var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
        if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
          if (isPattern) {
            prop.argument = this.parseIdent(false);
            if (this.type === types$1.comma) {
              this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
            }
            return this.finishNode(prop, "RestElement");
          }
          prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
            refDestructuringErrors.trailingComma = this.start;
          }
          return this.finishNode(prop, "SpreadElement");
        }
        if (this.options.ecmaVersion >= 6) {
          prop.method = false;
          prop.shorthand = false;
          if (isPattern || refDestructuringErrors) {
            startPos = this.start;
            startLoc = this.startLoc;
          }
          if (!isPattern) {
            isGenerator = this.eat(types$1.star);
          }
        }
        var containsEsc = this.containsEsc;
        this.parsePropertyName(prop);
        if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
          isAsync = true;
          isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
          this.parsePropertyName(prop);
        } else {
          isAsync = false;
        }
        this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
        return this.finishNode(prop, "Property");
      };
      pp$5.parseGetterSetter = function(prop) {
        var kind = prop.key.name;
        this.parsePropertyName(prop);
        prop.value = this.parseMethod(false);
        prop.kind = kind;
        var paramCount = prop.kind === "get" ? 0 : 1;
        if (prop.value.params.length !== paramCount) {
          var start = prop.value.start;
          if (prop.kind === "get") {
            this.raiseRecoverable(start, "getter should have no params");
          } else {
            this.raiseRecoverable(start, "setter should have exactly one param");
          }
        } else {
          if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
            this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
          }
        }
      };
      pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
        if ((isGenerator || isAsync) && this.type === types$1.colon) {
          this.unexpected();
        }
        if (this.eat(types$1.colon)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
          prop.kind = "init";
        } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
          if (isPattern) {
            this.unexpected();
          }
          prop.method = true;
          prop.value = this.parseMethod(isGenerator, isAsync);
          prop.kind = "init";
        } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          this.parseGetterSetter(prop);
        } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          this.checkUnreserved(prop.key);
          if (prop.key.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = startPos;
          }
          if (isPattern) {
            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
          } else if (this.type === types$1.eq && refDestructuringErrors) {
            if (refDestructuringErrors.shorthandAssign < 0) {
              refDestructuringErrors.shorthandAssign = this.start;
            }
            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
          } else {
            prop.value = this.copyNode(prop.key);
          }
          prop.kind = "init";
          prop.shorthand = true;
        } else {
          this.unexpected();
        }
      };
      pp$5.parsePropertyName = function(prop) {
        if (this.options.ecmaVersion >= 6) {
          if (this.eat(types$1.bracketL)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssign();
            this.expect(types$1.bracketR);
            return prop.key;
          } else {
            prop.computed = false;
          }
        }
        return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
      };
      pp$5.initFunction = function(node2) {
        node2.id = null;
        if (this.options.ecmaVersion >= 6) {
          node2.generator = node2.expression = false;
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = false;
        }
      };
      pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
        var node2 = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 6) {
          node2.generator = isGenerator;
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags(isAsync, node2.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
        this.expect(types$1.parenL);
        node2.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
        this.parseFunctionBody(node2, false, true, false);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, "FunctionExpression");
      };
      pp$5.parseArrowExpression = function(node2, params, isAsync, forInit) {
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        node2.params = this.toAssignableList(params, true);
        this.parseFunctionBody(node2, true, false, forInit);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, "ArrowFunctionExpression");
      };
      pp$5.parseFunctionBody = function(node2, isArrowFunction, isMethod, forInit) {
        var isExpression = isArrowFunction && this.type !== types$1.braceL;
        var oldStrict = this.strict, useStrict = false;
        if (isExpression) {
          node2.body = this.parseMaybeAssign(forInit);
          node2.expression = true;
          this.checkParams(node2, false);
        } else {
          var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node2.params);
          if (!oldStrict || nonSimple) {
            useStrict = this.strictDirective(this.end);
            if (useStrict && nonSimple) {
              this.raiseRecoverable(node2.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            }
          }
          var oldLabels = this.labels;
          this.labels = [];
          if (useStrict) {
            this.strict = true;
          }
          this.checkParams(node2, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node2.params));
          if (this.strict && node2.id) {
            this.checkLValSimple(node2.id, BIND_OUTSIDE);
          }
          node2.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
          node2.expression = false;
          this.adaptDirectivePrologue(node2.body.body);
          this.labels = oldLabels;
        }
        this.exitScope();
      };
      pp$5.isSimpleParamList = function(params) {
        for (var i3 = 0, list2 = params; i3 < list2.length; i3 += 1) {
          var param = list2[i3];
          if (param.type !== "Identifier") {
            return false;
          }
        }
        return true;
      };
      pp$5.checkParams = function(node2, allowDuplicates) {
        var nameHash = /* @__PURE__ */ Object.create(null);
        for (var i3 = 0, list2 = node2.params; i3 < list2.length; i3 += 1) {
          var param = list2[i3];
          this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
        }
      };
      pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (!first) {
            this.expect(types$1.comma);
            if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            }
          } else {
            first = false;
          }
          var elt = void 0;
          if (allowEmpty && this.type === types$1.comma) {
            elt = null;
          } else if (this.type === types$1.ellipsis) {
            elt = this.parseSpread(refDestructuringErrors);
            if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }
          } else {
            elt = this.parseMaybeAssign(false, refDestructuringErrors);
          }
          elts.push(elt);
        }
        return elts;
      };
      pp$5.checkUnreserved = function(ref3) {
        var start = ref3.start;
        var end = ref3.end;
        var name = ref3.name;
        if (this.inGenerator && name === "yield") {
          this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
        }
        if (this.inAsync && name === "await") {
          this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
        }
        if (!(this.currentThisScope().flags & SCOPE_VAR) && name === "arguments") {
          this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer");
        }
        if (this.inClassStaticBlock && (name === "arguments" || name === "await")) {
          this.raise(start, "Cannot use " + name + " in class static initialization block");
        }
        if (this.keywords.test(name)) {
          this.raise(start, "Unexpected keyword '" + name + "'");
        }
        if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
          return;
        }
        var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
        if (re.test(name)) {
          if (!this.inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
          }
          this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
        }
      };
      pp$5.parseIdent = function(liberal) {
        var node2 = this.parseIdentNode();
        this.next(!!liberal);
        this.finishNode(node2, "Identifier");
        if (!liberal) {
          this.checkUnreserved(node2);
          if (node2.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = node2.start;
          }
        }
        return node2;
      };
      pp$5.parseIdentNode = function() {
        var node2 = this.startNode();
        if (this.type === types$1.name) {
          node2.name = this.value;
        } else if (this.type.keyword) {
          node2.name = this.type.keyword;
          if ((node2.name === "class" || node2.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
            this.context.pop();
          }
          this.type = types$1.name;
        } else {
          this.unexpected();
        }
        return node2;
      };
      pp$5.parsePrivateIdent = function() {
        var node2 = this.startNode();
        if (this.type === types$1.privateId) {
          node2.name = this.value;
        } else {
          this.unexpected();
        }
        this.next();
        this.finishNode(node2, "PrivateIdentifier");
        if (this.options.checkPrivateFields) {
          if (this.privateNameStack.length === 0) {
            this.raise(node2.start, "Private field '#" + node2.name + "' must be declared in an enclosing class");
          } else {
            this.privateNameStack[this.privateNameStack.length - 1].used.push(node2);
          }
        }
        return node2;
      };
      pp$5.parseYield = function(forInit) {
        if (!this.yieldPos) {
          this.yieldPos = this.start;
        }
        var node2 = this.startNode();
        this.next();
        if (this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr) {
          node2.delegate = false;
          node2.argument = null;
        } else {
          node2.delegate = this.eat(types$1.star);
          node2.argument = this.parseMaybeAssign(forInit);
        }
        return this.finishNode(node2, "YieldExpression");
      };
      pp$5.parseAwait = function(forInit) {
        if (!this.awaitPos) {
          this.awaitPos = this.start;
        }
        var node2 = this.startNode();
        this.next();
        node2.argument = this.parseMaybeUnary(null, true, false, forInit);
        return this.finishNode(node2, "AwaitExpression");
      };
      var pp$4 = Parser.prototype;
      pp$4.raise = function(pos, message) {
        var loc = getLineInfo(this.input, pos);
        message += " (" + loc.line + ":" + loc.column + ")";
        if (this.sourceFile) {
          message += " in " + this.sourceFile;
        }
        var err = new SyntaxError(message);
        err.pos = pos;
        err.loc = loc;
        err.raisedAt = this.pos;
        throw err;
      };
      pp$4.raiseRecoverable = pp$4.raise;
      pp$4.curPosition = function() {
        if (this.options.locations) {
          return new Position(this.curLine, this.pos - this.lineStart);
        }
      };
      var pp$3 = Parser.prototype;
      var Scope = function Scope2(flags2) {
        this.flags = flags2;
        this.var = [];
        this.lexical = [];
        this.functions = [];
      };
      pp$3.enterScope = function(flags2) {
        this.scopeStack.push(new Scope(flags2));
      };
      pp$3.exitScope = function() {
        this.scopeStack.pop();
      };
      pp$3.treatFunctionsAsVarInScope = function(scope) {
        return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
      };
      pp$3.declareName = function(name, bindingType, pos) {
        var redeclared = false;
        if (bindingType === BIND_LEXICAL) {
          var scope = this.currentScope();
          redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
          scope.lexical.push(name);
          if (this.inModule && scope.flags & SCOPE_TOP) {
            delete this.undefinedExports[name];
          }
        } else if (bindingType === BIND_SIMPLE_CATCH) {
          var scope$1 = this.currentScope();
          scope$1.lexical.push(name);
        } else if (bindingType === BIND_FUNCTION) {
          var scope$2 = this.currentScope();
          if (this.treatFunctionsAsVar) {
            redeclared = scope$2.lexical.indexOf(name) > -1;
          } else {
            redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
          }
          scope$2.functions.push(name);
        } else {
          for (var i3 = this.scopeStack.length - 1; i3 >= 0; --i3) {
            var scope$3 = this.scopeStack[i3];
            if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            scope$3.var.push(name);
            if (this.inModule && scope$3.flags & SCOPE_TOP) {
              delete this.undefinedExports[name];
            }
            if (scope$3.flags & SCOPE_VAR) {
              break;
            }
          }
        }
        if (redeclared) {
          this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }
      };
      pp$3.checkLocalExport = function(id2) {
        if (this.scopeStack[0].lexical.indexOf(id2.name) === -1 && this.scopeStack[0].var.indexOf(id2.name) === -1) {
          this.undefinedExports[id2.name] = id2;
        }
      };
      pp$3.currentScope = function() {
        return this.scopeStack[this.scopeStack.length - 1];
      };
      pp$3.currentVarScope = function() {
        for (var i3 = this.scopeStack.length - 1; ; i3--) {
          var scope = this.scopeStack[i3];
          if (scope.flags & (SCOPE_VAR | SCOPE_CLASS_FIELD_INIT | SCOPE_CLASS_STATIC_BLOCK)) {
            return scope;
          }
        }
      };
      pp$3.currentThisScope = function() {
        for (var i3 = this.scopeStack.length - 1; ; i3--) {
          var scope = this.scopeStack[i3];
          if (scope.flags & (SCOPE_VAR | SCOPE_CLASS_FIELD_INIT | SCOPE_CLASS_STATIC_BLOCK) && !(scope.flags & SCOPE_ARROW)) {
            return scope;
          }
        }
      };
      var Node = function Node2(parser, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        if (parser.options.locations) {
          this.loc = new SourceLocation(parser, loc);
        }
        if (parser.options.directSourceFile) {
          this.sourceFile = parser.options.directSourceFile;
        }
        if (parser.options.ranges) {
          this.range = [pos, 0];
        }
      };
      var pp$2 = Parser.prototype;
      pp$2.startNode = function() {
        return new Node(this, this.start, this.startLoc);
      };
      pp$2.startNodeAt = function(pos, loc) {
        return new Node(this, pos, loc);
      };
      function finishNodeAt(node2, type2, pos, loc) {
        node2.type = type2;
        node2.end = pos;
        if (this.options.locations) {
          node2.loc.end = loc;
        }
        if (this.options.ranges) {
          node2.range[1] = pos;
        }
        return node2;
      }
      pp$2.finishNode = function(node2, type2) {
        return finishNodeAt.call(this, node2, type2, this.lastTokEnd, this.lastTokEndLoc);
      };
      pp$2.finishNodeAt = function(node2, type2, pos, loc) {
        return finishNodeAt.call(this, node2, type2, pos, loc);
      };
      pp$2.copyNode = function(node2) {
        var newNode = new Node(this, node2.start, this.startLoc);
        for (var prop in node2) {
          newNode[prop] = node2[prop];
        }
        return newNode;
      };
      var scriptValuesAddedInUnicode = "Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz";
      var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
      var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
      var ecma11BinaryProperties = ecma10BinaryProperties;
      var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
      var ecma13BinaryProperties = ecma12BinaryProperties;
      var ecma14BinaryProperties = ecma13BinaryProperties;
      var unicodeBinaryProperties = {
        9: ecma9BinaryProperties,
        10: ecma10BinaryProperties,
        11: ecma11BinaryProperties,
        12: ecma12BinaryProperties,
        13: ecma13BinaryProperties,
        14: ecma14BinaryProperties
      };
      var ecma14BinaryPropertiesOfStrings = "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji";
      var unicodeBinaryPropertiesOfStrings = {
        9: "",
        10: "",
        11: "",
        12: "",
        13: "",
        14: ecma14BinaryPropertiesOfStrings
      };
      var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
      var ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
      var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
      var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
      var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
      var ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
      var ecma14ScriptValues = ecma13ScriptValues + " " + scriptValuesAddedInUnicode;
      var unicodeScriptValues = {
        9: ecma9ScriptValues,
        10: ecma10ScriptValues,
        11: ecma11ScriptValues,
        12: ecma12ScriptValues,
        13: ecma13ScriptValues,
        14: ecma14ScriptValues
      };
      var data2 = {};
      function buildUnicodeData(ecmaVersion3) {
        var d2 = data2[ecmaVersion3] = {
          binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion3] + " " + unicodeGeneralCategoryValues),
          binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion3]),
          nonBinary: {
            General_Category: wordsRegexp(unicodeGeneralCategoryValues),
            Script: wordsRegexp(unicodeScriptValues[ecmaVersion3])
          }
        };
        d2.nonBinary.Script_Extensions = d2.nonBinary.Script;
        d2.nonBinary.gc = d2.nonBinary.General_Category;
        d2.nonBinary.sc = d2.nonBinary.Script;
        d2.nonBinary.scx = d2.nonBinary.Script_Extensions;
      }
      for (var i2 = 0, list = [9, 10, 11, 12, 13, 14]; i2 < list.length; i2 += 1) {
        var ecmaVersion2 = list[i2];
        buildUnicodeData(ecmaVersion2);
      }
      var pp$1 = Parser.prototype;
      var BranchID = function BranchID2(parent, base) {
        this.parent = parent;
        this.base = base || this;
      };
      BranchID.prototype.separatedFrom = function separatedFrom(alt) {
        for (var self2 = this; self2; self2 = self2.parent) {
          for (var other = alt; other; other = other.parent) {
            if (self2.base === other.base && self2 !== other) {
              return true;
            }
          }
        }
        return false;
      };
      BranchID.prototype.sibling = function sibling() {
        return new BranchID(this.parent, this.base);
      };
      var RegExpValidationState = function RegExpValidationState2(parser) {
        this.parser = parser;
        this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : "");
        this.unicodeProperties = data2[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];
        this.source = "";
        this.flags = "";
        this.start = 0;
        this.switchU = false;
        this.switchV = false;
        this.switchN = false;
        this.pos = 0;
        this.lastIntValue = 0;
        this.lastStringValue = "";
        this.lastAssertionIsQuantifiable = false;
        this.numCapturingParens = 0;
        this.maxBackReference = 0;
        this.groupNames = /* @__PURE__ */ Object.create(null);
        this.backReferenceNames = [];
        this.branchID = null;
      };
      RegExpValidationState.prototype.reset = function reset(start, pattern2, flags2) {
        var unicodeSets = flags2.indexOf("v") !== -1;
        var unicode2 = flags2.indexOf("u") !== -1;
        this.start = start | 0;
        this.source = pattern2 + "";
        this.flags = flags2;
        if (unicodeSets && this.parser.options.ecmaVersion >= 15) {
          this.switchU = true;
          this.switchV = true;
          this.switchN = true;
        } else {
          this.switchU = unicode2 && this.parser.options.ecmaVersion >= 6;
          this.switchV = false;
          this.switchN = unicode2 && this.parser.options.ecmaVersion >= 9;
        }
      };
      RegExpValidationState.prototype.raise = function raise(message) {
        this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
      };
      RegExpValidationState.prototype.at = function at(i3, forceU) {
        if (forceU === void 0) forceU = false;
        var s2 = this.source;
        var l2 = s2.length;
        if (i3 >= l2) {
          return -1;
        }
        var c2 = s2.charCodeAt(i3);
        if (!(forceU || this.switchU) || c2 <= 55295 || c2 >= 57344 || i3 + 1 >= l2) {
          return c2;
        }
        var next = s2.charCodeAt(i3 + 1);
        return next >= 56320 && next <= 57343 ? (c2 << 10) + next - 56613888 : c2;
      };
      RegExpValidationState.prototype.nextIndex = function nextIndex(i3, forceU) {
        if (forceU === void 0) forceU = false;
        var s2 = this.source;
        var l2 = s2.length;
        if (i3 >= l2) {
          return l2;
        }
        var c2 = s2.charCodeAt(i3), next;
        if (!(forceU || this.switchU) || c2 <= 55295 || c2 >= 57344 || i3 + 1 >= l2 || (next = s2.charCodeAt(i3 + 1)) < 56320 || next > 57343) {
          return i3 + 1;
        }
        return i3 + 2;
      };
      RegExpValidationState.prototype.current = function current(forceU) {
        if (forceU === void 0) forceU = false;
        return this.at(this.pos, forceU);
      };
      RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
        if (forceU === void 0) forceU = false;
        return this.at(this.nextIndex(this.pos, forceU), forceU);
      };
      RegExpValidationState.prototype.advance = function advance(forceU) {
        if (forceU === void 0) forceU = false;
        this.pos = this.nextIndex(this.pos, forceU);
      };
      RegExpValidationState.prototype.eat = function eat(ch, forceU) {
        if (forceU === void 0) forceU = false;
        if (this.current(forceU) === ch) {
          this.advance(forceU);
          return true;
        }
        return false;
      };
      RegExpValidationState.prototype.eatChars = function eatChars(chs, forceU) {
        if (forceU === void 0) forceU = false;
        var pos = this.pos;
        for (var i3 = 0, list2 = chs; i3 < list2.length; i3 += 1) {
          var ch = list2[i3];
          var current = this.at(pos, forceU);
          if (current === -1 || current !== ch) {
            return false;
          }
          pos = this.nextIndex(pos, forceU);
        }
        this.pos = pos;
        return true;
      };
      pp$1.validateRegExpFlags = function(state) {
        var validFlags = state.validFlags;
        var flags2 = state.flags;
        var u2 = false;
        var v2 = false;
        for (var i3 = 0; i3 < flags2.length; i3++) {
          var flag = flags2.charAt(i3);
          if (validFlags.indexOf(flag) === -1) {
            this.raise(state.start, "Invalid regular expression flag");
          }
          if (flags2.indexOf(flag, i3 + 1) > -1) {
            this.raise(state.start, "Duplicate regular expression flag");
          }
          if (flag === "u") {
            u2 = true;
          }
          if (flag === "v") {
            v2 = true;
          }
        }
        if (this.options.ecmaVersion >= 15 && u2 && v2) {
          this.raise(state.start, "Invalid regular expression flag");
        }
      };
      function hasProp(obj) {
        for (var _ in obj) {
          return true;
        }
        return false;
      }
      pp$1.validateRegExpPattern = function(state) {
        this.regexp_pattern(state);
        if (!state.switchN && this.options.ecmaVersion >= 9 && hasProp(state.groupNames)) {
          state.switchN = true;
          this.regexp_pattern(state);
        }
      };
      pp$1.regexp_pattern = function(state) {
        state.pos = 0;
        state.lastIntValue = 0;
        state.lastStringValue = "";
        state.lastAssertionIsQuantifiable = false;
        state.numCapturingParens = 0;
        state.maxBackReference = 0;
        state.groupNames = /* @__PURE__ */ Object.create(null);
        state.backReferenceNames.length = 0;
        state.branchID = null;
        this.regexp_disjunction(state);
        if (state.pos !== state.source.length) {
          if (state.eat(
            41
            /* ) */
          )) {
            state.raise("Unmatched ')'");
          }
          if (state.eat(
            93
            /* ] */
          ) || state.eat(
            125
            /* } */
          )) {
            state.raise("Lone quantifier brackets");
          }
        }
        if (state.maxBackReference > state.numCapturingParens) {
          state.raise("Invalid escape");
        }
        for (var i3 = 0, list2 = state.backReferenceNames; i3 < list2.length; i3 += 1) {
          var name = list2[i3];
          if (!state.groupNames[name]) {
            state.raise("Invalid named capture referenced");
          }
        }
      };
      pp$1.regexp_disjunction = function(state) {
        var trackDisjunction = this.options.ecmaVersion >= 16;
        if (trackDisjunction) {
          state.branchID = new BranchID(state.branchID, null);
        }
        this.regexp_alternative(state);
        while (state.eat(
          124
          /* | */
        )) {
          if (trackDisjunction) {
            state.branchID = state.branchID.sibling();
          }
          this.regexp_alternative(state);
        }
        if (trackDisjunction) {
          state.branchID = state.branchID.parent;
        }
        if (this.regexp_eatQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        if (state.eat(
          123
          /* { */
        )) {
          state.raise("Lone quantifier brackets");
        }
      };
      pp$1.regexp_alternative = function(state) {
        while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
        }
      };
      pp$1.regexp_eatTerm = function(state) {
        if (this.regexp_eatAssertion(state)) {
          if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
            if (state.switchU) {
              state.raise("Invalid quantifier");
            }
          }
          return true;
        }
        if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
          this.regexp_eatQuantifier(state);
          return true;
        }
        return false;
      };
      pp$1.regexp_eatAssertion = function(state) {
        var start = state.pos;
        state.lastAssertionIsQuantifiable = false;
        if (state.eat(
          94
          /* ^ */
        ) || state.eat(
          36
          /* $ */
        )) {
          return true;
        }
        if (state.eat(
          92
          /* \ */
        )) {
          if (state.eat(
            66
            /* B */
          ) || state.eat(
            98
            /* b */
          )) {
            return true;
          }
          state.pos = start;
        }
        if (state.eat(
          40
          /* ( */
        ) && state.eat(
          63
          /* ? */
        )) {
          var lookbehind = false;
          if (this.options.ecmaVersion >= 9) {
            lookbehind = state.eat(
              60
              /* < */
            );
          }
          if (state.eat(
            61
            /* = */
          ) || state.eat(
            33
            /* ! */
          )) {
            this.regexp_disjunction(state);
            if (!state.eat(
              41
              /* ) */
            )) {
              state.raise("Unterminated group");
            }
            state.lastAssertionIsQuantifiable = !lookbehind;
            return true;
          }
        }
        state.pos = start;
        return false;
      };
      pp$1.regexp_eatQuantifier = function(state, noError) {
        if (noError === void 0) noError = false;
        if (this.regexp_eatQuantifierPrefix(state, noError)) {
          state.eat(
            63
            /* ? */
          );
          return true;
        }
        return false;
      };
      pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
        return state.eat(
          42
          /* * */
        ) || state.eat(
          43
          /* + */
        ) || state.eat(
          63
          /* ? */
        ) || this.regexp_eatBracedQuantifier(state, noError);
      };
      pp$1.regexp_eatBracedQuantifier = function(state, noError) {
        var start = state.pos;
        if (state.eat(
          123
          /* { */
        )) {
          var min = 0, max = -1;
          if (this.regexp_eatDecimalDigits(state)) {
            min = state.lastIntValue;
            if (state.eat(
              44
              /* , */
            ) && this.regexp_eatDecimalDigits(state)) {
              max = state.lastIntValue;
            }
            if (state.eat(
              125
              /* } */
            )) {
              if (max !== -1 && max < min && !noError) {
                state.raise("numbers out of order in {} quantifier");
              }
              return true;
            }
          }
          if (state.switchU && !noError) {
            state.raise("Incomplete quantifier");
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatAtom = function(state) {
        return this.regexp_eatPatternCharacters(state) || state.eat(
          46
          /* . */
        ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
      };
      pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
        var start = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatAtomEscape(state)) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatUncapturingGroup = function(state) {
        var start = state.pos;
        if (state.eat(
          40
          /* ( */
        )) {
          if (state.eat(
            63
            /* ? */
          )) {
            if (this.options.ecmaVersion >= 16) {
              var addModifiers = this.regexp_eatModifiers(state);
              var hasHyphen = state.eat(
                45
                /* - */
              );
              if (addModifiers || hasHyphen) {
                for (var i3 = 0; i3 < addModifiers.length; i3++) {
                  var modifier = addModifiers.charAt(i3);
                  if (addModifiers.indexOf(modifier, i3 + 1) > -1) {
                    state.raise("Duplicate regular expression modifiers");
                  }
                }
                if (hasHyphen) {
                  var removeModifiers = this.regexp_eatModifiers(state);
                  if (!addModifiers && !removeModifiers && state.current() === 58) {
                    state.raise("Invalid regular expression modifiers");
                  }
                  for (var i$1 = 0; i$1 < removeModifiers.length; i$1++) {
                    var modifier$1 = removeModifiers.charAt(i$1);
                    if (removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) {
                      state.raise("Duplicate regular expression modifiers");
                    }
                  }
                }
              }
            }
            if (state.eat(
              58
              /* : */
            )) {
              this.regexp_disjunction(state);
              if (state.eat(
                41
                /* ) */
              )) {
                return true;
              }
              state.raise("Unterminated group");
            }
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatCapturingGroup = function(state) {
        if (state.eat(
          40
          /* ( */
        )) {
          if (this.options.ecmaVersion >= 9) {
            this.regexp_groupSpecifier(state);
          } else if (state.current() === 63) {
            state.raise("Invalid group");
          }
          this.regexp_disjunction(state);
          if (state.eat(
            41
            /* ) */
          )) {
            state.numCapturingParens += 1;
            return true;
          }
          state.raise("Unterminated group");
        }
        return false;
      };
      pp$1.regexp_eatModifiers = function(state) {
        var modifiers = "";
        var ch = 0;
        while ((ch = state.current()) !== -1 && isRegularExpressionModifier(ch)) {
          modifiers += codePointToString(ch);
          state.advance();
        }
        return modifiers;
      };
      function isRegularExpressionModifier(ch) {
        return ch === 105 || ch === 109 || ch === 115;
      }
      pp$1.regexp_eatExtendedAtom = function(state) {
        return state.eat(
          46
          /* . */
        ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
      };
      pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
        if (this.regexp_eatBracedQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        return false;
      };
      pp$1.regexp_eatSyntaxCharacter = function(state) {
        var ch = state.current();
        if (isSyntaxCharacter(ch)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      function isSyntaxCharacter(ch) {
        return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
      }
      pp$1.regexp_eatPatternCharacters = function(state) {
        var start = state.pos;
        var ch = 0;
        while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
          state.advance();
        }
        return state.pos !== start;
      };
      pp$1.regexp_eatExtendedPatternCharacter = function(state) {
        var ch = state.current();
        if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_groupSpecifier = function(state) {
        if (state.eat(
          63
          /* ? */
        )) {
          if (!this.regexp_eatGroupName(state)) {
            state.raise("Invalid group");
          }
          var trackDisjunction = this.options.ecmaVersion >= 16;
          var known = state.groupNames[state.lastStringValue];
          if (known) {
            if (trackDisjunction) {
              for (var i3 = 0, list2 = known; i3 < list2.length; i3 += 1) {
                var altID = list2[i3];
                if (!altID.separatedFrom(state.branchID)) {
                  state.raise("Duplicate capture group name");
                }
              }
            } else {
              state.raise("Duplicate capture group name");
            }
          }
          if (trackDisjunction) {
            (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID);
          } else {
            state.groupNames[state.lastStringValue] = true;
          }
        }
      };
      pp$1.regexp_eatGroupName = function(state) {
        state.lastStringValue = "";
        if (state.eat(
          60
          /* < */
        )) {
          if (this.regexp_eatRegExpIdentifierName(state) && state.eat(
            62
            /* > */
          )) {
            return true;
          }
          state.raise("Invalid capture group name");
        }
        return false;
      };
      pp$1.regexp_eatRegExpIdentifierName = function(state) {
        state.lastStringValue = "";
        if (this.regexp_eatRegExpIdentifierStart(state)) {
          state.lastStringValue += codePointToString(state.lastIntValue);
          while (this.regexp_eatRegExpIdentifierPart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);
          }
          return true;
        }
        return false;
      };
      pp$1.regexp_eatRegExpIdentifierStart = function(state) {
        var start = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierStart(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start;
        return false;
      };
      function isRegExpIdentifierStart(ch) {
        return isIdentifierStart(ch, true) || ch === 36 || ch === 95;
      }
      pp$1.regexp_eatRegExpIdentifierPart = function(state) {
        var start = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierPart(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start;
        return false;
      };
      function isRegExpIdentifierPart(ch) {
        return isIdentifierChar(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
      }
      pp$1.regexp_eatAtomEscape = function(state) {
        if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
          return true;
        }
        if (state.switchU) {
          if (state.current() === 99) {
            state.raise("Invalid unicode escape");
          }
          state.raise("Invalid escape");
        }
        return false;
      };
      pp$1.regexp_eatBackReference = function(state) {
        var start = state.pos;
        if (this.regexp_eatDecimalEscape(state)) {
          var n2 = state.lastIntValue;
          if (state.switchU) {
            if (n2 > state.maxBackReference) {
              state.maxBackReference = n2;
            }
            return true;
          }
          if (n2 <= state.numCapturingParens) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatKGroupName = function(state) {
        if (state.eat(
          107
          /* k */
        )) {
          if (this.regexp_eatGroupName(state)) {
            state.backReferenceNames.push(state.lastStringValue);
            return true;
          }
          state.raise("Invalid named reference");
        }
        return false;
      };
      pp$1.regexp_eatCharacterEscape = function(state) {
        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
      };
      pp$1.regexp_eatCControlLetter = function(state) {
        var start = state.pos;
        if (state.eat(
          99
          /* c */
        )) {
          if (this.regexp_eatControlLetter(state)) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatZero = function(state) {
        if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
          state.lastIntValue = 0;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatControlEscape = function(state) {
        var ch = state.current();
        if (ch === 116) {
          state.lastIntValue = 9;
          state.advance();
          return true;
        }
        if (ch === 110) {
          state.lastIntValue = 10;
          state.advance();
          return true;
        }
        if (ch === 118) {
          state.lastIntValue = 11;
          state.advance();
          return true;
        }
        if (ch === 102) {
          state.lastIntValue = 12;
          state.advance();
          return true;
        }
        if (ch === 114) {
          state.lastIntValue = 13;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatControlLetter = function(state) {
        var ch = state.current();
        if (isControlLetter(ch)) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      function isControlLetter(ch) {
        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
      }
      pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
        if (forceU === void 0) forceU = false;
        var start = state.pos;
        var switchU = forceU || state.switchU;
        if (state.eat(
          117
          /* u */
        )) {
          if (this.regexp_eatFixedHexDigits(state, 4)) {
            var lead = state.lastIntValue;
            if (switchU && lead >= 55296 && lead <= 56319) {
              var leadSurrogateEnd = state.pos;
              if (state.eat(
                92
                /* \ */
              ) && state.eat(
                117
                /* u */
              ) && this.regexp_eatFixedHexDigits(state, 4)) {
                var trail = state.lastIntValue;
                if (trail >= 56320 && trail <= 57343) {
                  state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
                  return true;
                }
              }
              state.pos = leadSurrogateEnd;
              state.lastIntValue = lead;
            }
            return true;
          }
          if (switchU && state.eat(
            123
            /* { */
          ) && this.regexp_eatHexDigits(state) && state.eat(
            125
            /* } */
          ) && isValidUnicode(state.lastIntValue)) {
            return true;
          }
          if (switchU) {
            state.raise("Invalid unicode escape");
          }
          state.pos = start;
        }
        return false;
      };
      function isValidUnicode(ch) {
        return ch >= 0 && ch <= 1114111;
      }
      pp$1.regexp_eatIdentityEscape = function(state) {
        if (state.switchU) {
          if (this.regexp_eatSyntaxCharacter(state)) {
            return true;
          }
          if (state.eat(
            47
            /* / */
          )) {
            state.lastIntValue = 47;
            return true;
          }
          return false;
        }
        var ch = state.current();
        if (ch !== 99 && (!state.switchN || ch !== 107)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatDecimalEscape = function(state) {
        state.lastIntValue = 0;
        var ch = state.current();
        if (ch >= 49 && ch <= 57) {
          do {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
            state.advance();
          } while ((ch = state.current()) >= 48 && ch <= 57);
          return true;
        }
        return false;
      };
      var CharSetNone = 0;
      var CharSetOk = 1;
      var CharSetString = 2;
      pp$1.regexp_eatCharacterClassEscape = function(state) {
        var ch = state.current();
        if (isCharacterClassEscape(ch)) {
          state.lastIntValue = -1;
          state.advance();
          return CharSetOk;
        }
        var negate = false;
        if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 80) || ch === 112)) {
          state.lastIntValue = -1;
          state.advance();
          var result;
          if (state.eat(
            123
            /* { */
          ) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(
            125
            /* } */
          )) {
            if (negate && result === CharSetString) {
              state.raise("Invalid property name");
            }
            return result;
          }
          state.raise("Invalid property name");
        }
        return CharSetNone;
      };
      function isCharacterClassEscape(ch) {
        return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
      }
      pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
        var start = state.pos;
        if (this.regexp_eatUnicodePropertyName(state) && state.eat(
          61
          /* = */
        )) {
          var name = state.lastStringValue;
          if (this.regexp_eatUnicodePropertyValue(state)) {
            var value = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
            return CharSetOk;
          }
        }
        state.pos = start;
        if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
          var nameOrValue = state.lastStringValue;
          return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
        }
        return CharSetNone;
      };
      pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
        if (!hasOwn(state.unicodeProperties.nonBinary, name)) {
          state.raise("Invalid property name");
        }
        if (!state.unicodeProperties.nonBinary[name].test(value)) {
          state.raise("Invalid property value");
        }
      };
      pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
        if (state.unicodeProperties.binary.test(nameOrValue)) {
          return CharSetOk;
        }
        if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) {
          return CharSetString;
        }
        state.raise("Invalid property name");
      };
      pp$1.regexp_eatUnicodePropertyName = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyNameCharacter(ch = state.current())) {
          state.lastStringValue += codePointToString(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyNameCharacter(ch) {
        return isControlLetter(ch) || ch === 95;
      }
      pp$1.regexp_eatUnicodePropertyValue = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyValueCharacter(ch = state.current())) {
          state.lastStringValue += codePointToString(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyValueCharacter(ch) {
        return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
      }
      pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
        return this.regexp_eatUnicodePropertyValue(state);
      };
      pp$1.regexp_eatCharacterClass = function(state) {
        if (state.eat(
          91
          /* [ */
        )) {
          var negate = state.eat(
            94
            /* ^ */
          );
          var result = this.regexp_classContents(state);
          if (!state.eat(
            93
            /* ] */
          )) {
            state.raise("Unterminated character class");
          }
          if (negate && result === CharSetString) {
            state.raise("Negated character class may contain strings");
          }
          return true;
        }
        return false;
      };
      pp$1.regexp_classContents = function(state) {
        if (state.current() === 93) {
          return CharSetOk;
        }
        if (state.switchV) {
          return this.regexp_classSetExpression(state);
        }
        this.regexp_nonEmptyClassRanges(state);
        return CharSetOk;
      };
      pp$1.regexp_nonEmptyClassRanges = function(state) {
        while (this.regexp_eatClassAtom(state)) {
          var left = state.lastIntValue;
          if (state.eat(
            45
            /* - */
          ) && this.regexp_eatClassAtom(state)) {
            var right = state.lastIntValue;
            if (state.switchU && (left === -1 || right === -1)) {
              state.raise("Invalid character class");
            }
            if (left !== -1 && right !== -1 && left > right) {
              state.raise("Range out of order in character class");
            }
          }
        }
      };
      pp$1.regexp_eatClassAtom = function(state) {
        var start = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatClassEscape(state)) {
            return true;
          }
          if (state.switchU) {
            var ch$1 = state.current();
            if (ch$1 === 99 || isOctalDigit(ch$1)) {
              state.raise("Invalid class escape");
            }
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        var ch = state.current();
        if (ch !== 93) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatClassEscape = function(state) {
        var start = state.pos;
        if (state.eat(
          98
          /* b */
        )) {
          state.lastIntValue = 8;
          return true;
        }
        if (state.switchU && state.eat(
          45
          /* - */
        )) {
          state.lastIntValue = 45;
          return true;
        }
        if (!state.switchU && state.eat(
          99
          /* c */
        )) {
          if (this.regexp_eatClassControlLetter(state)) {
            return true;
          }
          state.pos = start;
        }
        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
      };
      pp$1.regexp_classSetExpression = function(state) {
        var result = CharSetOk, subResult;
        if (this.regexp_eatClassSetRange(state)) ;
        else if (subResult = this.regexp_eatClassSetOperand(state)) {
          if (subResult === CharSetString) {
            result = CharSetString;
          }
          var start = state.pos;
          while (state.eatChars(
            [38, 38]
            /* && */
          )) {
            if (state.current() !== 38 && (subResult = this.regexp_eatClassSetOperand(state))) {
              if (subResult !== CharSetString) {
                result = CharSetOk;
              }
              continue;
            }
            state.raise("Invalid character in character class");
          }
          if (start !== state.pos) {
            return result;
          }
          while (state.eatChars(
            [45, 45]
            /* -- */
          )) {
            if (this.regexp_eatClassSetOperand(state)) {
              continue;
            }
            state.raise("Invalid character in character class");
          }
          if (start !== state.pos) {
            return result;
          }
        } else {
          state.raise("Invalid character in character class");
        }
        for (; ; ) {
          if (this.regexp_eatClassSetRange(state)) {
            continue;
          }
          subResult = this.regexp_eatClassSetOperand(state);
          if (!subResult) {
            return result;
          }
          if (subResult === CharSetString) {
            result = CharSetString;
          }
        }
      };
      pp$1.regexp_eatClassSetRange = function(state) {
        var start = state.pos;
        if (this.regexp_eatClassSetCharacter(state)) {
          var left = state.lastIntValue;
          if (state.eat(
            45
            /* - */
          ) && this.regexp_eatClassSetCharacter(state)) {
            var right = state.lastIntValue;
            if (left !== -1 && right !== -1 && left > right) {
              state.raise("Range out of order in character class");
            }
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatClassSetOperand = function(state) {
        if (this.regexp_eatClassSetCharacter(state)) {
          return CharSetOk;
        }
        return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
      };
      pp$1.regexp_eatNestedClass = function(state) {
        var start = state.pos;
        if (state.eat(
          91
          /* [ */
        )) {
          var negate = state.eat(
            94
            /* ^ */
          );
          var result = this.regexp_classContents(state);
          if (state.eat(
            93
            /* ] */
          )) {
            if (negate && result === CharSetString) {
              state.raise("Negated character class may contain strings");
            }
            return result;
          }
          state.pos = start;
        }
        if (state.eat(
          92
          /* \ */
        )) {
          var result$1 = this.regexp_eatCharacterClassEscape(state);
          if (result$1) {
            return result$1;
          }
          state.pos = start;
        }
        return null;
      };
      pp$1.regexp_eatClassStringDisjunction = function(state) {
        var start = state.pos;
        if (state.eatChars(
          [92, 113]
          /* \q */
        )) {
          if (state.eat(
            123
            /* { */
          )) {
            var result = this.regexp_classStringDisjunctionContents(state);
            if (state.eat(
              125
              /* } */
            )) {
              return result;
            }
          } else {
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        return null;
      };
      pp$1.regexp_classStringDisjunctionContents = function(state) {
        var result = this.regexp_classString(state);
        while (state.eat(
          124
          /* | */
        )) {
          if (this.regexp_classString(state) === CharSetString) {
            result = CharSetString;
          }
        }
        return result;
      };
      pp$1.regexp_classString = function(state) {
        var count = 0;
        while (this.regexp_eatClassSetCharacter(state)) {
          count++;
        }
        return count === 1 ? CharSetOk : CharSetString;
      };
      pp$1.regexp_eatClassSetCharacter = function(state) {
        var start = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatCharacterEscape(state) || this.regexp_eatClassSetReservedPunctuator(state)) {
            return true;
          }
          if (state.eat(
            98
            /* b */
          )) {
            state.lastIntValue = 8;
            return true;
          }
          state.pos = start;
          return false;
        }
        var ch = state.current();
        if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) {
          return false;
        }
        if (isClassSetSyntaxCharacter(ch)) {
          return false;
        }
        state.advance();
        state.lastIntValue = ch;
        return true;
      };
      function isClassSetReservedDoublePunctuatorCharacter(ch) {
        return ch === 33 || ch >= 35 && ch <= 38 || ch >= 42 && ch <= 44 || ch === 46 || ch >= 58 && ch <= 64 || ch === 94 || ch === 96 || ch === 126;
      }
      function isClassSetSyntaxCharacter(ch) {
        return ch === 40 || ch === 41 || ch === 45 || ch === 47 || ch >= 91 && ch <= 93 || ch >= 123 && ch <= 125;
      }
      pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
        var ch = state.current();
        if (isClassSetReservedPunctuator(ch)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      function isClassSetReservedPunctuator(ch) {
        return ch === 33 || ch === 35 || ch === 37 || ch === 38 || ch === 44 || ch === 45 || ch >= 58 && ch <= 62 || ch === 64 || ch === 96 || ch === 126;
      }
      pp$1.regexp_eatClassControlLetter = function(state) {
        var ch = state.current();
        if (isDecimalDigit(ch) || ch === 95) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatHexEscapeSequence = function(state) {
        var start = state.pos;
        if (state.eat(
          120
          /* x */
        )) {
          if (this.regexp_eatFixedHexDigits(state, 2)) {
            return true;
          }
          if (state.switchU) {
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatDecimalDigits = function(state) {
        var start = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isDecimalDigit(ch = state.current())) {
          state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
          state.advance();
        }
        return state.pos !== start;
      };
      function isDecimalDigit(ch) {
        return ch >= 48 && ch <= 57;
      }
      pp$1.regexp_eatHexDigits = function(state) {
        var start = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isHexDigit(ch = state.current())) {
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
          state.advance();
        }
        return state.pos !== start;
      };
      function isHexDigit(ch) {
        return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
      }
      function hexToInt(ch) {
        if (ch >= 65 && ch <= 70) {
          return 10 + (ch - 65);
        }
        if (ch >= 97 && ch <= 102) {
          return 10 + (ch - 97);
        }
        return ch - 48;
      }
      pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
        if (this.regexp_eatOctalDigit(state)) {
          var n1 = state.lastIntValue;
          if (this.regexp_eatOctalDigit(state)) {
            var n2 = state.lastIntValue;
            if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
              state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
            } else {
              state.lastIntValue = n1 * 8 + n2;
            }
          } else {
            state.lastIntValue = n1;
          }
          return true;
        }
        return false;
      };
      pp$1.regexp_eatOctalDigit = function(state) {
        var ch = state.current();
        if (isOctalDigit(ch)) {
          state.lastIntValue = ch - 48;
          state.advance();
          return true;
        }
        state.lastIntValue = 0;
        return false;
      };
      function isOctalDigit(ch) {
        return ch >= 48 && ch <= 55;
      }
      pp$1.regexp_eatFixedHexDigits = function(state, length) {
        var start = state.pos;
        state.lastIntValue = 0;
        for (var i3 = 0; i3 < length; ++i3) {
          var ch = state.current();
          if (!isHexDigit(ch)) {
            state.pos = start;
            return false;
          }
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
          state.advance();
        }
        return true;
      };
      var Token = function Token2(p2) {
        this.type = p2.type;
        this.value = p2.value;
        this.start = p2.start;
        this.end = p2.end;
        if (p2.options.locations) {
          this.loc = new SourceLocation(p2, p2.startLoc, p2.endLoc);
        }
        if (p2.options.ranges) {
          this.range = [p2.start, p2.end];
        }
      };
      var pp = Parser.prototype;
      pp.next = function(ignoreEscapeSequenceInKeyword) {
        if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
        }
        if (this.options.onToken) {
          this.options.onToken(new Token(this));
        }
        this.lastTokEnd = this.end;
        this.lastTokStart = this.start;
        this.lastTokEndLoc = this.endLoc;
        this.lastTokStartLoc = this.startLoc;
        this.nextToken();
      };
      pp.getToken = function() {
        this.next();
        return new Token(this);
      };
      if (typeof Symbol !== "undefined") {
        pp[Symbol.iterator] = function() {
          var this$1$1 = this;
          return {
            next: function() {
              var token = this$1$1.getToken();
              return {
                done: token.type === types$1.eof,
                value: token
              };
            }
          };
        };
      }
      pp.nextToken = function() {
        var curContext = this.curContext();
        if (!curContext || !curContext.preserveSpace) {
          this.skipSpace();
        }
        this.start = this.pos;
        if (this.options.locations) {
          this.startLoc = this.curPosition();
        }
        if (this.pos >= this.input.length) {
          return this.finishToken(types$1.eof);
        }
        if (curContext.override) {
          return curContext.override(this);
        } else {
          this.readToken(this.fullCharCodeAtPos());
        }
      };
      pp.readToken = function(code2) {
        if (isIdentifierStart(code2, this.options.ecmaVersion >= 6) || code2 === 92) {
          return this.readWord();
        }
        return this.getTokenFromCode(code2);
      };
      pp.fullCharCodeAtPos = function() {
        var code2 = this.input.charCodeAt(this.pos);
        if (code2 <= 55295 || code2 >= 56320) {
          return code2;
        }
        var next = this.input.charCodeAt(this.pos + 1);
        return next <= 56319 || next >= 57344 ? code2 : (code2 << 10) + next - 56613888;
      };
      pp.skipBlockComment = function() {
        var startLoc = this.options.onComment && this.curPosition();
        var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
        if (end === -1) {
          this.raise(this.pos - 2, "Unterminated comment");
        }
        this.pos = end + 2;
        if (this.options.locations) {
          for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) {
            ++this.curLine;
            pos = this.lineStart = nextBreak;
          }
        }
        if (this.options.onComment) {
          this.options.onComment(
            true,
            this.input.slice(start + 2, end),
            start,
            this.pos,
            startLoc,
            this.curPosition()
          );
        }
      };
      pp.skipLineComment = function(startSkip) {
        var start = this.pos;
        var startLoc = this.options.onComment && this.curPosition();
        var ch = this.input.charCodeAt(this.pos += startSkip);
        while (this.pos < this.input.length && !isNewLine(ch)) {
          ch = this.input.charCodeAt(++this.pos);
        }
        if (this.options.onComment) {
          this.options.onComment(
            false,
            this.input.slice(start + startSkip, this.pos),
            start,
            this.pos,
            startLoc,
            this.curPosition()
          );
        }
      };
      pp.skipSpace = function() {
        loop: while (this.pos < this.input.length) {
          var ch = this.input.charCodeAt(this.pos);
          switch (ch) {
            case 32:
            case 160:
              ++this.pos;
              break;
            case 13:
              if (this.input.charCodeAt(this.pos + 1) === 10) {
                ++this.pos;
              }
            case 10:
            case 8232:
            case 8233:
              ++this.pos;
              if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
              }
              break;
            case 47:
              switch (this.input.charCodeAt(this.pos + 1)) {
                case 42:
                  this.skipBlockComment();
                  break;
                case 47:
                  this.skipLineComment(2);
                  break;
                default:
                  break loop;
              }
              break;
            default:
              if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                ++this.pos;
              } else {
                break loop;
              }
          }
        }
      };
      pp.finishToken = function(type2, val) {
        this.end = this.pos;
        if (this.options.locations) {
          this.endLoc = this.curPosition();
        }
        var prevType = this.type;
        this.type = type2;
        this.value = val;
        this.updateContext(prevType);
      };
      pp.readToken_dot = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next >= 48 && next <= 57) {
          return this.readNumber(true);
        }
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
          this.pos += 3;
          return this.finishToken(types$1.ellipsis);
        } else {
          ++this.pos;
          return this.finishToken(types$1.dot);
        }
      };
      pp.readToken_slash = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (this.exprAllowed) {
          ++this.pos;
          return this.readRegexp();
        }
        if (next === 61) {
          return this.finishOp(types$1.assign, 2);
        }
        return this.finishOp(types$1.slash, 1);
      };
      pp.readToken_mult_modulo_exp = function(code2) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        var tokentype = code2 === 42 ? types$1.star : types$1.modulo;
        if (this.options.ecmaVersion >= 7 && code2 === 42 && next === 42) {
          ++size;
          tokentype = types$1.starstar;
          next = this.input.charCodeAt(this.pos + 2);
        }
        if (next === 61) {
          return this.finishOp(types$1.assign, size + 1);
        }
        return this.finishOp(tokentype, size);
      };
      pp.readToken_pipe_amp = function(code2) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code2) {
          if (this.options.ecmaVersion >= 12) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 === 61) {
              return this.finishOp(types$1.assign, 3);
            }
          }
          return this.finishOp(code2 === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
        }
        if (next === 61) {
          return this.finishOp(types$1.assign, 2);
        }
        return this.finishOp(code2 === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
      };
      pp.readToken_caret = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types$1.assign, 2);
        }
        return this.finishOp(types$1.bitwiseXOR, 1);
      };
      pp.readToken_plus_min = function(code2) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code2) {
          if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
            this.skipLineComment(3);
            this.skipSpace();
            return this.nextToken();
          }
          return this.finishOp(types$1.incDec, 2);
        }
        if (next === 61) {
          return this.finishOp(types$1.assign, 2);
        }
        return this.finishOp(types$1.plusMin, 1);
      };
      pp.readToken_lt_gt = function(code2) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        if (next === code2) {
          size = code2 === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(this.pos + size) === 61) {
            return this.finishOp(types$1.assign, size + 1);
          }
          return this.finishOp(types$1.bitShift, size);
        }
        if (next === 33 && code2 === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
          this.skipLineComment(4);
          this.skipSpace();
          return this.nextToken();
        }
        if (next === 61) {
          size = 2;
        }
        return this.finishOp(types$1.relational, size);
      };
      pp.readToken_eq_excl = function(code2) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
        }
        if (code2 === 61 && next === 62 && this.options.ecmaVersion >= 6) {
          this.pos += 2;
          return this.finishToken(types$1.arrow);
        }
        return this.finishOp(code2 === 61 ? types$1.eq : types$1.prefix, 1);
      };
      pp.readToken_question = function() {
        var ecmaVersion3 = this.options.ecmaVersion;
        if (ecmaVersion3 >= 11) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 46) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 < 48 || next2 > 57) {
              return this.finishOp(types$1.questionDot, 2);
            }
          }
          if (next === 63) {
            if (ecmaVersion3 >= 12) {
              var next2$1 = this.input.charCodeAt(this.pos + 2);
              if (next2$1 === 61) {
                return this.finishOp(types$1.assign, 3);
              }
            }
            return this.finishOp(types$1.coalesce, 2);
          }
        }
        return this.finishOp(types$1.question, 1);
      };
      pp.readToken_numberSign = function() {
        var ecmaVersion3 = this.options.ecmaVersion;
        var code2 = 35;
        if (ecmaVersion3 >= 13) {
          ++this.pos;
          code2 = this.fullCharCodeAtPos();
          if (isIdentifierStart(code2, true) || code2 === 92) {
            return this.finishToken(types$1.privateId, this.readWord1());
          }
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString(code2) + "'");
      };
      pp.getTokenFromCode = function(code2) {
        switch (code2) {
          // The interpretation of a dot depends on whether it is followed
          // by a digit or another two dots.
          case 46:
            return this.readToken_dot();
          // Punctuation tokens.
          case 40:
            ++this.pos;
            return this.finishToken(types$1.parenL);
          case 41:
            ++this.pos;
            return this.finishToken(types$1.parenR);
          case 59:
            ++this.pos;
            return this.finishToken(types$1.semi);
          case 44:
            ++this.pos;
            return this.finishToken(types$1.comma);
          case 91:
            ++this.pos;
            return this.finishToken(types$1.bracketL);
          case 93:
            ++this.pos;
            return this.finishToken(types$1.bracketR);
          case 123:
            ++this.pos;
            return this.finishToken(types$1.braceL);
          case 125:
            ++this.pos;
            return this.finishToken(types$1.braceR);
          case 58:
            ++this.pos;
            return this.finishToken(types$1.colon);
          case 96:
            if (this.options.ecmaVersion < 6) {
              break;
            }
            ++this.pos;
            return this.finishToken(types$1.backQuote);
          case 48:
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 120 || next === 88) {
              return this.readRadixNumber(16);
            }
            if (this.options.ecmaVersion >= 6) {
              if (next === 111 || next === 79) {
                return this.readRadixNumber(8);
              }
              if (next === 98 || next === 66) {
                return this.readRadixNumber(2);
              }
            }
          // Anything else beginning with a digit is an integer, octal
          // number, or float.
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          // Quotes produce strings.
          case 34:
          case 39:
            return this.readString(code2);
          // Operators are parsed inline in tiny state machines. '=' (61) is
          // often referred to. `finishOp` simply skips the amount of
          // characters it is given as second argument, and returns a token
          // of the type given by its first argument.
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo_exp(code2);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code2);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code2);
          case 60:
          case 62:
            return this.readToken_lt_gt(code2);
          case 61:
          case 33:
            return this.readToken_eq_excl(code2);
          case 63:
            return this.readToken_question();
          case 126:
            return this.finishOp(types$1.prefix, 1);
          case 35:
            return this.readToken_numberSign();
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString(code2) + "'");
      };
      pp.finishOp = function(type2, size) {
        var str = this.input.slice(this.pos, this.pos + size);
        this.pos += size;
        return this.finishToken(type2, str);
      };
      pp.readRegexp = function() {
        var escaped, inClass, start = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(start, "Unterminated regular expression");
          }
          var ch = this.input.charAt(this.pos);
          if (lineBreak.test(ch)) {
            this.raise(start, "Unterminated regular expression");
          }
          if (!escaped) {
            if (ch === "[") {
              inClass = true;
            } else if (ch === "]" && inClass) {
              inClass = false;
            } else if (ch === "/" && !inClass) {
              break;
            }
            escaped = ch === "\\";
          } else {
            escaped = false;
          }
          ++this.pos;
        }
        var pattern2 = this.input.slice(start, this.pos);
        ++this.pos;
        var flagsStart = this.pos;
        var flags2 = this.readWord1();
        if (this.containsEsc) {
          this.unexpected(flagsStart);
        }
        var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
        state.reset(start, pattern2, flags2);
        this.validateRegExpFlags(state);
        this.validateRegExpPattern(state);
        var value = null;
        try {
          value = new RegExp(pattern2, flags2);
        } catch (e2) {
        }
        return this.finishToken(types$1.regexp, { pattern: pattern2, flags: flags2, value });
      };
      pp.readInt = function(radix2, len, maybeLegacyOctalNumericLiteral) {
        var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
        var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
        var start = this.pos, total = 0, lastCode = 0;
        for (var i3 = 0, e2 = len == null ? Infinity : len; i3 < e2; ++i3, ++this.pos) {
          var code2 = this.input.charCodeAt(this.pos), val = void 0;
          if (allowSeparators && code2 === 95) {
            if (isLegacyOctalNumericLiteral) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
            }
            if (lastCode === 95) {
              this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
            }
            if (i3 === 0) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
            }
            lastCode = code2;
            continue;
          }
          if (code2 >= 97) {
            val = code2 - 97 + 10;
          } else if (code2 >= 65) {
            val = code2 - 65 + 10;
          } else if (code2 >= 48 && code2 <= 57) {
            val = code2 - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix2) {
            break;
          }
          lastCode = code2;
          total = total * radix2 + val;
        }
        if (allowSeparators && lastCode === 95) {
          this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
        }
        if (this.pos === start || len != null && this.pos - start !== len) {
          return null;
        }
        return total;
      };
      function stringToNumber(str, isLegacyOctalNumericLiteral) {
        if (isLegacyOctalNumericLiteral) {
          return parseInt(str, 8);
        }
        return parseFloat(str.replace(/_/g, ""));
      }
      function stringToBigInt(str) {
        if (typeof BigInt !== "function") {
          return null;
        }
        return BigInt(str.replace(/_/g, ""));
      }
      pp.readRadixNumber = function(radix2) {
        var start = this.pos;
        this.pos += 2;
        var val = this.readInt(radix2);
        if (val == null) {
          this.raise(this.start + 2, "Expected number in radix " + radix2);
        }
        if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
          val = stringToBigInt(this.input.slice(start, this.pos));
          ++this.pos;
        } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        return this.finishToken(types$1.num, val);
      };
      pp.readNumber = function(startsWithDot) {
        var start = this.pos;
        if (!startsWithDot && this.readInt(10, void 0, true) === null) {
          this.raise(start, "Invalid number");
        }
        var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        if (octal && this.strict) {
          this.raise(start, "Invalid number");
        }
        var next = this.input.charCodeAt(this.pos);
        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
          var val$1 = stringToBigInt(this.input.slice(start, this.pos));
          ++this.pos;
          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }
          return this.finishToken(types$1.num, val$1);
        }
        if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
          octal = false;
        }
        if (next === 46 && !octal) {
          ++this.pos;
          this.readInt(10);
          next = this.input.charCodeAt(this.pos);
        }
        if ((next === 69 || next === 101) && !octal) {
          next = this.input.charCodeAt(++this.pos);
          if (next === 43 || next === 45) {
            ++this.pos;
          }
          if (this.readInt(10) === null) {
            this.raise(start, "Invalid number");
          }
        }
        if (isIdentifierStart(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        var val = stringToNumber(this.input.slice(start, this.pos), octal);
        return this.finishToken(types$1.num, val);
      };
      pp.readCodePoint = function() {
        var ch = this.input.charCodeAt(this.pos), code2;
        if (ch === 123) {
          if (this.options.ecmaVersion < 6) {
            this.unexpected();
          }
          var codePos = ++this.pos;
          code2 = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
          ++this.pos;
          if (code2 > 1114111) {
            this.invalidStringToken(codePos, "Code point out of bounds");
          }
        } else {
          code2 = this.readHexChar(4);
        }
        return code2;
      };
      pp.readString = function(quote) {
        var out = "", chunkStart = ++this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated string constant");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === quote) {
            break;
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.pos;
          } else if (ch === 8232 || ch === 8233) {
            if (this.options.ecmaVersion < 10) {
              this.raise(this.start, "Unterminated string constant");
            }
            ++this.pos;
            if (this.options.locations) {
              this.curLine++;
              this.lineStart = this.pos;
            }
          } else {
            if (isNewLine(ch)) {
              this.raise(this.start, "Unterminated string constant");
            }
            ++this.pos;
          }
        }
        out += this.input.slice(chunkStart, this.pos++);
        return this.finishToken(types$1.string, out);
      };
      var INVALID_TEMPLATE_ESCAPE_ERROR = {};
      pp.tryReadTemplateToken = function() {
        this.inTemplateElement = true;
        try {
          this.readTmplToken();
        } catch (err) {
          if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
            this.readInvalidTemplateToken();
          } else {
            throw err;
          }
        }
        this.inTemplateElement = false;
      };
      pp.invalidStringToken = function(position, message) {
        if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
          throw INVALID_TEMPLATE_ESCAPE_ERROR;
        } else {
          this.raise(position, message);
        }
      };
      pp.readTmplToken = function() {
        var out = "", chunkStart = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated template");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
            if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
              if (ch === 36) {
                this.pos += 2;
                return this.finishToken(types$1.dollarBraceL);
              } else {
                ++this.pos;
                return this.finishToken(types$1.backQuote);
              }
            }
            out += this.input.slice(chunkStart, this.pos);
            return this.finishToken(types$1.template, out);
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(true);
            chunkStart = this.pos;
          } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.pos);
            ++this.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.pos) === 10) {
                  ++this.pos;
                }
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            if (this.options.locations) {
              ++this.curLine;
              this.lineStart = this.pos;
            }
            chunkStart = this.pos;
          } else {
            ++this.pos;
          }
        }
      };
      pp.readInvalidTemplateToken = function() {
        for (; this.pos < this.input.length; this.pos++) {
          switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if (this.input[this.pos + 1] !== "{") {
                break;
              }
            // fall through
            case "`":
              return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
            case "\r":
              if (this.input[this.pos + 1] === "\n") {
                ++this.pos;
              }
            // fall through
            case "\n":
            case "\u2028":
            case "\u2029":
              ++this.curLine;
              this.lineStart = this.pos + 1;
              break;
          }
        }
        this.raise(this.start, "Unterminated template");
      };
      pp.readEscapedChar = function(inTemplate) {
        var ch = this.input.charCodeAt(++this.pos);
        ++this.pos;
        switch (ch) {
          case 110:
            return "\n";
          // 'n' -> '\n'
          case 114:
            return "\r";
          // 'r' -> '\r'
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          // 'x'
          case 117:
            return codePointToString(this.readCodePoint());
          // 'u'
          case 116:
            return "	";
          // 't' -> '\t'
          case 98:
            return "\b";
          // 'b' -> '\b'
          case 118:
            return "\v";
          // 'v' -> '\u000b'
          case 102:
            return "\f";
          // 'f' -> '\f'
          case 13:
            if (this.input.charCodeAt(this.pos) === 10) {
              ++this.pos;
            }
          // '\r\n'
          case 10:
            if (this.options.locations) {
              this.lineStart = this.pos;
              ++this.curLine;
            }
            return "";
          case 56:
          case 57:
            if (this.strict) {
              this.invalidStringToken(
                this.pos - 1,
                "Invalid escape sequence"
              );
            }
            if (inTemplate) {
              var codePos = this.pos - 1;
              this.invalidStringToken(
                codePos,
                "Invalid escape sequence in template string"
              );
            }
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
              var octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              this.pos += octalStr.length - 1;
              ch = this.input.charCodeAt(this.pos);
              if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                this.invalidStringToken(
                  this.pos - 1 - octalStr.length,
                  inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"
                );
              }
              return String.fromCharCode(octal);
            }
            if (isNewLine(ch)) {
              if (this.options.locations) {
                this.lineStart = this.pos;
                ++this.curLine;
              }
              return "";
            }
            return String.fromCharCode(ch);
        }
      };
      pp.readHexChar = function(len) {
        var codePos = this.pos;
        var n2 = this.readInt(16, len);
        if (n2 === null) {
          this.invalidStringToken(codePos, "Bad character escape sequence");
        }
        return n2;
      };
      pp.readWord1 = function() {
        this.containsEsc = false;
        var word = "", first = true, chunkStart = this.pos;
        var astral = this.options.ecmaVersion >= 6;
        while (this.pos < this.input.length) {
          var ch = this.fullCharCodeAtPos();
          if (isIdentifierChar(ch, astral)) {
            this.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.containsEsc = true;
            word += this.input.slice(chunkStart, this.pos);
            var escStart = this.pos;
            if (this.input.charCodeAt(++this.pos) !== 117) {
              this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
            }
            ++this.pos;
            var esc = this.readCodePoint();
            if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
              this.invalidStringToken(escStart, "Invalid Unicode escape");
            }
            word += codePointToString(esc);
            chunkStart = this.pos;
          } else {
            break;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.pos);
      };
      pp.readWord = function() {
        var word = this.readWord1();
        var type2 = types$1.name;
        if (this.keywords.test(word)) {
          type2 = keywords2[word];
        }
        return this.finishToken(type2, word);
      };
      var version2 = "8.15.0";
      Parser.acorn = {
        Parser,
        version: version2,
        defaultOptions,
        Position,
        SourceLocation,
        getLineInfo,
        Node,
        TokenType,
        tokTypes: types$1,
        keywordTypes: keywords2,
        TokContext,
        tokContexts: types,
        isIdentifierChar,
        isIdentifierStart,
        Token,
        isNewLine,
        lineBreak,
        lineBreakG,
        nonASCIIwhitespace
      };
      function parse(input, options) {
        return Parser.parse(input, options);
      }
      function parseExpressionAt(input, pos, options) {
        return Parser.parseExpressionAt(input, pos, options);
      }
      function tokenizer(input, options) {
        return Parser.tokenizer(input, options);
      }
      exports2.Node = Node;
      exports2.Parser = Parser;
      exports2.Position = Position;
      exports2.SourceLocation = SourceLocation;
      exports2.TokContext = TokContext;
      exports2.Token = Token;
      exports2.TokenType = TokenType;
      exports2.defaultOptions = defaultOptions;
      exports2.getLineInfo = getLineInfo;
      exports2.isIdentifierChar = isIdentifierChar;
      exports2.isIdentifierStart = isIdentifierStart;
      exports2.isNewLine = isNewLine;
      exports2.keywordTypes = keywords2;
      exports2.lineBreak = lineBreak;
      exports2.lineBreakG = lineBreakG;
      exports2.nonASCIIwhitespace = nonASCIIwhitespace;
      exports2.parse = parse;
      exports2.parseExpressionAt = parseExpressionAt;
      exports2.tokContexts = types;
      exports2.tokTypes = types$1;
      exports2.tokenizer = tokenizer;
      exports2.version = version2;
    }));
  })(acorn, acorn.exports);
  return acorn.exports;
}
var acornJsx = { exports: {} };
var xhtml;
var hasRequiredXhtml;
function requireXhtml() {
  if (hasRequiredXhtml) return xhtml;
  hasRequiredXhtml = 1;
  xhtml = {
    quot: '"',
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: " ",
    iexcl: "¡",
    cent: "¢",
    pound: "£",
    curren: "¤",
    yen: "¥",
    brvbar: "¦",
    sect: "§",
    uml: "¨",
    copy: "©",
    ordf: "ª",
    laquo: "«",
    not: "¬",
    shy: "­",
    reg: "®",
    macr: "¯",
    deg: "°",
    plusmn: "±",
    sup2: "²",
    sup3: "³",
    acute: "´",
    micro: "µ",
    para: "¶",
    middot: "·",
    cedil: "¸",
    sup1: "¹",
    ordm: "º",
    raquo: "»",
    frac14: "¼",
    frac12: "½",
    frac34: "¾",
    iquest: "¿",
    Agrave: "À",
    Aacute: "Á",
    Acirc: "Â",
    Atilde: "Ã",
    Auml: "Ä",
    Aring: "Å",
    AElig: "Æ",
    Ccedil: "Ç",
    Egrave: "È",
    Eacute: "É",
    Ecirc: "Ê",
    Euml: "Ë",
    Igrave: "Ì",
    Iacute: "Í",
    Icirc: "Î",
    Iuml: "Ï",
    ETH: "Ð",
    Ntilde: "Ñ",
    Ograve: "Ò",
    Oacute: "Ó",
    Ocirc: "Ô",
    Otilde: "Õ",
    Ouml: "Ö",
    times: "×",
    Oslash: "Ø",
    Ugrave: "Ù",
    Uacute: "Ú",
    Ucirc: "Û",
    Uuml: "Ü",
    Yacute: "Ý",
    THORN: "Þ",
    szlig: "ß",
    agrave: "à",
    aacute: "á",
    acirc: "â",
    atilde: "ã",
    auml: "ä",
    aring: "å",
    aelig: "æ",
    ccedil: "ç",
    egrave: "è",
    eacute: "é",
    ecirc: "ê",
    euml: "ë",
    igrave: "ì",
    iacute: "í",
    icirc: "î",
    iuml: "ï",
    eth: "ð",
    ntilde: "ñ",
    ograve: "ò",
    oacute: "ó",
    ocirc: "ô",
    otilde: "õ",
    ouml: "ö",
    divide: "÷",
    oslash: "ø",
    ugrave: "ù",
    uacute: "ú",
    ucirc: "û",
    uuml: "ü",
    yacute: "ý",
    thorn: "þ",
    yuml: "ÿ",
    OElig: "Œ",
    oelig: "œ",
    Scaron: "Š",
    scaron: "š",
    Yuml: "Ÿ",
    fnof: "ƒ",
    circ: "ˆ",
    tilde: "˜",
    Alpha: "Α",
    Beta: "Β",
    Gamma: "Γ",
    Delta: "Δ",
    Epsilon: "Ε",
    Zeta: "Ζ",
    Eta: "Η",
    Theta: "Θ",
    Iota: "Ι",
    Kappa: "Κ",
    Lambda: "Λ",
    Mu: "Μ",
    Nu: "Ν",
    Xi: "Ξ",
    Omicron: "Ο",
    Pi: "Π",
    Rho: "Ρ",
    Sigma: "Σ",
    Tau: "Τ",
    Upsilon: "Υ",
    Phi: "Φ",
    Chi: "Χ",
    Psi: "Ψ",
    Omega: "Ω",
    alpha: "α",
    beta: "β",
    gamma: "γ",
    delta: "δ",
    epsilon: "ε",
    zeta: "ζ",
    eta: "η",
    theta: "θ",
    iota: "ι",
    kappa: "κ",
    lambda: "λ",
    mu: "μ",
    nu: "ν",
    xi: "ξ",
    omicron: "ο",
    pi: "π",
    rho: "ρ",
    sigmaf: "ς",
    sigma: "σ",
    tau: "τ",
    upsilon: "υ",
    phi: "φ",
    chi: "χ",
    psi: "ψ",
    omega: "ω",
    thetasym: "ϑ",
    upsih: "ϒ",
    piv: "ϖ",
    ensp: " ",
    emsp: " ",
    thinsp: " ",
    zwnj: "‌",
    zwj: "‍",
    lrm: "‎",
    rlm: "‏",
    ndash: "–",
    mdash: "—",
    lsquo: "‘",
    rsquo: "’",
    sbquo: "‚",
    ldquo: "“",
    rdquo: "”",
    bdquo: "„",
    dagger: "†",
    Dagger: "‡",
    bull: "•",
    hellip: "…",
    permil: "‰",
    prime: "′",
    Prime: "″",
    lsaquo: "‹",
    rsaquo: "›",
    oline: "‾",
    frasl: "⁄",
    euro: "€",
    image: "ℑ",
    weierp: "℘",
    real: "ℜ",
    trade: "™",
    alefsym: "ℵ",
    larr: "←",
    uarr: "↑",
    rarr: "→",
    darr: "↓",
    harr: "↔",
    crarr: "↵",
    lArr: "⇐",
    uArr: "⇑",
    rArr: "⇒",
    dArr: "⇓",
    hArr: "⇔",
    forall: "∀",
    part: "∂",
    exist: "∃",
    empty: "∅",
    nabla: "∇",
    isin: "∈",
    notin: "∉",
    ni: "∋",
    prod: "∏",
    sum: "∑",
    minus: "−",
    lowast: "∗",
    radic: "√",
    prop: "∝",
    infin: "∞",
    ang: "∠",
    and: "∧",
    or: "∨",
    cap: "∩",
    cup: "∪",
    "int": "∫",
    there4: "∴",
    sim: "∼",
    cong: "≅",
    asymp: "≈",
    ne: "≠",
    equiv: "≡",
    le: "≤",
    ge: "≥",
    sub: "⊂",
    sup: "⊃",
    nsub: "⊄",
    sube: "⊆",
    supe: "⊇",
    oplus: "⊕",
    otimes: "⊗",
    perp: "⊥",
    sdot: "⋅",
    lceil: "⌈",
    rceil: "⌉",
    lfloor: "⌊",
    rfloor: "⌋",
    lang: "〈",
    rang: "〉",
    loz: "◊",
    spades: "♠",
    clubs: "♣",
    hearts: "♥",
    diams: "♦"
  };
  return xhtml;
}
var hasRequiredAcornJsx;
function requireAcornJsx() {
  if (hasRequiredAcornJsx) return acornJsx.exports;
  hasRequiredAcornJsx = 1;
  (function(module) {
    const XHTMLEntities = requireXhtml();
    const hexNumber = /^[\da-fA-F]+$/;
    const decimalNumber = /^\d+$/;
    const acornJsxMap = /* @__PURE__ */ new WeakMap();
    function getJsxTokens(acorn2) {
      acorn2 = acorn2.Parser.acorn || acorn2;
      let acornJsx2 = acornJsxMap.get(acorn2);
      if (!acornJsx2) {
        const tt = acorn2.tokTypes;
        const TokContext = acorn2.TokContext;
        const TokenType = acorn2.TokenType;
        const tc_oTag = new TokContext("<tag", false);
        const tc_cTag = new TokContext("</tag", false);
        const tc_expr = new TokContext("<tag>...</tag>", true, true);
        const tokContexts = {
          tc_oTag,
          tc_cTag,
          tc_expr
        };
        const tokTypes = {
          jsxName: new TokenType("jsxName"),
          jsxText: new TokenType("jsxText", { beforeExpr: true }),
          jsxTagStart: new TokenType("jsxTagStart", { startsExpr: true }),
          jsxTagEnd: new TokenType("jsxTagEnd")
        };
        tokTypes.jsxTagStart.updateContext = function() {
          this.context.push(tc_expr);
          this.context.push(tc_oTag);
          this.exprAllowed = false;
        };
        tokTypes.jsxTagEnd.updateContext = function(prevType) {
          let out = this.context.pop();
          if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {
            this.context.pop();
            this.exprAllowed = this.curContext() === tc_expr;
          } else {
            this.exprAllowed = true;
          }
        };
        acornJsx2 = { tokContexts, tokTypes };
        acornJsxMap.set(acorn2, acornJsx2);
      }
      return acornJsx2;
    }
    function getQualifiedJSXName(object) {
      if (!object)
        return object;
      if (object.type === "JSXIdentifier")
        return object.name;
      if (object.type === "JSXNamespacedName")
        return object.namespace.name + ":" + object.name.name;
      if (object.type === "JSXMemberExpression")
        return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    }
    module.exports = function(options) {
      options = options || {};
      return function(Parser) {
        return plugin({
          allowNamespaces: options.allowNamespaces !== false,
          allowNamespacedObjects: !!options.allowNamespacedObjects
        }, Parser);
      };
    };
    Object.defineProperty(module.exports, "tokTypes", {
      get: function get_tokTypes() {
        return getJsxTokens(requireAcorn()).tokTypes;
      },
      configurable: true,
      enumerable: true
    });
    function plugin(options, Parser) {
      const acorn2 = Parser.acorn || requireAcorn();
      const acornJsx2 = getJsxTokens(acorn2);
      const tt = acorn2.tokTypes;
      const tok = acornJsx2.tokTypes;
      const tokContexts = acorn2.tokContexts;
      const tc_oTag = acornJsx2.tokContexts.tc_oTag;
      const tc_cTag = acornJsx2.tokContexts.tc_cTag;
      const tc_expr = acornJsx2.tokContexts.tc_expr;
      const isNewLine = acorn2.isNewLine;
      const isIdentifierStart = acorn2.isIdentifierStart;
      const isIdentifierChar = acorn2.isIdentifierChar;
      return class extends Parser {
        // Expose actual `tokTypes` and `tokContexts` to other plugins.
        static get acornJsx() {
          return acornJsx2;
        }
        // Reads inline JSX contents token.
        jsx_readToken() {
          let out = "", chunkStart = this.pos;
          for (; ; ) {
            if (this.pos >= this.input.length)
              this.raise(this.start, "Unterminated JSX contents");
            let ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 60:
              // '<'
              case 123:
                if (this.pos === this.start) {
                  if (ch === 60 && this.exprAllowed) {
                    ++this.pos;
                    return this.finishToken(tok.jsxTagStart);
                  }
                  return this.getTokenFromCode(ch);
                }
                out += this.input.slice(chunkStart, this.pos);
                return this.finishToken(tok.jsxText, out);
              case 38:
                out += this.input.slice(chunkStart, this.pos);
                out += this.jsx_readEntity();
                chunkStart = this.pos;
                break;
              case 62:
              // '>'
              case 125:
                this.raise(
                  this.pos,
                  "Unexpected token `" + this.input[this.pos] + "`. Did you mean `" + (ch === 62 ? "&gt;" : "&rbrace;") + '` or `{"' + this.input[this.pos] + '"}`?'
                );
              default:
                if (isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.pos);
                  out += this.jsx_readNewLine(true);
                  chunkStart = this.pos;
                } else {
                  ++this.pos;
                }
            }
          }
        }
        jsx_readNewLine(normalizeCRLF) {
          let ch = this.input.charCodeAt(this.pos);
          let out;
          ++this.pos;
          if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
            ++this.pos;
            out = normalizeCRLF ? "\n" : "\r\n";
          } else {
            out = String.fromCharCode(ch);
          }
          if (this.options.locations) {
            ++this.curLine;
            this.lineStart = this.pos;
          }
          return out;
        }
        jsx_readString(quote) {
          let out = "", chunkStart = ++this.pos;
          for (; ; ) {
            if (this.pos >= this.input.length)
              this.raise(this.start, "Unterminated string constant");
            let ch = this.input.charCodeAt(this.pos);
            if (ch === quote) break;
            if (ch === 38) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.jsx_readEntity();
              chunkStart = this.pos;
            } else if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.jsx_readNewLine(false);
              chunkStart = this.pos;
            } else {
              ++this.pos;
            }
          }
          out += this.input.slice(chunkStart, this.pos++);
          return this.finishToken(tt.string, out);
        }
        jsx_readEntity() {
          let str = "", count = 0, entity;
          let ch = this.input[this.pos];
          if (ch !== "&")
            this.raise(this.pos, "Entity must start with an ampersand");
          let startPos = ++this.pos;
          while (this.pos < this.input.length && count++ < 10) {
            ch = this.input[this.pos++];
            if (ch === ";") {
              if (str[0] === "#") {
                if (str[1] === "x") {
                  str = str.substr(2);
                  if (hexNumber.test(str))
                    entity = String.fromCharCode(parseInt(str, 16));
                } else {
                  str = str.substr(1);
                  if (decimalNumber.test(str))
                    entity = String.fromCharCode(parseInt(str, 10));
                }
              } else {
                entity = XHTMLEntities[str];
              }
              break;
            }
            str += ch;
          }
          if (!entity) {
            this.pos = startPos;
            return "&";
          }
          return entity;
        }
        // Read a JSX identifier (valid tag or attribute name).
        //
        // Optimized version since JSX identifiers can't contain
        // escape characters and so can be read as single slice.
        // Also assumes that first character was already checked
        // by isIdentifierStart in readToken.
        jsx_readWord() {
          let ch, start = this.pos;
          do {
            ch = this.input.charCodeAt(++this.pos);
          } while (isIdentifierChar(ch) || ch === 45);
          return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));
        }
        // Parse next token as JSX identifier
        jsx_parseIdentifier() {
          let node2 = this.startNode();
          if (this.type === tok.jsxName)
            node2.name = this.value;
          else if (this.type.keyword)
            node2.name = this.type.keyword;
          else
            this.unexpected();
          this.next();
          return this.finishNode(node2, "JSXIdentifier");
        }
        // Parse namespaced identifier.
        jsx_parseNamespacedName() {
          let startPos = this.start, startLoc = this.startLoc;
          let name = this.jsx_parseIdentifier();
          if (!options.allowNamespaces || !this.eat(tt.colon)) return name;
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.namespace = name;
          node2.name = this.jsx_parseIdentifier();
          return this.finishNode(node2, "JSXNamespacedName");
        }
        // Parses element name in any form - namespaced, member
        // or single identifier.
        jsx_parseElementName() {
          if (this.type === tok.jsxTagEnd) return "";
          let startPos = this.start, startLoc = this.startLoc;
          let node2 = this.jsx_parseNamespacedName();
          if (this.type === tt.dot && node2.type === "JSXNamespacedName" && !options.allowNamespacedObjects) {
            this.unexpected();
          }
          while (this.eat(tt.dot)) {
            let newNode = this.startNodeAt(startPos, startLoc);
            newNode.object = node2;
            newNode.property = this.jsx_parseIdentifier();
            node2 = this.finishNode(newNode, "JSXMemberExpression");
          }
          return node2;
        }
        // Parses any type of JSX attribute value.
        jsx_parseAttributeValue() {
          switch (this.type) {
            case tt.braceL:
              let node2 = this.jsx_parseExpressionContainer();
              if (node2.expression.type === "JSXEmptyExpression")
                this.raise(node2.start, "JSX attributes must only be assigned a non-empty expression");
              return node2;
            case tok.jsxTagStart:
            case tt.string:
              return this.parseExprAtom();
            default:
              this.raise(this.start, "JSX value should be either an expression or a quoted JSX text");
          }
        }
        // JSXEmptyExpression is unique type since it doesn't actually parse anything,
        // and so it should start at the end of last read token (left brace) and finish
        // at the beginning of the next one (right brace).
        jsx_parseEmptyExpression() {
          let node2 = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
          return this.finishNodeAt(node2, "JSXEmptyExpression", this.start, this.startLoc);
        }
        // Parses JSX expression enclosed into curly brackets.
        jsx_parseExpressionContainer() {
          let node2 = this.startNode();
          this.next();
          node2.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();
          this.expect(tt.braceR);
          return this.finishNode(node2, "JSXExpressionContainer");
        }
        // Parses following JSX attribute name-value pair.
        jsx_parseAttribute() {
          let node2 = this.startNode();
          if (this.eat(tt.braceL)) {
            this.expect(tt.ellipsis);
            node2.argument = this.parseMaybeAssign();
            this.expect(tt.braceR);
            return this.finishNode(node2, "JSXSpreadAttribute");
          }
          node2.name = this.jsx_parseNamespacedName();
          node2.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
          return this.finishNode(node2, "JSXAttribute");
        }
        // Parses JSX opening tag starting after '<'.
        jsx_parseOpeningElementAt(startPos, startLoc) {
          let node2 = this.startNodeAt(startPos, startLoc);
          node2.attributes = [];
          let nodeName = this.jsx_parseElementName();
          if (nodeName) node2.name = nodeName;
          while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)
            node2.attributes.push(this.jsx_parseAttribute());
          node2.selfClosing = this.eat(tt.slash);
          this.expect(tok.jsxTagEnd);
          return this.finishNode(node2, nodeName ? "JSXOpeningElement" : "JSXOpeningFragment");
        }
        // Parses JSX closing tag starting after '</'.
        jsx_parseClosingElementAt(startPos, startLoc) {
          let node2 = this.startNodeAt(startPos, startLoc);
          let nodeName = this.jsx_parseElementName();
          if (nodeName) node2.name = nodeName;
          this.expect(tok.jsxTagEnd);
          return this.finishNode(node2, nodeName ? "JSXClosingElement" : "JSXClosingFragment");
        }
        // Parses entire JSX element, including it's opening tag
        // (starting after '<'), attributes, contents and closing tag.
        jsx_parseElementAt(startPos, startLoc) {
          let node2 = this.startNodeAt(startPos, startLoc);
          let children = [];
          let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
          let closingElement = null;
          if (!openingElement.selfClosing) {
            contents: for (; ; ) {
              switch (this.type) {
                case tok.jsxTagStart:
                  startPos = this.start;
                  startLoc = this.startLoc;
                  this.next();
                  if (this.eat(tt.slash)) {
                    closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
                    break contents;
                  }
                  children.push(this.jsx_parseElementAt(startPos, startLoc));
                  break;
                case tok.jsxText:
                  children.push(this.parseExprAtom());
                  break;
                case tt.braceL:
                  children.push(this.jsx_parseExpressionContainer());
                  break;
                default:
                  this.unexpected();
              }
            }
            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
              this.raise(
                closingElement.start,
                "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">"
              );
            }
          }
          let fragmentOrElement = openingElement.name ? "Element" : "Fragment";
          node2["opening" + fragmentOrElement] = openingElement;
          node2["closing" + fragmentOrElement] = closingElement;
          node2.children = children;
          if (this.type === tt.relational && this.value === "<") {
            this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
          }
          return this.finishNode(node2, "JSX" + fragmentOrElement);
        }
        // Parse JSX text
        jsx_parseText() {
          let node2 = this.parseLiteral(this.value);
          node2.type = "JSXText";
          return node2;
        }
        // Parses entire JSX element from current position.
        jsx_parseElement() {
          let startPos = this.start, startLoc = this.startLoc;
          this.next();
          return this.jsx_parseElementAt(startPos, startLoc);
        }
        parseExprAtom(refShortHandDefaultPos) {
          if (this.type === tok.jsxText)
            return this.jsx_parseText();
          else if (this.type === tok.jsxTagStart)
            return this.jsx_parseElement();
          else
            return super.parseExprAtom(refShortHandDefaultPos);
        }
        readToken(code2) {
          let context = this.curContext();
          if (context === tc_expr) return this.jsx_readToken();
          if (context === tc_oTag || context === tc_cTag) {
            if (isIdentifierStart(code2)) return this.jsx_readWord();
            if (code2 == 62) {
              ++this.pos;
              return this.finishToken(tok.jsxTagEnd);
            }
            if ((code2 === 34 || code2 === 39) && context == tc_oTag)
              return this.jsx_readString(code2);
          }
          if (code2 === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {
            ++this.pos;
            return this.finishToken(tok.jsxTagStart);
          }
          return super.readToken(code2);
        }
        updateContext(prevType) {
          if (this.type == tt.braceL) {
            var curContext = this.curContext();
            if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);
            else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);
            else super.updateContext(prevType);
            this.exprAllowed = true;
          } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {
            this.context.length -= 2;
            this.context.push(tc_cTag);
            this.exprAllowed = false;
          } else {
            return super.updateContext(prevType);
          }
        }
      };
    }
  })(acornJsx);
  return acornJsx.exports;
}
var eslintVisitorKeys$1 = {};
var hasRequiredEslintVisitorKeys$1;
function requireEslintVisitorKeys$1() {
  if (hasRequiredEslintVisitorKeys$1) return eslintVisitorKeys$1;
  hasRequiredEslintVisitorKeys$1 = 1;
  const KEYS = {
    ArrayExpression: [
      "elements"
    ],
    ArrayPattern: [
      "elements"
    ],
    ArrowFunctionExpression: [
      "params",
      "body"
    ],
    AssignmentExpression: [
      "left",
      "right"
    ],
    AssignmentPattern: [
      "left",
      "right"
    ],
    AwaitExpression: [
      "argument"
    ],
    BinaryExpression: [
      "left",
      "right"
    ],
    BlockStatement: [
      "body"
    ],
    BreakStatement: [
      "label"
    ],
    CallExpression: [
      "callee",
      "arguments"
    ],
    CatchClause: [
      "param",
      "body"
    ],
    ChainExpression: [
      "expression"
    ],
    ClassBody: [
      "body"
    ],
    ClassDeclaration: [
      "id",
      "superClass",
      "body"
    ],
    ClassExpression: [
      "id",
      "superClass",
      "body"
    ],
    ConditionalExpression: [
      "test",
      "consequent",
      "alternate"
    ],
    ContinueStatement: [
      "label"
    ],
    DebuggerStatement: [],
    DoWhileStatement: [
      "body",
      "test"
    ],
    EmptyStatement: [],
    ExperimentalRestProperty: [
      "argument"
    ],
    ExperimentalSpreadProperty: [
      "argument"
    ],
    ExportAllDeclaration: [
      "exported",
      "source",
      "attributes"
    ],
    ExportDefaultDeclaration: [
      "declaration"
    ],
    ExportNamedDeclaration: [
      "declaration",
      "specifiers",
      "source",
      "attributes"
    ],
    ExportSpecifier: [
      "local",
      "exported"
    ],
    ExpressionStatement: [
      "expression"
    ],
    ForInStatement: [
      "left",
      "right",
      "body"
    ],
    ForOfStatement: [
      "left",
      "right",
      "body"
    ],
    ForStatement: [
      "init",
      "test",
      "update",
      "body"
    ],
    FunctionDeclaration: [
      "id",
      "params",
      "body"
    ],
    FunctionExpression: [
      "id",
      "params",
      "body"
    ],
    Identifier: [],
    IfStatement: [
      "test",
      "consequent",
      "alternate"
    ],
    ImportAttribute: [
      "key",
      "value"
    ],
    ImportDeclaration: [
      "specifiers",
      "source",
      "attributes"
    ],
    ImportDefaultSpecifier: [
      "local"
    ],
    ImportExpression: [
      "source",
      "options"
    ],
    ImportNamespaceSpecifier: [
      "local"
    ],
    ImportSpecifier: [
      "imported",
      "local"
    ],
    JSXAttribute: [
      "name",
      "value"
    ],
    JSXClosingElement: [
      "name"
    ],
    JSXClosingFragment: [],
    JSXElement: [
      "openingElement",
      "children",
      "closingElement"
    ],
    JSXEmptyExpression: [],
    JSXExpressionContainer: [
      "expression"
    ],
    JSXFragment: [
      "openingFragment",
      "children",
      "closingFragment"
    ],
    JSXIdentifier: [],
    JSXMemberExpression: [
      "object",
      "property"
    ],
    JSXNamespacedName: [
      "namespace",
      "name"
    ],
    JSXOpeningElement: [
      "name",
      "attributes"
    ],
    JSXOpeningFragment: [],
    JSXSpreadAttribute: [
      "argument"
    ],
    JSXSpreadChild: [
      "expression"
    ],
    JSXText: [],
    LabeledStatement: [
      "label",
      "body"
    ],
    Literal: [],
    LogicalExpression: [
      "left",
      "right"
    ],
    MemberExpression: [
      "object",
      "property"
    ],
    MetaProperty: [
      "meta",
      "property"
    ],
    MethodDefinition: [
      "key",
      "value"
    ],
    NewExpression: [
      "callee",
      "arguments"
    ],
    ObjectExpression: [
      "properties"
    ],
    ObjectPattern: [
      "properties"
    ],
    PrivateIdentifier: [],
    Program: [
      "body"
    ],
    Property: [
      "key",
      "value"
    ],
    PropertyDefinition: [
      "key",
      "value"
    ],
    RestElement: [
      "argument"
    ],
    ReturnStatement: [
      "argument"
    ],
    SequenceExpression: [
      "expressions"
    ],
    SpreadElement: [
      "argument"
    ],
    StaticBlock: [
      "body"
    ],
    Super: [],
    SwitchCase: [
      "test",
      "consequent"
    ],
    SwitchStatement: [
      "discriminant",
      "cases"
    ],
    TaggedTemplateExpression: [
      "tag",
      "quasi"
    ],
    TemplateElement: [],
    TemplateLiteral: [
      "quasis",
      "expressions"
    ],
    ThisExpression: [],
    ThrowStatement: [
      "argument"
    ],
    TryStatement: [
      "block",
      "handler",
      "finalizer"
    ],
    UnaryExpression: [
      "argument"
    ],
    UpdateExpression: [
      "argument"
    ],
    VariableDeclaration: [
      "declarations"
    ],
    VariableDeclarator: [
      "id",
      "init"
    ],
    WhileStatement: [
      "test",
      "body"
    ],
    WithStatement: [
      "object",
      "body"
    ],
    YieldExpression: [
      "argument"
    ]
  };
  const NODE_TYPES = Object.keys(KEYS);
  for (const type2 of NODE_TYPES) {
    Object.freeze(KEYS[type2]);
  }
  Object.freeze(KEYS);
  const KEY_BLACKLIST = /* @__PURE__ */ new Set([
    "parent",
    "leadingComments",
    "trailingComments"
  ]);
  function filterKey(key) {
    return !KEY_BLACKLIST.has(key) && key[0] !== "_";
  }
  function getKeys(node2) {
    return Object.keys(node2).filter(filterKey);
  }
  function unionWith(additionalKeys) {
    const retv = (
      /** @type {{ [type: string]: ReadonlyArray<string> }} */
      Object.assign({}, KEYS)
    );
    for (const type2 of Object.keys(additionalKeys)) {
      if (Object.hasOwn(retv, type2)) {
        const keys = new Set(additionalKeys[type2]);
        for (const key of retv[type2]) {
          keys.add(key);
        }
        retv[type2] = Object.freeze(Array.from(keys));
      } else {
        retv[type2] = Object.freeze(Array.from(additionalKeys[type2]));
      }
    }
    return Object.freeze(retv);
  }
  eslintVisitorKeys$1.KEYS = KEYS;
  eslintVisitorKeys$1.getKeys = getKeys;
  eslintVisitorKeys$1.unionWith = unionWith;
  return eslintVisitorKeys$1;
}
var hasRequiredEspree;
function requireEspree() {
  if (hasRequiredEspree) return espree;
  hasRequiredEspree = 1;
  Object.defineProperty(espree, "__esModule", { value: true });
  var acorn2 = requireAcorn();
  var jsx = requireAcornJsx();
  var visitorKeys = requireEslintVisitorKeys$1();
  function _interopDefaultLegacy(e2) {
    return e2 && typeof e2 === "object" && "default" in e2 ? e2 : { "default": e2 };
  }
  function _interopNamespace(e2) {
    if (e2 && e2.__esModule) return e2;
    var n2 = /* @__PURE__ */ Object.create(null);
    if (e2) {
      Object.keys(e2).forEach(function(k) {
        if (k !== "default") {
          var d2 = Object.getOwnPropertyDescriptor(e2, k);
          Object.defineProperty(n2, k, d2.get ? d2 : {
            enumerable: true,
            get: function() {
              return e2[k];
            }
          });
        }
      });
    }
    n2["default"] = e2;
    return Object.freeze(n2);
  }
  var acorn__namespace = /* @__PURE__ */ _interopNamespace(acorn2);
  var jsx__default = /* @__PURE__ */ _interopDefaultLegacy(jsx);
  var visitorKeys__namespace = /* @__PURE__ */ _interopNamespace(visitorKeys);
  const Token = {
    Boolean: "Boolean",
    Identifier: "Identifier",
    PrivateIdentifier: "PrivateIdentifier",
    Keyword: "Keyword",
    Null: "Null",
    Numeric: "Numeric",
    Punctuator: "Punctuator",
    String: "String",
    RegularExpression: "RegularExpression",
    Template: "Template",
    JSXIdentifier: "JSXIdentifier",
    JSXText: "JSXText"
  };
  function convertTemplatePart(tokens, code2) {
    const firstToken = tokens[0], lastTemplateToken = tokens.at(-1);
    const token = {
      type: Token.Template,
      value: code2.slice(firstToken.start, lastTemplateToken.end)
    };
    if (firstToken.loc) {
      token.loc = {
        start: firstToken.loc.start,
        end: lastTemplateToken.loc.end
      };
    }
    if (firstToken.range) {
      token.start = firstToken.range[0];
      token.end = lastTemplateToken.range[1];
      token.range = [token.start, token.end];
    }
    return token;
  }
  function TokenTranslator(acornTokTypes, code2) {
    this._acornTokTypes = acornTokTypes;
    this._tokens = [];
    this._curlyBrace = null;
    this._code = code2;
  }
  TokenTranslator.prototype = {
    constructor: TokenTranslator,
    /**
     * Translates a single Esprima token to a single Acorn token. This may be
     * inaccurate due to how templates are handled differently in Esprima and
     * Acorn, but should be accurate for all other tokens.
     * @param {AcornToken} token The Acorn token to translate.
     * @param {Object} extra Espree extra object.
     * @returns {EsprimaToken} The Esprima version of the token.
     */
    translate(token, extra) {
      const type2 = token.type, tt = this._acornTokTypes;
      if (type2 === tt.name) {
        token.type = Token.Identifier;
        if (token.value === "static") {
          token.type = Token.Keyword;
        }
        if (extra.ecmaVersion > 5 && (token.value === "yield" || token.value === "let")) {
          token.type = Token.Keyword;
        }
      } else if (type2 === tt.privateId) {
        token.type = Token.PrivateIdentifier;
      } else if (type2 === tt.semi || type2 === tt.comma || type2 === tt.parenL || type2 === tt.parenR || type2 === tt.braceL || type2 === tt.braceR || type2 === tt.dot || type2 === tt.bracketL || type2 === tt.colon || type2 === tt.question || type2 === tt.bracketR || type2 === tt.ellipsis || type2 === tt.arrow || type2 === tt.jsxTagStart || type2 === tt.incDec || type2 === tt.starstar || type2 === tt.jsxTagEnd || type2 === tt.prefix || type2 === tt.questionDot || type2.binop && !type2.keyword || type2.isAssign) {
        token.type = Token.Punctuator;
        token.value = this._code.slice(token.start, token.end);
      } else if (type2 === tt.jsxName) {
        token.type = Token.JSXIdentifier;
      } else if (type2.label === "jsxText" || type2 === tt.jsxAttrValueToken) {
        token.type = Token.JSXText;
      } else if (type2.keyword) {
        if (type2.keyword === "true" || type2.keyword === "false") {
          token.type = Token.Boolean;
        } else if (type2.keyword === "null") {
          token.type = Token.Null;
        } else {
          token.type = Token.Keyword;
        }
      } else if (type2 === tt.num) {
        token.type = Token.Numeric;
        token.value = this._code.slice(token.start, token.end);
      } else if (type2 === tt.string) {
        if (extra.jsxAttrValueToken) {
          extra.jsxAttrValueToken = false;
          token.type = Token.JSXText;
        } else {
          token.type = Token.String;
        }
        token.value = this._code.slice(token.start, token.end);
      } else if (type2 === tt.regexp) {
        token.type = Token.RegularExpression;
        const value = token.value;
        token.regex = {
          flags: value.flags,
          pattern: value.pattern
        };
        token.value = `/${value.pattern}/${value.flags}`;
      }
      return token;
    },
    /**
     * Function to call during Acorn's onToken handler.
     * @param {AcornToken} token The Acorn token.
     * @param {Object} extra The Espree extra object.
     * @returns {void}
     */
    onToken(token, extra) {
      const tt = this._acornTokTypes, tokens = extra.tokens, templateTokens = this._tokens;
      const translateTemplateTokens = () => {
        tokens.push(convertTemplatePart(this._tokens, this._code));
        this._tokens = [];
      };
      if (token.type === tt.eof) {
        if (this._curlyBrace) {
          tokens.push(this.translate(this._curlyBrace, extra));
        }
        return;
      }
      if (token.type === tt.backQuote) {
        if (this._curlyBrace) {
          tokens.push(this.translate(this._curlyBrace, extra));
          this._curlyBrace = null;
        }
        templateTokens.push(token);
        if (templateTokens.length > 1) {
          translateTemplateTokens();
        }
        return;
      }
      if (token.type === tt.dollarBraceL) {
        templateTokens.push(token);
        translateTemplateTokens();
        return;
      }
      if (token.type === tt.braceR) {
        if (this._curlyBrace) {
          tokens.push(this.translate(this._curlyBrace, extra));
        }
        this._curlyBrace = token;
        return;
      }
      if (token.type === tt.template || token.type === tt.invalidTemplate) {
        if (this._curlyBrace) {
          templateTokens.push(this._curlyBrace);
          this._curlyBrace = null;
        }
        templateTokens.push(token);
        return;
      }
      if (this._curlyBrace) {
        tokens.push(this.translate(this._curlyBrace, extra));
        this._curlyBrace = null;
      }
      tokens.push(this.translate(token, extra));
    }
  };
  const SUPPORTED_VERSIONS = [
    3,
    5,
    6,
    // 2015
    7,
    // 2016
    8,
    // 2017
    9,
    // 2018
    10,
    // 2019
    11,
    // 2020
    12,
    // 2021
    13,
    // 2022
    14,
    // 2023
    15,
    // 2024
    16,
    // 2025
    17
    // 2026
  ];
  function getLatestEcmaVersion() {
    return SUPPORTED_VERSIONS.at(-1);
  }
  function getSupportedEcmaVersions() {
    return [...SUPPORTED_VERSIONS];
  }
  function normalizeEcmaVersion(ecmaVersion2 = 5) {
    let version3 = ecmaVersion2 === "latest" ? getLatestEcmaVersion() : ecmaVersion2;
    if (typeof version3 !== "number") {
      throw new Error(`ecmaVersion must be a number or "latest". Received value of type ${typeof ecmaVersion2} instead.`);
    }
    if (version3 >= 2015) {
      version3 -= 2009;
    }
    if (!SUPPORTED_VERSIONS.includes(version3)) {
      throw new Error("Invalid ecmaVersion.");
    }
    return version3;
  }
  function normalizeSourceType(sourceType = "script") {
    if (sourceType === "script" || sourceType === "module") {
      return sourceType;
    }
    if (sourceType === "commonjs") {
      return "script";
    }
    throw new Error("Invalid sourceType.");
  }
  function normalizeOptions(options) {
    const ecmaVersion2 = normalizeEcmaVersion(options.ecmaVersion);
    const sourceType = normalizeSourceType(options.sourceType);
    const ranges = options.range === true;
    const locations = options.loc === true;
    if (ecmaVersion2 !== 3 && options.allowReserved) {
      throw new Error("`allowReserved` is only supported when ecmaVersion is 3");
    }
    if (typeof options.allowReserved !== "undefined" && typeof options.allowReserved !== "boolean") {
      throw new Error("`allowReserved`, when present, must be `true` or `false`");
    }
    const allowReserved = ecmaVersion2 === 3 ? options.allowReserved || "never" : false;
    const ecmaFeatures = options.ecmaFeatures || {};
    const allowReturnOutsideFunction = options.sourceType === "commonjs" || Boolean(ecmaFeatures.globalReturn);
    if (sourceType === "module" && ecmaVersion2 < 6) {
      throw new Error("sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.");
    }
    return Object.assign({}, options, {
      ecmaVersion: ecmaVersion2,
      sourceType,
      ranges,
      locations,
      allowReserved,
      allowReturnOutsideFunction
    });
  }
  const STATE = Symbol("espree's internal state");
  const ESPRIMA_FINISH_NODE = Symbol("espree's esprimaFinishNode");
  function convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc, code2) {
    let type2;
    if (block) {
      type2 = "Block";
    } else if (code2.slice(start, start + 2) === "#!") {
      type2 = "Hashbang";
    } else {
      type2 = "Line";
    }
    const comment2 = {
      type: type2,
      value: text
    };
    if (typeof start === "number") {
      comment2.start = start;
      comment2.end = end;
      comment2.range = [start, end];
    }
    if (typeof startLoc === "object") {
      comment2.loc = {
        start: startLoc,
        end: endLoc
      };
    }
    return comment2;
  }
  var espree$1 = () => (Parser) => {
    const tokTypes = Object.assign({}, Parser.acorn.tokTypes);
    if (Parser.acornJsx) {
      Object.assign(tokTypes, Parser.acornJsx.tokTypes);
    }
    return class Espree extends Parser {
      constructor(opts, code2) {
        if (typeof opts !== "object" || opts === null) {
          opts = {};
        }
        if (typeof code2 !== "string" && !(code2 instanceof String)) {
          code2 = String(code2);
        }
        const originalSourceType = opts.sourceType;
        const options = normalizeOptions(opts);
        const ecmaFeatures = options.ecmaFeatures || {};
        const tokenTranslator = options.tokens === true ? new TokenTranslator(tokTypes, code2) : null;
        const state = {
          originalSourceType: originalSourceType || options.sourceType,
          tokens: tokenTranslator ? [] : null,
          comments: options.comment === true ? [] : null,
          impliedStrict: ecmaFeatures.impliedStrict === true && options.ecmaVersion >= 5,
          ecmaVersion: options.ecmaVersion,
          jsxAttrValueToken: false,
          lastToken: null,
          templateElements: []
        };
        super({
          // do not use spread, because we don't want to pass any unknown options to acorn
          ecmaVersion: options.ecmaVersion,
          sourceType: options.sourceType,
          ranges: options.ranges,
          locations: options.locations,
          allowReserved: options.allowReserved,
          // Truthy value is true for backward compatibility.
          allowReturnOutsideFunction: options.allowReturnOutsideFunction,
          // Collect tokens
          onToken(token) {
            if (tokenTranslator) {
              tokenTranslator.onToken(token, state);
            }
            if (token.type !== tokTypes.eof) {
              state.lastToken = token;
            }
          },
          // Collect comments
          onComment(block, text, start, end, startLoc, endLoc) {
            if (state.comments) {
              const comment2 = convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc, code2);
              state.comments.push(comment2);
            }
          }
        }, code2);
        this[STATE] = state;
      }
      tokenize() {
        do {
          this.next();
        } while (this.type !== tokTypes.eof);
        this.next();
        const extra = this[STATE];
        const tokens = extra.tokens;
        if (extra.comments) {
          tokens.comments = extra.comments;
        }
        return tokens;
      }
      finishNode(...args) {
        const result = super.finishNode(...args);
        return this[ESPRIMA_FINISH_NODE](result);
      }
      finishNodeAt(...args) {
        const result = super.finishNodeAt(...args);
        return this[ESPRIMA_FINISH_NODE](result);
      }
      parse() {
        const extra = this[STATE];
        const program = super.parse();
        program.sourceType = extra.originalSourceType;
        if (extra.comments) {
          program.comments = extra.comments;
        }
        if (extra.tokens) {
          program.tokens = extra.tokens;
        }
        if (program.body.length) {
          const [firstNode] = program.body;
          if (program.range) {
            program.range[0] = firstNode.range[0];
          }
          if (program.loc) {
            program.loc.start = firstNode.loc.start;
          }
          program.start = firstNode.start;
        }
        if (extra.lastToken) {
          if (program.range) {
            program.range[1] = extra.lastToken.range[1];
          }
          if (program.loc) {
            program.loc.end = extra.lastToken.loc.end;
          }
          program.end = extra.lastToken.end;
        }
        this[STATE].templateElements.forEach((templateElement) => {
          const startOffset = -1;
          const endOffset = templateElement.tail ? 1 : 2;
          templateElement.start += startOffset;
          templateElement.end += endOffset;
          if (templateElement.range) {
            templateElement.range[0] += startOffset;
            templateElement.range[1] += endOffset;
          }
          if (templateElement.loc) {
            templateElement.loc.start.column += startOffset;
            templateElement.loc.end.column += endOffset;
          }
        });
        return program;
      }
      parseTopLevel(node2) {
        if (this[STATE].impliedStrict) {
          this.strict = true;
        }
        return super.parseTopLevel(node2);
      }
      /**
       * Overwrites the default raise method to throw Esprima-style errors.
       * @param {int} pos The position of the error.
       * @param {string} message The error message.
       * @throws {SyntaxError} A syntax error.
       * @returns {void}
       */
      raise(pos, message) {
        const loc = Parser.acorn.getLineInfo(this.input, pos);
        const err = new SyntaxError(message);
        err.index = pos;
        err.lineNumber = loc.line;
        err.column = loc.column + 1;
        throw err;
      }
      /**
       * Overwrites the default raise method to throw Esprima-style errors.
       * @param {int} pos The position of the error.
       * @param {string} message The error message.
       * @throws {SyntaxError} A syntax error.
       * @returns {void}
       */
      raiseRecoverable(pos, message) {
        this.raise(pos, message);
      }
      /**
       * Overwrites the default unexpected method to throw Esprima-style errors.
       * @param {int} pos The position of the error.
       * @throws {SyntaxError} A syntax error.
       * @returns {void}
       */
      unexpected(pos) {
        let message = "Unexpected token";
        if (pos !== null && pos !== void 0) {
          this.pos = pos;
          if (this.options.locations) {
            while (this.pos < this.lineStart) {
              this.lineStart = this.input.lastIndexOf("\n", this.lineStart - 2) + 1;
              --this.curLine;
            }
          }
          this.nextToken();
        }
        if (this.end > this.start) {
          message += ` ${this.input.slice(this.start, this.end)}`;
        }
        this.raise(this.start, message);
      }
      /*
      * Esprima-FB represents JSX strings as tokens called "JSXText", but Acorn-JSX
      * uses regular tt.string without any distinction between this and regular JS
      * strings. As such, we intercept an attempt to read a JSX string and set a flag
      * on extra so that when tokens are converted, the next token will be switched
      * to JSXText via onToken.
      */
      jsx_readString(quote) {
        const result = super.jsx_readString(quote);
        if (this.type === tokTypes.string) {
          this[STATE].jsxAttrValueToken = true;
        }
        return result;
      }
      /**
       * Performs last-minute Esprima-specific compatibility checks and fixes.
       * @param {ASTNode} result The node to check.
       * @returns {ASTNode} The finished node.
       */
      [ESPRIMA_FINISH_NODE](result) {
        if (result.type === "TemplateElement") {
          this[STATE].templateElements.push(result);
        }
        if (result.type.includes("Function") && !result.generator) {
          result.generator = false;
        }
        return result;
      }
    };
  };
  const version$12 = "10.4.0";
  const parsers = {
    _regular: null,
    _jsx: null,
    get regular() {
      if (this._regular === null) {
        this._regular = acorn__namespace.Parser.extend(espree$1());
      }
      return this._regular;
    },
    get jsx() {
      if (this._jsx === null) {
        this._jsx = acorn__namespace.Parser.extend(jsx__default["default"](), espree$1());
      }
      return this._jsx;
    },
    get(options) {
      const useJsx = Boolean(
        options && options.ecmaFeatures && options.ecmaFeatures.jsx
      );
      return useJsx ? this.jsx : this.regular;
    }
  };
  function tokenize(code2, options) {
    const Parser = parsers.get(options);
    if (!options || options.tokens !== true) {
      options = Object.assign({}, options, { tokens: true });
    }
    return new Parser(options, code2).tokenize();
  }
  function parse(code2, options) {
    const Parser = parsers.get(options);
    return new Parser(options, code2).parse();
  }
  const version2 = version$12;
  const name = "espree";
  const VisitorKeys = (function() {
    return visitorKeys__namespace.KEYS;
  })();
  const Syntax = (function() {
    let key, types = {};
    if (typeof Object.create === "function") {
      types = /* @__PURE__ */ Object.create(null);
    }
    for (key in VisitorKeys) {
      if (Object.hasOwn(VisitorKeys, key)) {
        types[key] = key;
      }
    }
    if (typeof Object.freeze === "function") {
      Object.freeze(types);
    }
    return types;
  })();
  const latestEcmaVersion = getLatestEcmaVersion();
  const supportedEcmaVersions = getSupportedEcmaVersions();
  espree.Syntax = Syntax;
  espree.VisitorKeys = VisitorKeys;
  espree.latestEcmaVersion = latestEcmaVersion;
  espree.name = name;
  espree.parse = parse;
  espree.supportedEcmaVersions = supportedEcmaVersions;
  espree.tokenize = tokenize;
  espree.version = version2;
  return espree;
}
var lodash_merge = { exports: {} };
lodash_merge.exports;
var hasRequiredLodash_merge;
function requireLodash_merge() {
  if (hasRequiredLodash_merge) return lodash_merge.exports;
  hasRequiredLodash_merge = 1;
  (function(module, exports) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global$1 == "object" && global$1 && global$1.Object === Object && global$1;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = (function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    })();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    })();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0, Symbol2 = root.Symbol, Uint8Array2 = root.Uint8Array;
    Buffer2 ? Buffer2.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = (function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    })();
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, nativeMax = Math.max, nativeNow = Date.now;
    var Map2 = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ (function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    })();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data2 = this.__data__;
      if (nativeCreate) {
        var result = data2[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data2, key) ? data2[key] : void 0;
    }
    function hashHas(key) {
      var data2 = this.__data__;
      return nativeCreate ? data2[key] !== void 0 : hasOwnProperty2.call(data2, key);
    }
    function hashSet(key, value) {
      var data2 = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data2[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data2.length - 1;
      if (index == lastIndex) {
        data2.pop();
      } else {
        splice.call(data2, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      return index < 0 ? void 0 : data2[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      if (index < 0) {
        ++this.size;
        data2.push([key, value]);
      } else {
        data2[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data2 = getMapData(this, key), size = data2.size;
      data2.set(key, value);
      this.size += data2.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data2 = this.__data__ = new ListCache(entries);
      this.size = data2.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data2 = this.__data__, result = data2["delete"](key);
      this.size = data2.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data2 = this.__data__;
      if (data2 instanceof ListCache) {
        var pairs = data2.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data2.size;
          return this;
        }
        data2 = this.__data__ = new MapCache(pairs);
      }
      data2.set(key, value);
      this.size = data2.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if (!(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString2(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern2 = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern2.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray2(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction2(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      {
        return buffer.slice();
      }
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = cloneArrayBuffer(typedArray.buffer);
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map, key) {
      var data2 = map.__data__;
      return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type2 = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type2 = typeof index;
      if (type2 == "number" ? isArrayLike(object) && isIndex(index, object.length) : type2 == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type2 = typeof value;
      return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString2(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ (function() {
      return arguments;
    })()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray2 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer2 = nativeIsBuffer || stubFalse;
    function isFunction2(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type2 = typeof value;
      return value != null && (type2 == "object" || type2 == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeysIn(object);
    }
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = merge;
  })(lodash_merge, lodash_merge.exports);
  return lodash_merge.exports;
}
var version = "9.36.0";
var require$$5 = {
  version
};
var eslintrcUniversal = {};
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var inited = false;
function init() {
  inited = true;
  var code2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i2 = 0, len = code2.length; i2 < len; ++i2) {
    lookup[i2] = code2[i2];
    revLookup[code2.charCodeAt(i2)] = i2;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
}
function toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i2, j, l2, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
  arr = new Arr(len * 3 / 4 - placeHolders);
  l2 = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i2 = 0, j = 0; i2 < l2; i2 += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
    arr[L++] = tmp >> 16 & 255;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
    arr[L++] = tmp & 255;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i2 = start; i2 < end; i2 += 3) {
    tmp = (uint8[i2] << 16) + (uint8[i2 + 1] << 8) + uint8[i2 + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = "";
  var parts = [];
  var maxChunkLength = 16383;
  for (var i2 = 0, len2 = len - extraBytes; i2 < len2; i2 += maxChunkLength) {
    parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len2 ? len2 : i2 + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 63];
    output += "==";
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 63];
    output += lookup[tmp << 2 & 63];
    output += "=";
  }
  parts.push(output);
  return parts.join("");
}
function read(buffer, offset, isLE, mLen, nBytes) {
  var e2, m2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i2 = isLE ? nBytes - 1 : 0;
  var d2 = isLE ? -1 : 1;
  var s2 = buffer[offset + i2];
  i2 += d2;
  e2 = s2 & (1 << -nBits) - 1;
  s2 >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e2 = e2 * 256 + buffer[offset + i2], i2 += d2, nBits -= 8) {
  }
  m2 = e2 & (1 << -nBits) - 1;
  e2 >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m2 = m2 * 256 + buffer[offset + i2], i2 += d2, nBits -= 8) {
  }
  if (e2 === 0) {
    e2 = 1 - eBias;
  } else if (e2 === eMax) {
    return m2 ? NaN : (s2 ? -1 : 1) * Infinity;
  } else {
    m2 = m2 + Math.pow(2, mLen);
    e2 = e2 - eBias;
  }
  return (s2 ? -1 : 1) * m2 * Math.pow(2, e2 - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e2, m2, c2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i2 = isLE ? 0 : nBytes - 1;
  var d2 = isLE ? 1 : -1;
  var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m2 = isNaN(value) ? 1 : 0;
    e2 = eMax;
  } else {
    e2 = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c2 = Math.pow(2, -e2)) < 1) {
      e2--;
      c2 *= 2;
    }
    if (e2 + eBias >= 1) {
      value += rt / c2;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c2 >= 2) {
      e2++;
      c2 /= 2;
    }
    if (e2 + eBias >= eMax) {
      m2 = 0;
      e2 = eMax;
    } else if (e2 + eBias >= 1) {
      m2 = (value * c2 - 1) * Math.pow(2, mLen);
      e2 = e2 + eBias;
    } else {
      m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e2 = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i2] = m2 & 255, i2 += d2, m2 /= 256, mLen -= 8) {
  }
  e2 = e2 << mLen | m2;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i2] = e2 & 255, i2 += d2, e2 /= 256, eLen -= 8) {
  }
  buffer[offset + i2 - d2] |= s2 * 128;
}
var toString = {}.toString;
var isArray$1 = Array.isArray || function(arr) {
  return toString.call(arr) == "[object Array]";
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var INSPECT_MAX_BYTES = 50;
Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== void 0 ? global$1.TYPED_ARRAY_SUPPORT : true;
kMaxLength();
function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError("Invalid typed array length");
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }
  return that;
}
function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }
  if (typeof arg === "number") {
    if (typeof encodingOrOffset === "string") {
      throw new Error(
        "If encoding is specified then the first argument must be a string"
      );
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192;
Buffer._augment = function(arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};
function from(that, value, encodingOrOffset, length) {
  if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === "string") {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}
Buffer.from = function(value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};
if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== "undefined" && Symbol.species && Buffer[Symbol.species] === Buffer) ;
}
function assertSize(size) {
  if (typeof size !== "number") {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill2, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill2 !== void 0) {
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill2, encoding) : createBuffer(that, size).fill(fill2);
  }
  return createBuffer(that, size);
}
Buffer.alloc = function(size, fill2, encoding) {
  return alloc(null, size, fill2, encoding);
};
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i2 = 0; i2 < size; ++i2) {
      that[i2] = 0;
    }
  }
  return that;
}
Buffer.allocUnsafe = function(size) {
  return allocUnsafe(null, size);
};
Buffer.allocUnsafeSlow = function(size) {
  return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
  if (typeof encoding !== "string" || encoding === "") {
    encoding = "utf8";
  }
  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i2 = 0; i2 < length; i2 += 1) {
    that[i2] = array[i2] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength;
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError("'offset' is out of bounds");
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError("'length' is out of bounds");
  }
  if (byteOffset === void 0 && length === void 0) {
    array = new Uint8Array(array);
  } else if (length === void 0) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
      if (typeof obj.length !== "number" || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === "Buffer" && isArray$1(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length) {
  if (length >= kMaxLength()) {
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
  }
  return length | 0;
}
Buffer.isBuffer = isBuffer$1;
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
Buffer.compare = function compare(a2, b) {
  if (!internalIsBuffer(a2) || !internalIsBuffer(b)) {
    throw new TypeError("Arguments must be Buffers");
  }
  if (a2 === b) return 0;
  var x2 = a2.length;
  var y2 = b.length;
  for (var i2 = 0, len = Math.min(x2, y2); i2 < len; ++i2) {
    if (a2[i2] !== b[i2]) {
      x2 = a2[i2];
      y2 = b[i2];
      break;
    }
  }
  if (x2 < y2) return -1;
  if (y2 < x2) return 1;
  return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "latin1":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return true;
    default:
      return false;
  }
};
Buffer.concat = function concat(list, length) {
  if (!isArray$1(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  if (list.length === 0) {
    return Buffer.alloc(0);
  }
  var i2;
  if (length === void 0) {
    length = 0;
    for (i2 = 0; i2 < list.length; ++i2) {
      length += list[i2].length;
    }
  }
  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i2 = 0; i2 < list.length; ++i2) {
    var buf = list[i2];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};
function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== "string") {
    string = "" + string;
  }
  var len = string.length;
  if (len === 0) return 0;
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case "ascii":
      case "latin1":
      case "binary":
        return len;
      case "utf8":
      case "utf-8":
      case void 0:
        return utf8ToBytes(string).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return len * 2;
      case "hex":
        return len >>> 1;
      case "base64":
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length;
        encoding = ("" + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
  var loweredCase = false;
  if (start === void 0 || start < 0) {
    start = 0;
  }
  if (start > this.length) {
    return "";
  }
  if (end === void 0 || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return "";
  }
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return "";
  }
  if (!encoding) encoding = "utf8";
  while (true) {
    switch (encoding) {
      case "hex":
        return hexSlice(this, start, end);
      case "utf8":
      case "utf-8":
        return utf8Slice(this, start, end);
      case "ascii":
        return asciiSlice(this, start, end);
      case "latin1":
      case "binary":
        return latin1Slice(this, start, end);
      case "base64":
        return base64Slice(this, start, end);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
        encoding = (encoding + "").toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.prototype._isBuffer = true;
function swap(b, n2, m2) {
  var i2 = b[n2];
  b[n2] = b[m2];
  b[m2] = i2;
}
Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  }
  for (var i2 = 0; i2 < len; i2 += 2) {
    swap(this, i2, i2 + 1);
  }
  return this;
};
Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  }
  for (var i2 = 0; i2 < len; i2 += 4) {
    swap(this, i2, i2 + 3);
    swap(this, i2 + 1, i2 + 2);
  }
  return this;
};
Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  }
  for (var i2 = 0; i2 < len; i2 += 8) {
    swap(this, i2, i2 + 7);
    swap(this, i2 + 1, i2 + 6);
    swap(this, i2 + 2, i2 + 5);
    swap(this, i2 + 3, i2 + 4);
  }
  return this;
};
Buffer.prototype.toString = function toString2() {
  var length = this.length | 0;
  if (length === 0) return "";
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};
Buffer.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b)) throw new TypeError("Argument must be a Buffer");
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
  var str = "";
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
    if (this.length > max) str += " ... ";
  }
  return "<Buffer " + str + ">";
};
Buffer.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError("Argument must be a Buffer");
  }
  if (start === void 0) {
    start = 0;
  }
  if (end === void 0) {
    end = target ? target.length : 0;
  }
  if (thisStart === void 0) {
    thisStart = 0;
  }
  if (thisEnd === void 0) {
    thisEnd = this.length;
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError("out of range index");
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }
  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x2 = thisEnd - thisStart;
  var y2 = end - start;
  var len = Math.min(x2, y2);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);
  for (var i2 = 0; i2 < len; ++i2) {
    if (thisCopy[i2] !== targetCopy[i2]) {
      x2 = thisCopy[i2];
      y2 = targetCopy[i2];
      break;
    }
  }
  if (x2 < y2) return -1;
  if (y2 < x2) return 1;
  return 0;
};
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  if (buffer.length === 0) return -1;
  if (typeof byteOffset === "string") {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 2147483647) {
    byteOffset = 2147483647;
  } else if (byteOffset < -2147483648) {
    byteOffset = -2147483648;
  }
  byteOffset = +byteOffset;
  if (isNaN(byteOffset)) {
    byteOffset = dir ? 0 : buffer.length - 1;
  }
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1;
  }
  if (typeof val === "string") {
    val = Buffer.from(val, encoding);
  }
  if (internalIsBuffer(val)) {
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === "number") {
    val = val & 255;
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== void 0) {
    encoding = String(encoding).toLowerCase();
    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read2(buf, i3) {
    if (indexSize === 1) {
      return buf[i3];
    } else {
      return buf.readUInt16BE(i3 * indexSize);
    }
  }
  var i2;
  if (dir) {
    var foundIndex = -1;
    for (i2 = byteOffset; i2 < arrLength; i2++) {
      if (read2(arr, i2) === read2(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
        if (foundIndex === -1) foundIndex = i2;
        if (i2 - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i2 -= i2 - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i2 = byteOffset; i2 >= 0; i2--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read2(arr, i2 + j) !== read2(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i2;
    }
  }
  return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i2 = 0; i2 < length; ++i2) {
    var parsed = parseInt(string.substr(i2 * 2, 2), 16);
    if (isNaN(parsed)) return i2;
    buf[offset + i2] = parsed;
  }
  return i2;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write2(string, offset, length, encoding) {
  if (offset === void 0) {
    encoding = "utf8";
    length = this.length;
    offset = 0;
  } else if (length === void 0 && typeof offset === "string") {
    encoding = offset;
    length = this.length;
    offset = 0;
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === void 0) encoding = "utf8";
    } else {
      encoding = length;
      length = void 0;
    }
  } else {
    throw new Error(
      "Buffer.write(string, encoding, offset[, length]) is no longer supported"
    );
  }
  var remaining = this.length - offset;
  if (length === void 0 || length > remaining) length = remaining;
  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError("Attempt to write outside buffer bounds");
  }
  if (!encoding) encoding = "utf8";
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case "hex":
        return hexWrite(this, string, offset, length);
      case "utf8":
      case "utf-8":
        return utf8Write(this, string, offset, length);
      case "ascii":
        return asciiWrite(this, string, offset, length);
      case "latin1":
      case "binary":
        return latin1Write(this, string, offset, length);
      case "base64":
        return base64Write(this, string, offset, length);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return ucs2Write(this, string, offset, length);
      default:
        if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
        encoding = ("" + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};
Buffer.prototype.toJSON = function toJSON() {
  return {
    type: "Buffer",
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i2 = start;
  while (i2 < end) {
    var firstByte = buf[i2];
    var codePoint = null;
    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
    if (i2 + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 128) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i2 + 1];
          if ((secondByte & 192) === 128) {
            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
            if (tempCodePoint > 127) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i2 + 1];
          thirdByte = buf[i2 + 2];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i2 + 1];
          thirdByte = buf[i2 + 2];
          fourthByte = buf[i2 + 3];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      codePoint = 65533;
      bytesPerSequence = 1;
    } else if (codePoint > 65535) {
      codePoint -= 65536;
      res.push(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    res.push(codePoint);
    i2 += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints);
  }
  var res = "";
  var i2 = 0;
  while (i2 < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i2 = start; i2 < end; ++i2) {
    ret += String.fromCharCode(buf[i2] & 127);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i2 = start; i2 < end; ++i2) {
    ret += String.fromCharCode(buf[i2]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = "";
  for (var i2 = start; i2 < end; ++i2) {
    out += toHex(buf[i2]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = "";
  for (var i2 = 0; i2 < bytes.length; i2 += 2) {
    res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
  }
  return res;
}
Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === void 0 ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }
  if (end < start) end = start;
  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, void 0);
    for (var i2 = 0; i2 < sliceLen; ++i2) {
      newBuf[i2] = this[i2 + start];
    }
  }
  return newBuf;
};
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
  if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) checkOffset(offset, byteLength2, this.length);
  var val = this[offset];
  var mul = 1;
  var i2 = 0;
  while (++i2 < byteLength2 && (mul *= 256)) {
    val += this[offset + i2] * mul;
  }
  return val;
};
Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength2, this.length);
  }
  var val = this[offset + --byteLength2];
  var mul = 1;
  while (byteLength2 > 0 && (mul *= 256)) {
    val += this[offset + --byteLength2] * mul;
  }
  return val;
};
Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};
Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) checkOffset(offset, byteLength2, this.length);
  var val = this[offset];
  var mul = 1;
  var i2 = 0;
  while (++i2 < byteLength2 && (mul *= 256)) {
    val += this[offset + i2] * mul;
  }
  mul *= 128;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
  return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) checkOffset(offset, byteLength2, this.length);
  var i2 = byteLength2;
  var mul = 1;
  var val = this[offset + --i2];
  while (i2 > 0 && (mul *= 256)) {
    val += this[offset + --i2] * mul;
  }
  mul *= 128;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
  return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 128)) return this[offset];
  return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
    checkInt(this, value, offset, byteLength2, maxBytes, 0);
  }
  var mul = 1;
  var i2 = 0;
  this[offset] = value & 255;
  while (++i2 < byteLength2 && (mul *= 256)) {
    this[offset + i2] = value / mul & 255;
  }
  return offset + byteLength2;
};
Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
    checkInt(this, value, offset, byteLength2, maxBytes, 0);
  }
  var i2 = byteLength2 - 1;
  var mul = 1;
  this[offset + i2] = value & 255;
  while (--i2 >= 0 && (mul *= 256)) {
    this[offset + i2] = value / mul & 255;
  }
  return offset + byteLength2;
};
Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 255;
  return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 65535 + value + 1;
  for (var i2 = 0, j = Math.min(buf.length - offset, 2); i2 < j; ++i2) {
    buf[offset + i2] = (value & 255 << 8 * (littleEndian ? i2 : 1 - i2)) >>> (littleEndian ? i2 : 1 - i2) * 8;
  }
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 4294967295 + value + 1;
  for (var i2 = 0, j = Math.min(buf.length - offset, 4); i2 < j; ++i2) {
    buf[offset + i2] = value >>> (littleEndian ? i2 : 3 - i2) * 8 & 255;
  }
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength2 - 1);
    checkInt(this, value, offset, byteLength2, limit - 1, -limit);
  }
  var i2 = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 255;
  while (++i2 < byteLength2 && (mul *= 256)) {
    if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
      sub = 1;
    }
    this[offset + i2] = (value / mul >> 0) - sub & 255;
  }
  return offset + byteLength2;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength2 - 1);
    checkInt(this, value, offset, byteLength2, limit - 1, -limit);
  }
  var i2 = byteLength2 - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i2] = value & 255;
  while (--i2 >= 0 && (mul *= 256)) {
    if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
      sub = 1;
    }
    this[offset + i2] = (value / mul >> 0) - sub & 255;
  }
  return offset + byteLength2;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 255 + value + 1;
  this[offset] = value & 255;
  return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
  if (value < 0) value = 4294967295 + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError("Index out of range");
  if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;
  if (targetStart < 0) {
    throw new RangeError("targetStart out of bounds");
  }
  if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
  if (end < 0) throw new RangeError("sourceEnd out of bounds");
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  var len = end - start;
  var i2;
  if (this === target && start < targetStart && targetStart < end) {
    for (i2 = len - 1; i2 >= 0; --i2) {
      target[i2 + targetStart] = this[i2 + start];
    }
  } else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (i2 = 0; i2 < len; ++i2) {
      target[i2 + targetStart] = this[i2 + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }
  return len;
};
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  if (typeof val === "string") {
    if (typeof start === "string") {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === "string") {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code2 = val.charCodeAt(0);
      if (code2 < 256) {
        val = code2;
      }
    }
    if (encoding !== void 0 && typeof encoding !== "string") {
      throw new TypeError("encoding must be a string");
    }
    if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
  } else if (typeof val === "number") {
    val = val & 255;
  }
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError("Out of range index");
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === void 0 ? this.length : end >>> 0;
  if (!val) val = 0;
  var i2;
  if (typeof val === "number") {
    for (i2 = start; i2 < end; ++i2) {
      this[i2] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i2 = 0; i2 < end - start; ++i2) {
      this[i2 + start] = bytes[i2 % len];
    }
  }
  return this;
};
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
  str = stringtrim(str).replace(INVALID_BASE64_RE, "");
  if (str.length < 2) return "";
  while (str.length % 4 !== 0) {
    str = str + "=";
  }
  return str;
}
function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n2) {
  if (n2 < 16) return "0" + n2.toString(16);
  return n2.toString(16);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i2 = 0; i2 < length; ++i2) {
    codePoint = string.charCodeAt(i2);
    if (codePoint > 55295 && codePoint < 57344) {
      if (!leadSurrogate) {
        if (codePoint > 56319) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
          continue;
        } else if (i2 + 1 === length) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
          continue;
        }
        leadSurrogate = codePoint;
        continue;
      }
      if (codePoint < 56320) {
        if ((units -= 3) > -1) bytes.push(239, 191, 189);
        leadSurrogate = codePoint;
        continue;
      }
      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
    } else if (leadSurrogate) {
      if ((units -= 3) > -1) bytes.push(239, 191, 189);
    }
    leadSurrogate = null;
    if (codePoint < 128) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 2048) {
      if ((units -= 2) < 0) break;
      bytes.push(
        codePoint >> 6 | 192,
        codePoint & 63 | 128
      );
    } else if (codePoint < 65536) {
      if ((units -= 3) < 0) break;
      bytes.push(
        codePoint >> 12 | 224,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else if (codePoint < 1114112) {
      if ((units -= 4) < 0) break;
      bytes.push(
        codePoint >> 18 | 240,
        codePoint >> 12 & 63 | 128,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else {
      throw new Error("Invalid code point");
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i2 = 0; i2 < str.length; ++i2) {
    byteArray.push(str.charCodeAt(i2) & 255);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c2, hi, lo;
  var byteArray = [];
  for (var i2 = 0; i2 < str.length; ++i2) {
    if ((units -= 2) < 0) break;
    c2 = str.charCodeAt(i2);
    hi = c2 >> 8;
    lo = c2 % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}
function blitBuffer(src2, dst, offset, length) {
  for (var i2 = 0; i2 < length; ++i2) {
    if (i2 + offset >= dst.length || i2 >= src2.length) break;
    dst[i2 + offset] = src2[i2];
  }
  return i2;
}
function isnan(val) {
  return val !== val;
}
function isBuffer$1(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
}
var inherits;
if (typeof Object.create === "function") {
  inherits = function inherits2(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  inherits = function inherits2(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function() {
    };
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};
  for (var i2 = 0; i2 < keys.length; i2++) {
    descriptors[keys[i2]] = Object.getOwnPropertyDescriptor(obj, keys[i2]);
  }
  return descriptors;
};
var formatRegExp = /%[sdj%]/g;
function format$1(f2) {
  if (!isString(f2)) {
    var objects = [];
    for (var i2 = 0; i2 < arguments.length; i2++) {
      objects.push(inspect2(arguments[i2]));
    }
    return objects.join(" ");
  }
  var i2 = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f2).replace(formatRegExp, function(x3) {
    if (x3 === "%%") return "%";
    if (i2 >= len) return x3;
    switch (x3) {
      case "%s":
        return String(args[i2++]);
      case "%d":
        return Number(args[i2++]);
      case "%j":
        try {
          return JSON.stringify(args[i2++]);
        } catch (_) {
          return "[Circular]";
        }
      default:
        return x3;
    }
  });
  for (var x2 = args[i2]; i2 < len; x2 = args[++i2]) {
    if (isNull(x2) || !isObject(x2)) {
      str += " " + x2;
    } else {
      str += " " + inspect2(x2);
    }
  }
  return str;
}
function deprecate(fn, msg) {
  if (isUndefined(global$1.process)) {
    return function() {
      return deprecate(fn, msg).apply(this, arguments);
    };
  }
  if (browser$1$1.noDeprecation === true) {
    return fn;
  }
  var warned = false;
  function deprecated() {
    if (!warned) {
      if (browser$1$1.throwDeprecation) {
        throw new Error(msg);
      } else if (browser$1$1.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
}
var debugs = {};
var debugEnviron;
function debuglog(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = browser$1$1.env.NODE_DEBUG || "";
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
      var pid = 0;
      debugs[set] = function() {
        var msg = format$1.apply(null, arguments);
        console.error("%s %d: %s", set, pid, msg);
      };
    } else {
      debugs[set] = function() {
      };
    }
  }
  return debugs[set];
}
function inspect2(obj, opts) {
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    ctx.showHidden = opts;
  } else if (opts) {
    _extend(ctx, opts);
  }
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
inspect2.colors = {
  "bold": [1, 22],
  "italic": [3, 23],
  "underline": [4, 24],
  "inverse": [7, 27],
  "white": [37, 39],
  "grey": [90, 39],
  "black": [30, 39],
  "blue": [34, 39],
  "cyan": [36, 39],
  "green": [32, 39],
  "magenta": [35, 39],
  "red": [31, 39],
  "yellow": [33, 39]
};
inspect2.styles = {
  "special": "cyan",
  "number": "yellow",
  "boolean": "yellow",
  "undefined": "grey",
  "null": "bold",
  "string": "green",
  "date": "magenta",
  // "name": intentionally not styling
  "regexp": "red"
};
function stylizeWithColor(str, styleType) {
  var style = inspect2.styles[styleType];
  if (style) {
    return "\x1B[" + inspect2.colors[style][0] + "m" + str + "\x1B[" + inspect2.colors[style][1] + "m";
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function(val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect2 && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }
  if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
    return formatError(value);
  }
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ": " + value.name : "";
      return ctx.stylize("[Function" + name + "]", "special");
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), "date");
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base = "", array = false, braces = ["{", "}"];
  if (isArray(value)) {
    array = true;
    braces = ["[", "]"];
  }
  if (isFunction(value)) {
    var n2 = value.name ? ": " + value.name : "";
    base = " [Function" + n2 + "]";
  }
  if (isRegExp(value)) {
    base = " " + RegExp.prototype.toString.call(value);
  }
  if (isDate(value)) {
    base = " " + Date.prototype.toUTCString.call(value);
  }
  if (isError(value)) {
    base = " " + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    } else {
      return ctx.stylize("[Object]", "special");
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize("undefined", "undefined");
  if (isString(value)) {
    var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
    return ctx.stylize(simple, "string");
  }
  if (isNumber(value))
    return ctx.stylize("" + value, "number");
  if (isBoolean(value))
    return ctx.stylize("" + value, "boolean");
  if (isNull(value))
    return ctx.stylize("null", "null");
}
function formatError(value) {
  return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i2 = 0, l2 = value.length; i2 < l2; ++i2) {
    if (hasOwnProperty(value, String(i2))) {
      output.push(formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        String(i2),
        true
      ));
    } else {
      output.push("");
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        key,
        true
      ));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize("[Getter/Setter]", "special");
    } else {
      str = ctx.stylize("[Getter]", "special");
    }
  } else {
    if (desc.set) {
      str = ctx.stylize("[Setter]", "special");
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = "[" + key + "]";
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf("\n") > -1) {
        if (array) {
          str = str.split("\n").map(function(line) {
            return "  " + line;
          }).join("\n").substr(2);
        } else {
          str = "\n" + str.split("\n").map(function(line) {
            return "   " + line;
          }).join("\n");
        }
      }
    } else {
      str = ctx.stylize("[Circular]", "special");
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify("" + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, "name");
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, "string");
    }
  }
  return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    if (cur.indexOf("\n") >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
  }
  return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
function isArray(ar) {
  return Array.isArray(ar);
}
function isBoolean(arg) {
  return typeof arg === "boolean";
}
function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return arg == null;
}
function isNumber(arg) {
  return typeof arg === "number";
}
function isString(arg) {
  return typeof arg === "string";
}
function isSymbol(arg) {
  return typeof arg === "symbol";
}
function isUndefined(arg) {
  return arg === void 0;
}
function isRegExp(re) {
  return isObject(re) && objectToString(re) === "[object RegExp]";
}
function isObject(arg) {
  return typeof arg === "object" && arg !== null;
}
function isDate(d2) {
  return isObject(d2) && objectToString(d2) === "[object Date]";
}
function isError(e2) {
  return isObject(e2) && (objectToString(e2) === "[object Error]" || e2 instanceof Error);
}
function isFunction(arg) {
  return typeof arg === "function";
}
function isPrimitive(arg) {
  return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
  typeof arg === "undefined";
}
function isBuffer(maybeBuf) {
  return Buffer.isBuffer(maybeBuf);
}
function objectToString(o2) {
  return Object.prototype.toString.call(o2);
}
function pad(n2) {
  return n2 < 10 ? "0" + n2.toString(10) : n2.toString(10);
}
var months = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
function timestamp() {
  var d2 = /* @__PURE__ */ new Date();
  var time = [
    pad(d2.getHours()),
    pad(d2.getMinutes()),
    pad(d2.getSeconds())
  ].join(":");
  return [d2.getDate(), months[d2.getMonth()], time].join(" ");
}
function log() {
  console.log("%s - %s", timestamp(), format$1.apply(null, arguments));
}
function _extend(origin, add) {
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i2 = keys.length;
  while (i2--) {
    origin[keys[i2]] = add[keys[i2]];
  }
  return origin;
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
function promisify(original) {
  if (typeof original !== "function")
    throw new TypeError('The "original" argument must be of type Function');
  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== "function") {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }
  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function(resolve2, reject) {
      promiseResolve = resolve2;
      promiseReject = reject;
    });
    var args = [];
    for (var i2 = 0; i2 < arguments.length; i2++) {
      args.push(arguments[i2]);
    }
    args.push(function(err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });
    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }
    return promise;
  }
  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}
promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
  if (!reason) {
    var newReason = new Error("Promise was rejected with a falsy value");
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}
function callbackify(original) {
  if (typeof original !== "function") {
    throw new TypeError('The "original" argument must be of type Function');
  }
  function callbackified() {
    var args = [];
    for (var i2 = 0; i2 < arguments.length; i2++) {
      args.push(arguments[i2]);
    }
    var maybeCb = args.pop();
    if (typeof maybeCb !== "function") {
      throw new TypeError("The last argument must be of type Function");
    }
    var self2 = this;
    var cb = function() {
      return maybeCb.apply(self2, arguments);
    };
    original.apply(this, args).then(
      function(ret) {
        browser$1$1.nextTick(cb.bind(null, null, ret));
      },
      function(rej) {
        browser$1$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));
      }
    );
  }
  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}
var _polyfillNode_util = {
  inherits,
  _extend,
  log,
  isBuffer,
  isPrimitive,
  isFunction,
  isError,
  isDate,
  isObject,
  isRegExp,
  isUndefined,
  isSymbol,
  isString,
  isNumber,
  isNullOrUndefined,
  isNull,
  isBoolean,
  isArray,
  inspect: inspect2,
  deprecate,
  format: format$1,
  debuglog,
  promisify,
  callbackify
};
var _polyfillNode_util$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  _extend,
  callbackify,
  debuglog,
  default: _polyfillNode_util,
  deprecate,
  format: format$1,
  inherits,
  inspect: inspect2,
  isArray,
  isBoolean,
  isBuffer,
  isDate,
  isError,
  isFunction,
  isNull,
  isNullOrUndefined,
  isNumber,
  isObject,
  isPrimitive,
  isRegExp,
  isString,
  isSymbol,
  isUndefined,
  log,
  promisify
});
var require$$1$1 = /* @__PURE__ */ getDefaultExportFromNamespaceIfPresent(_polyfillNode_util$1);
var uri_all = { exports: {} };
/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
var hasRequiredUri_all;
function requireUri_all() {
  if (hasRequiredUri_all) return uri_all.exports;
  hasRequiredUri_all = 1;
  (function(module, exports) {
    (function(global, factory) {
      factory(exports);
    })(this, (function(exports2) {
      function merge() {
        for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
          sets[_key] = arguments[_key];
        }
        if (sets.length > 1) {
          sets[0] = sets[0].slice(0, -1);
          var xl = sets.length - 1;
          for (var x2 = 1; x2 < xl; ++x2) {
            sets[x2] = sets[x2].slice(1, -1);
          }
          sets[xl] = sets[xl].slice(1);
          return sets.join("");
        } else {
          return sets[0];
        }
      }
      function subexp(str) {
        return "(?:" + str + ")";
      }
      function typeOf(o2) {
        return o2 === void 0 ? "undefined" : o2 === null ? "null" : Object.prototype.toString.call(o2).split(" ").pop().split("]").shift().toLowerCase();
      }
      function toUpperCase(str) {
        return str.toUpperCase();
      }
      function toArray(obj) {
        return obj !== void 0 && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
      }
      function assign(target, source) {
        var obj = target;
        if (source) {
          for (var key in source) {
            obj[key] = source[key];
          }
        }
        return obj;
      }
      function buildExps(isIRI) {
        var ALPHA$$ = "[A-Za-z]", DIGIT$$ = "[0-9]", HEXDIG$$2 = merge(DIGIT$$, "[A-Fa-f]"), PCT_ENCODED$2 = subexp(subexp("%[EFef]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$);
        subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*");
        subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]")) + "*");
        var DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + "|" + PCT_ENCODED$2) + "+");
        subexp("[vV]" + HEXDIG$$2 + "+\\." + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]") + "+");
        subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$)) + "*");
        var PCHAR$ = subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@]"));
        subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\@]")) + "+");
        subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
        return {
          NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
          NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
          NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
          ESCAPE: new RegExp(merge("[^]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          UNRESERVED: new RegExp(UNRESERVED$$2, "g"),
          OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$2, RESERVED$$), "g"),
          PCT_ENCODED: new RegExp(PCT_ENCODED$2, "g"),
          IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
          IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
          //RFC 6874, with relaxed parsing rules
        };
      }
      var URI_PROTOCOL = buildExps(false);
      var IRI_PROTOCOL = buildExps(true);
      var slicedToArray = /* @__PURE__ */ (function() {
        function sliceIterator(arr, i2) {
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i2 && _arr.length === i2) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"]) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        return function(arr, i2) {
          if (Array.isArray(arr)) {
            return arr;
          } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i2);
          } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }
        };
      })();
      var toConsumableArray = function(arr) {
        if (Array.isArray(arr)) {
          for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) arr2[i2] = arr[i2];
          return arr2;
        } else {
          return Array.from(arr);
        }
      };
      var maxInt = 2147483647;
      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128;
      var delimiter2 = "-";
      var regexPunycode = /^xn--/;
      var regexNonASCII = /[^\0-\x7E]/;
      var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
      var errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      };
      var baseMinusTMin = base - tMin;
      var floor = Math.floor;
      var stringFromCharCode = String.fromCharCode;
      function error$1(type2) {
        throw new RangeError(errors[type2]);
      }
      function map(array, fn) {
        var result = [];
        var length = array.length;
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
          var value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      var ucs2encode = function ucs2encode2(array) {
        return String.fromCodePoint.apply(String, toConsumableArray(array));
      };
      var basicToDigit = function basicToDigit2(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      };
      var digitToBasic = function digitToBasic2(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      };
      var adapt = function adapt2(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (
          ;
          /* no initialization */
          delta > baseMinusTMin * tMax >> 1;
          k += base
        ) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      var decode = function decode2(input) {
        var output = [];
        var inputLength = input.length;
        var i2 = 0;
        var n2 = initialN;
        var bias = initialBias;
        var basic = input.lastIndexOf(delimiter2);
        if (basic < 0) {
          basic = 0;
        }
        for (var j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error$1("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (var index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          var oldi = i2;
          for (
            var w = 1, k = base;
            ;
            /* no condition */
            k += base
          ) {
            if (index >= inputLength) {
              error$1("invalid-input");
            }
            var digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i2) / w)) {
              error$1("overflow");
            }
            i2 += digit * w;
            var t2 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t2) {
              break;
            }
            var baseMinusT = base - t2;
            if (w > floor(maxInt / baseMinusT)) {
              error$1("overflow");
            }
            w *= baseMinusT;
          }
          var out = output.length + 1;
          bias = adapt(i2 - oldi, out, oldi == 0);
          if (floor(i2 / out) > maxInt - n2) {
            error$1("overflow");
          }
          n2 += floor(i2 / out);
          i2 %= out;
          output.splice(i2++, 0, n2);
        }
        return String.fromCodePoint.apply(String, output);
      };
      var encode = function encode2(input) {
        var output = [];
        input = ucs2decode(input);
        var inputLength = input.length;
        var n2 = initialN;
        var delta = 0;
        var bias = initialBias;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _currentValue2 = _step.value;
            if (_currentValue2 < 128) {
              output.push(stringFromCharCode(_currentValue2));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        var basicLength = output.length;
        var handledCPCount = basicLength;
        if (basicLength) {
          output.push(delimiter2);
        }
        while (handledCPCount < inputLength) {
          var m2 = maxInt;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = void 0;
          try {
            for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var currentValue = _step2.value;
              if (currentValue >= n2 && currentValue < m2) {
                m2 = currentValue;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
          var handledCPCountPlusOne = handledCPCount + 1;
          if (m2 - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error$1("overflow");
          }
          delta += (m2 - n2) * handledCPCountPlusOne;
          n2 = m2;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = void 0;
          try {
            for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _currentValue = _step3.value;
              if (_currentValue < n2 && ++delta > maxInt) {
                error$1("overflow");
              }
              if (_currentValue == n2) {
                var q = delta;
                for (
                  var k = base;
                  ;
                  /* no condition */
                  k += base
                ) {
                  var t2 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t2) {
                    break;
                  }
                  var qMinusT = q - t2;
                  var baseMinusT = base - t2;
                  output.push(stringFromCharCode(digitToBasic(t2 + qMinusT % baseMinusT, 0)));
                  q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
          ++delta;
          ++n2;
        }
        return output.join("");
      };
      var toUnicode = function toUnicode2(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      };
      var toASCII = function toASCII2(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      };
      var punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "2.1.0",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      var SCHEMES = {};
      function pctEncChar(chr) {
        var c2 = chr.charCodeAt(0);
        var e2 = void 0;
        if (c2 < 16) e2 = "%0" + c2.toString(16).toUpperCase();
        else if (c2 < 128) e2 = "%" + c2.toString(16).toUpperCase();
        else if (c2 < 2048) e2 = "%" + (c2 >> 6 | 192).toString(16).toUpperCase() + "%" + (c2 & 63 | 128).toString(16).toUpperCase();
        else e2 = "%" + (c2 >> 12 | 224).toString(16).toUpperCase() + "%" + (c2 >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c2 & 63 | 128).toString(16).toUpperCase();
        return e2;
      }
      function pctDecChars(str) {
        var newStr = "";
        var i2 = 0;
        var il = str.length;
        while (i2 < il) {
          var c2 = parseInt(str.substr(i2 + 1, 2), 16);
          if (c2 < 128) {
            newStr += String.fromCharCode(c2);
            i2 += 3;
          } else if (c2 >= 194 && c2 < 224) {
            if (il - i2 >= 6) {
              var c22 = parseInt(str.substr(i2 + 4, 2), 16);
              newStr += String.fromCharCode((c2 & 31) << 6 | c22 & 63);
            } else {
              newStr += str.substr(i2, 6);
            }
            i2 += 6;
          } else if (c2 >= 224) {
            if (il - i2 >= 9) {
              var _c = parseInt(str.substr(i2 + 4, 2), 16);
              var c3 = parseInt(str.substr(i2 + 7, 2), 16);
              newStr += String.fromCharCode((c2 & 15) << 12 | (_c & 63) << 6 | c3 & 63);
            } else {
              newStr += str.substr(i2, 9);
            }
            i2 += 9;
          } else {
            newStr += str.substr(i2, 3);
            i2 += 3;
          }
        }
        return newStr;
      }
      function _normalizeComponentEncoding(components, protocol) {
        function decodeUnreserved2(str) {
          var decStr = pctDecChars(str);
          return !decStr.match(protocol.UNRESERVED) ? str : decStr;
        }
        if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, "");
        if (components.userinfo !== void 0) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.host !== void 0) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.path !== void 0) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.query !== void 0) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.fragment !== void 0) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        return components;
      }
      function _stripLeadingZeros(str) {
        return str.replace(/^0*(.*)/, "$1") || "0";
      }
      function _normalizeIPv4(host, protocol) {
        var matches = host.match(protocol.IPV4ADDRESS) || [];
        var _matches = slicedToArray(matches, 2), address = _matches[1];
        if (address) {
          return address.split(".").map(_stripLeadingZeros).join(".");
        } else {
          return host;
        }
      }
      function _normalizeIPv6(host, protocol) {
        var matches = host.match(protocol.IPV6ADDRESS) || [];
        var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
        if (address) {
          var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
          var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
          var lastFields = last.split(":").map(_stripLeadingZeros);
          var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
          var fieldCount = isLastFieldIPv4Address ? 7 : 8;
          var lastFieldsStart = lastFields.length - fieldCount;
          var fields = Array(fieldCount);
          for (var x2 = 0; x2 < fieldCount; ++x2) {
            fields[x2] = firstFields[x2] || lastFields[lastFieldsStart + x2] || "";
          }
          if (isLastFieldIPv4Address) {
            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
          }
          var allZeroFields = fields.reduce(function(acc, field, index) {
            if (!field || field === "0") {
              var lastLongest = acc[acc.length - 1];
              if (lastLongest && lastLongest.index + lastLongest.length === index) {
                lastLongest.length++;
              } else {
                acc.push({ index, length: 1 });
              }
            }
            return acc;
          }, []);
          var longestZeroFields = allZeroFields.sort(function(a2, b) {
            return b.length - a2.length;
          })[0];
          var newHost = void 0;
          if (longestZeroFields && longestZeroFields.length > 1) {
            var newFirst = fields.slice(0, longestZeroFields.index);
            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
            newHost = newFirst.join(":") + "::" + newLast.join(":");
          } else {
            newHost = fields.join(":");
          }
          if (zone) {
            newHost += "%" + zone;
          }
          return newHost;
        } else {
          return host;
        }
      }
      var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
      var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === void 0;
      function parse(uriString) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var components = {};
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
        var matches = uriString.match(URI_PARSE);
        if (matches) {
          if (NO_MATCH_IS_UNDEFINED) {
            components.scheme = matches[1];
            components.userinfo = matches[3];
            components.host = matches[4];
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = matches[7];
            components.fragment = matches[8];
            if (isNaN(components.port)) {
              components.port = matches[5];
            }
          } else {
            components.scheme = matches[1] || void 0;
            components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : void 0;
            components.host = uriString.indexOf("//") !== -1 ? matches[4] : void 0;
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = uriString.indexOf("?") !== -1 ? matches[7] : void 0;
            components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : void 0;
            if (isNaN(components.port)) {
              components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : void 0;
            }
          }
          if (components.host) {
            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
          }
          if (components.scheme === void 0 && components.userinfo === void 0 && components.host === void 0 && components.port === void 0 && !components.path && components.query === void 0) {
            components.reference = "same-document";
          } else if (components.scheme === void 0) {
            components.reference = "relative";
          } else if (components.fragment === void 0) {
            components.reference = "absolute";
          } else {
            components.reference = "uri";
          }
          if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
            components.error = components.error || "URI is not a " + options.reference + " reference.";
          }
          var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
          if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
            if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
              try {
                components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
              } catch (e2) {
                components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e2;
              }
            }
            _normalizeComponentEncoding(components, URI_PROTOCOL);
          } else {
            _normalizeComponentEncoding(components, protocol);
          }
          if (schemeHandler && schemeHandler.parse) {
            schemeHandler.parse(components, options);
          }
        } else {
          components.error = components.error || "URI can not be parsed.";
        }
        return components;
      }
      function _recomposeAuthority(components, options) {
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        if (components.userinfo !== void 0) {
          uriTokens.push(components.userinfo);
          uriTokens.push("@");
        }
        if (components.host !== void 0) {
          uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_, $1, $2) {
            return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
          }));
        }
        if (typeof components.port === "number" || typeof components.port === "string") {
          uriTokens.push(":");
          uriTokens.push(String(components.port));
        }
        return uriTokens.length ? uriTokens.join("") : void 0;
      }
      var RDS1 = /^\.\.?\//;
      var RDS2 = /^\/\.(\/|$)/;
      var RDS3 = /^\/\.\.(\/|$)/;
      var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
      function removeDotSegments(input) {
        var output = [];
        while (input.length) {
          if (input.match(RDS1)) {
            input = input.replace(RDS1, "");
          } else if (input.match(RDS2)) {
            input = input.replace(RDS2, "/");
          } else if (input.match(RDS3)) {
            input = input.replace(RDS3, "/");
            output.pop();
          } else if (input === "." || input === "..") {
            input = "";
          } else {
            var im = input.match(RDS5);
            if (im) {
              var s2 = im[0];
              input = input.slice(s2.length);
              output.push(s2);
            } else {
              throw new Error("Unexpected dot segment condition");
            }
          }
        }
        return output.join("");
      }
      function serialize(components) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
        if (components.host) {
          if (protocol.IPV6ADDRESS.test(components.host)) ;
          else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
            try {
              components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
            } catch (e2) {
              components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e2;
            }
          }
        }
        _normalizeComponentEncoding(components, protocol);
        if (options.reference !== "suffix" && components.scheme) {
          uriTokens.push(components.scheme);
          uriTokens.push(":");
        }
        var authority = _recomposeAuthority(components, options);
        if (authority !== void 0) {
          if (options.reference !== "suffix") {
            uriTokens.push("//");
          }
          uriTokens.push(authority);
          if (components.path && components.path.charAt(0) !== "/") {
            uriTokens.push("/");
          }
        }
        if (components.path !== void 0) {
          var s2 = components.path;
          if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
            s2 = removeDotSegments(s2);
          }
          if (authority === void 0) {
            s2 = s2.replace(/^\/\//, "/%2F");
          }
          uriTokens.push(s2);
        }
        if (components.query !== void 0) {
          uriTokens.push("?");
          uriTokens.push(components.query);
        }
        if (components.fragment !== void 0) {
          uriTokens.push("#");
          uriTokens.push(components.fragment);
        }
        return uriTokens.join("");
      }
      function resolveComponents(base2, relative2) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var skipNormalization = arguments[3];
        var target = {};
        if (!skipNormalization) {
          base2 = parse(serialize(base2, options), options);
          relative2 = parse(serialize(relative2, options), options);
        }
        options = options || {};
        if (!options.tolerant && relative2.scheme) {
          target.scheme = relative2.scheme;
          target.userinfo = relative2.userinfo;
          target.host = relative2.host;
          target.port = relative2.port;
          target.path = removeDotSegments(relative2.path || "");
          target.query = relative2.query;
        } else {
          if (relative2.userinfo !== void 0 || relative2.host !== void 0 || relative2.port !== void 0) {
            target.userinfo = relative2.userinfo;
            target.host = relative2.host;
            target.port = relative2.port;
            target.path = removeDotSegments(relative2.path || "");
            target.query = relative2.query;
          } else {
            if (!relative2.path) {
              target.path = base2.path;
              if (relative2.query !== void 0) {
                target.query = relative2.query;
              } else {
                target.query = base2.query;
              }
            } else {
              if (relative2.path.charAt(0) === "/") {
                target.path = removeDotSegments(relative2.path);
              } else {
                if ((base2.userinfo !== void 0 || base2.host !== void 0 || base2.port !== void 0) && !base2.path) {
                  target.path = "/" + relative2.path;
                } else if (!base2.path) {
                  target.path = relative2.path;
                } else {
                  target.path = base2.path.slice(0, base2.path.lastIndexOf("/") + 1) + relative2.path;
                }
                target.path = removeDotSegments(target.path);
              }
              target.query = relative2.query;
            }
            target.userinfo = base2.userinfo;
            target.host = base2.host;
            target.port = base2.port;
          }
          target.scheme = base2.scheme;
        }
        target.fragment = relative2.fragment;
        return target;
      }
      function resolve2(baseURI, relativeURI, options) {
        var schemelessOptions = assign({ scheme: "null" }, options);
        return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
      }
      function normalize2(uri, options) {
        if (typeof uri === "string") {
          uri = serialize(parse(uri, options), options);
        } else if (typeOf(uri) === "object") {
          uri = parse(serialize(uri, options), options);
        }
        return uri;
      }
      function equal(uriA, uriB, options) {
        if (typeof uriA === "string") {
          uriA = serialize(parse(uriA, options), options);
        } else if (typeOf(uriA) === "object") {
          uriA = serialize(uriA, options);
        }
        if (typeof uriB === "string") {
          uriB = serialize(parse(uriB, options), options);
        } else if (typeOf(uriB) === "object") {
          uriB = serialize(uriB, options);
        }
        return uriA === uriB;
      }
      function escapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
      }
      function unescapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
      }
      var handler = {
        scheme: "http",
        domainHost: true,
        parse: function parse2(components, options) {
          if (!components.host) {
            components.error = components.error || "HTTP URIs must have a host.";
          }
          return components;
        },
        serialize: function serialize2(components, options) {
          var secure = String(components.scheme).toLowerCase() === "https";
          if (components.port === (secure ? 443 : 80) || components.port === "") {
            components.port = void 0;
          }
          if (!components.path) {
            components.path = "/";
          }
          return components;
        }
      };
      var handler$1 = {
        scheme: "https",
        domainHost: handler.domainHost,
        parse: handler.parse,
        serialize: handler.serialize
      };
      function isSecure(wsComponents) {
        return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
      }
      var handler$2 = {
        scheme: "ws",
        domainHost: true,
        parse: function parse2(components, options) {
          var wsComponents = components;
          wsComponents.secure = isSecure(wsComponents);
          wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
          wsComponents.path = void 0;
          wsComponents.query = void 0;
          return wsComponents;
        },
        serialize: function serialize2(wsComponents, options) {
          if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
            wsComponents.port = void 0;
          }
          if (typeof wsComponents.secure === "boolean") {
            wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
            wsComponents.secure = void 0;
          }
          if (wsComponents.resourceName) {
            var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
            wsComponents.path = path && path !== "/" ? path : void 0;
            wsComponents.query = query;
            wsComponents.resourceName = void 0;
          }
          wsComponents.fragment = void 0;
          return wsComponents;
        }
      };
      var handler$3 = {
        scheme: "wss",
        domainHost: handler$2.domainHost,
        parse: handler$2.parse,
        serialize: handler$2.serialize
      };
      var O = {};
      var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]";
      var HEXDIG$$ = "[0-9A-Fa-f]";
      var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
      var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
      var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
      var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]');
      var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
      var UNRESERVED = new RegExp(UNRESERVED$$, "g");
      var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
      var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
      var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
      var NOT_HFVALUE = NOT_HFNAME;
      function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(UNRESERVED) ? str : decStr;
      }
      var handler$4 = {
        scheme: "mailto",
        parse: function parse$$1(components, options) {
          var mailtoComponents = components;
          var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
          mailtoComponents.path = void 0;
          if (mailtoComponents.query) {
            var unknownHeaders = false;
            var headers = {};
            var hfields = mailtoComponents.query.split("&");
            for (var x2 = 0, xl = hfields.length; x2 < xl; ++x2) {
              var hfield = hfields[x2].split("=");
              switch (hfield[0]) {
                case "to":
                  var toAddrs = hfield[1].split(",");
                  for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                    to.push(toAddrs[_x]);
                  }
                  break;
                case "subject":
                  mailtoComponents.subject = unescapeComponent(hfield[1], options);
                  break;
                case "body":
                  mailtoComponents.body = unescapeComponent(hfield[1], options);
                  break;
                default:
                  unknownHeaders = true;
                  headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                  break;
              }
            }
            if (unknownHeaders) mailtoComponents.headers = headers;
          }
          mailtoComponents.query = void 0;
          for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
            var addr = to[_x2].split("@");
            addr[0] = unescapeComponent(addr[0]);
            if (!options.unicodeSupport) {
              try {
                addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
              } catch (e2) {
                mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e2;
              }
            } else {
              addr[1] = unescapeComponent(addr[1], options).toLowerCase();
            }
            to[_x2] = addr.join("@");
          }
          return mailtoComponents;
        },
        serialize: function serialize$$1(mailtoComponents, options) {
          var components = mailtoComponents;
          var to = toArray(mailtoComponents.to);
          if (to) {
            for (var x2 = 0, xl = to.length; x2 < xl; ++x2) {
              var toAddr = String(to[x2]);
              var atIdx = toAddr.lastIndexOf("@");
              var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
              var domain = toAddr.slice(atIdx + 1);
              try {
                domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
              } catch (e2) {
                components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e2;
              }
              to[x2] = localPart + "@" + domain;
            }
            components.path = to.join(",");
          }
          var headers = mailtoComponents.headers = mailtoComponents.headers || {};
          if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
          if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
          var fields = [];
          for (var name in headers) {
            if (headers[name] !== O[name]) {
              fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
            }
          }
          if (fields.length) {
            components.query = fields.join("&");
          }
          return components;
        }
      };
      var URN_PARSE = /^([^\:]+)\:(.*)/;
      var handler$5 = {
        scheme: "urn",
        parse: function parse$$1(components, options) {
          var matches = components.path && components.path.match(URN_PARSE);
          var urnComponents = components;
          if (matches) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = matches[1].toLowerCase();
            var nss = matches[2];
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            urnComponents.nid = nid;
            urnComponents.nss = nss;
            urnComponents.path = void 0;
            if (schemeHandler) {
              urnComponents = schemeHandler.parse(urnComponents, options);
            }
          } else {
            urnComponents.error = urnComponents.error || "URN can not be parsed.";
          }
          return urnComponents;
        },
        serialize: function serialize$$1(urnComponents, options) {
          var scheme = options.scheme || urnComponents.scheme || "urn";
          var nid = urnComponents.nid;
          var urnScheme = scheme + ":" + (options.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          if (schemeHandler) {
            urnComponents = schemeHandler.serialize(urnComponents, options);
          }
          var uriComponents = urnComponents;
          var nss = urnComponents.nss;
          uriComponents.path = (nid || options.nid) + ":" + nss;
          return uriComponents;
        }
      };
      var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
      var handler$6 = {
        scheme: "urn:uuid",
        parse: function parse2(urnComponents, options) {
          var uuidComponents = urnComponents;
          uuidComponents.uuid = uuidComponents.nss;
          uuidComponents.nss = void 0;
          if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
            uuidComponents.error = uuidComponents.error || "UUID is not valid.";
          }
          return uuidComponents;
        },
        serialize: function serialize2(uuidComponents, options) {
          var urnComponents = uuidComponents;
          urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
          return urnComponents;
        }
      };
      SCHEMES[handler.scheme] = handler;
      SCHEMES[handler$1.scheme] = handler$1;
      SCHEMES[handler$2.scheme] = handler$2;
      SCHEMES[handler$3.scheme] = handler$3;
      SCHEMES[handler$4.scheme] = handler$4;
      SCHEMES[handler$5.scheme] = handler$5;
      SCHEMES[handler$6.scheme] = handler$6;
      exports2.SCHEMES = SCHEMES;
      exports2.pctEncChar = pctEncChar;
      exports2.pctDecChars = pctDecChars;
      exports2.parse = parse;
      exports2.removeDotSegments = removeDotSegments;
      exports2.serialize = serialize;
      exports2.resolveComponents = resolveComponents;
      exports2.resolve = resolve2;
      exports2.normalize = normalize2;
      exports2.equal = equal;
      exports2.escapeComponent = escapeComponent;
      exports2.unescapeComponent = unescapeComponent;
      Object.defineProperty(exports2, "__esModule", { value: true });
    }));
  })(uri_all, uri_all.exports);
  return uri_all.exports;
}
var fastDeepEqual;
var hasRequiredFastDeepEqual;
function requireFastDeepEqual() {
  if (hasRequiredFastDeepEqual) return fastDeepEqual;
  hasRequiredFastDeepEqual = 1;
  fastDeepEqual = function equal(a2, b) {
    if (a2 === b) return true;
    if (a2 && b && typeof a2 == "object" && typeof b == "object") {
      if (a2.constructor !== b.constructor) return false;
      var length, i2, keys;
      if (Array.isArray(a2)) {
        length = a2.length;
        if (length != b.length) return false;
        for (i2 = length; i2-- !== 0; )
          if (!equal(a2[i2], b[i2])) return false;
        return true;
      }
      if (a2.constructor === RegExp) return a2.source === b.source && a2.flags === b.flags;
      if (a2.valueOf !== Object.prototype.valueOf) return a2.valueOf() === b.valueOf();
      if (a2.toString !== Object.prototype.toString) return a2.toString() === b.toString();
      keys = Object.keys(a2);
      length = keys.length;
      if (length !== Object.keys(b).length) return false;
      for (i2 = length; i2-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b, keys[i2])) return false;
      for (i2 = length; i2-- !== 0; ) {
        var key = keys[i2];
        if (!equal(a2[key], b[key])) return false;
      }
      return true;
    }
    return a2 !== a2 && b !== b;
  };
  return fastDeepEqual;
}
var ucs2length;
var hasRequiredUcs2length;
function requireUcs2length() {
  if (hasRequiredUcs2length) return ucs2length;
  hasRequiredUcs2length = 1;
  ucs2length = function ucs2length2(str) {
    var length = 0, len = str.length, pos = 0, value;
    while (pos < len) {
      length++;
      value = str.charCodeAt(pos++);
      if (value >= 55296 && value <= 56319 && pos < len) {
        value = str.charCodeAt(pos);
        if ((value & 64512) == 56320) pos++;
      }
    }
    return length;
  };
  return ucs2length;
}
var util;
var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil) return util;
  hasRequiredUtil = 1;
  util = {
    copy: copy2,
    checkDataType,
    checkDataTypes,
    coerceToTypes,
    toHash,
    getProperty,
    escapeQuotes,
    equal: requireFastDeepEqual(),
    ucs2length: requireUcs2length(),
    varOccurences,
    varReplace,
    schemaHasRules,
    schemaHasRulesExcept,
    schemaUnknownRules,
    toQuotedString,
    getPathExpr,
    getPath,
    getData,
    unescapeFragment,
    unescapeJsonPointer,
    escapeFragment,
    escapeJsonPointer
  };
  function copy2(o2, to) {
    to = to || {};
    for (var key in o2) to[key] = o2[key];
    return to;
  }
  function checkDataType(dataType, data2, strictNumbers, negate) {
    var EQUAL = negate ? " !== " : " === ", AND = negate ? " || " : " && ", OK = negate ? "!" : "", NOT = negate ? "" : "!";
    switch (dataType) {
      case "null":
        return data2 + EQUAL + "null";
      case "array":
        return OK + "Array.isArray(" + data2 + ")";
      case "object":
        return "(" + OK + data2 + AND + "typeof " + data2 + EQUAL + '"object"' + AND + NOT + "Array.isArray(" + data2 + "))";
      case "integer":
        return "(typeof " + data2 + EQUAL + '"number"' + AND + NOT + "(" + data2 + " % 1)" + AND + data2 + EQUAL + data2 + (strictNumbers ? AND + OK + "isFinite(" + data2 + ")" : "") + ")";
      case "number":
        return "(typeof " + data2 + EQUAL + '"' + dataType + '"' + (strictNumbers ? AND + OK + "isFinite(" + data2 + ")" : "") + ")";
      default:
        return "typeof " + data2 + EQUAL + '"' + dataType + '"';
    }
  }
  function checkDataTypes(dataTypes, data2, strictNumbers) {
    switch (dataTypes.length) {
      case 1:
        return checkDataType(dataTypes[0], data2, strictNumbers, true);
      default:
        var code2 = "";
        var types = toHash(dataTypes);
        if (types.array && types.object) {
          code2 = types.null ? "(" : "(!" + data2 + " || ";
          code2 += "typeof " + data2 + ' !== "object")';
          delete types.null;
          delete types.array;
          delete types.object;
        }
        if (types.number) delete types.integer;
        for (var t2 in types)
          code2 += (code2 ? " && " : "") + checkDataType(t2, data2, strictNumbers, true);
        return code2;
    }
  }
  var COERCE_TO_TYPES = toHash(["string", "number", "integer", "boolean", "null"]);
  function coerceToTypes(optionCoerceTypes, dataTypes) {
    if (Array.isArray(dataTypes)) {
      var types = [];
      for (var i2 = 0; i2 < dataTypes.length; i2++) {
        var t2 = dataTypes[i2];
        if (COERCE_TO_TYPES[t2]) types[types.length] = t2;
        else if (optionCoerceTypes === "array" && t2 === "array") types[types.length] = t2;
      }
      if (types.length) return types;
    } else if (COERCE_TO_TYPES[dataTypes]) {
      return [dataTypes];
    } else if (optionCoerceTypes === "array" && dataTypes === "array") {
      return ["array"];
    }
  }
  function toHash(arr) {
    var hash = {};
    for (var i2 = 0; i2 < arr.length; i2++) hash[arr[i2]] = true;
    return hash;
  }
  var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
  var SINGLE_QUOTE = /'|\\/g;
  function getProperty(key) {
    return typeof key == "number" ? "[" + key + "]" : IDENTIFIER.test(key) ? "." + key : "['" + escapeQuotes(key) + "']";
  }
  function escapeQuotes(str) {
    return str.replace(SINGLE_QUOTE, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t");
  }
  function varOccurences(str, dataVar) {
    dataVar += "[^0-9]";
    var matches = str.match(new RegExp(dataVar, "g"));
    return matches ? matches.length : 0;
  }
  function varReplace(str, dataVar, expr) {
    dataVar += "([^0-9])";
    expr = expr.replace(/\$/g, "$$$$");
    return str.replace(new RegExp(dataVar, "g"), expr + "$1");
  }
  function schemaHasRules(schema, rules2) {
    if (typeof schema == "boolean") return !schema;
    for (var key in schema) if (rules2[key]) return true;
  }
  function schemaHasRulesExcept(schema, rules2, exceptKeyword) {
    if (typeof schema == "boolean") return !schema && exceptKeyword != "not";
    for (var key in schema) if (key != exceptKeyword && rules2[key]) return true;
  }
  function schemaUnknownRules(schema, rules2) {
    if (typeof schema == "boolean") return;
    for (var key in schema) if (!rules2[key]) return key;
  }
  function toQuotedString(str) {
    return "'" + escapeQuotes(str) + "'";
  }
  function getPathExpr(currentPath, expr, jsonPointers, isNumber2) {
    var path = jsonPointers ? "'/' + " + expr + (isNumber2 ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : isNumber2 ? "'[' + " + expr + " + ']'" : "'[\\'' + " + expr + " + '\\']'";
    return joinPaths(currentPath, path);
  }
  function getPath(currentPath, prop, jsonPointers) {
    var path = jsonPointers ? toQuotedString("/" + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
    return joinPaths(currentPath, path);
  }
  var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
  var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
  function getData($data, lvl, paths) {
    var up, jsonPointer, data2, matches;
    if ($data === "") return "rootData";
    if ($data[0] == "/") {
      if (!JSON_POINTER.test($data)) throw new Error("Invalid JSON-pointer: " + $data);
      jsonPointer = $data;
      data2 = "rootData";
    } else {
      matches = $data.match(RELATIVE_JSON_POINTER);
      if (!matches) throw new Error("Invalid JSON-pointer: " + $data);
      up = +matches[1];
      jsonPointer = matches[2];
      if (jsonPointer == "#") {
        if (up >= lvl) throw new Error("Cannot access property/index " + up + " levels up, current level is " + lvl);
        return paths[lvl - up];
      }
      if (up > lvl) throw new Error("Cannot access data " + up + " levels up, current level is " + lvl);
      data2 = "data" + (lvl - up || "");
      if (!jsonPointer) return data2;
    }
    var expr = data2;
    var segments = jsonPointer.split("/");
    for (var i2 = 0; i2 < segments.length; i2++) {
      var segment = segments[i2];
      if (segment) {
        data2 += getProperty(unescapeJsonPointer(segment));
        expr += " && " + data2;
      }
    }
    return expr;
  }
  function joinPaths(a2, b) {
    if (a2 == '""') return b;
    return (a2 + " + " + b).replace(/([^\\])' \+ '/g, "$1");
  }
  function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
  }
  function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
  }
  function escapeJsonPointer(str) {
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
  }
  function unescapeJsonPointer(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
  }
  return util;
}
var schema_obj;
var hasRequiredSchema_obj;
function requireSchema_obj() {
  if (hasRequiredSchema_obj) return schema_obj;
  hasRequiredSchema_obj = 1;
  var util2 = requireUtil();
  schema_obj = SchemaObject;
  function SchemaObject(obj) {
    util2.copy(obj, this);
  }
  return schema_obj;
}
var jsonSchemaTraverse = { exports: {} };
var hasRequiredJsonSchemaTraverse;
function requireJsonSchemaTraverse() {
  if (hasRequiredJsonSchemaTraverse) return jsonSchemaTraverse.exports;
  hasRequiredJsonSchemaTraverse = 1;
  var traverse = jsonSchemaTraverse.exports = function(schema, opts, cb) {
    if (typeof opts == "function") {
      cb = opts;
      opts = {};
    }
    cb = opts.cb || cb;
    var pre = typeof cb == "function" ? cb : cb.pre || function() {
    };
    var post = cb.post || function() {
    };
    _traverse(opts, pre, post, schema, "", schema);
  };
  traverse.keywords = {
    additionalItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    propertyNames: true,
    not: true
  };
  traverse.arrayKeywords = {
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true
  };
  traverse.propsKeywords = {
    definitions: true,
    properties: true,
    patternProperties: true,
    dependencies: true
  };
  traverse.skipKeywords = {
    default: true,
    enum: true,
    const: true,
    required: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true
  };
  function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (schema && typeof schema == "object" && !Array.isArray(schema)) {
      pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      for (var key in schema) {
        var sch = schema[key];
        if (Array.isArray(sch)) {
          if (key in traverse.arrayKeywords) {
            for (var i2 = 0; i2 < sch.length; i2++)
              _traverse(opts, pre, post, sch[i2], jsonPtr + "/" + key + "/" + i2, rootSchema, jsonPtr, key, schema, i2);
          }
        } else if (key in traverse.propsKeywords) {
          if (sch && typeof sch == "object") {
            for (var prop in sch)
              _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
          }
        } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
          _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
        }
      }
      post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    }
  }
  function escapeJsonPtr(str) {
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
  }
  return jsonSchemaTraverse.exports;
}
var resolve_1;
var hasRequiredResolve;
function requireResolve() {
  if (hasRequiredResolve) return resolve_1;
  hasRequiredResolve = 1;
  var URI = requireUri_all(), equal = requireFastDeepEqual(), util2 = requireUtil(), SchemaObject = requireSchema_obj(), traverse = requireJsonSchemaTraverse();
  resolve_1 = resolve2;
  resolve2.normalizeId = normalizeId;
  resolve2.fullPath = getFullPath;
  resolve2.url = resolveUrl;
  resolve2.ids = resolveIds;
  resolve2.inlineRef = inlineRef;
  resolve2.schema = resolveSchema;
  function resolve2(compile, root, ref2) {
    var refVal = this._refs[ref2];
    if (typeof refVal == "string") {
      if (this._refs[refVal]) refVal = this._refs[refVal];
      else return resolve2.call(this, compile, root, refVal);
    }
    refVal = refVal || this._schemas[ref2];
    if (refVal instanceof SchemaObject) {
      return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
    }
    var res = resolveSchema.call(this, root, ref2);
    var schema, v2, baseId;
    if (res) {
      schema = res.schema;
      root = res.root;
      baseId = res.baseId;
    }
    if (schema instanceof SchemaObject) {
      v2 = schema.validate || compile.call(this, schema.schema, root, void 0, baseId);
    } else if (schema !== void 0) {
      v2 = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, void 0, baseId);
    }
    return v2;
  }
  function resolveSchema(root, ref2) {
    var p2 = URI.parse(ref2), refPath = _getFullPath(p2), baseId = getFullPath(this._getId(root.schema));
    if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
      var id2 = normalizeId(refPath);
      var refVal = this._refs[id2];
      if (typeof refVal == "string") {
        return resolveRecursive.call(this, root, refVal, p2);
      } else if (refVal instanceof SchemaObject) {
        if (!refVal.validate) this._compile(refVal);
        root = refVal;
      } else {
        refVal = this._schemas[id2];
        if (refVal instanceof SchemaObject) {
          if (!refVal.validate) this._compile(refVal);
          if (id2 == normalizeId(ref2))
            return { schema: refVal, root, baseId };
          root = refVal;
        } else {
          return;
        }
      }
      if (!root.schema) return;
      baseId = getFullPath(this._getId(root.schema));
    }
    return getJsonPointer.call(this, p2, baseId, root.schema, root);
  }
  function resolveRecursive(root, ref2, parsedRef) {
    var res = resolveSchema.call(this, root, ref2);
    if (res) {
      var schema = res.schema;
      var baseId = res.baseId;
      root = res.root;
      var id2 = this._getId(schema);
      if (id2) baseId = resolveUrl(baseId, id2);
      return getJsonPointer.call(this, parsedRef, baseId, schema, root);
    }
  }
  var PREVENT_SCOPE_CHANGE = util2.toHash(["properties", "patternProperties", "enum", "dependencies", "definitions"]);
  function getJsonPointer(parsedRef, baseId, schema, root) {
    parsedRef.fragment = parsedRef.fragment || "";
    if (parsedRef.fragment.slice(0, 1) != "/") return;
    var parts = parsedRef.fragment.split("/");
    for (var i2 = 1; i2 < parts.length; i2++) {
      var part = parts[i2];
      if (part) {
        part = util2.unescapeFragment(part);
        schema = schema[part];
        if (schema === void 0) break;
        var id2;
        if (!PREVENT_SCOPE_CHANGE[part]) {
          id2 = this._getId(schema);
          if (id2) baseId = resolveUrl(baseId, id2);
          if (schema.$ref) {
            var $ref = resolveUrl(baseId, schema.$ref);
            var res = resolveSchema.call(this, root, $ref);
            if (res) {
              schema = res.schema;
              root = res.root;
              baseId = res.baseId;
            }
          }
        }
      }
    }
    if (schema !== void 0 && schema !== root.schema)
      return { schema, root, baseId };
  }
  var SIMPLE_INLINED = util2.toHash([
    "type",
    "format",
    "pattern",
    "maxLength",
    "minLength",
    "maxProperties",
    "minProperties",
    "maxItems",
    "minItems",
    "maximum",
    "minimum",
    "uniqueItems",
    "multipleOf",
    "required",
    "enum"
  ]);
  function inlineRef(schema, limit) {
    if (limit === false) return false;
    if (limit === void 0 || limit === true) return checkNoRef(schema);
    else if (limit) return countKeys(schema) <= limit;
  }
  function checkNoRef(schema) {
    var item;
    if (Array.isArray(schema)) {
      for (var i2 = 0; i2 < schema.length; i2++) {
        item = schema[i2];
        if (typeof item == "object" && !checkNoRef(item)) return false;
      }
    } else {
      for (var key in schema) {
        if (key == "$ref") return false;
        item = schema[key];
        if (typeof item == "object" && !checkNoRef(item)) return false;
      }
    }
    return true;
  }
  function countKeys(schema) {
    var count = 0, item;
    if (Array.isArray(schema)) {
      for (var i2 = 0; i2 < schema.length; i2++) {
        item = schema[i2];
        if (typeof item == "object") count += countKeys(item);
        if (count == Infinity) return Infinity;
      }
    } else {
      for (var key in schema) {
        if (key == "$ref") return Infinity;
        if (SIMPLE_INLINED[key]) {
          count++;
        } else {
          item = schema[key];
          if (typeof item == "object") count += countKeys(item) + 1;
          if (count == Infinity) return Infinity;
        }
      }
    }
    return count;
  }
  function getFullPath(id2, normalize2) {
    if (normalize2 !== false) id2 = normalizeId(id2);
    var p2 = URI.parse(id2);
    return _getFullPath(p2);
  }
  function _getFullPath(p2) {
    return URI.serialize(p2).split("#")[0] + "#";
  }
  var TRAILING_SLASH_HASH = /#\/?$/;
  function normalizeId(id2) {
    return id2 ? id2.replace(TRAILING_SLASH_HASH, "") : "";
  }
  function resolveUrl(baseId, id2) {
    id2 = normalizeId(id2);
    return URI.resolve(baseId, id2);
  }
  function resolveIds(schema) {
    var schemaId = normalizeId(this._getId(schema));
    var baseIds = { "": schemaId };
    var fullPaths = { "": getFullPath(schemaId, false) };
    var localRefs = {};
    var self2 = this;
    traverse(schema, { allKeys: true }, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (jsonPtr === "") return;
      var id2 = self2._getId(sch);
      var baseId = baseIds[parentJsonPtr];
      var fullPath = fullPaths[parentJsonPtr] + "/" + parentKeyword;
      if (keyIndex !== void 0)
        fullPath += "/" + (typeof keyIndex == "number" ? keyIndex : util2.escapeFragment(keyIndex));
      if (typeof id2 == "string") {
        id2 = baseId = normalizeId(baseId ? URI.resolve(baseId, id2) : id2);
        var refVal = self2._refs[id2];
        if (typeof refVal == "string") refVal = self2._refs[refVal];
        if (refVal && refVal.schema) {
          if (!equal(sch, refVal.schema))
            throw new Error('id "' + id2 + '" resolves to more than one schema');
        } else if (id2 != normalizeId(fullPath)) {
          if (id2[0] == "#") {
            if (localRefs[id2] && !equal(sch, localRefs[id2]))
              throw new Error('id "' + id2 + '" resolves to more than one schema');
            localRefs[id2] = sch;
          } else {
            self2._refs[id2] = fullPath;
          }
        }
      }
      baseIds[jsonPtr] = baseId;
      fullPaths[jsonPtr] = fullPath;
    });
    return localRefs;
  }
  return resolve_1;
}
var error_classes;
var hasRequiredError_classes;
function requireError_classes() {
  if (hasRequiredError_classes) return error_classes;
  hasRequiredError_classes = 1;
  var resolve2 = requireResolve();
  error_classes = {
    Validation: errorSubclass(ValidationError),
    MissingRef: errorSubclass(MissingRefError)
  };
  function ValidationError(errors) {
    this.message = "validation failed";
    this.errors = errors;
    this.ajv = this.validation = true;
  }
  MissingRefError.message = function(baseId, ref2) {
    return "can't resolve reference " + ref2 + " from id " + baseId;
  };
  function MissingRefError(baseId, ref2, message) {
    this.message = message || MissingRefError.message(baseId, ref2);
    this.missingRef = resolve2.url(baseId, ref2);
    this.missingSchema = resolve2.normalizeId(resolve2.fullPath(this.missingRef));
  }
  function errorSubclass(Subclass) {
    Subclass.prototype = Object.create(Error.prototype);
    Subclass.prototype.constructor = Subclass;
    return Subclass;
  }
  return error_classes;
}
var fastJsonStableStringify;
var hasRequiredFastJsonStableStringify;
function requireFastJsonStableStringify() {
  if (hasRequiredFastJsonStableStringify) return fastJsonStableStringify;
  hasRequiredFastJsonStableStringify = 1;
  fastJsonStableStringify = function(data2, opts) {
    if (!opts) opts = {};
    if (typeof opts === "function") opts = { cmp: opts };
    var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
    var cmp = opts.cmp && /* @__PURE__ */ (function(f2) {
      return function(node2) {
        return function(a2, b) {
          var aobj = { key: a2, value: node2[a2] };
          var bobj = { key: b, value: node2[b] };
          return f2(aobj, bobj);
        };
      };
    })(opts.cmp);
    var seen = [];
    return (function stringify(node2) {
      if (node2 && node2.toJSON && typeof node2.toJSON === "function") {
        node2 = node2.toJSON();
      }
      if (node2 === void 0) return;
      if (typeof node2 == "number") return isFinite(node2) ? "" + node2 : "null";
      if (typeof node2 !== "object") return JSON.stringify(node2);
      var i2, out;
      if (Array.isArray(node2)) {
        out = "[";
        for (i2 = 0; i2 < node2.length; i2++) {
          if (i2) out += ",";
          out += stringify(node2[i2]) || "null";
        }
        return out + "]";
      }
      if (node2 === null) return "null";
      if (seen.indexOf(node2) !== -1) {
        if (cycles) return JSON.stringify("__cycle__");
        throw new TypeError("Converting circular structure to JSON");
      }
      var seenIndex = seen.push(node2) - 1;
      var keys = Object.keys(node2).sort(cmp && cmp(node2));
      out = "";
      for (i2 = 0; i2 < keys.length; i2++) {
        var key = keys[i2];
        var value = stringify(node2[key]);
        if (!value) continue;
        if (out) out += ",";
        out += JSON.stringify(key) + ":" + value;
      }
      seen.splice(seenIndex, 1);
      return "{" + out + "}";
    })(data2);
  };
  return fastJsonStableStringify;
}
var validate;
var hasRequiredValidate;
function requireValidate() {
  if (hasRequiredValidate) return validate;
  hasRequiredValidate = 1;
  validate = function generate_validate(it, $keyword, $ruleType) {
    var out = "";
    var $async = it.schema.$async === true, $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, "$ref"), $id2 = it.self._getId(it.schema);
    if (it.opts.strictKeywords) {
      var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
      if ($unknownKwd) {
        var $keywordsMsg = "unknown keyword: " + $unknownKwd;
        if (it.opts.strictKeywords === "log") it.logger.warn($keywordsMsg);
        else throw new Error($keywordsMsg);
      }
    }
    if (it.isTop) {
      out += " var validate = ";
      if ($async) {
        it.async = true;
        out += "async ";
      }
      out += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ";
      if ($id2 && (it.opts.sourceCode || it.opts.processCode)) {
        out += " " + ("/*# sourceURL=" + $id2 + " */") + " ";
      }
    }
    if (typeof it.schema == "boolean" || !($refKeywords || it.schema.$ref)) {
      var $keyword = "false schema";
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema2 = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = "data" + ($dataLvl || "");
      var $valid = "valid" + $lvl;
      if (it.schema === false) {
        if (it.isTop) {
          $breakOnError = true;
        } else {
          out += " var " + $valid + " = false; ";
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "false schema") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
          if (it.opts.messages !== false) {
            out += " , message: 'boolean schema is false' ";
          }
          if (it.opts.verbose) {
            out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
      } else {
        if (it.isTop) {
          if ($async) {
            out += " return data; ";
          } else {
            out += " validate.errors = null; return true; ";
          }
        } else {
          out += " var " + $valid + " = true; ";
        }
      }
      if (it.isTop) {
        out += " }; return validate; ";
      }
      return out;
    }
    if (it.isTop) {
      var $top = it.isTop, $lvl = it.level = 0, $dataLvl = it.dataLevel = 0, $data = "data";
      it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
      it.baseId = it.baseId || it.rootId;
      delete it.isTop;
      it.dataPathArr = [""];
      if (it.schema.default !== void 0 && it.opts.useDefaults && it.opts.strictDefaults) {
        var $defaultMsg = "default is ignored in the schema root";
        if (it.opts.strictDefaults === "log") it.logger.warn($defaultMsg);
        else throw new Error($defaultMsg);
      }
      out += " var vErrors = null; ";
      out += " var errors = 0;     ";
      out += " if (rootData === undefined) rootData = data; ";
    } else {
      var $lvl = it.level, $dataLvl = it.dataLevel, $data = "data" + ($dataLvl || "");
      if ($id2) it.baseId = it.resolve.url(it.baseId, $id2);
      if ($async && !it.async) throw new Error("async schema in sync schema");
      out += " var errs_" + $lvl + " = errors;";
    }
    var $valid = "valid" + $lvl, $breakOnError = !it.opts.allErrors, $closingBraces1 = "", $closingBraces2 = "";
    var $errorKeyword;
    var $typeSchema = it.schema.type, $typeIsArray = Array.isArray($typeSchema);
    if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
      if ($typeIsArray) {
        if ($typeSchema.indexOf("null") == -1) $typeSchema = $typeSchema.concat("null");
      } else if ($typeSchema != "null") {
        $typeSchema = [$typeSchema, "null"];
        $typeIsArray = true;
      }
    }
    if ($typeIsArray && $typeSchema.length == 1) {
      $typeSchema = $typeSchema[0];
      $typeIsArray = false;
    }
    if (it.schema.$ref && $refKeywords) {
      if (it.opts.extendRefs == "fail") {
        throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
      } else if (it.opts.extendRefs !== true) {
        $refKeywords = false;
        it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
      }
    }
    if (it.schema.$comment && it.opts.$comment) {
      out += " " + it.RULES.all.$comment.code(it, "$comment");
    }
    if ($typeSchema) {
      if (it.opts.coerceTypes) {
        var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
      }
      var $rulesGroup = it.RULES.types[$typeSchema];
      if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {
        var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
        var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type", $method = $typeIsArray ? "checkDataTypes" : "checkDataType";
        out += " if (" + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + ") { ";
        if ($coerceToTypes) {
          var $dataType = "dataType" + $lvl, $coerced = "coerced" + $lvl;
          out += " var " + $dataType + " = typeof " + $data + "; var " + $coerced + " = undefined; ";
          if (it.opts.coerceTypes == "array") {
            out += " if (" + $dataType + " == 'object' && Array.isArray(" + $data + ") && " + $data + ".length == 1) { " + $data + " = " + $data + "[0]; " + $dataType + " = typeof " + $data + "; if (" + it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) + ") " + $coerced + " = " + $data + "; } ";
          }
          out += " if (" + $coerced + " !== undefined) ; ";
          var arr1 = $coerceToTypes;
          if (arr1) {
            var $type, $i = -1, l1 = arr1.length - 1;
            while ($i < l1) {
              $type = arr1[$i += 1];
              if ($type == "string") {
                out += " else if (" + $dataType + " == 'number' || " + $dataType + " == 'boolean') " + $coerced + " = '' + " + $data + "; else if (" + $data + " === null) " + $coerced + " = ''; ";
              } else if ($type == "number" || $type == "integer") {
                out += " else if (" + $dataType + " == 'boolean' || " + $data + " === null || (" + $dataType + " == 'string' && " + $data + " && " + $data + " == +" + $data + " ";
                if ($type == "integer") {
                  out += " && !(" + $data + " % 1)";
                }
                out += ")) " + $coerced + " = +" + $data + "; ";
              } else if ($type == "boolean") {
                out += " else if (" + $data + " === 'false' || " + $data + " === 0 || " + $data + " === null) " + $coerced + " = false; else if (" + $data + " === 'true' || " + $data + " === 1) " + $coerced + " = true; ";
              } else if ($type == "null") {
                out += " else if (" + $data + " === '' || " + $data + " === 0 || " + $data + " === false) " + $coerced + " = null; ";
              } else if (it.opts.coerceTypes == "array" && $type == "array") {
                out += " else if (" + $dataType + " == 'string' || " + $dataType + " == 'number' || " + $dataType + " == 'boolean' || " + $data + " == null) " + $coerced + " = [" + $data + "]; ";
              }
            }
          }
          out += " else {   ";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
            if ($typeIsArray) {
              out += "" + $typeSchema.join(",");
            } else {
              out += "" + $typeSchema;
            }
            out += "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should be ";
              if ($typeIsArray) {
                out += "" + $typeSchema.join(",");
              } else {
                out += "" + $typeSchema;
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } if (" + $coerced + " !== undefined) {  ";
          var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
          out += " " + $data + " = " + $coerced + "; ";
          if (!$dataLvl) {
            out += "if (" + $parentData + " !== undefined)";
          }
          out += " " + $parentData + "[" + $parentDataProperty + "] = " + $coerced + "; } ";
        } else {
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
            if ($typeIsArray) {
              out += "" + $typeSchema.join(",");
            } else {
              out += "" + $typeSchema;
            }
            out += "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should be ";
              if ($typeIsArray) {
                out += "" + $typeSchema.join(",");
              } else {
                out += "" + $typeSchema;
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
        }
        out += " } ";
      }
    }
    if (it.schema.$ref && !$refKeywords) {
      out += " " + it.RULES.all.$ref.code(it, "$ref") + " ";
      if ($breakOnError) {
        out += " } if (errors === ";
        if ($top) {
          out += "0";
        } else {
          out += "errs_" + $lvl;
        }
        out += ") { ";
        $closingBraces2 += "}";
      }
    } else {
      var arr2 = it.RULES;
      if (arr2) {
        var $rulesGroup, i2 = -1, l2 = arr2.length - 1;
        while (i2 < l2) {
          $rulesGroup = arr2[i2 += 1];
          if ($shouldUseGroup($rulesGroup)) {
            if ($rulesGroup.type) {
              out += " if (" + it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) + ") { ";
            }
            if (it.opts.useDefaults) {
              if ($rulesGroup.type == "object" && it.schema.properties) {
                var $schema2 = it.schema.properties, $schemaKeys = Object.keys($schema2);
                var arr3 = $schemaKeys;
                if (arr3) {
                  var $propertyKey, i3 = -1, l3 = arr3.length - 1;
                  while (i3 < l3) {
                    $propertyKey = arr3[i3 += 1];
                    var $sch = $schema2[$propertyKey];
                    if ($sch.default !== void 0) {
                      var $passData = $data + it.util.getProperty($propertyKey);
                      if (it.compositeRule) {
                        if (it.opts.strictDefaults) {
                          var $defaultMsg = "default is ignored for: " + $passData;
                          if (it.opts.strictDefaults === "log") it.logger.warn($defaultMsg);
                          else throw new Error($defaultMsg);
                        }
                      } else {
                        out += " if (" + $passData + " === undefined ";
                        if (it.opts.useDefaults == "empty") {
                          out += " || " + $passData + " === null || " + $passData + " === '' ";
                        }
                        out += " ) " + $passData + " = ";
                        if (it.opts.useDefaults == "shared") {
                          out += " " + it.useDefault($sch.default) + " ";
                        } else {
                          out += " " + JSON.stringify($sch.default) + " ";
                        }
                        out += "; ";
                      }
                    }
                  }
                }
              } else if ($rulesGroup.type == "array" && Array.isArray(it.schema.items)) {
                var arr4 = it.schema.items;
                if (arr4) {
                  var $sch, $i = -1, l4 = arr4.length - 1;
                  while ($i < l4) {
                    $sch = arr4[$i += 1];
                    if ($sch.default !== void 0) {
                      var $passData = $data + "[" + $i + "]";
                      if (it.compositeRule) {
                        if (it.opts.strictDefaults) {
                          var $defaultMsg = "default is ignored for: " + $passData;
                          if (it.opts.strictDefaults === "log") it.logger.warn($defaultMsg);
                          else throw new Error($defaultMsg);
                        }
                      } else {
                        out += " if (" + $passData + " === undefined ";
                        if (it.opts.useDefaults == "empty") {
                          out += " || " + $passData + " === null || " + $passData + " === '' ";
                        }
                        out += " ) " + $passData + " = ";
                        if (it.opts.useDefaults == "shared") {
                          out += " " + it.useDefault($sch.default) + " ";
                        } else {
                          out += " " + JSON.stringify($sch.default) + " ";
                        }
                        out += "; ";
                      }
                    }
                  }
                }
              }
            }
            var arr5 = $rulesGroup.rules;
            if (arr5) {
              var $rule, i5 = -1, l5 = arr5.length - 1;
              while (i5 < l5) {
                $rule = arr5[i5 += 1];
                if ($shouldUseRule($rule)) {
                  var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                  if ($code) {
                    out += " " + $code + " ";
                    if ($breakOnError) {
                      $closingBraces1 += "}";
                    }
                  }
                }
              }
            }
            if ($breakOnError) {
              out += " " + $closingBraces1 + " ";
              $closingBraces1 = "";
            }
            if ($rulesGroup.type) {
              out += " } ";
              if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                out += " else { ";
                var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = "";
                if (it.createErrors !== false) {
                  out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",");
                  } else {
                    out += "" + $typeSchema;
                  }
                  out += "' } ";
                  if (it.opts.messages !== false) {
                    out += " , message: 'should be ";
                    if ($typeIsArray) {
                      out += "" + $typeSchema.join(",");
                    } else {
                      out += "" + $typeSchema;
                    }
                    out += "' ";
                  }
                  if (it.opts.verbose) {
                    out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                  }
                  out += " } ";
                } else {
                  out += " {} ";
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  if (it.async) {
                    out += " throw new ValidationError([" + __err + "]); ";
                  } else {
                    out += " validate.errors = [" + __err + "]; return false; ";
                  }
                } else {
                  out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                }
                out += " } ";
              }
            }
            if ($breakOnError) {
              out += " if (errors === ";
              if ($top) {
                out += "0";
              } else {
                out += "errs_" + $lvl;
              }
              out += ") { ";
              $closingBraces2 += "}";
            }
          }
        }
      }
    }
    if ($breakOnError) {
      out += " " + $closingBraces2 + " ";
    }
    if ($top) {
      if ($async) {
        out += " if (errors === 0) return data;           ";
        out += " else throw new ValidationError(vErrors); ";
      } else {
        out += " validate.errors = vErrors; ";
        out += " return errors === 0;       ";
      }
      out += " }; return validate;";
    } else {
      out += " var " + $valid + " = errors === errs_" + $lvl + ";";
    }
    function $shouldUseGroup($rulesGroup2) {
      var rules2 = $rulesGroup2.rules;
      for (var i4 = 0; i4 < rules2.length; i4++)
        if ($shouldUseRule(rules2[i4])) return true;
    }
    function $shouldUseRule($rule2) {
      return it.schema[$rule2.keyword] !== void 0 || $rule2.implements && $ruleImplementsSomeKeyword($rule2);
    }
    function $ruleImplementsSomeKeyword($rule2) {
      var impl = $rule2.implements;
      for (var i4 = 0; i4 < impl.length; i4++)
        if (it.schema[impl[i4]] !== void 0) return true;
    }
    return out;
  };
  return validate;
}
var compile_1;
var hasRequiredCompile;
function requireCompile() {
  if (hasRequiredCompile) return compile_1;
  hasRequiredCompile = 1;
  var resolve2 = requireResolve(), util2 = requireUtil(), errorClasses = requireError_classes(), stableStringify = requireFastJsonStableStringify();
  var validateGenerator = requireValidate();
  var ucs2length2 = util2.ucs2length;
  var equal = requireFastDeepEqual();
  var ValidationError = errorClasses.Validation;
  compile_1 = compile;
  function compile(schema, root, localRefs, baseId) {
    var self2 = this, opts = this._opts, refVal = [void 0], refs = {}, patterns = [], patternsHash = {}, defaults = [], defaultsHash = {}, customRules = [];
    root = root || { schema, refVal, refs };
    var c2 = checkCompiling.call(this, schema, root, baseId);
    var compilation = this._compilations[c2.index];
    if (c2.compiling) return compilation.callValidate = callValidate;
    var formats = this._formats;
    var RULES = this.RULES;
    try {
      var v2 = localCompile(schema, root, localRefs, baseId);
      compilation.validate = v2;
      var cv = compilation.callValidate;
      if (cv) {
        cv.schema = v2.schema;
        cv.errors = null;
        cv.refs = v2.refs;
        cv.refVal = v2.refVal;
        cv.root = v2.root;
        cv.$async = v2.$async;
        if (opts.sourceCode) cv.source = v2.source;
      }
      return v2;
    } finally {
      endCompiling.call(this, schema, root, baseId);
    }
    function callValidate() {
      var validate2 = compilation.validate;
      var result = validate2.apply(this, arguments);
      callValidate.errors = validate2.errors;
      return result;
    }
    function localCompile(_schema, _root, localRefs2, baseId2) {
      var isRoot = !_root || _root && _root.schema == _schema;
      if (_root.schema != root.schema)
        return compile.call(self2, _schema, _root, localRefs2, baseId2);
      var $async = _schema.$async === true;
      var sourceCode2 = validateGenerator({
        isTop: true,
        schema: _schema,
        isRoot,
        baseId: baseId2,
        root: _root,
        schemaPath: "",
        errSchemaPath: "#",
        errorPath: '""',
        MissingRefError: errorClasses.MissingRef,
        RULES,
        validate: validateGenerator,
        util: util2,
        resolve: resolve2,
        resolveRef,
        usePattern,
        useDefault,
        useCustomRule,
        opts,
        formats,
        logger: self2.logger,
        self: self2
      });
      sourceCode2 = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode2;
      if (opts.processCode) sourceCode2 = opts.processCode(sourceCode2, _schema);
      var validate2;
      try {
        var makeValidate = new Function(
          "self",
          "RULES",
          "formats",
          "root",
          "refVal",
          "defaults",
          "customRules",
          "equal",
          "ucs2length",
          "ValidationError",
          sourceCode2
        );
        validate2 = makeValidate(
          self2,
          RULES,
          formats,
          root,
          refVal,
          defaults,
          customRules,
          equal,
          ucs2length2,
          ValidationError
        );
        refVal[0] = validate2;
      } catch (e2) {
        self2.logger.error("Error compiling schema, function code:", sourceCode2);
        throw e2;
      }
      validate2.schema = _schema;
      validate2.errors = null;
      validate2.refs = refs;
      validate2.refVal = refVal;
      validate2.root = isRoot ? validate2 : _root;
      if ($async) validate2.$async = true;
      if (opts.sourceCode === true) {
        validate2.source = {
          code: sourceCode2,
          patterns,
          defaults
        };
      }
      return validate2;
    }
    function resolveRef(baseId2, ref2, isRoot) {
      ref2 = resolve2.url(baseId2, ref2);
      var refIndex = refs[ref2];
      var _refVal, refCode;
      if (refIndex !== void 0) {
        _refVal = refVal[refIndex];
        refCode = "refVal[" + refIndex + "]";
        return resolvedRef(_refVal, refCode);
      }
      if (!isRoot && root.refs) {
        var rootRefId = root.refs[ref2];
        if (rootRefId !== void 0) {
          _refVal = root.refVal[rootRefId];
          refCode = addLocalRef(ref2, _refVal);
          return resolvedRef(_refVal, refCode);
        }
      }
      refCode = addLocalRef(ref2);
      var v3 = resolve2.call(self2, localCompile, root, ref2);
      if (v3 === void 0) {
        var localSchema = localRefs && localRefs[ref2];
        if (localSchema) {
          v3 = resolve2.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self2, localSchema, root, localRefs, baseId2);
        }
      }
      if (v3 === void 0) {
        removeLocalRef(ref2);
      } else {
        replaceLocalRef(ref2, v3);
        return resolvedRef(v3, refCode);
      }
    }
    function addLocalRef(ref2, v3) {
      var refId = refVal.length;
      refVal[refId] = v3;
      refs[ref2] = refId;
      return "refVal" + refId;
    }
    function removeLocalRef(ref2) {
      delete refs[ref2];
    }
    function replaceLocalRef(ref2, v3) {
      var refId = refs[ref2];
      refVal[refId] = v3;
    }
    function resolvedRef(refVal2, code2) {
      return typeof refVal2 == "object" || typeof refVal2 == "boolean" ? { code: code2, schema: refVal2, inline: true } : { code: code2, $async: refVal2 && !!refVal2.$async };
    }
    function usePattern(regexStr) {
      var index = patternsHash[regexStr];
      if (index === void 0) {
        index = patternsHash[regexStr] = patterns.length;
        patterns[index] = regexStr;
      }
      return "pattern" + index;
    }
    function useDefault(value) {
      switch (typeof value) {
        case "boolean":
        case "number":
          return "" + value;
        case "string":
          return util2.toQuotedString(value);
        case "object":
          if (value === null) return "null";
          var valueStr = stableStringify(value);
          var index = defaultsHash[valueStr];
          if (index === void 0) {
            index = defaultsHash[valueStr] = defaults.length;
            defaults[index] = value;
          }
          return "default" + index;
      }
    }
    function useCustomRule(rule, schema2, parentSchema, it) {
      if (self2._opts.validateSchema !== false) {
        var deps = rule.definition.dependencies;
        if (deps && !deps.every(function(keyword2) {
          return Object.prototype.hasOwnProperty.call(parentSchema, keyword2);
        }))
          throw new Error("parent schema must have all required keywords: " + deps.join(","));
        var validateSchema = rule.definition.validateSchema;
        if (validateSchema) {
          var valid = validateSchema(schema2);
          if (!valid) {
            var message = "keyword schema is invalid: " + self2.errorsText(validateSchema.errors);
            if (self2._opts.validateSchema == "log") self2.logger.error(message);
            else throw new Error(message);
          }
        }
      }
      var compile2 = rule.definition.compile, inline = rule.definition.inline, macro = rule.definition.macro;
      var validate2;
      if (compile2) {
        validate2 = compile2.call(self2, schema2, parentSchema, it);
      } else if (macro) {
        validate2 = macro.call(self2, schema2, parentSchema, it);
        if (opts.validateSchema !== false) self2.validateSchema(validate2, true);
      } else if (inline) {
        validate2 = inline.call(self2, it, rule.keyword, schema2, parentSchema);
      } else {
        validate2 = rule.definition.validate;
        if (!validate2) return;
      }
      if (validate2 === void 0)
        throw new Error('custom keyword "' + rule.keyword + '"failed to compile');
      var index = customRules.length;
      customRules[index] = validate2;
      return {
        code: "customRule" + index,
        validate: validate2
      };
    }
  }
  function checkCompiling(schema, root, baseId) {
    var index = compIndex.call(this, schema, root, baseId);
    if (index >= 0) return { index, compiling: true };
    index = this._compilations.length;
    this._compilations[index] = {
      schema,
      root,
      baseId
    };
    return { index, compiling: false };
  }
  function endCompiling(schema, root, baseId) {
    var i2 = compIndex.call(this, schema, root, baseId);
    if (i2 >= 0) this._compilations.splice(i2, 1);
  }
  function compIndex(schema, root, baseId) {
    for (var i2 = 0; i2 < this._compilations.length; i2++) {
      var c2 = this._compilations[i2];
      if (c2.schema == schema && c2.root == root && c2.baseId == baseId) return i2;
    }
    return -1;
  }
  function patternCode(i2, patterns) {
    return "var pattern" + i2 + " = new RegExp(" + util2.toQuotedString(patterns[i2]) + ");";
  }
  function defaultCode(i2) {
    return "var default" + i2 + " = defaults[" + i2 + "];";
  }
  function refValCode(i2, refVal) {
    return refVal[i2] === void 0 ? "" : "var refVal" + i2 + " = refVal[" + i2 + "];";
  }
  function customRuleCode(i2) {
    return "var customRule" + i2 + " = customRules[" + i2 + "];";
  }
  function vars(arr, statement) {
    if (!arr.length) return "";
    var code2 = "";
    for (var i2 = 0; i2 < arr.length; i2++)
      code2 += statement(i2, arr);
    return code2;
  }
  return compile_1;
}
var cache = { exports: {} };
var hasRequiredCache;
function requireCache() {
  if (hasRequiredCache) return cache.exports;
  hasRequiredCache = 1;
  var Cache = cache.exports = function Cache2() {
    this._cache = {};
  };
  Cache.prototype.put = function Cache_put(key, value) {
    this._cache[key] = value;
  };
  Cache.prototype.get = function Cache_get(key) {
    return this._cache[key];
  };
  Cache.prototype.del = function Cache_del(key) {
    delete this._cache[key];
  };
  Cache.prototype.clear = function Cache_clear() {
    this._cache = {};
  };
  return cache.exports;
}
var formats_1;
var hasRequiredFormats;
function requireFormats() {
  if (hasRequiredFormats) return formats_1;
  hasRequiredFormats = 1;
  var util2 = requireUtil();
  var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
  var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
  var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
  var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
  var URL2 = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
  var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
  var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
  var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
  var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
  formats_1 = formats;
  function formats(mode) {
    mode = mode == "full" ? "full" : "fast";
    return util2.copy(formats[mode]);
  }
  formats.fast = {
    // date: http://tools.ietf.org/html/rfc3339#section-5.6
    date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
    // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
    time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
    "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
    // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
    uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
    "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
    "uri-template": URITEMPLATE,
    url: URL2,
    // email (sources from jsen validator):
    // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
    // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
    hostname: HOSTNAME,
    // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex,
    // uuid: http://tools.ietf.org/html/rfc4122
    uuid: UUID,
    // JSON-pointer: https://tools.ietf.org/html/rfc6901
    // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
    "json-pointer": JSON_POINTER,
    "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
    // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
    "relative-json-pointer": RELATIVE_JSON_POINTER
  };
  formats.full = {
    date,
    time,
    "date-time": date_time,
    uri,
    "uri-reference": URIREF,
    "uri-template": URITEMPLATE,
    url: URL2,
    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    hostname: HOSTNAME,
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex,
    uuid: UUID,
    "json-pointer": JSON_POINTER,
    "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
    "relative-json-pointer": RELATIVE_JSON_POINTER
  };
  function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  function date(str) {
    var matches = str.match(DATE);
    if (!matches) return false;
    var year = +matches[1];
    var month = +matches[2];
    var day = +matches[3];
    return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
  }
  function time(str, full) {
    var matches = str.match(TIME);
    if (!matches) return false;
    var hour = matches[1];
    var minute = matches[2];
    var second = matches[3];
    var timeZone = matches[5];
    return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);
  }
  var DATE_TIME_SEPARATOR = /t|\s/i;
  function date_time(str) {
    var dateTime = str.split(DATE_TIME_SEPARATOR);
    return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
  }
  var NOT_URI_FRAGMENT = /\/|:/;
  function uri(str) {
    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
  }
  var Z_ANCHOR = /[^\\]\\Z/;
  function regex(str) {
    if (Z_ANCHOR.test(str)) return false;
    try {
      new RegExp(str);
      return true;
    } catch (e2) {
      return false;
    }
  }
  return formats_1;
}
var ref;
var hasRequiredRef;
function requireRef() {
  if (hasRequiredRef) return ref;
  hasRequiredRef = 1;
  ref = function generate_ref(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $async, $refCode;
    if ($schema2 == "#" || $schema2 == "#/") {
      if (it.isRoot) {
        $async = it.async;
        $refCode = "validate";
      } else {
        $async = it.root.schema.$async === true;
        $refCode = "root.refVal[0]";
      }
    } else {
      var $refVal = it.resolveRef(it.baseId, $schema2, it.isRoot);
      if ($refVal === void 0) {
        var $message = it.MissingRefError.message(it.baseId, $schema2);
        if (it.opts.missingRefs == "fail") {
          it.logger.error($message);
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '$ref' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { ref: '" + it.util.escapeQuotes($schema2) + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'can\\'t resolve reference " + it.util.escapeQuotes($schema2) + "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: " + it.util.toQuotedString($schema2) + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          if ($breakOnError) {
            out += " if (false) { ";
          }
        } else if (it.opts.missingRefs == "ignore") {
          it.logger.warn($message);
          if ($breakOnError) {
            out += " if (true) { ";
          }
        } else {
          throw new it.MissingRefError(it.baseId, $schema2, $message);
        }
      } else if ($refVal.inline) {
        var $it = it.util.copy(it);
        $it.level++;
        var $nextValid = "valid" + $it.level;
        $it.schema = $refVal.schema;
        $it.schemaPath = "";
        $it.errSchemaPath = $schema2;
        var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
        out += " " + $code + " ";
        if ($breakOnError) {
          out += " if (" + $nextValid + ") { ";
        }
      } else {
        $async = $refVal.$async === true || it.async && $refVal.$async !== false;
        $refCode = $refVal.code;
      }
    }
    if ($refCode) {
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.opts.passContext) {
        out += " " + $refCode + ".call(this, ";
      } else {
        out += " " + $refCode + "( ";
      }
      out += " " + $data + ", (dataPath || '')";
      if (it.errorPath != '""') {
        out += " + " + it.errorPath;
      }
      var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
      out += " , " + $parentData + " , " + $parentDataProperty + ", rootData)  ";
      var __callValidate = out;
      out = $$outStack.pop();
      if ($async) {
        if (!it.async) throw new Error("async schema referenced by sync schema");
        if ($breakOnError) {
          out += " var " + $valid + "; ";
        }
        out += " try { await " + __callValidate + "; ";
        if ($breakOnError) {
          out += " " + $valid + " = true; ";
        }
        out += " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ";
        if ($breakOnError) {
          out += " " + $valid + " = false; ";
        }
        out += " } ";
        if ($breakOnError) {
          out += " if (" + $valid + ") { ";
        }
      } else {
        out += " if (!" + __callValidate + ") { if (vErrors === null) vErrors = " + $refCode + ".errors; else vErrors = vErrors.concat(" + $refCode + ".errors); errors = vErrors.length; } ";
        if ($breakOnError) {
          out += " else { ";
        }
      }
    }
    return out;
  };
  return ref;
}
var allOf;
var hasRequiredAllOf;
function requireAllOf() {
  if (hasRequiredAllOf) return allOf;
  hasRequiredAllOf = 1;
  allOf = function generate_allOf(it, $keyword, $ruleType) {
    var out = " ";
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $currentBaseId = $it.baseId, $allSchemasEmpty = true;
    var arr1 = $schema2;
    if (arr1) {
      var $sch, $i = -1, l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          $allSchemasEmpty = false;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + "[" + $i + "]";
          $it.errSchemaPath = $errSchemaPath + "/" + $i;
          out += "  " + it.validate($it) + " ";
          $it.baseId = $currentBaseId;
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { ";
            $closingBraces += "}";
          }
        }
      }
    }
    if ($breakOnError) {
      if ($allSchemasEmpty) {
        out += " if (true) { ";
      } else {
        out += " " + $closingBraces.slice(0, -1) + " ";
      }
    }
    return out;
  };
  return allOf;
}
var anyOf;
var hasRequiredAnyOf;
function requireAnyOf() {
  if (hasRequiredAnyOf) return anyOf;
  hasRequiredAnyOf = 1;
  anyOf = function generate_anyOf(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $noEmptySchema = $schema2.every(function($sch2) {
      return it.opts.strictKeywords ? typeof $sch2 == "object" && Object.keys($sch2).length > 0 || $sch2 === false : it.util.schemaHasRules($sch2, it.RULES.all);
    });
    if ($noEmptySchema) {
      var $currentBaseId = $it.baseId;
      out += " var " + $errs + " = errors; var " + $valid + " = false;  ";
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var arr1 = $schema2;
      if (arr1) {
        var $sch, $i = -1, l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + "[" + $i + "]";
          $it.errSchemaPath = $errSchemaPath + "/" + $i;
          out += "  " + it.validate($it) + " ";
          $it.baseId = $currentBaseId;
          out += " " + $valid + " = " + $valid + " || " + $nextValid + "; if (!" + $valid + ") { ";
          $closingBraces += "}";
        }
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " " + $closingBraces + " if (!" + $valid + ") {   var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: 'anyOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: 'should match some schema in anyOf' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError(vErrors); ";
        } else {
          out += " validate.errors = vErrors; return false; ";
        }
      }
      out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
      if (it.opts.allErrors) {
        out += " } ";
      }
    } else {
      if ($breakOnError) {
        out += " if (true) { ";
      }
    }
    return out;
  };
  return anyOf;
}
var comment;
var hasRequiredComment;
function requireComment() {
  if (hasRequiredComment) return comment;
  hasRequiredComment = 1;
  comment = function generate_comment(it, $keyword, $ruleType) {
    var out = " ";
    var $schema2 = it.schema[$keyword];
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    !it.opts.allErrors;
    var $comment = it.util.toQuotedString($schema2);
    if (it.opts.$comment === true) {
      out += " console.log(" + $comment + ");";
    } else if (typeof it.opts.$comment == "function") {
      out += " self._opts.$comment(" + $comment + ", " + it.util.toQuotedString($errSchemaPath) + ", validate.root.schema);";
    }
    return out;
  };
  return comment;
}
var _const;
var hasRequired_const;
function require_const() {
  if (hasRequired_const) return _const;
  hasRequired_const = 1;
  _const = function generate_const(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $isData = it.opts.$data && $schema2 && $schema2.$data;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    }
    if (!$isData) {
      out += " var schema" + $lvl + " = validate.schema" + $schemaPath + ";";
    }
    out += "var " + $valid + " = equal(" + $data + ", schema" + $lvl + "); if (!" + $valid + ") {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: 'const' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValue: schema" + $lvl + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should be equal to constant' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " }";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return _const;
}
var contains;
var hasRequiredContains;
function requireContains() {
  if (hasRequiredContains) return contains;
  hasRequiredContains = 1;
  contains = function generate_contains(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId, $nonEmptySchema = it.opts.strictKeywords ? typeof $schema2 == "object" && Object.keys($schema2).length > 0 || $schema2 === false : it.util.schemaHasRules($schema2, it.RULES.all);
    out += "var " + $errs + " = errors;var " + $valid + ";";
    if ($nonEmptySchema) {
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      $it.schema = $schema2;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += " var " + $nextValid + " = false; for (var " + $idx + " = 0; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + "[" + $idx + "]";
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
      } else {
        out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
      }
      out += " if (" + $nextValid + ") break; }  ";
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " " + $closingBraces + " if (!" + $nextValid + ") {";
    } else {
      out += " if (" + $data + ".length == 0) {";
    }
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: 'contains' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
      if (it.opts.messages !== false) {
        out += " , message: 'should contain a valid item' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } else { ";
    if ($nonEmptySchema) {
      out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
    }
    if (it.opts.allErrors) {
      out += " } ";
    }
    return out;
  };
  return contains;
}
var dependencies$1;
var hasRequiredDependencies;
function requireDependencies() {
  if (hasRequiredDependencies) return dependencies$1;
  hasRequiredDependencies = 1;
  dependencies$1 = function generate_dependencies(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $schemaDeps = {}, $propertyDeps = {}, $ownProperties = it.opts.ownProperties;
    for ($property in $schema2) {
      if ($property == "__proto__") continue;
      var $sch = $schema2[$property];
      var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
      $deps[$property] = $sch;
    }
    out += "var " + $errs + " = errors;";
    var $currentErrorPath = it.errorPath;
    out += "var missing" + $lvl + ";";
    for (var $property in $propertyDeps) {
      $deps = $propertyDeps[$property];
      if ($deps.length) {
        out += " if ( " + $data + it.util.getProperty($property) + " !== undefined ";
        if ($ownProperties) {
          out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
        }
        if ($breakOnError) {
          out += " && ( ";
          var arr1 = $deps;
          if (arr1) {
            var $propertyKey, $i = -1, l1 = arr1.length - 1;
            while ($i < l1) {
              $propertyKey = arr1[$i += 1];
              if ($i) {
                out += " || ";
              }
              var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
              out += " ( ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
            }
          }
          out += ")) {  ";
          var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should have ";
              if ($deps.length == 1) {
                out += "property " + it.util.escapeQuotes($deps[0]);
              } else {
                out += "properties " + it.util.escapeQuotes($deps.join(", "));
              }
              out += " when property " + it.util.escapeQuotes($property) + " is present' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
        } else {
          out += " ) { ";
          var arr2 = $deps;
          if (arr2) {
            var $propertyKey, i2 = -1, l2 = arr2.length - 1;
            while (i2 < l2) {
              $propertyKey = arr2[i2 += 1];
              var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              out += " if ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") {  var err =   ";
              if (it.createErrors !== false) {
                out += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should have ";
                  if ($deps.length == 1) {
                    out += "property " + it.util.escapeQuotes($deps[0]);
                  } else {
                    out += "properties " + it.util.escapeQuotes($deps.join(", "));
                  }
                  out += " when property " + it.util.escapeQuotes($property) + " is present' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
            }
          }
        }
        out += " }   ";
        if ($breakOnError) {
          $closingBraces += "}";
          out += " else { ";
        }
      }
    }
    it.errorPath = $currentErrorPath;
    var $currentBaseId = $it.baseId;
    for (var $property in $schemaDeps) {
      var $sch = $schemaDeps[$property];
      if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
        out += " " + $nextValid + " = true; if ( " + $data + it.util.getProperty($property) + " !== undefined ";
        if ($ownProperties) {
          out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
        }
        out += ") { ";
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + it.util.getProperty($property);
        $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($property);
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
        out += " }  ";
        if ($breakOnError) {
          out += " if (" + $nextValid + ") { ";
          $closingBraces += "}";
        }
      }
    }
    if ($breakOnError) {
      out += "   " + $closingBraces + " if (" + $errs + " == errors) {";
    }
    return out;
  };
  return dependencies$1;
}
var _enum;
var hasRequired_enum;
function require_enum() {
  if (hasRequired_enum) return _enum;
  hasRequired_enum = 1;
  _enum = function generate_enum(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $isData = it.opts.$data && $schema2 && $schema2.$data;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    }
    var $i = "i" + $lvl, $vSchema = "schema" + $lvl;
    if (!$isData) {
      out += " var " + $vSchema + " = validate.schema" + $schemaPath + ";";
    }
    out += "var " + $valid + ";";
    if ($isData) {
      out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
    }
    out += "" + $valid + " = false;for (var " + $i + "=0; " + $i + "<" + $vSchema + ".length; " + $i + "++) if (equal(" + $data + ", " + $vSchema + "[" + $i + "])) { " + $valid + " = true; break; }";
    if ($isData) {
      out += "  }  ";
    }
    out += " if (!" + $valid + ") {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: 'enum' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValues: schema" + $lvl + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should be equal to one of the allowed values' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " }";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return _enum;
}
var format;
var hasRequiredFormat;
function requireFormat() {
  if (hasRequiredFormat) return format;
  hasRequiredFormat = 1;
  format = function generate_format(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    if (it.opts.format === false) {
      if ($breakOnError) {
        out += " if (true) { ";
      }
      return out;
    }
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    var $unknownFormats = it.opts.unknownFormats, $allowUnknown = Array.isArray($unknownFormats);
    if ($isData) {
      var $format = "format" + $lvl, $isObject = "isObject" + $lvl, $formatType = "formatType" + $lvl;
      out += " var " + $format + " = formats[" + $schemaValue + "]; var " + $isObject + " = typeof " + $format + " == 'object' && !(" + $format + " instanceof RegExp) && " + $format + ".validate; var " + $formatType + " = " + $isObject + " && " + $format + ".type || 'string'; if (" + $isObject + ") { ";
      if (it.async) {
        out += " var async" + $lvl + " = " + $format + ".async; ";
      }
      out += " " + $format + " = " + $format + ".validate; } if (  ";
      if ($isData) {
        out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
      }
      out += " (";
      if ($unknownFormats != "ignore") {
        out += " (" + $schemaValue + " && !" + $format + " ";
        if ($allowUnknown) {
          out += " && self._opts.unknownFormats.indexOf(" + $schemaValue + ") == -1 ";
        }
        out += ") || ";
      }
      out += " (" + $format + " && " + $formatType + " == '" + $ruleType + "' && !(typeof " + $format + " == 'function' ? ";
      if (it.async) {
        out += " (async" + $lvl + " ? await " + $format + "(" + $data + ") : " + $format + "(" + $data + ")) ";
      } else {
        out += " " + $format + "(" + $data + ") ";
      }
      out += " : " + $format + ".test(" + $data + "))))) {";
    } else {
      var $format = it.formats[$schema2];
      if (!$format) {
        if ($unknownFormats == "ignore") {
          it.logger.warn('unknown format "' + $schema2 + '" ignored in schema at path "' + it.errSchemaPath + '"');
          if ($breakOnError) {
            out += " if (true) { ";
          }
          return out;
        } else if ($allowUnknown && $unknownFormats.indexOf($schema2) >= 0) {
          if ($breakOnError) {
            out += " if (true) { ";
          }
          return out;
        } else {
          throw new Error('unknown format "' + $schema2 + '" is used in schema at path "' + it.errSchemaPath + '"');
        }
      }
      var $isObject = typeof $format == "object" && !($format instanceof RegExp) && $format.validate;
      var $formatType = $isObject && $format.type || "string";
      if ($isObject) {
        var $async = $format.async === true;
        $format = $format.validate;
      }
      if ($formatType != $ruleType) {
        if ($breakOnError) {
          out += " if (true) { ";
        }
        return out;
      }
      if ($async) {
        if (!it.async) throw new Error("async format in sync schema");
        var $formatRef = "formats" + it.util.getProperty($schema2) + ".validate";
        out += " if (!(await " + $formatRef + "(" + $data + "))) { ";
      } else {
        out += " if (! ";
        var $formatRef = "formats" + it.util.getProperty($schema2);
        if ($isObject) $formatRef += ".validate";
        if (typeof $format == "function") {
          out += " " + $formatRef + "(" + $data + ") ";
        } else {
          out += " " + $formatRef + ".test(" + $data + ") ";
        }
        out += ") { ";
      }
    }
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: 'format' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { format:  ";
      if ($isData) {
        out += "" + $schemaValue;
      } else {
        out += "" + it.util.toQuotedString($schema2);
      }
      out += "  } ";
      if (it.opts.messages !== false) {
        out += ` , message: 'should match format "`;
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + it.util.escapeQuotes($schema2);
        }
        out += `"' `;
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + it.util.toQuotedString($schema2);
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return format;
}
var _if;
var hasRequired_if;
function require_if() {
  if (hasRequired_if) return _if;
  hasRequired_if = 1;
  _if = function generate_if(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $thenSch = it.schema["then"], $elseSch = it.schema["else"], $thenPresent = $thenSch !== void 0 && (it.opts.strictKeywords ? typeof $thenSch == "object" && Object.keys($thenSch).length > 0 || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)), $elsePresent = $elseSch !== void 0 && (it.opts.strictKeywords ? typeof $elseSch == "object" && Object.keys($elseSch).length > 0 || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)), $currentBaseId = $it.baseId;
    if ($thenPresent || $elsePresent) {
      var $ifClause;
      $it.createErrors = false;
      $it.schema = $schema2;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += " var " + $errs + " = errors; var " + $valid + " = true;  ";
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      out += "  " + it.validate($it) + " ";
      $it.baseId = $currentBaseId;
      $it.createErrors = true;
      out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }  ";
      it.compositeRule = $it.compositeRule = $wasComposite;
      if ($thenPresent) {
        out += " if (" + $nextValid + ") {  ";
        $it.schema = it.schema["then"];
        $it.schemaPath = it.schemaPath + ".then";
        $it.errSchemaPath = it.errSchemaPath + "/then";
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
        out += " " + $valid + " = " + $nextValid + "; ";
        if ($thenPresent && $elsePresent) {
          $ifClause = "ifClause" + $lvl;
          out += " var " + $ifClause + " = 'then'; ";
        } else {
          $ifClause = "'then'";
        }
        out += " } ";
        if ($elsePresent) {
          out += " else { ";
        }
      } else {
        out += " if (!" + $nextValid + ") { ";
      }
      if ($elsePresent) {
        $it.schema = it.schema["else"];
        $it.schemaPath = it.schemaPath + ".else";
        $it.errSchemaPath = it.errSchemaPath + "/else";
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
        out += " " + $valid + " = " + $nextValid + "; ";
        if ($thenPresent && $elsePresent) {
          $ifClause = "ifClause" + $lvl;
          out += " var " + $ifClause + " = 'else'; ";
        } else {
          $ifClause = "'else'";
        }
        out += " } ";
      }
      out += " if (!" + $valid + ") {   var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: 'if' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { failingKeyword: " + $ifClause + " } ";
        if (it.opts.messages !== false) {
          out += ` , message: 'should match "' + ` + $ifClause + ` + '" schema' `;
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError(vErrors); ";
        } else {
          out += " validate.errors = vErrors; return false; ";
        }
      }
      out += " }   ";
      if ($breakOnError) {
        out += " else { ";
      }
    } else {
      if ($breakOnError) {
        out += " if (true) { ";
      }
    }
    return out;
  };
  return _if;
}
var items;
var hasRequiredItems;
function requireItems() {
  if (hasRequiredItems) return items;
  hasRequiredItems = 1;
  items = function generate_items(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId;
    out += "var " + $errs + " = errors;var " + $valid + ";";
    if (Array.isArray($schema2)) {
      var $additionalItems = it.schema.additionalItems;
      if ($additionalItems === false) {
        out += " " + $valid + " = " + $data + ".length <= " + $schema2.length + "; ";
        var $currErrSchemaPath = $errSchemaPath;
        $errSchemaPath = it.errSchemaPath + "/additionalItems";
        out += "  if (!" + $valid + ") {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'additionalItems' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schema2.length + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT have more than " + $schema2.length + " items' ";
          }
          if (it.opts.verbose) {
            out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } ";
        $errSchemaPath = $currErrSchemaPath;
        if ($breakOnError) {
          $closingBraces += "}";
          out += " else { ";
        }
      }
      var arr1 = $schema2;
      if (arr1) {
        var $sch, $i = -1, l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
            out += " " + $nextValid + " = true; if (" + $data + ".length > " + $i + ") { ";
            var $passData = $data + "[" + $i + "]";
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + "[" + $i + "]";
            $it.errSchemaPath = $errSchemaPath + "/" + $i;
            $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
            $it.dataPathArr[$dataNxt] = $i;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            out += " }  ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
              $closingBraces += "}";
            }
          }
        }
      }
      if (typeof $additionalItems == "object" && (it.opts.strictKeywords ? typeof $additionalItems == "object" && Object.keys($additionalItems).length > 0 || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
        $it.schema = $additionalItems;
        $it.schemaPath = it.schemaPath + ".additionalItems";
        $it.errSchemaPath = it.errSchemaPath + "/additionalItems";
        out += " " + $nextValid + " = true; if (" + $data + ".length > " + $schema2.length + ") {  for (var " + $idx + " = " + $schema2.length + "; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
        $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
        var $passData = $data + "[" + $idx + "]";
        $it.dataPathArr[$dataNxt] = $idx;
        var $code = it.validate($it);
        $it.baseId = $currentBaseId;
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
        } else {
          out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
        }
        if ($breakOnError) {
          out += " if (!" + $nextValid + ") break; ";
        }
        out += " } }  ";
        if ($breakOnError) {
          out += " if (" + $nextValid + ") { ";
          $closingBraces += "}";
        }
      }
    } else if (it.opts.strictKeywords ? typeof $schema2 == "object" && Object.keys($schema2).length > 0 || $schema2 === false : it.util.schemaHasRules($schema2, it.RULES.all)) {
      $it.schema = $schema2;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += "  for (var " + $idx + " = 0; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + "[" + $idx + "]";
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
      } else {
        out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
      }
      if ($breakOnError) {
        out += " if (!" + $nextValid + ") break; ";
      }
      out += " }";
    }
    if ($breakOnError) {
      out += " " + $closingBraces + " if (" + $errs + " == errors) {";
    }
    return out;
  };
  return items;
}
var _limit;
var hasRequired_limit;
function require_limit() {
  if (hasRequired_limit) return _limit;
  hasRequired_limit = 1;
  _limit = function generate__limit(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    var $isMax = $keyword == "maximum", $exclusiveKeyword = $isMax ? "exclusiveMaximum" : "exclusiveMinimum", $schemaExcl = it.schema[$exclusiveKeyword], $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data, $op = $isMax ? "<" : ">", $notOp = $isMax ? ">" : "<", $errorKeyword = void 0;
    if (!($isData || typeof $schema2 == "number" || $schema2 === void 0)) {
      throw new Error($keyword + " must be number");
    }
    if (!($isDataExcl || $schemaExcl === void 0 || typeof $schemaExcl == "number" || typeof $schemaExcl == "boolean")) {
      throw new Error($exclusiveKeyword + " must be number or boolean");
    }
    if ($isDataExcl) {
      var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr), $exclusive = "exclusive" + $lvl, $exclType = "exclType" + $lvl, $exclIsNumber = "exclIsNumber" + $lvl, $opExpr = "op" + $lvl, $opStr = "' + " + $opExpr + " + '";
      out += " var schemaExcl" + $lvl + " = " + $schemaValueExcl + "; ";
      $schemaValueExcl = "schemaExcl" + $lvl;
      out += " var " + $exclusive + "; var " + $exclType + " = typeof " + $schemaValueExcl + "; if (" + $exclType + " != 'boolean' && " + $exclType + " != 'undefined' && " + $exclType + " != 'number') { ";
      var $errorKeyword = $exclusiveKeyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: '" + ($errorKeyword || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: '" + $exclusiveKeyword + " should be boolean' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      out += " } else if ( ";
      if ($isData) {
        out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
      }
      out += " " + $exclType + " == 'number' ? ( (" + $exclusive + " = " + $schemaValue + " === undefined || " + $schemaValueExcl + " " + $op + "= " + $schemaValue + ") ? " + $data + " " + $notOp + "= " + $schemaValueExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) : ( (" + $exclusive + " = " + $schemaValueExcl + " === true) ? " + $data + " " + $notOp + "= " + $schemaValue + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { var op" + $lvl + " = " + $exclusive + " ? '" + $op + "' : '" + $op + "='; ";
      if ($schema2 === void 0) {
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
        $schemaValue = $schemaValueExcl;
        $isData = $isDataExcl;
      }
    } else {
      var $exclIsNumber = typeof $schemaExcl == "number", $opStr = $op;
      if ($exclIsNumber && $isData) {
        var $opExpr = "'" + $opStr + "'";
        out += " if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        out += " ( " + $schemaValue + " === undefined || " + $schemaExcl + " " + $op + "= " + $schemaValue + " ? " + $data + " " + $notOp + "= " + $schemaExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { ";
      } else {
        if ($exclIsNumber && $schema2 === void 0) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
          $schemaValue = $schemaExcl;
          $notOp += "=";
        } else {
          if ($exclIsNumber) $schemaValue = Math[$isMax ? "min" : "max"]($schemaExcl, $schema2);
          if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
            $exclusive = true;
            $errorKeyword = $exclusiveKeyword;
            $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
            $notOp += "=";
          } else {
            $exclusive = false;
            $opStr += "=";
          }
        }
        var $opExpr = "'" + $opStr + "'";
        out += " if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        out += " " + $data + " " + $notOp + " " + $schemaValue + " || " + $data + " !== " + $data + ") { ";
      }
    }
    $errorKeyword = $errorKeyword || $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_limit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { comparison: " + $opExpr + ", limit: " + $schemaValue + ", exclusive: " + $exclusive + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should be " + $opStr + " ";
        if ($isData) {
          out += "' + " + $schemaValue;
        } else {
          out += "" + $schemaValue + "'";
        }
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema2;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return _limit;
}
var _limitItems;
var hasRequired_limitItems;
function require_limitItems() {
  if (hasRequired_limitItems) return _limitItems;
  hasRequired_limitItems = 1;
  _limitItems = function generate__limitItems(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    if (!($isData || typeof $schema2 == "number")) {
      throw new Error($keyword + " must be number");
    }
    var $op = $keyword == "maxItems" ? ">" : "<";
    out += "if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
    }
    out += " " + $data + ".length " + $op + " " + $schemaValue + ") { ";
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_limitItems") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT have ";
        if ($keyword == "maxItems") {
          out += "more";
        } else {
          out += "fewer";
        }
        out += " than ";
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + $schema2;
        }
        out += " items' ";
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema2;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return _limitItems;
}
var _limitLength;
var hasRequired_limitLength;
function require_limitLength() {
  if (hasRequired_limitLength) return _limitLength;
  hasRequired_limitLength = 1;
  _limitLength = function generate__limitLength(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    if (!($isData || typeof $schema2 == "number")) {
      throw new Error($keyword + " must be number");
    }
    var $op = $keyword == "maxLength" ? ">" : "<";
    out += "if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
    }
    if (it.opts.unicode === false) {
      out += " " + $data + ".length ";
    } else {
      out += " ucs2length(" + $data + ") ";
    }
    out += " " + $op + " " + $schemaValue + ") { ";
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_limitLength") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT be ";
        if ($keyword == "maxLength") {
          out += "longer";
        } else {
          out += "shorter";
        }
        out += " than ";
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + $schema2;
        }
        out += " characters' ";
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema2;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return _limitLength;
}
var _limitProperties;
var hasRequired_limitProperties;
function require_limitProperties() {
  if (hasRequired_limitProperties) return _limitProperties;
  hasRequired_limitProperties = 1;
  _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    if (!($isData || typeof $schema2 == "number")) {
      throw new Error($keyword + " must be number");
    }
    var $op = $keyword == "maxProperties" ? ">" : "<";
    out += "if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
    }
    out += " Object.keys(" + $data + ").length " + $op + " " + $schemaValue + ") { ";
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_limitProperties") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT have ";
        if ($keyword == "maxProperties") {
          out += "more";
        } else {
          out += "fewer";
        }
        out += " than ";
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + $schema2;
        }
        out += " properties' ";
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema2;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return _limitProperties;
}
var multipleOf;
var hasRequiredMultipleOf;
function requireMultipleOf() {
  if (hasRequiredMultipleOf) return multipleOf;
  hasRequiredMultipleOf = 1;
  multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    if (!($isData || typeof $schema2 == "number")) {
      throw new Error($keyword + " must be number");
    }
    out += "var division" + $lvl + ";if (";
    if ($isData) {
      out += " " + $schemaValue + " !== undefined && ( typeof " + $schemaValue + " != 'number' || ";
    }
    out += " (division" + $lvl + " = " + $data + " / " + $schemaValue + ", ";
    if (it.opts.multipleOfPrecision) {
      out += " Math.abs(Math.round(division" + $lvl + ") - division" + $lvl + ") > 1e-" + it.opts.multipleOfPrecision + " ";
    } else {
      out += " division" + $lvl + " !== parseInt(division" + $lvl + ") ";
    }
    out += " ) ";
    if ($isData) {
      out += "  )  ";
    }
    out += " ) {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: 'multipleOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { multipleOf: " + $schemaValue + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should be multiple of ";
        if ($isData) {
          out += "' + " + $schemaValue;
        } else {
          out += "" + $schemaValue + "'";
        }
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema2;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return multipleOf;
}
var not;
var hasRequiredNot;
function requireNot() {
  if (hasRequiredNot) return not;
  hasRequiredNot = 1;
  not = function generate_not(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    $it.level++;
    var $nextValid = "valid" + $it.level;
    if (it.opts.strictKeywords ? typeof $schema2 == "object" && Object.keys($schema2).length > 0 || $schema2 === false : it.util.schemaHasRules($schema2, it.RULES.all)) {
      $it.schema = $schema2;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += " var " + $errs + " = errors;  ";
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      $it.createErrors = false;
      var $allErrorsOption;
      if ($it.opts.allErrors) {
        $allErrorsOption = $it.opts.allErrors;
        $it.opts.allErrors = false;
      }
      out += " " + it.validate($it) + " ";
      $it.createErrors = true;
      if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " if (" + $nextValid + ") {   ";
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: 'not' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: 'should NOT be valid' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
      if (it.opts.allErrors) {
        out += " } ";
      }
    } else {
      out += "  var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: 'not' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: 'should NOT be valid' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if ($breakOnError) {
        out += " if (false) { ";
      }
    }
    return out;
  };
  return not;
}
var oneOf;
var hasRequiredOneOf;
function requireOneOf() {
  if (hasRequiredOneOf) return oneOf;
  hasRequiredOneOf = 1;
  oneOf = function generate_oneOf(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $currentBaseId = $it.baseId, $prevValid = "prevValid" + $lvl, $passingSchemas = "passingSchemas" + $lvl;
    out += "var " + $errs + " = errors , " + $prevValid + " = false , " + $valid + " = false , " + $passingSchemas + " = null; ";
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema2;
    if (arr1) {
      var $sch, $i = -1, l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + "[" + $i + "]";
          $it.errSchemaPath = $errSchemaPath + "/" + $i;
          out += "  " + it.validate($it) + " ";
          $it.baseId = $currentBaseId;
        } else {
          out += " var " + $nextValid + " = true; ";
        }
        if ($i) {
          out += " if (" + $nextValid + " && " + $prevValid + ") { " + $valid + " = false; " + $passingSchemas + " = [" + $passingSchemas + ", " + $i + "]; } else { ";
          $closingBraces += "}";
        }
        out += " if (" + $nextValid + ") { " + $valid + " = " + $prevValid + " = true; " + $passingSchemas + " = " + $i + "; }";
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += "" + $closingBraces + "if (!" + $valid + ") {   var err =   ";
    if (it.createErrors !== false) {
      out += " { keyword: 'oneOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { passingSchemas: " + $passingSchemas + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should match exactly one schema in oneOf' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError(vErrors); ";
      } else {
        out += " validate.errors = vErrors; return false; ";
      }
    }
    out += "} else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }";
    if (it.opts.allErrors) {
      out += " } ";
    }
    return out;
  };
  return oneOf;
}
var pattern;
var hasRequiredPattern;
function requirePattern() {
  if (hasRequiredPattern) return pattern;
  hasRequiredPattern = 1;
  pattern = function generate_pattern(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    var $regexp = $isData ? "(new RegExp(" + $schemaValue + "))" : it.usePattern($schema2);
    out += "if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
    }
    out += " !" + $regexp + ".test(" + $data + ") ) {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: 'pattern' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { pattern:  ";
      if ($isData) {
        out += "" + $schemaValue;
      } else {
        out += "" + it.util.toQuotedString($schema2);
      }
      out += "  } ";
      if (it.opts.messages !== false) {
        out += ` , message: 'should match pattern "`;
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + it.util.escapeQuotes($schema2);
        }
        out += `"' `;
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + it.util.toQuotedString($schema2);
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
  return pattern;
}
var properties$3;
var hasRequiredProperties;
function requireProperties() {
  if (hasRequiredProperties) return properties$3;
  hasRequiredProperties = 1;
  properties$3 = function generate_properties(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $key = "key" + $lvl, $idx = "idx" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl;
    var $schemaKeys = Object.keys($schema2 || {}).filter(notProto), $pProperties = it.schema.patternProperties || {}, $pPropertyKeys = Object.keys($pProperties).filter(notProto), $aProperties = it.schema.additionalProperties, $someProperties = $schemaKeys.length || $pPropertyKeys.length, $noAdditional = $aProperties === false, $additionalIsSchema = typeof $aProperties == "object" && Object.keys($aProperties).length, $removeAdditional = it.opts.removeAdditional, $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
    var $required = it.schema.required;
    if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
      var $requiredHash = it.util.toHash($required);
    }
    function notProto(p2) {
      return p2 !== "__proto__";
    }
    out += "var " + $errs + " = errors;var " + $nextValid + " = true;";
    if ($ownProperties) {
      out += " var " + $dataProperties + " = undefined;";
    }
    if ($checkAdditional) {
      if ($ownProperties) {
        out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
      } else {
        out += " for (var " + $key + " in " + $data + ") { ";
      }
      if ($someProperties) {
        out += " var isAdditional" + $lvl + " = !(false ";
        if ($schemaKeys.length) {
          if ($schemaKeys.length > 8) {
            out += " || validate.schema" + $schemaPath + ".hasOwnProperty(" + $key + ") ";
          } else {
            var arr1 = $schemaKeys;
            if (arr1) {
              var $propertyKey, i1 = -1, l1 = arr1.length - 1;
              while (i1 < l1) {
                $propertyKey = arr1[i1 += 1];
                out += " || " + $key + " == " + it.util.toQuotedString($propertyKey) + " ";
              }
            }
          }
        }
        if ($pPropertyKeys.length) {
          var arr2 = $pPropertyKeys;
          if (arr2) {
            var $pProperty, $i = -1, l2 = arr2.length - 1;
            while ($i < l2) {
              $pProperty = arr2[$i += 1];
              out += " || " + it.usePattern($pProperty) + ".test(" + $key + ") ";
            }
          }
        }
        out += " ); if (isAdditional" + $lvl + ") { ";
      }
      if ($removeAdditional == "all") {
        out += " delete " + $data + "[" + $key + "]; ";
      } else {
        var $currentErrorPath = it.errorPath;
        var $additionalProperty = "' + " + $key + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
        }
        if ($noAdditional) {
          if ($removeAdditional) {
            out += " delete " + $data + "[" + $key + "]; ";
          } else {
            out += " " + $nextValid + " = false; ";
            var $currErrSchemaPath = $errSchemaPath;
            $errSchemaPath = it.errSchemaPath + "/additionalProperties";
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = "";
            if (it.createErrors !== false) {
              out += " { keyword: 'additionalProperties' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { additionalProperty: '" + $additionalProperty + "' } ";
              if (it.opts.messages !== false) {
                out += " , message: '";
                if (it.opts._errorDataPathProperty) {
                  out += "is an invalid additional property";
                } else {
                  out += "should NOT have additional properties";
                }
                out += "' ";
              }
              if (it.opts.verbose) {
                out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              if (it.async) {
                out += " throw new ValidationError([" + __err + "]); ";
              } else {
                out += " validate.errors = [" + __err + "]; return false; ";
              }
            } else {
              out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
            }
            $errSchemaPath = $currErrSchemaPath;
            if ($breakOnError) {
              out += " break; ";
            }
          }
        } else if ($additionalIsSchema) {
          if ($removeAdditional == "failing") {
            out += " var " + $errs + " = errors;  ";
            var $wasComposite = it.compositeRule;
            it.compositeRule = $it.compositeRule = true;
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + ".additionalProperties";
            $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + "[" + $key + "]";
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            out += " if (!" + $nextValid + ") { errors = " + $errs + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + $data + "[" + $key + "]; }  ";
            it.compositeRule = $it.compositeRule = $wasComposite;
          } else {
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + ".additionalProperties";
            $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + "[" + $key + "]";
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            if ($breakOnError) {
              out += " if (!" + $nextValid + ") break; ";
            }
          }
        }
        it.errorPath = $currentErrorPath;
      }
      if ($someProperties) {
        out += " } ";
      }
      out += " }  ";
      if ($breakOnError) {
        out += " if (" + $nextValid + ") { ";
        $closingBraces += "}";
      }
    }
    var $useDefaults = it.opts.useDefaults && !it.compositeRule;
    if ($schemaKeys.length) {
      var arr3 = $schemaKeys;
      if (arr3) {
        var $propertyKey, i3 = -1, l3 = arr3.length - 1;
        while (i3 < l3) {
          $propertyKey = arr3[i3 += 1];
          var $sch = $schema2[$propertyKey];
          if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
            var $prop = it.util.getProperty($propertyKey), $passData = $data + $prop, $hasDefault = $useDefaults && $sch.default !== void 0;
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + $prop;
            $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($propertyKey);
            $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
            $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              $code = it.util.varReplace($code, $nextData, $passData);
              var $useData = $passData;
            } else {
              var $useData = $nextData;
              out += " var " + $nextData + " = " + $passData + "; ";
            }
            if ($hasDefault) {
              out += " " + $code + " ";
            } else {
              if ($requiredHash && $requiredHash[$propertyKey]) {
                out += " if ( " + $useData + " === undefined ";
                if ($ownProperties) {
                  out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                }
                out += ") { " + $nextValid + " = false; ";
                var $currentErrorPath = it.errorPath, $currErrSchemaPath = $errSchemaPath, $missingProperty = it.util.escapeQuotes($propertyKey);
                if (it.opts._errorDataPathProperty) {
                  it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                }
                $errSchemaPath = it.errSchemaPath + "/required";
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = "";
                if (it.createErrors !== false) {
                  out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                  if (it.opts.messages !== false) {
                    out += " , message: '";
                    if (it.opts._errorDataPathProperty) {
                      out += "is a required property";
                    } else {
                      out += "should have required property \\'" + $missingProperty + "\\'";
                    }
                    out += "' ";
                  }
                  if (it.opts.verbose) {
                    out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                  }
                  out += " } ";
                } else {
                  out += " {} ";
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  if (it.async) {
                    out += " throw new ValidationError([" + __err + "]); ";
                  } else {
                    out += " validate.errors = [" + __err + "]; return false; ";
                  }
                } else {
                  out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                }
                $errSchemaPath = $currErrSchemaPath;
                it.errorPath = $currentErrorPath;
                out += " } else { ";
              } else {
                if ($breakOnError) {
                  out += " if ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") { " + $nextValid + " = true; } else { ";
                } else {
                  out += " if (" + $useData + " !== undefined ";
                  if ($ownProperties) {
                    out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += " ) { ";
                }
              }
              out += " " + $code + " } ";
            }
          }
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { ";
            $closingBraces += "}";
          }
        }
      }
    }
    if ($pPropertyKeys.length) {
      var arr4 = $pPropertyKeys;
      if (arr4) {
        var $pProperty, i4 = -1, l4 = arr4.length - 1;
        while (i4 < l4) {
          $pProperty = arr4[i4 += 1];
          var $sch = $pProperties[$pProperty];
          if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
            $it.schema = $sch;
            $it.schemaPath = it.schemaPath + ".patternProperties" + it.util.getProperty($pProperty);
            $it.errSchemaPath = it.errSchemaPath + "/patternProperties/" + it.util.escapeFragment($pProperty);
            if ($ownProperties) {
              out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
            } else {
              out += " for (var " + $key + " in " + $data + ") { ";
            }
            out += " if (" + it.usePattern($pProperty) + ".test(" + $key + ")) { ";
            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + "[" + $key + "]";
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            if ($breakOnError) {
              out += " if (!" + $nextValid + ") break; ";
            }
            out += " } ";
            if ($breakOnError) {
              out += " else " + $nextValid + " = true; ";
            }
            out += " }  ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
              $closingBraces += "}";
            }
          }
        }
      }
    }
    if ($breakOnError) {
      out += " " + $closingBraces + " if (" + $errs + " == errors) {";
    }
    return out;
  };
  return properties$3;
}
var propertyNames;
var hasRequiredPropertyNames;
function requirePropertyNames() {
  if (hasRequiredPropertyNames) return propertyNames;
  hasRequiredPropertyNames = 1;
  propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    out += "var " + $errs + " = errors;";
    if (it.opts.strictKeywords ? typeof $schema2 == "object" && Object.keys($schema2).length > 0 || $schema2 === false : it.util.schemaHasRules($schema2, it.RULES.all)) {
      $it.schema = $schema2;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      var $key = "key" + $lvl, $idx = "idx" + $lvl, $i = "i" + $lvl, $invalidName = "' + " + $key + " + '", $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
      if ($ownProperties) {
        out += " var " + $dataProperties + " = undefined; ";
      }
      if ($ownProperties) {
        out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
      } else {
        out += " for (var " + $key + " in " + $data + ") { ";
      }
      out += " var startErrs" + $lvl + " = errors; ";
      var $passData = $key;
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
      } else {
        out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " if (!" + $nextValid + ") { for (var " + $i + "=startErrs" + $lvl + "; " + $i + "<errors; " + $i + "++) { vErrors[" + $i + "].propertyName = " + $key + "; }   var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: 'propertyNames' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { propertyName: '" + $invalidName + "' } ";
        if (it.opts.messages !== false) {
          out += " , message: 'property name \\'" + $invalidName + "\\' is invalid' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError(vErrors); ";
        } else {
          out += " validate.errors = vErrors; return false; ";
        }
      }
      if ($breakOnError) {
        out += " break; ";
      }
      out += " } }";
    }
    if ($breakOnError) {
      out += " " + $closingBraces + " if (" + $errs + " == errors) {";
    }
    return out;
  };
  return propertyNames;
}
var required$1;
var hasRequiredRequired;
function requireRequired() {
  if (hasRequiredRequired) return required$1;
  hasRequiredRequired = 1;
  required$1 = function generate_required(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $isData = it.opts.$data && $schema2 && $schema2.$data;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
    }
    var $vSchema = "schema" + $lvl;
    if (!$isData) {
      if ($schema2.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
        var $required = [];
        var arr1 = $schema2;
        if (arr1) {
          var $property, i1 = -1, l1 = arr1.length - 1;
          while (i1 < l1) {
            $property = arr1[i1 += 1];
            var $propertySch = it.schema.properties[$property];
            if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == "object" && Object.keys($propertySch).length > 0 || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
              $required[$required.length] = $property;
            }
          }
        }
      } else {
        var $required = $schema2;
      }
    }
    if ($isData || $required.length) {
      var $currentErrorPath = it.errorPath, $loopRequired = $isData || $required.length >= it.opts.loopRequired, $ownProperties = it.opts.ownProperties;
      if ($breakOnError) {
        out += " var missing" + $lvl + "; ";
        if ($loopRequired) {
          if (!$isData) {
            out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
          }
          var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          }
          out += " var " + $valid + " = true; ";
          if ($isData) {
            out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
          }
          out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { " + $valid + " = " + $data + "[" + $vSchema + "[" + $i + "]] !== undefined ";
          if ($ownProperties) {
            out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
          }
          out += "; if (!" + $valid + ") break; } ";
          if ($isData) {
            out += "  }  ";
          }
          out += "  if (!" + $valid + ") {   ";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += "is a required property";
              } else {
                out += "should have required property \\'" + $missingProperty + "\\'";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } else { ";
        } else {
          out += " if ( ";
          var arr2 = $required;
          if (arr2) {
            var $propertyKey, $i = -1, l2 = arr2.length - 1;
            while ($i < l2) {
              $propertyKey = arr2[$i += 1];
              if ($i) {
                out += " || ";
              }
              var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
              out += " ( ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
            }
          }
          out += ") {  ";
          var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += "is a required property";
              } else {
                out += "should have required property \\'" + $missingProperty + "\\'";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } else { ";
        }
      } else {
        if ($loopRequired) {
          if (!$isData) {
            out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
          }
          var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          }
          if ($isData) {
            out += " if (" + $vSchema + " && !Array.isArray(" + $vSchema + ")) {  var err =   ";
            if (it.createErrors !== false) {
              out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
              if (it.opts.messages !== false) {
                out += " , message: '";
                if (it.opts._errorDataPathProperty) {
                  out += "is a required property";
                } else {
                  out += "should have required property \\'" + $missingProperty + "\\'";
                }
                out += "' ";
              }
              if (it.opts.verbose) {
                out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" + $vSchema + " !== undefined) { ";
          }
          out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { if (" + $data + "[" + $vSchema + "[" + $i + "]] === undefined ";
          if ($ownProperties) {
            out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
          }
          out += ") {  var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += "is a required property";
              } else {
                out += "should have required property \\'" + $missingProperty + "\\'";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ";
          if ($isData) {
            out += "  }  ";
          }
        } else {
          var arr3 = $required;
          if (arr3) {
            var $propertyKey, i3 = -1, l3 = arr3.length - 1;
            while (i3 < l3) {
              $propertyKey = arr3[i3 += 1];
              var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              out += " if ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") {  var err =   ";
              if (it.createErrors !== false) {
                out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
            }
          }
        }
      }
      it.errorPath = $currentErrorPath;
    } else if ($breakOnError) {
      out += " if (true) {";
    }
    return out;
  };
  return required$1;
}
var uniqueItems;
var hasRequiredUniqueItems;
function requireUniqueItems() {
  if (hasRequiredUniqueItems) return uniqueItems;
  hasRequiredUniqueItems = 1;
  uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    if (($schema2 || $isData) && it.opts.uniqueItems !== false) {
      if ($isData) {
        out += " var " + $valid + "; if (" + $schemaValue + " === false || " + $schemaValue + " === undefined) " + $valid + " = true; else if (typeof " + $schemaValue + " != 'boolean') " + $valid + " = false; else { ";
      }
      out += " var i = " + $data + ".length , " + $valid + " = true , j; if (i > 1) { ";
      var $itemType = it.schema.items && it.schema.items.type, $typeIsArray = Array.isArray($itemType);
      if (!$itemType || $itemType == "object" || $itemType == "array" || $typeIsArray && ($itemType.indexOf("object") >= 0 || $itemType.indexOf("array") >= 0)) {
        out += " outer: for (;i--;) { for (j = i; j--;) { if (equal(" + $data + "[i], " + $data + "[j])) { " + $valid + " = false; break outer; } } } ";
      } else {
        out += " var itemIndices = {}, item; for (;i--;) { var item = " + $data + "[i]; ";
        var $method = "checkDataType" + ($typeIsArray ? "s" : "");
        out += " if (" + it.util[$method]($itemType, "item", it.opts.strictNumbers, true) + ") continue; ";
        if ($typeIsArray) {
          out += ` if (typeof item == 'string') item = '"' + item; `;
        }
        out += " if (typeof itemIndices[item] == 'number') { " + $valid + " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ";
      }
      out += " } ";
      if ($isData) {
        out += "  }  ";
      }
      out += " if (!" + $valid + ") {   ";
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: 'uniqueItems' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { i: i, j: j } ";
        if (it.opts.messages !== false) {
          out += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' ";
        }
        if (it.opts.verbose) {
          out += " , schema:  ";
          if ($isData) {
            out += "validate.schema" + $schemaPath;
          } else {
            out += "" + $schema2;
          }
          out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      out += " } ";
      if ($breakOnError) {
        out += " else { ";
      }
    } else {
      if ($breakOnError) {
        out += " if (true) { ";
      }
    }
    return out;
  };
  return uniqueItems;
}
var dotjs;
var hasRequiredDotjs;
function requireDotjs() {
  if (hasRequiredDotjs) return dotjs;
  hasRequiredDotjs = 1;
  dotjs = {
    "$ref": requireRef(),
    allOf: requireAllOf(),
    anyOf: requireAnyOf(),
    "$comment": requireComment(),
    const: require_const(),
    contains: requireContains(),
    dependencies: requireDependencies(),
    "enum": require_enum(),
    format: requireFormat(),
    "if": require_if(),
    items: requireItems(),
    maximum: require_limit(),
    minimum: require_limit(),
    maxItems: require_limitItems(),
    minItems: require_limitItems(),
    maxLength: require_limitLength(),
    minLength: require_limitLength(),
    maxProperties: require_limitProperties(),
    minProperties: require_limitProperties(),
    multipleOf: requireMultipleOf(),
    not: requireNot(),
    oneOf: requireOneOf(),
    pattern: requirePattern(),
    properties: requireProperties(),
    propertyNames: requirePropertyNames(),
    required: requireRequired(),
    uniqueItems: requireUniqueItems(),
    validate: requireValidate()
  };
  return dotjs;
}
var rules$3;
var hasRequiredRules$2;
function requireRules$2() {
  if (hasRequiredRules$2) return rules$3;
  hasRequiredRules$2 = 1;
  var ruleModules = requireDotjs(), toHash = requireUtil().toHash;
  rules$3 = function rules2() {
    var RULES = [
      {
        type: "number",
        rules: [
          { "maximum": ["exclusiveMaximum"] },
          { "minimum": ["exclusiveMinimum"] },
          "multipleOf",
          "format"
        ]
      },
      {
        type: "string",
        rules: ["maxLength", "minLength", "pattern", "format"]
      },
      {
        type: "array",
        rules: ["maxItems", "minItems", "items", "contains", "uniqueItems"]
      },
      {
        type: "object",
        rules: [
          "maxProperties",
          "minProperties",
          "required",
          "dependencies",
          "propertyNames",
          { "properties": ["additionalProperties", "patternProperties"] }
        ]
      },
      { rules: ["$ref", "const", "enum", "not", "anyOf", "oneOf", "allOf", "if"] }
    ];
    var ALL = ["type", "$comment"];
    var KEYWORDS = [
      "$schema",
      "$id",
      "id",
      "$data",
      "$async",
      "title",
      "description",
      "default",
      "definitions",
      "examples",
      "readOnly",
      "writeOnly",
      "contentMediaType",
      "contentEncoding",
      "additionalItems",
      "then",
      "else"
    ];
    var TYPES = ["number", "integer", "string", "array", "object", "boolean", "null"];
    RULES.all = toHash(ALL);
    RULES.types = toHash(TYPES);
    RULES.forEach(function(group) {
      group.rules = group.rules.map(function(keyword2) {
        var implKeywords;
        if (typeof keyword2 == "object") {
          var key = Object.keys(keyword2)[0];
          implKeywords = keyword2[key];
          keyword2 = key;
          implKeywords.forEach(function(k) {
            ALL.push(k);
            RULES.all[k] = true;
          });
        }
        ALL.push(keyword2);
        var rule = RULES.all[keyword2] = {
          keyword: keyword2,
          code: ruleModules[keyword2],
          implements: implKeywords
        };
        return rule;
      });
      RULES.all.$comment = {
        keyword: "$comment",
        code: ruleModules.$comment
      };
      if (group.type) RULES.types[group.type] = group;
    });
    RULES.keywords = toHash(ALL.concat(KEYWORDS));
    RULES.custom = {};
    return RULES;
  };
  return rules$3;
}
var data;
var hasRequiredData;
function requireData() {
  if (hasRequiredData) return data;
  hasRequiredData = 1;
  var KEYWORDS = [
    "multipleOf",
    "maximum",
    "exclusiveMaximum",
    "minimum",
    "exclusiveMinimum",
    "maxLength",
    "minLength",
    "pattern",
    "additionalItems",
    "maxItems",
    "minItems",
    "uniqueItems",
    "maxProperties",
    "minProperties",
    "required",
    "additionalProperties",
    "enum",
    "format",
    "const"
  ];
  data = function(metaSchema, keywordsJsonPointers) {
    for (var i2 = 0; i2 < keywordsJsonPointers.length; i2++) {
      metaSchema = JSON.parse(JSON.stringify(metaSchema));
      var segments = keywordsJsonPointers[i2].split("/");
      var keywords2 = metaSchema;
      var j;
      for (j = 1; j < segments.length; j++)
        keywords2 = keywords2[segments[j]];
      for (j = 0; j < KEYWORDS.length; j++) {
        var key = KEYWORDS[j];
        var schema = keywords2[key];
        if (schema) {
          keywords2[key] = {
            anyOf: [
              schema,
              { $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
            ]
          };
        }
      }
    }
    return metaSchema;
  };
  return data;
}
var async;
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async;
  hasRequiredAsync = 1;
  var MissingRefError = requireError_classes().MissingRef;
  async = compileAsync;
  function compileAsync(schema, meta, callback) {
    var self2 = this;
    if (typeof this._opts.loadSchema != "function")
      throw new Error("options.loadSchema should be a function");
    if (typeof meta == "function") {
      callback = meta;
      meta = void 0;
    }
    var p2 = loadMetaSchemaOf(schema).then(function() {
      var schemaObj = self2._addSchema(schema, void 0, meta);
      return schemaObj.validate || _compileAsync(schemaObj);
    });
    if (callback) {
      p2.then(
        function(v2) {
          callback(null, v2);
        },
        callback
      );
    }
    return p2;
    function loadMetaSchemaOf(sch) {
      var $schema2 = sch.$schema;
      return $schema2 && !self2.getSchema($schema2) ? compileAsync.call(self2, { $ref: $schema2 }, true) : Promise.resolve();
    }
    function _compileAsync(schemaObj) {
      try {
        return self2._compile(schemaObj);
      } catch (e2) {
        if (e2 instanceof MissingRefError) return loadMissingSchema(e2);
        throw e2;
      }
      function loadMissingSchema(e2) {
        var ref2 = e2.missingSchema;
        if (added(ref2)) throw new Error("Schema " + ref2 + " is loaded but " + e2.missingRef + " cannot be resolved");
        var schemaPromise = self2._loadingSchemas[ref2];
        if (!schemaPromise) {
          schemaPromise = self2._loadingSchemas[ref2] = self2._opts.loadSchema(ref2);
          schemaPromise.then(removePromise, removePromise);
        }
        return schemaPromise.then(function(sch) {
          if (!added(ref2)) {
            return loadMetaSchemaOf(sch).then(function() {
              if (!added(ref2)) self2.addSchema(sch, ref2, void 0, meta);
            });
          }
        }).then(function() {
          return _compileAsync(schemaObj);
        });
        function removePromise() {
          delete self2._loadingSchemas[ref2];
        }
        function added(ref3) {
          return self2._refs[ref3] || self2._schemas[ref3];
        }
      }
    }
  }
  return async;
}
var custom;
var hasRequiredCustom;
function requireCustom() {
  if (hasRequiredCustom) return custom;
  hasRequiredCustom = 1;
  custom = function generate_custom(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema2 = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $isData = it.opts.$data && $schema2 && $schema2.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema2.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema2;
    }
    var $rule = this, $definition = "definition" + $lvl, $rDef = $rule.definition, $closingBraces = "";
    var $compile, $inline, $macro, $ruleValidate, $validateCode;
    if ($isData && $rDef.$data) {
      $validateCode = "keywordValidate" + $lvl;
      var $validateSchema = $rDef.validateSchema;
      out += " var " + $definition + " = RULES.custom['" + $keyword + "'].definition; var " + $validateCode + " = " + $definition + ".validate;";
    } else {
      $ruleValidate = it.useCustomRule($rule, $schema2, it.schema, it);
      if (!$ruleValidate) return;
      $schemaValue = "validate.schema" + $schemaPath;
      $validateCode = $ruleValidate.code;
      $compile = $rDef.compile;
      $inline = $rDef.inline;
      $macro = $rDef.macro;
    }
    var $ruleErrs = $validateCode + ".errors", $i = "i" + $lvl, $ruleErr = "ruleErr" + $lvl, $asyncKeyword = $rDef.async;
    if ($asyncKeyword && !it.async) throw new Error("async keyword in sync schema");
    if (!($inline || $macro)) {
      out += "" + $ruleErrs + " = null;";
    }
    out += "var " + $errs + " = errors;var " + $valid + ";";
    if ($isData && $rDef.$data) {
      $closingBraces += "}";
      out += " if (" + $schemaValue + " === undefined) { " + $valid + " = true; } else { ";
      if ($validateSchema) {
        $closingBraces += "}";
        out += " " + $valid + " = " + $definition + ".validateSchema(" + $schemaValue + "); if (" + $valid + ") { ";
      }
    }
    if ($inline) {
      if ($rDef.statements) {
        out += " " + $ruleValidate.validate + " ";
      } else {
        out += " " + $valid + " = " + $ruleValidate.validate + "; ";
      }
    } else if ($macro) {
      var $it = it.util.copy(it);
      var $closingBraces = "";
      $it.level++;
      var $nextValid = "valid" + $it.level;
      $it.schema = $ruleValidate.validate;
      $it.schemaPath = "";
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " " + $code;
    } else {
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      out += "  " + $validateCode + ".call( ";
      if (it.opts.passContext) {
        out += "this";
      } else {
        out += "self";
      }
      if ($compile || $rDef.schema === false) {
        out += " , " + $data + " ";
      } else {
        out += " , " + $schemaValue + " , " + $data + " , validate.schema" + it.schemaPath + " ";
      }
      out += " , (dataPath || '')";
      if (it.errorPath != '""') {
        out += " + " + it.errorPath;
      }
      var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
      out += " , " + $parentData + " , " + $parentDataProperty + " , rootData )  ";
      var def_callRuleValidate = out;
      out = $$outStack.pop();
      if ($rDef.errors === false) {
        out += " " + $valid + " = ";
        if ($asyncKeyword) {
          out += "await ";
        }
        out += "" + def_callRuleValidate + "; ";
      } else {
        if ($asyncKeyword) {
          $ruleErrs = "customErrors" + $lvl;
          out += " var " + $ruleErrs + " = null; try { " + $valid + " = await " + def_callRuleValidate + "; } catch (e) { " + $valid + " = false; if (e instanceof ValidationError) " + $ruleErrs + " = e.errors; else throw e; } ";
        } else {
          out += " " + $ruleErrs + " = null; " + $valid + " = " + def_callRuleValidate + "; ";
        }
      }
    }
    if ($rDef.modifying) {
      out += " if (" + $parentData + ") " + $data + " = " + $parentData + "[" + $parentDataProperty + "];";
    }
    out += "" + $closingBraces;
    if ($rDef.valid) {
      if ($breakOnError) {
        out += " if (true) { ";
      }
    } else {
      out += " if ( ";
      if ($rDef.valid === void 0) {
        out += " !";
        if ($macro) {
          out += "" + $nextValid;
        } else {
          out += "" + $valid;
        }
      } else {
        out += " " + !$rDef.valid + " ";
      }
      out += ") { ";
      $errorKeyword = $rule.keyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
        if (it.opts.messages !== false) {
          out += ` , message: 'should pass "` + $rule.keyword + `" keyword validation' `;
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      var def_customError = out;
      out = $$outStack.pop();
      if ($inline) {
        if ($rDef.errors) {
          if ($rDef.errors != "full") {
            out += "  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
            if (it.opts.verbose) {
              out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
            }
            out += " } ";
          }
        } else {
          if ($rDef.errors === false) {
            out += " " + def_customError + " ";
          } else {
            out += " if (" + $errs + " == errors) { " + def_customError + " } else {  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
            if (it.opts.verbose) {
              out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
            }
            out += " } } ";
          }
        }
      } else if ($macro) {
        out += "   var err =   ";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
          if (it.opts.messages !== false) {
            out += ` , message: 'should pass "` + $rule.keyword + `" keyword validation' `;
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError(vErrors); ";
          } else {
            out += " validate.errors = vErrors; return false; ";
          }
        }
      } else {
        if ($rDef.errors === false) {
          out += " " + def_customError + " ";
        } else {
          out += " if (Array.isArray(" + $ruleErrs + ")) { if (vErrors === null) vErrors = " + $ruleErrs + "; else vErrors = vErrors.concat(" + $ruleErrs + "); errors = vErrors.length;  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + ";  " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';
          if (it.opts.verbose) {
            out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
          }
          out += " } } else { " + def_customError + " } ";
        }
      }
      out += " } ";
      if ($breakOnError) {
        out += " else { ";
      }
    }
    return out;
  };
  return custom;
}
var $schema$2 = "http://json-schema.org/draft-07/schema#";
var $id$1 = "http://json-schema.org/draft-07/schema#";
var title = "Core schema meta-schema";
var definitions$1 = {
  schemaArray: {
    type: "array",
    minItems: 1,
    items: {
      $ref: "#"
    }
  },
  nonNegativeInteger: {
    type: "integer",
    minimum: 0
  },
  nonNegativeIntegerDefault0: {
    allOf: [
      {
        $ref: "#/definitions/nonNegativeInteger"
      },
      {
        "default": 0
      }
    ]
  },
  simpleTypes: {
    "enum": [
      "array",
      "boolean",
      "integer",
      "null",
      "number",
      "object",
      "string"
    ]
  },
  stringArray: {
    type: "array",
    items: {
      type: "string"
    },
    uniqueItems: true,
    "default": []
  }
};
var type$2 = [
  "object",
  "boolean"
];
var properties$2 = {
  $id: {
    type: "string",
    format: "uri-reference"
  },
  $schema: {
    type: "string",
    format: "uri"
  },
  $ref: {
    type: "string",
    format: "uri-reference"
  },
  $comment: {
    type: "string"
  },
  title: {
    type: "string"
  },
  description: {
    type: "string"
  },
  "default": true,
  readOnly: {
    type: "boolean",
    "default": false
  },
  examples: {
    type: "array",
    items: true
  },
  multipleOf: {
    type: "number",
    exclusiveMinimum: 0
  },
  maximum: {
    type: "number"
  },
  exclusiveMaximum: {
    type: "number"
  },
  minimum: {
    type: "number"
  },
  exclusiveMinimum: {
    type: "number"
  },
  maxLength: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minLength: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  pattern: {
    type: "string",
    format: "regex"
  },
  additionalItems: {
    $ref: "#"
  },
  items: {
    anyOf: [
      {
        $ref: "#"
      },
      {
        $ref: "#/definitions/schemaArray"
      }
    ],
    "default": true
  },
  maxItems: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minItems: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  uniqueItems: {
    type: "boolean",
    "default": false
  },
  contains: {
    $ref: "#"
  },
  maxProperties: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minProperties: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  required: {
    $ref: "#/definitions/stringArray"
  },
  additionalProperties: {
    $ref: "#"
  },
  definitions: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  properties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  patternProperties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    propertyNames: {
      format: "regex"
    },
    "default": {}
  },
  dependencies: {
    type: "object",
    additionalProperties: {
      anyOf: [
        {
          $ref: "#"
        },
        {
          $ref: "#/definitions/stringArray"
        }
      ]
    }
  },
  propertyNames: {
    $ref: "#"
  },
  "const": true,
  "enum": {
    type: "array",
    items: true,
    minItems: 1,
    uniqueItems: true
  },
  type: {
    anyOf: [
      {
        $ref: "#/definitions/simpleTypes"
      },
      {
        type: "array",
        items: {
          $ref: "#/definitions/simpleTypes"
        },
        minItems: 1,
        uniqueItems: true
      }
    ]
  },
  format: {
    type: "string"
  },
  contentMediaType: {
    type: "string"
  },
  contentEncoding: {
    type: "string"
  },
  "if": {
    $ref: "#"
  },
  then: {
    $ref: "#"
  },
  "else": {
    $ref: "#"
  },
  allOf: {
    $ref: "#/definitions/schemaArray"
  },
  anyOf: {
    $ref: "#/definitions/schemaArray"
  },
  oneOf: {
    $ref: "#/definitions/schemaArray"
  },
  not: {
    $ref: "#"
  }
};
var require$$13 = {
  $schema: $schema$2,
  $id: $id$1,
  title,
  definitions: definitions$1,
  type: type$2,
  properties: properties$2,
  "default": true
};
var definition_schema;
var hasRequiredDefinition_schema;
function requireDefinition_schema() {
  if (hasRequiredDefinition_schema) return definition_schema;
  hasRequiredDefinition_schema = 1;
  var metaSchema = require$$13;
  definition_schema = {
    $id: "https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",
    definitions: {
      simpleTypes: metaSchema.definitions.simpleTypes
    },
    type: "object",
    dependencies: {
      schema: ["validate"],
      $data: ["validate"],
      statements: ["inline"],
      valid: { not: { required: ["macro"] } }
    },
    properties: {
      type: metaSchema.properties.type,
      schema: { type: "boolean" },
      statements: { type: "boolean" },
      dependencies: {
        type: "array",
        items: { type: "string" }
      },
      metaSchema: { type: "object" },
      modifying: { type: "boolean" },
      valid: { type: "boolean" },
      $data: { type: "boolean" },
      async: { type: "boolean" },
      errors: {
        anyOf: [
          { type: "boolean" },
          { const: "full" }
        ]
      }
    }
  };
  return definition_schema;
}
var keyword$1;
var hasRequiredKeyword$1;
function requireKeyword$1() {
  if (hasRequiredKeyword$1) return keyword$1;
  hasRequiredKeyword$1 = 1;
  var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
  var customRuleCode = requireCustom();
  var definitionSchema = requireDefinition_schema();
  keyword$1 = {
    add: addKeyword,
    get: getKeyword,
    remove: removeKeyword,
    validate: validateKeyword
  };
  function addKeyword(keyword2, definition) {
    var RULES = this.RULES;
    if (RULES.keywords[keyword2])
      throw new Error("Keyword " + keyword2 + " is already defined");
    if (!IDENTIFIER.test(keyword2))
      throw new Error("Keyword " + keyword2 + " is not a valid identifier");
    if (definition) {
      this.validateKeyword(definition, true);
      var dataType = definition.type;
      if (Array.isArray(dataType)) {
        for (var i2 = 0; i2 < dataType.length; i2++)
          _addRule(keyword2, dataType[i2], definition);
      } else {
        _addRule(keyword2, dataType, definition);
      }
      var metaSchema = definition.metaSchema;
      if (metaSchema) {
        if (definition.$data && this._opts.$data) {
          metaSchema = {
            anyOf: [
              metaSchema,
              { "$ref": "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
            ]
          };
        }
        definition.validateSchema = this.compile(metaSchema, true);
      }
    }
    RULES.keywords[keyword2] = RULES.all[keyword2] = true;
    function _addRule(keyword3, dataType2, definition2) {
      var ruleGroup;
      for (var i3 = 0; i3 < RULES.length; i3++) {
        var rg = RULES[i3];
        if (rg.type == dataType2) {
          ruleGroup = rg;
          break;
        }
      }
      if (!ruleGroup) {
        ruleGroup = { type: dataType2, rules: [] };
        RULES.push(ruleGroup);
      }
      var rule = {
        keyword: keyword3,
        definition: definition2,
        custom: true,
        code: customRuleCode,
        implements: definition2.implements
      };
      ruleGroup.rules.push(rule);
      RULES.custom[keyword3] = rule;
    }
    return this;
  }
  function getKeyword(keyword2) {
    var rule = this.RULES.custom[keyword2];
    return rule ? rule.definition : this.RULES.keywords[keyword2] || false;
  }
  function removeKeyword(keyword2) {
    var RULES = this.RULES;
    delete RULES.keywords[keyword2];
    delete RULES.all[keyword2];
    delete RULES.custom[keyword2];
    for (var i2 = 0; i2 < RULES.length; i2++) {
      var rules2 = RULES[i2].rules;
      for (var j = 0; j < rules2.length; j++) {
        if (rules2[j].keyword == keyword2) {
          rules2.splice(j, 1);
          break;
        }
      }
    }
    return this;
  }
  function validateKeyword(definition, throwError) {
    validateKeyword.errors = null;
    var v2 = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);
    if (v2(definition)) return true;
    validateKeyword.errors = v2.errors;
    if (throwError)
      throw new Error("custom keyword definition is invalid: " + this.errorsText(v2.errors));
    else
      return false;
  }
  return keyword$1;
}
var $schema$1 = "http://json-schema.org/draft-07/schema#";
var $id = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
var description$1 = "Meta-schema for $data reference (JSON Schema extension proposal)";
var type$1 = "object";
var required = [
  "$data"
];
var properties$1 = {
  $data: {
    type: "string",
    anyOf: [
      {
        format: "relative-json-pointer"
      },
      {
        format: "json-pointer"
      }
    ]
  }
};
var additionalProperties = false;
var require$$12 = {
  $schema: $schema$1,
  $id,
  description: description$1,
  type: type$1,
  required,
  properties: properties$1,
  additionalProperties
};
var ajv$1;
var hasRequiredAjv$1;
function requireAjv$1() {
  if (hasRequiredAjv$1) return ajv$1;
  hasRequiredAjv$1 = 1;
  var compileSchema = requireCompile(), resolve2 = requireResolve(), Cache = requireCache(), SchemaObject = requireSchema_obj(), stableStringify = requireFastJsonStableStringify(), formats = requireFormats(), rules2 = requireRules$2(), $dataMetaSchema = requireData(), util2 = requireUtil();
  ajv$1 = Ajv;
  Ajv.prototype.validate = validate2;
  Ajv.prototype.compile = compile;
  Ajv.prototype.addSchema = addSchema;
  Ajv.prototype.addMetaSchema = addMetaSchema;
  Ajv.prototype.validateSchema = validateSchema;
  Ajv.prototype.getSchema = getSchema;
  Ajv.prototype.removeSchema = removeSchema;
  Ajv.prototype.addFormat = addFormat;
  Ajv.prototype.errorsText = errorsText;
  Ajv.prototype._addSchema = _addSchema;
  Ajv.prototype._compile = _compile;
  Ajv.prototype.compileAsync = requireAsync();
  var customKeyword = requireKeyword$1();
  Ajv.prototype.addKeyword = customKeyword.add;
  Ajv.prototype.getKeyword = customKeyword.get;
  Ajv.prototype.removeKeyword = customKeyword.remove;
  Ajv.prototype.validateKeyword = customKeyword.validate;
  var errorClasses = requireError_classes();
  Ajv.ValidationError = errorClasses.Validation;
  Ajv.MissingRefError = errorClasses.MissingRef;
  Ajv.$dataMetaSchema = $dataMetaSchema;
  var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
  var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes", "strictDefaults"];
  var META_SUPPORT_DATA = ["/properties"];
  function Ajv(opts) {
    if (!(this instanceof Ajv)) return new Ajv(opts);
    opts = this._opts = util2.copy(opts) || {};
    setLogger(this);
    this._schemas = {};
    this._refs = {};
    this._fragments = {};
    this._formats = formats(opts.format);
    this._cache = opts.cache || new Cache();
    this._loadingSchemas = {};
    this._compilations = [];
    this.RULES = rules2();
    this._getId = chooseGetId(opts);
    opts.loopRequired = opts.loopRequired || Infinity;
    if (opts.errorDataPath == "property") opts._errorDataPathProperty = true;
    if (opts.serialize === void 0) opts.serialize = stableStringify;
    this._metaOpts = getMetaSchemaOptions(this);
    if (opts.formats) addInitialFormats(this);
    if (opts.keywords) addInitialKeywords(this);
    addDefaultMetaSchema(this);
    if (typeof opts.meta == "object") this.addMetaSchema(opts.meta);
    if (opts.nullable) this.addKeyword("nullable", { metaSchema: { type: "boolean" } });
    addInitialSchemas(this);
  }
  function validate2(schemaKeyRef, data2) {
    var v2;
    if (typeof schemaKeyRef == "string") {
      v2 = this.getSchema(schemaKeyRef);
      if (!v2) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
    } else {
      var schemaObj = this._addSchema(schemaKeyRef);
      v2 = schemaObj.validate || this._compile(schemaObj);
    }
    var valid = v2(data2);
    if (v2.$async !== true) this.errors = v2.errors;
    return valid;
  }
  function compile(schema, _meta) {
    var schemaObj = this._addSchema(schema, void 0, _meta);
    return schemaObj.validate || this._compile(schemaObj);
  }
  function addSchema(schema, key, _skipValidation, _meta) {
    if (Array.isArray(schema)) {
      for (var i2 = 0; i2 < schema.length; i2++) this.addSchema(schema[i2], void 0, _skipValidation, _meta);
      return this;
    }
    var id2 = this._getId(schema);
    if (id2 !== void 0 && typeof id2 != "string")
      throw new Error("schema id must be string");
    key = resolve2.normalizeId(key || id2);
    checkUnique(this, key);
    this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
    return this;
  }
  function addMetaSchema(schema, key, skipValidation) {
    this.addSchema(schema, key, skipValidation, true);
    return this;
  }
  function validateSchema(schema, throwOrLogError) {
    var $schema2 = schema.$schema;
    if ($schema2 !== void 0 && typeof $schema2 != "string")
      throw new Error("$schema must be a string");
    $schema2 = $schema2 || this._opts.defaultMeta || defaultMeta(this);
    if (!$schema2) {
      this.logger.warn("meta-schema not available");
      this.errors = null;
      return true;
    }
    var valid = this.validate($schema2, schema);
    if (!valid && throwOrLogError) {
      var message = "schema is invalid: " + this.errorsText();
      if (this._opts.validateSchema == "log") this.logger.error(message);
      else throw new Error(message);
    }
    return valid;
  }
  function defaultMeta(self2) {
    var meta = self2._opts.meta;
    self2._opts.defaultMeta = typeof meta == "object" ? self2._getId(meta) || meta : self2.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0;
    return self2._opts.defaultMeta;
  }
  function getSchema(keyRef) {
    var schemaObj = _getSchemaObj(this, keyRef);
    switch (typeof schemaObj) {
      case "object":
        return schemaObj.validate || this._compile(schemaObj);
      case "string":
        return this.getSchema(schemaObj);
      case "undefined":
        return _getSchemaFragment(this, keyRef);
    }
  }
  function _getSchemaFragment(self2, ref2) {
    var res = resolve2.schema.call(self2, { schema: {} }, ref2);
    if (res) {
      var schema = res.schema, root = res.root, baseId = res.baseId;
      var v2 = compileSchema.call(self2, schema, root, void 0, baseId);
      self2._fragments[ref2] = new SchemaObject({
        ref: ref2,
        fragment: true,
        schema,
        root,
        baseId,
        validate: v2
      });
      return v2;
    }
  }
  function _getSchemaObj(self2, keyRef) {
    keyRef = resolve2.normalizeId(keyRef);
    return self2._schemas[keyRef] || self2._refs[keyRef] || self2._fragments[keyRef];
  }
  function removeSchema(schemaKeyRef) {
    if (schemaKeyRef instanceof RegExp) {
      _removeAllSchemas(this, this._schemas, schemaKeyRef);
      _removeAllSchemas(this, this._refs, schemaKeyRef);
      return this;
    }
    switch (typeof schemaKeyRef) {
      case "undefined":
        _removeAllSchemas(this, this._schemas);
        _removeAllSchemas(this, this._refs);
        this._cache.clear();
        return this;
      case "string":
        var schemaObj = _getSchemaObj(this, schemaKeyRef);
        if (schemaObj) this._cache.del(schemaObj.cacheKey);
        delete this._schemas[schemaKeyRef];
        delete this._refs[schemaKeyRef];
        return this;
      case "object":
        var serialize = this._opts.serialize;
        var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
        this._cache.del(cacheKey);
        var id2 = this._getId(schemaKeyRef);
        if (id2) {
          id2 = resolve2.normalizeId(id2);
          delete this._schemas[id2];
          delete this._refs[id2];
        }
    }
    return this;
  }
  function _removeAllSchemas(self2, schemas, regex) {
    for (var keyRef in schemas) {
      var schemaObj = schemas[keyRef];
      if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
        self2._cache.del(schemaObj.cacheKey);
        delete schemas[keyRef];
      }
    }
  }
  function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
    if (typeof schema != "object" && typeof schema != "boolean")
      throw new Error("schema should be object or boolean");
    var serialize = this._opts.serialize;
    var cacheKey = serialize ? serialize(schema) : schema;
    var cached = this._cache.get(cacheKey);
    if (cached) return cached;
    shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
    var id2 = resolve2.normalizeId(this._getId(schema));
    if (id2 && shouldAddSchema) checkUnique(this, id2);
    var willValidate = this._opts.validateSchema !== false && !skipValidation;
    var recursiveMeta;
    if (willValidate && !(recursiveMeta = id2 && id2 == resolve2.normalizeId(schema.$schema)))
      this.validateSchema(schema, true);
    var localRefs = resolve2.ids.call(this, schema);
    var schemaObj = new SchemaObject({
      id: id2,
      schema,
      localRefs,
      cacheKey,
      meta
    });
    if (id2[0] != "#" && shouldAddSchema) this._refs[id2] = schemaObj;
    this._cache.put(cacheKey, schemaObj);
    if (willValidate && recursiveMeta) this.validateSchema(schema, true);
    return schemaObj;
  }
  function _compile(schemaObj, root) {
    if (schemaObj.compiling) {
      schemaObj.validate = callValidate;
      callValidate.schema = schemaObj.schema;
      callValidate.errors = null;
      callValidate.root = root ? root : callValidate;
      if (schemaObj.schema.$async === true)
        callValidate.$async = true;
      return callValidate;
    }
    schemaObj.compiling = true;
    var currentOpts;
    if (schemaObj.meta) {
      currentOpts = this._opts;
      this._opts = this._metaOpts;
    }
    var v2;
    try {
      v2 = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);
    } catch (e2) {
      delete schemaObj.validate;
      throw e2;
    } finally {
      schemaObj.compiling = false;
      if (schemaObj.meta) this._opts = currentOpts;
    }
    schemaObj.validate = v2;
    schemaObj.refs = v2.refs;
    schemaObj.refVal = v2.refVal;
    schemaObj.root = v2.root;
    return v2;
    function callValidate() {
      var _validate = schemaObj.validate;
      var result = _validate.apply(this, arguments);
      callValidate.errors = _validate.errors;
      return result;
    }
  }
  function chooseGetId(opts) {
    switch (opts.schemaId) {
      case "auto":
        return _get$IdOrId;
      case "id":
        return _getId;
      default:
        return _get$Id;
    }
  }
  function _getId(schema) {
    if (schema.$id) this.logger.warn("schema $id ignored", schema.$id);
    return schema.id;
  }
  function _get$Id(schema) {
    if (schema.id) this.logger.warn("schema id ignored", schema.id);
    return schema.$id;
  }
  function _get$IdOrId(schema) {
    if (schema.$id && schema.id && schema.$id != schema.id)
      throw new Error("schema $id is different from id");
    return schema.$id || schema.id;
  }
  function errorsText(errors, options) {
    errors = errors || this.errors;
    if (!errors) return "No errors";
    options = options || {};
    var separator = options.separator === void 0 ? ", " : options.separator;
    var dataVar = options.dataVar === void 0 ? "data" : options.dataVar;
    var text = "";
    for (var i2 = 0; i2 < errors.length; i2++) {
      var e2 = errors[i2];
      if (e2) text += dataVar + e2.dataPath + " " + e2.message + separator;
    }
    return text.slice(0, -separator.length);
  }
  function addFormat(name, format2) {
    if (typeof format2 == "string") format2 = new RegExp(format2);
    this._formats[name] = format2;
    return this;
  }
  function addDefaultMetaSchema(self2) {
    var $dataSchema;
    if (self2._opts.$data) {
      $dataSchema = require$$12;
      self2.addMetaSchema($dataSchema, $dataSchema.$id, true);
    }
    if (self2._opts.meta === false) return;
    var metaSchema = require$$13;
    if (self2._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
    self2.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
    self2._refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
  }
  function addInitialSchemas(self2) {
    var optsSchemas = self2._opts.schemas;
    if (!optsSchemas) return;
    if (Array.isArray(optsSchemas)) self2.addSchema(optsSchemas);
    else for (var key in optsSchemas) self2.addSchema(optsSchemas[key], key);
  }
  function addInitialFormats(self2) {
    for (var name in self2._opts.formats) {
      var format2 = self2._opts.formats[name];
      self2.addFormat(name, format2);
    }
  }
  function addInitialKeywords(self2) {
    for (var name in self2._opts.keywords) {
      var keyword2 = self2._opts.keywords[name];
      self2.addKeyword(name, keyword2);
    }
  }
  function checkUnique(self2, id2) {
    if (self2._schemas[id2] || self2._refs[id2])
      throw new Error('schema with key or id "' + id2 + '" already exists');
  }
  function getMetaSchemaOptions(self2) {
    var metaOpts = util2.copy(self2._opts);
    for (var i2 = 0; i2 < META_IGNORE_OPTIONS.length; i2++)
      delete metaOpts[META_IGNORE_OPTIONS[i2]];
    return metaOpts;
  }
  function setLogger(self2) {
    var logger = self2._opts.logger;
    if (logger === false) {
      self2.logger = { log: noop2, warn: noop2, error: noop2 };
    } else {
      if (logger === void 0) logger = console;
      if (!(typeof logger == "object" && logger.log && logger.warn && logger.error))
        throw new Error("logger must implement log, warn and error methods");
      self2.logger = logger;
    }
  }
  function noop2() {
  }
  return ajv$1;
}
var builtin = {
  AggregateError: false,
  "Array": false,
  "ArrayBuffer": false,
  Atomics: false,
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false,
  "Boolean": false,
  constructor: false,
  "DataView": false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  FinalizationRegistry: false,
  "Float32Array": false,
  "Float64Array": false,
  "Function": false,
  globalThis: false,
  hasOwnProperty: false,
  "Infinity": false,
  "Int16Array": false,
  "Int32Array": false,
  "Int8Array": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Map": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  "Promise": false,
  propertyIsEnumerable: false,
  "Proxy": false,
  "RangeError": false,
  "ReferenceError": false,
  "Reflect": false,
  "RegExp": false,
  "Set": false,
  SharedArrayBuffer: false,
  "String": false,
  "Symbol": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "Uint16Array": false,
  "Uint32Array": false,
  "Uint8Array": false,
  "Uint8ClampedArray": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false,
  "WeakMap": false,
  WeakRef: false,
  "WeakSet": false
};
var es5 = {
  "Array": false,
  "Boolean": false,
  constructor: false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  "Function": false,
  hasOwnProperty: false,
  "Infinity": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  propertyIsEnumerable: false,
  "RangeError": false,
  "ReferenceError": false,
  "RegExp": false,
  "String": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false
};
var es2015 = {
  "Array": false,
  "ArrayBuffer": false,
  "Boolean": false,
  constructor: false,
  "DataView": false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  "Float32Array": false,
  "Float64Array": false,
  "Function": false,
  hasOwnProperty: false,
  "Infinity": false,
  "Int16Array": false,
  "Int32Array": false,
  "Int8Array": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Map": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  "Promise": false,
  propertyIsEnumerable: false,
  "Proxy": false,
  "RangeError": false,
  "ReferenceError": false,
  "Reflect": false,
  "RegExp": false,
  "Set": false,
  "String": false,
  "Symbol": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "Uint16Array": false,
  "Uint32Array": false,
  "Uint8Array": false,
  "Uint8ClampedArray": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false,
  "WeakMap": false,
  "WeakSet": false
};
var es2017 = {
  "Array": false,
  "ArrayBuffer": false,
  Atomics: false,
  "Boolean": false,
  constructor: false,
  "DataView": false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  "Float32Array": false,
  "Float64Array": false,
  "Function": false,
  hasOwnProperty: false,
  "Infinity": false,
  "Int16Array": false,
  "Int32Array": false,
  "Int8Array": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Map": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  "Promise": false,
  propertyIsEnumerable: false,
  "Proxy": false,
  "RangeError": false,
  "ReferenceError": false,
  "Reflect": false,
  "RegExp": false,
  "Set": false,
  SharedArrayBuffer: false,
  "String": false,
  "Symbol": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "Uint16Array": false,
  "Uint32Array": false,
  "Uint8Array": false,
  "Uint8ClampedArray": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false,
  "WeakMap": false,
  "WeakSet": false
};
var es2020 = {
  "Array": false,
  "ArrayBuffer": false,
  Atomics: false,
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false,
  "Boolean": false,
  constructor: false,
  "DataView": false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  "Float32Array": false,
  "Float64Array": false,
  "Function": false,
  globalThis: false,
  hasOwnProperty: false,
  "Infinity": false,
  "Int16Array": false,
  "Int32Array": false,
  "Int8Array": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Map": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  "Promise": false,
  propertyIsEnumerable: false,
  "Proxy": false,
  "RangeError": false,
  "ReferenceError": false,
  "Reflect": false,
  "RegExp": false,
  "Set": false,
  SharedArrayBuffer: false,
  "String": false,
  "Symbol": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "Uint16Array": false,
  "Uint32Array": false,
  "Uint8Array": false,
  "Uint8ClampedArray": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false,
  "WeakMap": false,
  "WeakSet": false
};
var es2021 = {
  AggregateError: false,
  "Array": false,
  "ArrayBuffer": false,
  Atomics: false,
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false,
  "Boolean": false,
  constructor: false,
  "DataView": false,
  "Date": false,
  "decodeURI": false,
  "decodeURIComponent": false,
  "encodeURI": false,
  "encodeURIComponent": false,
  "Error": false,
  "escape": false,
  "eval": false,
  "EvalError": false,
  FinalizationRegistry: false,
  "Float32Array": false,
  "Float64Array": false,
  "Function": false,
  globalThis: false,
  hasOwnProperty: false,
  "Infinity": false,
  "Int16Array": false,
  "Int32Array": false,
  "Int8Array": false,
  "isFinite": false,
  "isNaN": false,
  isPrototypeOf: false,
  "JSON": false,
  "Map": false,
  "Math": false,
  "NaN": false,
  "Number": false,
  "Object": false,
  "parseFloat": false,
  "parseInt": false,
  "Promise": false,
  propertyIsEnumerable: false,
  "Proxy": false,
  "RangeError": false,
  "ReferenceError": false,
  "Reflect": false,
  "RegExp": false,
  "Set": false,
  SharedArrayBuffer: false,
  "String": false,
  "Symbol": false,
  "SyntaxError": false,
  toLocaleString: false,
  toString: false,
  "TypeError": false,
  "Uint16Array": false,
  "Uint32Array": false,
  "Uint8Array": false,
  "Uint8ClampedArray": false,
  "undefined": false,
  "unescape": false,
  "URIError": false,
  valueOf: false,
  "WeakMap": false,
  WeakRef: false,
  "WeakSet": false
};
var browser$1 = {
  AbortController: false,
  AbortSignal: false,
  addEventListener: false,
  alert: false,
  AnalyserNode: false,
  Animation: false,
  AnimationEffectReadOnly: false,
  AnimationEffectTiming: false,
  AnimationEffectTimingReadOnly: false,
  AnimationEvent: false,
  AnimationPlaybackEvent: false,
  AnimationTimeline: false,
  applicationCache: false,
  ApplicationCache: false,
  ApplicationCacheErrorEvent: false,
  atob: false,
  Attr: false,
  Audio: false,
  AudioBuffer: false,
  AudioBufferSourceNode: false,
  AudioContext: false,
  AudioDestinationNode: false,
  AudioListener: false,
  AudioNode: false,
  AudioParam: false,
  AudioProcessingEvent: false,
  AudioScheduledSourceNode: false,
  AudioWorkletGlobalScope: false,
  AudioWorkletNode: false,
  AudioWorkletProcessor: false,
  BarProp: false,
  BaseAudioContext: false,
  BatteryManager: false,
  BeforeUnloadEvent: false,
  BiquadFilterNode: false,
  Blob: false,
  BlobEvent: false,
  blur: false,
  BroadcastChannel: false,
  btoa: false,
  BudgetService: false,
  ByteLengthQueuingStrategy: false,
  Cache: false,
  caches: false,
  CacheStorage: false,
  cancelAnimationFrame: false,
  cancelIdleCallback: false,
  CanvasCaptureMediaStreamTrack: false,
  CanvasGradient: false,
  CanvasPattern: false,
  CanvasRenderingContext2D: false,
  ChannelMergerNode: false,
  ChannelSplitterNode: false,
  CharacterData: false,
  clearInterval: false,
  clearTimeout: false,
  clientInformation: false,
  ClipboardEvent: false,
  ClipboardItem: false,
  close: false,
  closed: false,
  CloseEvent: false,
  Comment: false,
  CompositionEvent: false,
  CompressionStream: false,
  confirm: false,
  console: false,
  ConstantSourceNode: false,
  ConvolverNode: false,
  CountQueuingStrategy: false,
  createImageBitmap: false,
  Credential: false,
  CredentialsContainer: false,
  crypto: false,
  Crypto: false,
  CryptoKey: false,
  CSS: false,
  CSSConditionRule: false,
  CSSFontFaceRule: false,
  CSSGroupingRule: false,
  CSSImportRule: false,
  CSSKeyframeRule: false,
  CSSKeyframesRule: false,
  CSSMatrixComponent: false,
  CSSMediaRule: false,
  CSSNamespaceRule: false,
  CSSPageRule: false,
  CSSPerspective: false,
  CSSRotate: false,
  CSSRule: false,
  CSSRuleList: false,
  CSSScale: false,
  CSSSkew: false,
  CSSSkewX: false,
  CSSSkewY: false,
  CSSStyleDeclaration: false,
  CSSStyleRule: false,
  CSSStyleSheet: false,
  CSSSupportsRule: false,
  CSSTransformValue: false,
  CSSTranslate: false,
  CustomElementRegistry: false,
  customElements: false,
  CustomEvent: false,
  DataTransfer: false,
  DataTransferItem: false,
  DataTransferItemList: false,
  DecompressionStream: false,
  defaultstatus: false,
  defaultStatus: false,
  DelayNode: false,
  DeviceMotionEvent: false,
  DeviceOrientationEvent: false,
  devicePixelRatio: false,
  dispatchEvent: false,
  document: false,
  Document: false,
  DocumentFragment: false,
  DocumentType: false,
  DOMError: false,
  DOMException: false,
  DOMImplementation: false,
  DOMMatrix: false,
  DOMMatrixReadOnly: false,
  DOMParser: false,
  DOMPoint: false,
  DOMPointReadOnly: false,
  DOMQuad: false,
  DOMRect: false,
  DOMRectList: false,
  DOMRectReadOnly: false,
  DOMStringList: false,
  DOMStringMap: false,
  DOMTokenList: false,
  DragEvent: false,
  DynamicsCompressorNode: false,
  Element: false,
  ErrorEvent: false,
  event: false,
  Event: false,
  EventSource: false,
  EventTarget: false,
  external: false,
  fetch: false,
  File: false,
  FileList: false,
  FileReader: false,
  find: false,
  focus: false,
  FocusEvent: false,
  FontFace: false,
  FontFaceSetLoadEvent: false,
  FormData: false,
  FormDataEvent: false,
  frameElement: false,
  frames: false,
  GainNode: false,
  Gamepad: false,
  GamepadButton: false,
  GamepadEvent: false,
  getComputedStyle: false,
  getSelection: false,
  HashChangeEvent: false,
  Headers: false,
  history: false,
  History: false,
  HTMLAllCollection: false,
  HTMLAnchorElement: false,
  HTMLAreaElement: false,
  HTMLAudioElement: false,
  HTMLBaseElement: false,
  HTMLBodyElement: false,
  HTMLBRElement: false,
  HTMLButtonElement: false,
  HTMLCanvasElement: false,
  HTMLCollection: false,
  HTMLContentElement: false,
  HTMLDataElement: false,
  HTMLDataListElement: false,
  HTMLDetailsElement: false,
  HTMLDialogElement: false,
  HTMLDirectoryElement: false,
  HTMLDivElement: false,
  HTMLDListElement: false,
  HTMLDocument: false,
  HTMLElement: false,
  HTMLEmbedElement: false,
  HTMLFieldSetElement: false,
  HTMLFontElement: false,
  HTMLFormControlsCollection: false,
  HTMLFormElement: false,
  HTMLFrameElement: false,
  HTMLFrameSetElement: false,
  HTMLHeadElement: false,
  HTMLHeadingElement: false,
  HTMLHRElement: false,
  HTMLHtmlElement: false,
  HTMLIFrameElement: false,
  HTMLImageElement: false,
  HTMLInputElement: false,
  HTMLLabelElement: false,
  HTMLLegendElement: false,
  HTMLLIElement: false,
  HTMLLinkElement: false,
  HTMLMapElement: false,
  HTMLMarqueeElement: false,
  HTMLMediaElement: false,
  HTMLMenuElement: false,
  HTMLMetaElement: false,
  HTMLMeterElement: false,
  HTMLModElement: false,
  HTMLObjectElement: false,
  HTMLOListElement: false,
  HTMLOptGroupElement: false,
  HTMLOptionElement: false,
  HTMLOptionsCollection: false,
  HTMLOutputElement: false,
  HTMLParagraphElement: false,
  HTMLParamElement: false,
  HTMLPictureElement: false,
  HTMLPreElement: false,
  HTMLProgressElement: false,
  HTMLQuoteElement: false,
  HTMLScriptElement: false,
  HTMLSelectElement: false,
  HTMLShadowElement: false,
  HTMLSlotElement: false,
  HTMLSourceElement: false,
  HTMLSpanElement: false,
  HTMLStyleElement: false,
  HTMLTableCaptionElement: false,
  HTMLTableCellElement: false,
  HTMLTableColElement: false,
  HTMLTableElement: false,
  HTMLTableRowElement: false,
  HTMLTableSectionElement: false,
  HTMLTemplateElement: false,
  HTMLTextAreaElement: false,
  HTMLTimeElement: false,
  HTMLTitleElement: false,
  HTMLTrackElement: false,
  HTMLUListElement: false,
  HTMLUnknownElement: false,
  HTMLVideoElement: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  IdleDeadline: false,
  IIRFilterNode: false,
  Image: false,
  ImageBitmap: false,
  ImageBitmapRenderingContext: false,
  ImageCapture: false,
  ImageData: false,
  indexedDB: false,
  innerHeight: false,
  innerWidth: false,
  InputEvent: false,
  IntersectionObserver: false,
  IntersectionObserverEntry: false,
  "Intl": false,
  isSecureContext: false,
  KeyboardEvent: false,
  KeyframeEffect: false,
  KeyframeEffectReadOnly: false,
  length: false,
  localStorage: false,
  location: true,
  Location: false,
  locationbar: false,
  matchMedia: false,
  MediaDeviceInfo: false,
  MediaDevices: false,
  MediaElementAudioSourceNode: false,
  MediaEncryptedEvent: false,
  MediaError: false,
  MediaKeyMessageEvent: false,
  MediaKeySession: false,
  MediaKeyStatusMap: false,
  MediaKeySystemAccess: false,
  MediaList: false,
  MediaMetadata: false,
  MediaQueryList: false,
  MediaQueryListEvent: false,
  MediaRecorder: false,
  MediaSettingsRange: false,
  MediaSource: false,
  MediaStream: false,
  MediaStreamAudioDestinationNode: false,
  MediaStreamAudioSourceNode: false,
  MediaStreamConstraints: false,
  MediaStreamEvent: false,
  MediaStreamTrack: false,
  MediaStreamTrackEvent: false,
  menubar: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  MIDIAccess: false,
  MIDIConnectionEvent: false,
  MIDIInput: false,
  MIDIInputMap: false,
  MIDIMessageEvent: false,
  MIDIOutput: false,
  MIDIOutputMap: false,
  MIDIPort: false,
  MimeType: false,
  MimeTypeArray: false,
  MouseEvent: false,
  moveBy: false,
  moveTo: false,
  MutationEvent: false,
  MutationObserver: false,
  MutationRecord: false,
  name: false,
  NamedNodeMap: false,
  NavigationPreloadManager: false,
  navigator: false,
  Navigator: false,
  NavigatorUAData: false,
  NetworkInformation: false,
  Node: false,
  NodeFilter: false,
  NodeIterator: false,
  NodeList: false,
  Notification: false,
  OfflineAudioCompletionEvent: false,
  OfflineAudioContext: false,
  offscreenBuffering: false,
  OffscreenCanvas: true,
  OffscreenCanvasRenderingContext2D: false,
  onabort: true,
  onafterprint: true,
  onanimationend: true,
  onanimationiteration: true,
  onanimationstart: true,
  onappinstalled: true,
  onauxclick: true,
  onbeforeinstallprompt: true,
  onbeforeprint: true,
  onbeforeunload: true,
  onblur: true,
  oncancel: true,
  oncanplay: true,
  oncanplaythrough: true,
  onchange: true,
  onclick: true,
  onclose: true,
  oncontextmenu: true,
  oncuechange: true,
  ondblclick: true,
  ondevicemotion: true,
  ondeviceorientation: true,
  ondeviceorientationabsolute: true,
  ondrag: true,
  ondragend: true,
  ondragenter: true,
  ondragleave: true,
  ondragover: true,
  ondragstart: true,
  ondrop: true,
  ondurationchange: true,
  onemptied: true,
  onended: true,
  onerror: true,
  onfocus: true,
  ongotpointercapture: true,
  onhashchange: true,
  oninput: true,
  oninvalid: true,
  onkeydown: true,
  onkeypress: true,
  onkeyup: true,
  onlanguagechange: true,
  onload: true,
  onloadeddata: true,
  onloadedmetadata: true,
  onloadstart: true,
  onlostpointercapture: true,
  onmessage: true,
  onmessageerror: true,
  onmousedown: true,
  onmouseenter: true,
  onmouseleave: true,
  onmousemove: true,
  onmouseout: true,
  onmouseover: true,
  onmouseup: true,
  onmousewheel: true,
  onoffline: true,
  ononline: true,
  onpagehide: true,
  onpageshow: true,
  onpause: true,
  onplay: true,
  onplaying: true,
  onpointercancel: true,
  onpointerdown: true,
  onpointerenter: true,
  onpointerleave: true,
  onpointermove: true,
  onpointerout: true,
  onpointerover: true,
  onpointerup: true,
  onpopstate: true,
  onprogress: true,
  onratechange: true,
  onrejectionhandled: true,
  onreset: true,
  onresize: true,
  onscroll: true,
  onsearch: true,
  onseeked: true,
  onseeking: true,
  onselect: true,
  onstalled: true,
  onstorage: true,
  onsubmit: true,
  onsuspend: true,
  ontimeupdate: true,
  ontoggle: true,
  ontransitionend: true,
  onunhandledrejection: true,
  onunload: true,
  onvolumechange: true,
  onwaiting: true,
  onwheel: true,
  open: false,
  openDatabase: false,
  opener: false,
  Option: false,
  origin: false,
  OscillatorNode: false,
  outerHeight: false,
  outerWidth: false,
  OverconstrainedError: false,
  PageTransitionEvent: false,
  pageXOffset: false,
  pageYOffset: false,
  PannerNode: false,
  parent: false,
  Path2D: false,
  PaymentAddress: false,
  PaymentRequest: false,
  PaymentRequestUpdateEvent: false,
  PaymentResponse: false,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceLongTaskTiming: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceNavigationTiming: false,
  PerformanceObserver: false,
  PerformanceObserverEntryList: false,
  PerformancePaintTiming: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  PeriodicWave: false,
  Permissions: false,
  PermissionStatus: false,
  personalbar: false,
  PhotoCapabilities: false,
  Plugin: false,
  PluginArray: false,
  PointerEvent: false,
  PopStateEvent: false,
  postMessage: false,
  Presentation: false,
  PresentationAvailability: false,
  PresentationConnection: false,
  PresentationConnectionAvailableEvent: false,
  PresentationConnectionCloseEvent: false,
  PresentationConnectionList: false,
  PresentationReceiver: false,
  PresentationRequest: false,
  print: false,
  ProcessingInstruction: false,
  ProgressEvent: false,
  PromiseRejectionEvent: false,
  prompt: false,
  PushManager: false,
  PushSubscription: false,
  PushSubscriptionOptions: false,
  queueMicrotask: false,
  RadioNodeList: false,
  Range: false,
  ReadableByteStreamController: false,
  ReadableStream: false,
  ReadableStreamBYOBReader: false,
  ReadableStreamBYOBRequest: false,
  ReadableStreamDefaultController: false,
  ReadableStreamDefaultReader: false,
  registerProcessor: false,
  RemotePlayback: false,
  removeEventListener: false,
  reportError: false,
  Request: false,
  requestAnimationFrame: false,
  requestIdleCallback: false,
  resizeBy: false,
  ResizeObserver: false,
  ResizeObserverEntry: false,
  resizeTo: false,
  Response: false,
  RTCCertificate: false,
  RTCDataChannel: false,
  RTCDataChannelEvent: false,
  RTCDtlsTransport: false,
  RTCIceCandidate: false,
  RTCIceGatherer: false,
  RTCIceTransport: false,
  RTCPeerConnection: false,
  RTCPeerConnectionIceEvent: false,
  RTCRtpContributingSource: false,
  RTCRtpReceiver: false,
  RTCRtpSender: false,
  RTCSctpTransport: false,
  RTCSessionDescription: false,
  RTCStatsReport: false,
  RTCTrackEvent: false,
  screen: false,
  Screen: false,
  screenLeft: false,
  ScreenOrientation: false,
  screenTop: false,
  screenX: false,
  screenY: false,
  ScriptProcessorNode: false,
  scroll: false,
  scrollbars: false,
  scrollBy: false,
  scrollTo: false,
  scrollX: false,
  scrollY: false,
  SecurityPolicyViolationEvent: false,
  Selection: false,
  self: false,
  ServiceWorker: false,
  ServiceWorkerContainer: false,
  ServiceWorkerRegistration: false,
  sessionStorage: false,
  setInterval: false,
  setTimeout: false,
  ShadowRoot: false,
  SharedWorker: false,
  SourceBuffer: false,
  SourceBufferList: false,
  speechSynthesis: false,
  SpeechSynthesisEvent: false,
  SpeechSynthesisUtterance: false,
  StaticRange: false,
  status: false,
  statusbar: false,
  StereoPannerNode: false,
  stop: false,
  Storage: false,
  StorageEvent: false,
  StorageManager: false,
  structuredClone: false,
  styleMedia: false,
  StyleSheet: false,
  StyleSheetList: false,
  SubmitEvent: false,
  SubtleCrypto: false,
  SVGAElement: false,
  SVGAngle: false,
  SVGAnimatedAngle: false,
  SVGAnimatedBoolean: false,
  SVGAnimatedEnumeration: false,
  SVGAnimatedInteger: false,
  SVGAnimatedLength: false,
  SVGAnimatedLengthList: false,
  SVGAnimatedNumber: false,
  SVGAnimatedNumberList: false,
  SVGAnimatedPreserveAspectRatio: false,
  SVGAnimatedRect: false,
  SVGAnimatedString: false,
  SVGAnimatedTransformList: false,
  SVGAnimateElement: false,
  SVGAnimateMotionElement: false,
  SVGAnimateTransformElement: false,
  SVGAnimationElement: false,
  SVGCircleElement: false,
  SVGClipPathElement: false,
  SVGComponentTransferFunctionElement: false,
  SVGDefsElement: false,
  SVGDescElement: false,
  SVGDiscardElement: false,
  SVGElement: false,
  SVGEllipseElement: false,
  SVGFEBlendElement: false,
  SVGFEColorMatrixElement: false,
  SVGFEComponentTransferElement: false,
  SVGFECompositeElement: false,
  SVGFEConvolveMatrixElement: false,
  SVGFEDiffuseLightingElement: false,
  SVGFEDisplacementMapElement: false,
  SVGFEDistantLightElement: false,
  SVGFEDropShadowElement: false,
  SVGFEFloodElement: false,
  SVGFEFuncAElement: false,
  SVGFEFuncBElement: false,
  SVGFEFuncGElement: false,
  SVGFEFuncRElement: false,
  SVGFEGaussianBlurElement: false,
  SVGFEImageElement: false,
  SVGFEMergeElement: false,
  SVGFEMergeNodeElement: false,
  SVGFEMorphologyElement: false,
  SVGFEOffsetElement: false,
  SVGFEPointLightElement: false,
  SVGFESpecularLightingElement: false,
  SVGFESpotLightElement: false,
  SVGFETileElement: false,
  SVGFETurbulenceElement: false,
  SVGFilterElement: false,
  SVGForeignObjectElement: false,
  SVGGElement: false,
  SVGGeometryElement: false,
  SVGGradientElement: false,
  SVGGraphicsElement: false,
  SVGImageElement: false,
  SVGLength: false,
  SVGLengthList: false,
  SVGLinearGradientElement: false,
  SVGLineElement: false,
  SVGMarkerElement: false,
  SVGMaskElement: false,
  SVGMatrix: false,
  SVGMetadataElement: false,
  SVGMPathElement: false,
  SVGNumber: false,
  SVGNumberList: false,
  SVGPathElement: false,
  SVGPatternElement: false,
  SVGPoint: false,
  SVGPointList: false,
  SVGPolygonElement: false,
  SVGPolylineElement: false,
  SVGPreserveAspectRatio: false,
  SVGRadialGradientElement: false,
  SVGRect: false,
  SVGRectElement: false,
  SVGScriptElement: false,
  SVGSetElement: false,
  SVGStopElement: false,
  SVGStringList: false,
  SVGStyleElement: false,
  SVGSVGElement: false,
  SVGSwitchElement: false,
  SVGSymbolElement: false,
  SVGTextContentElement: false,
  SVGTextElement: false,
  SVGTextPathElement: false,
  SVGTextPositioningElement: false,
  SVGTitleElement: false,
  SVGTransform: false,
  SVGTransformList: false,
  SVGTSpanElement: false,
  SVGUnitTypes: false,
  SVGUseElement: false,
  SVGViewElement: false,
  TaskAttributionTiming: false,
  Text: false,
  TextDecoder: false,
  TextDecoderStream: false,
  TextEncoder: false,
  TextEncoderStream: false,
  TextEvent: false,
  TextMetrics: false,
  TextTrack: false,
  TextTrackCue: false,
  TextTrackCueList: false,
  TextTrackList: false,
  TimeRanges: false,
  ToggleEvent: false,
  toolbar: false,
  top: false,
  Touch: false,
  TouchEvent: false,
  TouchList: false,
  TrackEvent: false,
  TransformStream: false,
  TransformStreamDefaultController: false,
  TransitionEvent: false,
  TreeWalker: false,
  UIEvent: false,
  URL: false,
  URLSearchParams: false,
  ValidityState: false,
  visualViewport: false,
  VisualViewport: false,
  VTTCue: false,
  WaveShaperNode: false,
  WebAssembly: false,
  WebGL2RenderingContext: false,
  WebGLActiveInfo: false,
  WebGLBuffer: false,
  WebGLContextEvent: false,
  WebGLFramebuffer: false,
  WebGLProgram: false,
  WebGLQuery: false,
  WebGLRenderbuffer: false,
  WebGLRenderingContext: false,
  WebGLSampler: false,
  WebGLShader: false,
  WebGLShaderPrecisionFormat: false,
  WebGLSync: false,
  WebGLTexture: false,
  WebGLTransformFeedback: false,
  WebGLUniformLocation: false,
  WebGLVertexArrayObject: false,
  WebSocket: false,
  WheelEvent: false,
  window: false,
  Window: false,
  Worker: false,
  WritableStream: false,
  WritableStreamDefaultController: false,
  WritableStreamDefaultWriter: false,
  XMLDocument: false,
  XMLHttpRequest: false,
  XMLHttpRequestEventTarget: false,
  XMLHttpRequestUpload: false,
  XMLSerializer: false,
  XPathEvaluator: false,
  XPathExpression: false,
  XPathResult: false,
  XRAnchor: false,
  XRBoundedReferenceSpace: false,
  XRCPUDepthInformation: false,
  XRDepthInformation: false,
  XRFrame: false,
  XRInputSource: false,
  XRInputSourceArray: false,
  XRInputSourceEvent: false,
  XRInputSourcesChangeEvent: false,
  XRPose: false,
  XRReferenceSpace: false,
  XRReferenceSpaceEvent: false,
  XRRenderState: false,
  XRRigidTransform: false,
  XRSession: false,
  XRSessionEvent: false,
  XRSpace: false,
  XRSystem: false,
  XRView: false,
  XRViewerPose: false,
  XRViewport: false,
  XRWebGLBinding: false,
  XRWebGLDepthInformation: false,
  XRWebGLLayer: false,
  XSLTProcessor: false
};
var worker = {
  addEventListener: false,
  applicationCache: false,
  atob: false,
  Blob: false,
  BroadcastChannel: false,
  btoa: false,
  ByteLengthQueuingStrategy: false,
  Cache: false,
  caches: false,
  clearInterval: false,
  clearTimeout: false,
  close: true,
  CompressionStream: false,
  console: false,
  CountQueuingStrategy: false,
  crypto: false,
  Crypto: false,
  CryptoKey: false,
  CustomEvent: false,
  DecompressionStream: false,
  ErrorEvent: false,
  Event: false,
  fetch: false,
  File: false,
  FileReaderSync: false,
  FormData: false,
  Headers: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  ImageData: false,
  importScripts: true,
  indexedDB: false,
  location: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  name: false,
  navigator: false,
  Notification: false,
  onclose: true,
  onconnect: true,
  onerror: true,
  onlanguagechange: true,
  onmessage: true,
  onoffline: true,
  ononline: true,
  onrejectionhandled: true,
  onunhandledrejection: true,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceObserver: false,
  PerformanceObserverEntryList: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  postMessage: true,
  "Promise": false,
  queueMicrotask: false,
  ReadableByteStreamController: false,
  ReadableStream: false,
  ReadableStreamBYOBReader: false,
  ReadableStreamBYOBRequest: false,
  ReadableStreamDefaultController: false,
  ReadableStreamDefaultReader: false,
  removeEventListener: false,
  reportError: false,
  Request: false,
  Response: false,
  self: true,
  ServiceWorkerRegistration: false,
  setInterval: false,
  setTimeout: false,
  SubtleCrypto: false,
  TextDecoder: false,
  TextDecoderStream: false,
  TextEncoder: false,
  TextEncoderStream: false,
  TransformStream: false,
  TransformStreamDefaultController: false,
  URL: false,
  URLSearchParams: false,
  WebAssembly: false,
  WebSocket: false,
  Worker: false,
  WorkerGlobalScope: false,
  WritableStream: false,
  WritableStreamDefaultController: false,
  WritableStreamDefaultWriter: false,
  XMLHttpRequest: false
};
var node = {
  __dirname: false,
  __filename: false,
  AbortController: false,
  AbortSignal: false,
  atob: false,
  Blob: false,
  BroadcastChannel: false,
  btoa: false,
  Buffer: false,
  ByteLengthQueuingStrategy: false,
  clearImmediate: false,
  clearInterval: false,
  clearTimeout: false,
  CompressionStream: false,
  console: false,
  CountQueuingStrategy: false,
  crypto: false,
  Crypto: false,
  CryptoKey: false,
  CustomEvent: false,
  DecompressionStream: false,
  DOMException: false,
  Event: false,
  EventTarget: false,
  exports: true,
  fetch: false,
  File: false,
  FormData: false,
  global: false,
  Headers: false,
  "Intl": false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  module: false,
  performance: false,
  PerformanceEntry: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceObserver: false,
  PerformanceObserverEntryList: false,
  PerformanceResourceTiming: false,
  process: false,
  queueMicrotask: false,
  ReadableByteStreamController: false,
  ReadableStream: false,
  ReadableStreamBYOBReader: false,
  ReadableStreamBYOBRequest: false,
  ReadableStreamDefaultController: false,
  ReadableStreamDefaultReader: false,
  Request: false,
  require: false,
  Response: false,
  setImmediate: false,
  setInterval: false,
  setTimeout: false,
  structuredClone: false,
  SubtleCrypto: false,
  TextDecoder: false,
  TextDecoderStream: false,
  TextEncoder: false,
  TextEncoderStream: false,
  TransformStream: false,
  TransformStreamDefaultController: false,
  URL: false,
  URLSearchParams: false,
  WebAssembly: false,
  WritableStream: false,
  WritableStreamDefaultController: false,
  WritableStreamDefaultWriter: false
};
var nodeBuiltin = {
  AbortController: false,
  AbortSignal: false,
  atob: false,
  Blob: false,
  BroadcastChannel: false,
  btoa: false,
  Buffer: false,
  ByteLengthQueuingStrategy: false,
  clearImmediate: false,
  clearInterval: false,
  clearTimeout: false,
  CompressionStream: false,
  console: false,
  CountQueuingStrategy: false,
  crypto: false,
  Crypto: false,
  CryptoKey: false,
  CustomEvent: false,
  DecompressionStream: false,
  DOMException: false,
  Event: false,
  EventTarget: false,
  fetch: false,
  File: false,
  FormData: false,
  global: false,
  Headers: false,
  "Intl": false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  performance: false,
  PerformanceEntry: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceObserver: false,
  PerformanceObserverEntryList: false,
  PerformanceResourceTiming: false,
  process: false,
  queueMicrotask: false,
  ReadableByteStreamController: false,
  ReadableStream: false,
  ReadableStreamBYOBReader: false,
  ReadableStreamBYOBRequest: false,
  ReadableStreamDefaultController: false,
  ReadableStreamDefaultReader: false,
  Request: false,
  Response: false,
  setImmediate: false,
  setInterval: false,
  setTimeout: false,
  structuredClone: false,
  SubtleCrypto: false,
  TextDecoder: false,
  TextDecoderStream: false,
  TextEncoder: false,
  TextEncoderStream: false,
  TransformStream: false,
  TransformStreamDefaultController: false,
  URL: false,
  URLSearchParams: false,
  WebAssembly: false,
  WritableStream: false,
  WritableStreamDefaultController: false,
  WritableStreamDefaultWriter: false
};
var commonjs = {
  exports: true,
  global: false,
  module: false,
  require: false
};
var amd = {
  define: false,
  require: false
};
var mocha = {
  after: false,
  afterEach: false,
  before: false,
  beforeEach: false,
  context: false,
  describe: false,
  it: false,
  mocha: false,
  run: false,
  setup: false,
  specify: false,
  suite: false,
  suiteSetup: false,
  suiteTeardown: false,
  teardown: false,
  test: false,
  xcontext: false,
  xdescribe: false,
  xit: false,
  xspecify: false
};
var jasmine = {
  afterAll: false,
  afterEach: false,
  beforeAll: false,
  beforeEach: false,
  describe: false,
  expect: false,
  expectAsync: false,
  fail: false,
  fdescribe: false,
  fit: false,
  it: false,
  jasmine: false,
  pending: false,
  runs: false,
  spyOn: false,
  spyOnAllFunctions: false,
  spyOnProperty: false,
  waits: false,
  waitsFor: false,
  xdescribe: false,
  xit: false
};
var jest = {
  afterAll: false,
  afterEach: false,
  beforeAll: false,
  beforeEach: false,
  describe: false,
  expect: false,
  fdescribe: false,
  fit: false,
  it: false,
  jest: false,
  pit: false,
  require: false,
  test: false,
  xdescribe: false,
  xit: false,
  xtest: false
};
var qunit = {
  asyncTest: false,
  deepEqual: false,
  equal: false,
  expect: false,
  module: false,
  notDeepEqual: false,
  notEqual: false,
  notOk: false,
  notPropEqual: false,
  notStrictEqual: false,
  ok: false,
  propEqual: false,
  QUnit: false,
  raises: false,
  start: false,
  stop: false,
  strictEqual: false,
  test: false,
  throws: false
};
var phantomjs = {
  console: true,
  exports: true,
  phantom: true,
  require: true,
  WebPage: true
};
var couch = {
  emit: false,
  exports: false,
  getRow: false,
  log: false,
  module: false,
  provides: false,
  require: false,
  respond: false,
  send: false,
  start: false,
  sum: false
};
var rhino = {
  defineClass: false,
  deserialize: false,
  gc: false,
  help: false,
  importClass: false,
  importPackage: false,
  java: false,
  load: false,
  loadClass: false,
  Packages: false,
  print: false,
  quit: false,
  readFile: false,
  readUrl: false,
  runCommand: false,
  seal: false,
  serialize: false,
  spawn: false,
  sync: false,
  toint32: false,
  version: false
};
var nashorn = {
  __DIR__: false,
  __FILE__: false,
  __LINE__: false,
  com: false,
  edu: false,
  exit: false,
  java: false,
  Java: false,
  javafx: false,
  JavaImporter: false,
  javax: false,
  JSAdapter: false,
  load: false,
  loadWithNewGlobal: false,
  org: false,
  Packages: false,
  print: false,
  quit: false
};
var wsh = {
  ActiveXObject: false,
  CollectGarbage: false,
  Debug: false,
  Enumerator: false,
  GetObject: false,
  RuntimeObject: false,
  ScriptEngine: false,
  ScriptEngineBuildVersion: false,
  ScriptEngineMajorVersion: false,
  ScriptEngineMinorVersion: false,
  VBArray: false,
  WScript: false,
  WSH: false
};
var jquery = {
  $: false,
  jQuery: false
};
var yui = {
  YAHOO: false,
  YAHOO_config: false,
  YUI: false,
  YUI_config: false
};
var shelljs = {
  cat: false,
  cd: false,
  chmod: false,
  config: false,
  cp: false,
  dirs: false,
  echo: false,
  env: false,
  error: false,
  exec: false,
  exit: false,
  find: false,
  grep: false,
  ln: false,
  ls: false,
  mkdir: false,
  mv: false,
  popd: false,
  pushd: false,
  pwd: false,
  rm: false,
  sed: false,
  set: false,
  target: false,
  tempdir: false,
  test: false,
  touch: false,
  which: false
};
var prototypejs = {
  $: false,
  $$: false,
  $A: false,
  $break: false,
  $continue: false,
  $F: false,
  $H: false,
  $R: false,
  $w: false,
  Abstract: false,
  Ajax: false,
  Autocompleter: false,
  Builder: false,
  Class: false,
  Control: false,
  Draggable: false,
  Draggables: false,
  Droppables: false,
  Effect: false,
  Element: false,
  Enumerable: false,
  Event: false,
  Field: false,
  Form: false,
  Hash: false,
  Insertion: false,
  ObjectRange: false,
  PeriodicalExecuter: false,
  Position: false,
  Prototype: false,
  Scriptaculous: false,
  Selector: false,
  Sortable: false,
  SortableObserver: false,
  Sound: false,
  Template: false,
  Toggle: false,
  Try: false
};
var meteor = {
  $: false,
  Accounts: false,
  AccountsClient: false,
  AccountsCommon: false,
  AccountsServer: false,
  App: false,
  Assets: false,
  Blaze: false,
  check: false,
  Cordova: false,
  DDP: false,
  DDPRateLimiter: false,
  DDPServer: false,
  Deps: false,
  EJSON: false,
  Email: false,
  HTTP: false,
  Log: false,
  Match: false,
  Meteor: false,
  Mongo: false,
  MongoInternals: false,
  Npm: false,
  Package: false,
  Plugin: false,
  process: false,
  Random: false,
  ReactiveDict: false,
  ReactiveVar: false,
  Router: false,
  ServiceConfiguration: false,
  Session: false,
  share: false,
  Spacebars: false,
  Template: false,
  Tinytest: false,
  Tracker: false,
  UI: false,
  Utils: false,
  WebApp: false,
  WebAppInternals: false
};
var mongo = {
  _isWindows: false,
  _rand: false,
  BulkWriteResult: false,
  cat: false,
  cd: false,
  connect: false,
  db: false,
  getHostName: false,
  getMemInfo: false,
  hostname: false,
  ISODate: false,
  listFiles: false,
  load: false,
  ls: false,
  md5sumFile: false,
  mkdir: false,
  Mongo: false,
  NumberInt: false,
  NumberLong: false,
  ObjectId: false,
  PlanCache: false,
  print: false,
  printjson: false,
  pwd: false,
  quit: false,
  removeFile: false,
  rs: false,
  sh: false,
  UUID: false,
  version: false,
  WriteResult: false
};
var applescript = {
  $: false,
  Application: false,
  Automation: false,
  console: false,
  delay: false,
  Library: false,
  ObjC: false,
  ObjectSpecifier: false,
  Path: false,
  Progress: false,
  Ref: false
};
var serviceworker = {
  addEventListener: false,
  applicationCache: false,
  atob: false,
  Blob: false,
  BroadcastChannel: false,
  btoa: false,
  ByteLengthQueuingStrategy: false,
  Cache: false,
  caches: false,
  CacheStorage: false,
  clearInterval: false,
  clearTimeout: false,
  Client: false,
  clients: false,
  Clients: false,
  close: true,
  CompressionStream: false,
  console: false,
  CountQueuingStrategy: false,
  crypto: false,
  Crypto: false,
  CryptoKey: false,
  CustomEvent: false,
  DecompressionStream: false,
  ErrorEvent: false,
  Event: false,
  ExtendableEvent: false,
  ExtendableMessageEvent: false,
  fetch: false,
  FetchEvent: false,
  File: false,
  FileReaderSync: false,
  FormData: false,
  Headers: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  ImageData: false,
  importScripts: false,
  indexedDB: false,
  location: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  name: false,
  navigator: false,
  Notification: false,
  onclose: true,
  onconnect: true,
  onerror: true,
  onfetch: true,
  oninstall: true,
  onlanguagechange: true,
  onmessage: true,
  onmessageerror: true,
  onnotificationclick: true,
  onnotificationclose: true,
  onoffline: true,
  ononline: true,
  onpush: true,
  onpushsubscriptionchange: true,
  onrejectionhandled: true,
  onsync: true,
  onunhandledrejection: true,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceObserver: false,
  PerformanceObserverEntryList: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  postMessage: true,
  "Promise": false,
  queueMicrotask: false,
  ReadableByteStreamController: false,
  ReadableStream: false,
  ReadableStreamBYOBReader: false,
  ReadableStreamBYOBRequest: false,
  ReadableStreamDefaultController: false,
  ReadableStreamDefaultReader: false,
  registration: false,
  removeEventListener: false,
  Request: false,
  Response: false,
  self: false,
  ServiceWorker: false,
  ServiceWorkerContainer: false,
  ServiceWorkerGlobalScope: false,
  ServiceWorkerMessageEvent: false,
  ServiceWorkerRegistration: false,
  setInterval: false,
  setTimeout: false,
  skipWaiting: false,
  SubtleCrypto: false,
  TextDecoder: false,
  TextDecoderStream: false,
  TextEncoder: false,
  TextEncoderStream: false,
  TransformStream: false,
  TransformStreamDefaultController: false,
  URL: false,
  URLSearchParams: false,
  WebAssembly: false,
  WebSocket: false,
  WindowClient: false,
  Worker: false,
  WorkerGlobalScope: false,
  WritableStream: false,
  WritableStreamDefaultController: false,
  WritableStreamDefaultWriter: false,
  XMLHttpRequest: false
};
var atomtest = {
  advanceClock: false,
  atom: false,
  fakeClearInterval: false,
  fakeClearTimeout: false,
  fakeSetInterval: false,
  fakeSetTimeout: false,
  resetTimeouts: false,
  waitsForPromise: false
};
var embertest = {
  andThen: false,
  click: false,
  currentPath: false,
  currentRouteName: false,
  currentURL: false,
  fillIn: false,
  find: false,
  findAll: false,
  findWithAssert: false,
  keyEvent: false,
  pauseTest: false,
  resumeTest: false,
  triggerEvent: false,
  visit: false,
  wait: false
};
var protractor = {
  $: false,
  $$: false,
  browser: false,
  by: false,
  By: false,
  DartObject: false,
  element: false,
  protractor: false
};
var webextensions = {
  browser: false,
  chrome: false,
  opr: false
};
var greasemonkey = {
  cloneInto: false,
  createObjectIn: false,
  exportFunction: false,
  GM: false,
  GM_addElement: false,
  GM_addStyle: false,
  GM_addValueChangeListener: false,
  GM_deleteValue: false,
  GM_download: false,
  GM_getResourceText: false,
  GM_getResourceURL: false,
  GM_getTab: false,
  GM_getTabs: false,
  GM_getValue: false,
  GM_info: false,
  GM_listValues: false,
  GM_log: false,
  GM_notification: false,
  GM_openInTab: false,
  GM_registerMenuCommand: false,
  GM_removeValueChangeListener: false,
  GM_saveTab: false,
  GM_setClipboard: false,
  GM_setValue: false,
  GM_unregisterMenuCommand: false,
  GM_xmlhttpRequest: false,
  unsafeWindow: false
};
var devtools = {
  $: false,
  $_: false,
  $$: false,
  $0: false,
  $1: false,
  $2: false,
  $3: false,
  $4: false,
  $x: false,
  chrome: false,
  clear: false,
  copy: false,
  debug: false,
  dir: false,
  dirxml: false,
  getEventListeners: false,
  inspect: false,
  keys: false,
  monitor: false,
  monitorEvents: false,
  profile: false,
  profileEnd: false,
  queryObjects: false,
  table: false,
  undebug: false,
  unmonitor: false,
  unmonitorEvents: false,
  values: false
};
var require$$0 = {
  builtin,
  es5,
  es2015,
  es2017,
  es2020,
  es2021,
  browser: browser$1,
  worker,
  node,
  nodeBuiltin,
  commonjs,
  amd,
  mocha,
  jasmine,
  jest,
  qunit,
  phantomjs,
  couch,
  rhino,
  nashorn,
  wsh,
  jquery,
  yui,
  shelljs,
  prototypejs,
  meteor,
  mongo,
  applescript,
  serviceworker,
  atomtest,
  embertest,
  protractor,
  "shared-node-browser": {
    AbortController: false,
    AbortSignal: false,
    atob: false,
    Blob: false,
    BroadcastChannel: false,
    btoa: false,
    ByteLengthQueuingStrategy: false,
    clearInterval: false,
    clearTimeout: false,
    CompressionStream: false,
    console: false,
    CountQueuingStrategy: false,
    crypto: false,
    Crypto: false,
    CryptoKey: false,
    CustomEvent: false,
    DecompressionStream: false,
    DOMException: false,
    Event: false,
    EventTarget: false,
    fetch: false,
    File: false,
    FormData: false,
    Headers: false,
    "Intl": false,
    MessageChannel: false,
    MessageEvent: false,
    MessagePort: false,
    performance: false,
    PerformanceEntry: false,
    PerformanceMark: false,
    PerformanceMeasure: false,
    PerformanceObserver: false,
    PerformanceObserverEntryList: false,
    PerformanceResourceTiming: false,
    queueMicrotask: false,
    ReadableByteStreamController: false,
    ReadableStream: false,
    ReadableStreamBYOBReader: false,
    ReadableStreamBYOBRequest: false,
    ReadableStreamDefaultController: false,
    ReadableStreamDefaultReader: false,
    Request: false,
    Response: false,
    setInterval: false,
    setTimeout: false,
    structuredClone: false,
    SubtleCrypto: false,
    TextDecoder: false,
    TextDecoderStream: false,
    TextEncoder: false,
    TextEncoderStream: false,
    TransformStream: false,
    TransformStreamDefaultController: false,
    URL: false,
    URLSearchParams: false,
    WebAssembly: false,
    WritableStream: false,
    WritableStreamDefaultController: false,
    WritableStreamDefaultWriter: false
  },
  webextensions,
  greasemonkey,
  devtools
};
var globals$1;
var hasRequiredGlobals$1;
function requireGlobals$1() {
  if (hasRequiredGlobals$1) return globals$1;
  hasRequiredGlobals$1 = 1;
  globals$1 = require$$0;
  return globals$1;
}
var hasRequiredEslintrcUniversal;
function requireEslintrcUniversal() {
  if (hasRequiredEslintrcUniversal) return eslintrcUniversal;
  hasRequiredEslintrcUniversal = 1;
  Object.defineProperty(eslintrcUniversal, "__esModule", { value: true });
  var util2 = require$$1$1;
  var path = require$$0$1;
  var Ajv = requireAjv$1();
  var globals2 = /* @__PURE__ */ requireGlobals$1();
  function _interopDefaultLegacy(e2) {
    return e2 && typeof e2 === "object" && "default" in e2 ? e2 : { "default": e2 };
  }
  var util__default = /* @__PURE__ */ _interopDefaultLegacy(util2);
  var path__default = /* @__PURE__ */ _interopDefaultLegacy(path);
  var Ajv__default = /* @__PURE__ */ _interopDefaultLegacy(Ajv);
  var globals__default = /* @__PURE__ */ _interopDefaultLegacy(globals2);
  const RULE_SEVERITY_STRINGS = ["off", "warn", "error"], RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {
    map[value] = index;
    return map;
  }, {}), VALID_SEVERITIES = /* @__PURE__ */ new Set([0, 1, 2, "off", "warn", "error"]);
  function getRuleSeverity(ruleConfig) {
    const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;
    if (severityValue === 0 || severityValue === 1 || severityValue === 2) {
      return severityValue;
    }
    if (typeof severityValue === "string") {
      return RULE_SEVERITY[severityValue.toLowerCase()] || 0;
    }
    return 0;
  }
  function normalizeToStrings(config2) {
    if (config2.rules) {
      Object.keys(config2.rules).forEach((ruleId) => {
        const ruleConfig = config2.rules[ruleId];
        if (typeof ruleConfig === "number") {
          config2.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];
        } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === "number") {
          ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];
        }
      });
    }
  }
  function isErrorSeverity(ruleConfig) {
    return getRuleSeverity(ruleConfig) === 2;
  }
  function isValidSeverity(ruleConfig) {
    let severity2 = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;
    if (typeof severity2 === "string") {
      severity2 = severity2.toLowerCase();
    }
    return VALID_SEVERITIES.has(severity2);
  }
  function isEverySeverityValid(config2) {
    return Object.keys(config2).every((ruleId) => isValidSeverity(config2[ruleId]));
  }
  function normalizeConfigGlobal(configuredValue) {
    switch (configuredValue) {
      case "off":
        return "off";
      case true:
      case "true":
      case "writeable":
      case "writable":
        return "writable";
      case null:
      case false:
      case "false":
      case "readable":
      case "readonly":
        return "readonly";
      default:
        throw new Error(`'${configuredValue}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);
    }
  }
  var ConfigOps = {
    __proto__: null,
    getRuleSeverity,
    normalizeToStrings,
    isErrorSeverity,
    isValidSeverity,
    isEverySeverityValid,
    normalizeConfigGlobal
  };
  const deprecationWarningMessages = {
    ESLINT_LEGACY_ECMAFEATURES: "The 'ecmaFeatures' config file property is deprecated and has no effect.",
    ESLINT_PERSONAL_CONFIG_LOAD: "'~/.eslintrc.*' config files have been deprecated. Please use a config file per project or the '--config' option.",
    ESLINT_PERSONAL_CONFIG_SUPPRESS: "'~/.eslintrc.*' config files have been deprecated. Please remove it or add 'root:true' to the config files in your projects in order to avoid loading '~/.eslintrc.*' accidentally."
  };
  const sourceFileErrorCache = /* @__PURE__ */ new Set();
  function emitDeprecationWarning(source, errorCode) {
    const cacheKey = JSON.stringify({ source, errorCode });
    if (sourceFileErrorCache.has(cacheKey)) {
      return;
    }
    sourceFileErrorCache.add(cacheKey);
    const rel = path__default["default"].relative(process.cwd(), source);
    const message = deprecationWarningMessages[errorCode];
    process.emitWarning(
      `${message} (found in "${rel}")`,
      "DeprecationWarning",
      errorCode
    );
  }
  const metaSchema = {
    id: "http://json-schema.org/draft-04/schema#",
    $schema: "http://json-schema.org/draft-04/schema#",
    description: "Core schema meta-schema",
    definitions: {
      schemaArray: {
        type: "array",
        minItems: 1,
        items: { $ref: "#" }
      },
      positiveInteger: {
        type: "integer",
        minimum: 0
      },
      positiveIntegerDefault0: {
        allOf: [{ $ref: "#/definitions/positiveInteger" }, { default: 0 }]
      },
      simpleTypes: {
        enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
      },
      stringArray: {
        type: "array",
        items: { type: "string" },
        minItems: 1,
        uniqueItems: true
      }
    },
    type: "object",
    properties: {
      id: {
        type: "string"
      },
      $schema: {
        type: "string"
      },
      title: {
        type: "string"
      },
      description: {
        type: "string"
      },
      default: {},
      multipleOf: {
        type: "number",
        minimum: 0,
        exclusiveMinimum: true
      },
      maximum: {
        type: "number"
      },
      exclusiveMaximum: {
        type: "boolean",
        default: false
      },
      minimum: {
        type: "number"
      },
      exclusiveMinimum: {
        type: "boolean",
        default: false
      },
      maxLength: { $ref: "#/definitions/positiveInteger" },
      minLength: { $ref: "#/definitions/positiveIntegerDefault0" },
      pattern: {
        type: "string",
        format: "regex"
      },
      additionalItems: {
        anyOf: [
          { type: "boolean" },
          { $ref: "#" }
        ],
        default: {}
      },
      items: {
        anyOf: [
          { $ref: "#" },
          { $ref: "#/definitions/schemaArray" }
        ],
        default: {}
      },
      maxItems: { $ref: "#/definitions/positiveInteger" },
      minItems: { $ref: "#/definitions/positiveIntegerDefault0" },
      uniqueItems: {
        type: "boolean",
        default: false
      },
      maxProperties: { $ref: "#/definitions/positiveInteger" },
      minProperties: { $ref: "#/definitions/positiveIntegerDefault0" },
      required: { $ref: "#/definitions/stringArray" },
      additionalProperties: {
        anyOf: [
          { type: "boolean" },
          { $ref: "#" }
        ],
        default: {}
      },
      definitions: {
        type: "object",
        additionalProperties: { $ref: "#" },
        default: {}
      },
      properties: {
        type: "object",
        additionalProperties: { $ref: "#" },
        default: {}
      },
      patternProperties: {
        type: "object",
        additionalProperties: { $ref: "#" },
        default: {}
      },
      dependencies: {
        type: "object",
        additionalProperties: {
          anyOf: [
            { $ref: "#" },
            { $ref: "#/definitions/stringArray" }
          ]
        }
      },
      enum: {
        type: "array",
        minItems: 1,
        uniqueItems: true
      },
      type: {
        anyOf: [
          { $ref: "#/definitions/simpleTypes" },
          {
            type: "array",
            items: { $ref: "#/definitions/simpleTypes" },
            minItems: 1,
            uniqueItems: true
          }
        ]
      },
      format: { type: "string" },
      allOf: { $ref: "#/definitions/schemaArray" },
      anyOf: { $ref: "#/definitions/schemaArray" },
      oneOf: { $ref: "#/definitions/schemaArray" },
      not: { $ref: "#" }
    },
    dependencies: {
      exclusiveMaximum: ["maximum"],
      exclusiveMinimum: ["minimum"]
    },
    default: {}
  };
  var ajvOrig = (additionalOptions = {}) => {
    const ajv3 = new Ajv__default["default"]({
      meta: false,
      useDefaults: true,
      validateSchema: false,
      missingRefs: "ignore",
      verbose: true,
      schemaId: "auto",
      ...additionalOptions
    });
    ajv3.addMetaSchema(metaSchema);
    ajv3._opts.defaultMeta = metaSchema.id;
    return ajv3;
  };
  function isObjectNotArray(value) {
    return typeof value === "object" && value !== null && !Array.isArray(value);
  }
  function deepMergeObjects(first, second) {
    if (second === void 0) {
      return first;
    }
    if (!isObjectNotArray(first) || !isObjectNotArray(second)) {
      return second;
    }
    const result = { ...first, ...second };
    for (const key of Object.keys(second)) {
      if (Object.prototype.propertyIsEnumerable.call(first, key)) {
        result[key] = deepMergeObjects(first[key], second[key]);
      }
    }
    return result;
  }
  function deepMergeArrays(first, second) {
    if (!first || !second) {
      return second || first || [];
    }
    return [
      ...first.map((value, i2) => deepMergeObjects(value, second[i2])),
      ...second.slice(first.length)
    ];
  }
  const baseConfigProperties = {
    $schema: { type: "string" },
    env: { type: "object" },
    extends: { $ref: "#/definitions/stringOrStrings" },
    globals: { type: "object" },
    overrides: {
      type: "array",
      items: { $ref: "#/definitions/overrideConfig" },
      additionalItems: false
    },
    parser: { type: ["string", "null"] },
    parserOptions: { type: "object" },
    plugins: { type: "array" },
    processor: { type: "string" },
    rules: { type: "object" },
    settings: { type: "object" },
    noInlineConfig: { type: "boolean" },
    reportUnusedDisableDirectives: { type: "boolean" },
    ecmaFeatures: { type: "object" }
    // deprecated; logs a warning when used
  };
  const configSchema = {
    definitions: {
      stringOrStrings: {
        oneOf: [
          { type: "string" },
          {
            type: "array",
            items: { type: "string" },
            additionalItems: false
          }
        ]
      },
      stringOrStringsRequired: {
        oneOf: [
          { type: "string" },
          {
            type: "array",
            items: { type: "string" },
            additionalItems: false,
            minItems: 1
          }
        ]
      },
      // Config at top-level.
      objectConfig: {
        type: "object",
        properties: {
          root: { type: "boolean" },
          ignorePatterns: { $ref: "#/definitions/stringOrStrings" },
          ...baseConfigProperties
        },
        additionalProperties: false
      },
      // Config in `overrides`.
      overrideConfig: {
        type: "object",
        properties: {
          excludedFiles: { $ref: "#/definitions/stringOrStrings" },
          files: { $ref: "#/definitions/stringOrStringsRequired" },
          ...baseConfigProperties
        },
        required: ["files"],
        additionalProperties: false
      }
    },
    $ref: "#/definitions/objectConfig"
  };
  function getDiff(current, prev) {
    const retv = {};
    for (const [key, value] of Object.entries(current)) {
      if (!Object.hasOwn(prev, key)) {
        retv[key] = value;
      }
    }
    return retv;
  }
  const newGlobals2015 = getDiff(globals__default["default"].es2015, globals__default["default"].es5);
  const newGlobals2017 = {
    Atomics: false,
    SharedArrayBuffer: false
  };
  const newGlobals2020 = {
    BigInt: false,
    BigInt64Array: false,
    BigUint64Array: false,
    globalThis: false
  };
  const newGlobals2021 = {
    AggregateError: false,
    FinalizationRegistry: false,
    WeakRef: false
  };
  var environments = new Map(Object.entries({
    // Language
    builtin: {
      globals: globals__default["default"].es5
    },
    es6: {
      globals: newGlobals2015,
      parserOptions: {
        ecmaVersion: 6
      }
    },
    es2015: {
      globals: newGlobals2015,
      parserOptions: {
        ecmaVersion: 6
      }
    },
    es2016: {
      globals: newGlobals2015,
      parserOptions: {
        ecmaVersion: 7
      }
    },
    es2017: {
      globals: { ...newGlobals2015, ...newGlobals2017 },
      parserOptions: {
        ecmaVersion: 8
      }
    },
    es2018: {
      globals: { ...newGlobals2015, ...newGlobals2017 },
      parserOptions: {
        ecmaVersion: 9
      }
    },
    es2019: {
      globals: { ...newGlobals2015, ...newGlobals2017 },
      parserOptions: {
        ecmaVersion: 10
      }
    },
    es2020: {
      globals: { ...newGlobals2015, ...newGlobals2017, ...newGlobals2020 },
      parserOptions: {
        ecmaVersion: 11
      }
    },
    es2021: {
      globals: { ...newGlobals2015, ...newGlobals2017, ...newGlobals2020, ...newGlobals2021 },
      parserOptions: {
        ecmaVersion: 12
      }
    },
    es2022: {
      globals: { ...newGlobals2015, ...newGlobals2017, ...newGlobals2020, ...newGlobals2021 },
      parserOptions: {
        ecmaVersion: 13
      }
    },
    es2023: {
      globals: { ...newGlobals2015, ...newGlobals2017, ...newGlobals2020, ...newGlobals2021 },
      parserOptions: {
        ecmaVersion: 14
      }
    },
    es2024: {
      globals: { ...newGlobals2015, ...newGlobals2017, ...newGlobals2020, ...newGlobals2021 },
      parserOptions: {
        ecmaVersion: 15
      }
    },
    // Platforms
    browser: {
      globals: globals__default["default"].browser
    },
    node: {
      globals: globals__default["default"].node,
      parserOptions: {
        ecmaFeatures: {
          globalReturn: true
        }
      }
    },
    "shared-node-browser": {
      globals: globals__default["default"]["shared-node-browser"]
    },
    worker: {
      globals: globals__default["default"].worker
    },
    serviceworker: {
      globals: globals__default["default"].serviceworker
    },
    // Frameworks
    commonjs: {
      globals: globals__default["default"].commonjs,
      parserOptions: {
        ecmaFeatures: {
          globalReturn: true
        }
      }
    },
    amd: {
      globals: globals__default["default"].amd
    },
    mocha: {
      globals: globals__default["default"].mocha
    },
    jasmine: {
      globals: globals__default["default"].jasmine
    },
    jest: {
      globals: globals__default["default"].jest
    },
    phantomjs: {
      globals: globals__default["default"].phantomjs
    },
    jquery: {
      globals: globals__default["default"].jquery
    },
    qunit: {
      globals: globals__default["default"].qunit
    },
    prototypejs: {
      globals: globals__default["default"].prototypejs
    },
    shelljs: {
      globals: globals__default["default"].shelljs
    },
    meteor: {
      globals: globals__default["default"].meteor
    },
    mongo: {
      globals: globals__default["default"].mongo
    },
    protractor: {
      globals: globals__default["default"].protractor
    },
    applescript: {
      globals: globals__default["default"].applescript
    },
    nashorn: {
      globals: globals__default["default"].nashorn
    },
    atomtest: {
      globals: globals__default["default"].atomtest
    },
    embertest: {
      globals: globals__default["default"].embertest
    },
    webextensions: {
      globals: globals__default["default"].webextensions
    },
    greasemonkey: {
      globals: globals__default["default"].greasemonkey
    }
  }));
  const ajv2 = ajvOrig();
  const ruleValidators = /* @__PURE__ */ new WeakMap();
  const noop2 = Function.prototype;
  let validateSchema;
  const severityMap = {
    error: 2,
    warn: 1,
    off: 0
  };
  const validated = /* @__PURE__ */ new WeakSet();
  const noOptionsSchema = Object.freeze({
    type: "array",
    minItems: 0,
    maxItems: 0
  });
  class ConfigValidator {
    constructor({ builtInRules = /* @__PURE__ */ new Map() } = {}) {
      this.builtInRules = builtInRules;
    }
    /**
     * Gets a complete options schema for a rule.
     * @param {Rule} rule A rule object
     * @throws {TypeError} If `meta.schema` is specified but is not an array, object or `false`.
     * @returns {Object|null} JSON Schema for the rule's options.
     *      `null` if rule wasn't passed or its `meta.schema` is `false`.
     */
    getRuleOptionsSchema(rule) {
      if (!rule) {
        return null;
      }
      if (!rule.meta) {
        return { ...noOptionsSchema };
      }
      const schema = rule.meta.schema;
      if (typeof schema === "undefined") {
        return { ...noOptionsSchema };
      }
      if (schema === false) {
        return null;
      }
      if (typeof schema !== "object" || schema === null) {
        throw new TypeError("Rule's `meta.schema` must be an array or object");
      }
      if (Array.isArray(schema)) {
        if (schema.length) {
          return {
            type: "array",
            items: schema,
            minItems: 0,
            maxItems: schema.length
          };
        }
        return { ...noOptionsSchema };
      }
      return schema;
    }
    /**
     * Validates a rule's severity and returns the severity value. Throws an error if the severity is invalid.
     * @param {options} options The given options for the rule.
     * @returns {number|string} The rule's severity value
     * @throws {Error} If the severity is invalid.
     */
    validateRuleSeverity(options) {
      const severity2 = Array.isArray(options) ? options[0] : options;
      const normSeverity = typeof severity2 === "string" ? severityMap[severity2.toLowerCase()] : severity2;
      if (normSeverity === 0 || normSeverity === 1 || normSeverity === 2) {
        return normSeverity;
      }
      throw new Error(`	Severity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '${util__default["default"].inspect(severity2).replace(/'/gu, '"').replace(/\n/gu, "")}').
`);
    }
    /**
     * Validates the non-severity options passed to a rule, based on its schema.
     * @param {{create: Function}} rule The rule to validate
     * @param {Array} localOptions The options for the rule, excluding severity
     * @returns {void}
     * @throws {Error} If the options are invalid.
     */
    validateRuleSchema(rule, localOptions) {
      if (!ruleValidators.has(rule)) {
        try {
          const schema = this.getRuleOptionsSchema(rule);
          if (schema) {
            ruleValidators.set(rule, ajv2.compile(schema));
          }
        } catch (err) {
          const errorWithCode = new Error(err.message, { cause: err });
          errorWithCode.code = "ESLINT_INVALID_RULE_OPTIONS_SCHEMA";
          throw errorWithCode;
        }
      }
      const validateRule = ruleValidators.get(rule);
      if (validateRule) {
        const mergedOptions = deepMergeArrays(rule.meta?.defaultOptions, localOptions);
        validateRule(mergedOptions);
        if (validateRule.errors) {
          throw new Error(validateRule.errors.map(
            (error) => `	Value ${JSON.stringify(error.data)} ${error.message}.
`
          ).join(""));
        }
      }
    }
    /**
     * Validates a rule's options against its schema.
     * @param {{create: Function}|null} rule The rule that the config is being validated for
     * @param {string} ruleId The rule's unique name.
     * @param {Array|number} options The given options for the rule.
     * @param {string|null} source The name of the configuration source to report in any errors. If null or undefined,
     * no source is prepended to the message.
     * @returns {void}
     * @throws {Error} If the options are invalid.
     */
    validateRuleOptions(rule, ruleId, options, source = null) {
      try {
        const severity2 = this.validateRuleSeverity(options);
        if (severity2 !== 0) {
          this.validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);
        }
      } catch (err) {
        let enhancedMessage = err.code === "ESLINT_INVALID_RULE_OPTIONS_SCHEMA" ? `Error while processing options validation schema of rule '${ruleId}': ${err.message}` : `Configuration for rule "${ruleId}" is invalid:
${err.message}`;
        if (typeof source === "string") {
          enhancedMessage = `${source}:
	${enhancedMessage}`;
        }
        const enhancedError = new Error(enhancedMessage, { cause: err });
        if (err.code) {
          enhancedError.code = err.code;
        }
        throw enhancedError;
      }
    }
    /**
     * Validates an environment object
     * @param {Object} environment The environment config object to validate.
     * @param {string} source The name of the configuration source to report in any errors.
     * @param {(envId:string) => Object} [getAdditionalEnv] A map from strings to loaded environments.
     * @returns {void}
     * @throws {Error} If the environment is invalid.
     */
    validateEnvironment(environment, source, getAdditionalEnv = noop2) {
      if (!environment) {
        return;
      }
      Object.keys(environment).forEach((id2) => {
        const env2 = getAdditionalEnv(id2) || environments.get(id2) || null;
        if (!env2) {
          const message = `${source}:
	Environment key "${id2}" is unknown
`;
          throw new Error(message);
        }
      });
    }
    /**
     * Validates a rules config object
     * @param {Object} rulesConfig The rules config object to validate.
     * @param {string} source The name of the configuration source to report in any errors.
     * @param {(ruleId:string) => Object} getAdditionalRule A map from strings to loaded rules
     * @returns {void}
     */
    validateRules(rulesConfig, source, getAdditionalRule = noop2) {
      if (!rulesConfig) {
        return;
      }
      Object.keys(rulesConfig).forEach((id2) => {
        const rule = getAdditionalRule(id2) || this.builtInRules.get(id2) || null;
        this.validateRuleOptions(rule, id2, rulesConfig[id2], source);
      });
    }
    /**
     * Validates a `globals` section of a config file
     * @param {Object} globalsConfig The `globals` section
     * @param {string|null} source The name of the configuration source to report in the event of an error.
     * @returns {void}
     */
    validateGlobals(globalsConfig, source = null) {
      if (!globalsConfig) {
        return;
      }
      Object.entries(globalsConfig).forEach(([configuredGlobal, configuredValue]) => {
        try {
          normalizeConfigGlobal(configuredValue);
        } catch (err) {
          throw new Error(`ESLint configuration of global '${configuredGlobal}' in ${source} is invalid:
${err.message}`);
        }
      });
    }
    /**
     * Validate `processor` configuration.
     * @param {string|undefined} processorName The processor name.
     * @param {string} source The name of config file.
     * @param {(id:string) => Processor} getProcessor The getter of defined processors.
     * @returns {void}
     * @throws {Error} If the processor is invalid.
     */
    validateProcessor(processorName, source, getProcessor) {
      if (processorName && !getProcessor(processorName)) {
        throw new Error(`ESLint configuration of processor in '${source}' is invalid: '${processorName}' was not found.`);
      }
    }
    /**
     * Formats an array of schema validation errors.
     * @param {Array} errors An array of error messages to format.
     * @returns {string} Formatted error message
     */
    formatErrors(errors) {
      return errors.map((error) => {
        if (error.keyword === "additionalProperties") {
          const formattedPropertyPath = error.dataPath.length ? `${error.dataPath.slice(1)}.${error.params.additionalProperty}` : error.params.additionalProperty;
          return `Unexpected top-level property "${formattedPropertyPath}"`;
        }
        if (error.keyword === "type") {
          const formattedField = error.dataPath.slice(1);
          const formattedExpectedType = Array.isArray(error.schema) ? error.schema.join("/") : error.schema;
          const formattedValue = JSON.stringify(error.data);
          return `Property "${formattedField}" is the wrong type (expected ${formattedExpectedType} but got \`${formattedValue}\`)`;
        }
        const field = error.dataPath[0] === "." ? error.dataPath.slice(1) : error.dataPath;
        return `"${field}" ${error.message}. Value: ${JSON.stringify(error.data)}`;
      }).map((message) => `	- ${message}.
`).join("");
    }
    /**
     * Validates the top level properties of the config object.
     * @param {Object} config The config object to validate.
     * @param {string} source The name of the configuration source to report in any errors.
     * @returns {void}
     * @throws {Error} If the config is invalid.
     */
    validateConfigSchema(config2, source = null) {
      validateSchema = validateSchema || ajv2.compile(configSchema);
      if (!validateSchema(config2)) {
        throw new Error(`ESLint configuration in ${source} is invalid:
${this.formatErrors(validateSchema.errors)}`);
      }
      if (Object.hasOwn(config2, "ecmaFeatures")) {
        emitDeprecationWarning(source, "ESLINT_LEGACY_ECMAFEATURES");
      }
    }
    /**
     * Validates an entire config object.
     * @param {Object} config The config object to validate.
     * @param {string} source The name of the configuration source to report in any errors.
     * @param {(ruleId:string) => Object} [getAdditionalRule] A map from strings to loaded rules.
     * @param {(envId:string) => Object} [getAdditionalEnv] A map from strings to loaded envs.
     * @returns {void}
     */
    validate(config2, source, getAdditionalRule, getAdditionalEnv) {
      this.validateConfigSchema(config2, source);
      this.validateRules(config2.rules, source, getAdditionalRule);
      this.validateEnvironment(config2.env, source, getAdditionalEnv);
      this.validateGlobals(config2.globals, source);
      for (const override of config2.overrides || []) {
        this.validateRules(override.rules, source, getAdditionalRule);
        this.validateEnvironment(override.env, source, getAdditionalEnv);
        this.validateGlobals(config2.globals, source);
      }
    }
    /**
     * Validate config array object.
     * @param {ConfigArray} configArray The config array to validate.
     * @returns {void}
     */
    validateConfigArray(configArray) {
      const getPluginEnv = Map.prototype.get.bind(configArray.pluginEnvironments);
      const getPluginProcessor = Map.prototype.get.bind(configArray.pluginProcessors);
      const getPluginRule = Map.prototype.get.bind(configArray.pluginRules);
      for (const element of configArray) {
        if (validated.has(element)) {
          continue;
        }
        validated.add(element);
        this.validateEnvironment(element.env, element.name, getPluginEnv);
        this.validateGlobals(element.globals, element.name);
        this.validateProcessor(element.processor, element.name, getPluginProcessor);
        this.validateRules(element.rules, element.name, getPluginRule);
      }
    }
  }
  const NAMESPACE_REGEX = /^@.*\//iu;
  function normalizePackageName(name, prefix) {
    let normalizedName = name;
    if (normalizedName.includes("\\")) {
      normalizedName = normalizedName.replace(/\\/gu, "/");
    }
    if (normalizedName.charAt(0) === "@") {
      const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:${prefix})?)?$`, "u"), scopedPackageNameRegex = new RegExp(`^${prefix}(-|$)`, "u");
      if (scopedPackageShortcutRegex.test(normalizedName)) {
        normalizedName = normalizedName.replace(scopedPackageShortcutRegex, `$1/${prefix}`);
      } else if (!scopedPackageNameRegex.test(normalizedName.split("/")[1])) {
        normalizedName = normalizedName.replace(/^@([^/]+)\/(.*)$/u, `@$1/${prefix}-$2`);
      }
    } else if (!normalizedName.startsWith(`${prefix}-`)) {
      normalizedName = `${prefix}-${normalizedName}`;
    }
    return normalizedName;
  }
  function getShorthandName(fullname, prefix) {
    if (fullname[0] === "@") {
      let matchResult = new RegExp(`^(@[^/]+)/${prefix}$`, "u").exec(fullname);
      if (matchResult) {
        return matchResult[1];
      }
      matchResult = new RegExp(`^(@[^/]+)/${prefix}-(.+)$`, "u").exec(fullname);
      if (matchResult) {
        return `${matchResult[1]}/${matchResult[2]}`;
      }
    } else if (fullname.startsWith(`${prefix}-`)) {
      return fullname.slice(prefix.length + 1);
    }
    return fullname;
  }
  function getNamespaceFromTerm(term) {
    const match = term.match(NAMESPACE_REGEX);
    return match ? match[0] : "";
  }
  var naming = {
    __proto__: null,
    normalizePackageName,
    getShorthandName,
    getNamespaceFromTerm
  };
  const Legacy = {
    environments,
    // shared
    ConfigOps,
    ConfigValidator,
    naming
  };
  eslintrcUniversal.Legacy = Legacy;
  return eslintrcUniversal;
}
var src = { exports: {} };
var browser = { exports: {} };
var ms;
var hasRequiredMs;
function requireMs() {
  if (hasRequiredMs) return ms;
  hasRequiredMs = 1;
  var s2 = 1e3;
  var m2 = s2 * 60;
  var h2 = m2 * 60;
  var d2 = h2 * 24;
  var w = d2 * 7;
  var y2 = d2 * 365.25;
  ms = function(val, options) {
    options = options || {};
    var type2 = typeof val;
    if (type2 === "string" && val.length > 0) {
      return parse(val);
    } else if (type2 === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
    );
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n2 = parseFloat(match[1]);
    var type2 = (match[2] || "ms").toLowerCase();
    switch (type2) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n2 * y2;
      case "weeks":
      case "week":
      case "w":
        return n2 * w;
      case "days":
      case "day":
      case "d":
        return n2 * d2;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n2 * h2;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n2 * m2;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n2 * s2;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n2;
      default:
        return void 0;
    }
  }
  function fmtShort(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d2) {
      return Math.round(ms2 / d2) + "d";
    }
    if (msAbs >= h2) {
      return Math.round(ms2 / h2) + "h";
    }
    if (msAbs >= m2) {
      return Math.round(ms2 / m2) + "m";
    }
    if (msAbs >= s2) {
      return Math.round(ms2 / s2) + "s";
    }
    return ms2 + "ms";
  }
  function fmtLong(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d2) {
      return plural(ms2, msAbs, d2, "day");
    }
    if (msAbs >= h2) {
      return plural(ms2, msAbs, h2, "hour");
    }
    if (msAbs >= m2) {
      return plural(ms2, msAbs, m2, "minute");
    }
    if (msAbs >= s2) {
      return plural(ms2, msAbs, s2, "second");
    }
    return ms2 + " ms";
  }
  function plural(ms2, msAbs, n2, name) {
    var isPlural = msAbs >= n2 * 1.5;
    return Math.round(ms2 / n2) + " " + name + (isPlural ? "s" : "");
  }
  return ms;
}
var common;
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common;
  hasRequiredCommon = 1;
  function setup(env2) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = requireMs();
    createDebug.destroy = destroy;
    Object.keys(env2).forEach((key) => {
      createDebug[key] = env2[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash = 0;
      for (let i2 = 0; i2 < namespace.length; i2++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i2);
        hash |= 0;
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug(...args) {
        if (!debug.enabled) {
          return;
        }
        const self2 = debug;
        const curr = Number(/* @__PURE__ */ new Date());
        const ms2 = curr - (prevTime || curr);
        self2.diff = ms2;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format2];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy;
      Object.defineProperty(debug, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v2) => {
          enableOverride = v2;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend(namespace, delimiter2) {
      const newDebug = createDebug(this.namespace + (typeof delimiter2 === "undefined" ? ":" : delimiter2) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
      for (const ns of split) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  common = setup;
  return common;
}
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser.exports;
  hasRequiredBrowser = 1;
  (function(module, exports) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m2;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m2[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c2 = "color: " + this.color;
      args.splice(1, 0, c2, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c2);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r2 && typeof browser$1$1 !== "undefined" && "env" in browser$1$1) {
        r2 = browser$1$1.env.DEBUG;
      }
      return r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = requireCommon()(exports);
    const { formatters } = module.exports;
    formatters.j = function(v2) {
      try {
        return JSON.stringify(v2);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  })(browser, browser.exports);
  return browser.exports;
}
var hasRequiredSrc;
function requireSrc() {
  if (hasRequiredSrc) return src.exports;
  hasRequiredSrc = 1;
  {
    src.exports = requireBrowser();
  }
  return src.exports;
}
var traverser;
var hasRequiredTraverser;
function requireTraverser() {
  if (hasRequiredTraverser) return traverser;
  hasRequiredTraverser = 1;
  const vk = requireEslintVisitorKeys$2();
  const debug = requireSrc()("eslint:traverser");
  function noop2() {
  }
  function isNode(x2) {
    return x2 !== null && typeof x2 === "object" && typeof x2.type === "string";
  }
  function getVisitorKeys(visitorKeys, node2) {
    let keys = visitorKeys[node2.type];
    if (!keys) {
      keys = vk.getKeys(node2);
      debug(
        'Unknown node type "%s": Estimated visitor keys %j',
        node2.type,
        keys
      );
    }
    return keys;
  }
  class Traverser {
    constructor() {
      this._current = null;
      this._parents = [];
      this._skipped = false;
      this._broken = false;
      this._visitorKeys = null;
      this._enter = null;
      this._leave = null;
    }
    /**
     * Gives current node.
     * @returns {ASTNode} The current node.
     */
    current() {
      return this._current;
    }
    /**
     * Gives a copy of the ancestor nodes.
     * @returns {ASTNode[]} The ancestor nodes.
     */
    parents() {
      return this._parents.slice(0);
    }
    /**
     * Break the current traversal.
     * @returns {void}
     */
    break() {
      this._broken = true;
    }
    /**
     * Skip child nodes for the current traversal.
     * @returns {void}
     */
    skip() {
      this._skipped = true;
    }
    /**
     * Traverse the given AST tree.
     * @param {ASTNode} node The root node to traverse.
     * @param {Object} options The option object.
     * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.
     * @param {Function} [options.enter=noop] The callback function which is called on entering each node.
     * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.
     * @returns {void}
     */
    traverse(node2, options) {
      this._current = null;
      this._parents = [];
      this._skipped = false;
      this._broken = false;
      this._visitorKeys = options.visitorKeys || vk.KEYS;
      this._enter = options.enter || noop2;
      this._leave = options.leave || noop2;
      this._traverse(node2, null);
    }
    /**
     * Traverse the given AST tree recursively.
     * @param {ASTNode} node The current node.
     * @param {ASTNode|null} parent The parent node.
     * @returns {void}
     * @private
     */
    _traverse(node2, parent) {
      if (!isNode(node2)) {
        return;
      }
      this._current = node2;
      this._skipped = false;
      this._enter(node2, parent);
      if (!this._skipped && !this._broken) {
        const keys = getVisitorKeys(this._visitorKeys, node2);
        if (keys.length >= 1) {
          this._parents.push(node2);
          for (let i2 = 0; i2 < keys.length && !this._broken; ++i2) {
            const child = node2[keys[i2]];
            if (Array.isArray(child)) {
              for (let j = 0; j < child.length && !this._broken; ++j) {
                this._traverse(child[j], node2);
              }
            } else {
              this._traverse(child, node2);
            }
          }
          this._parents.pop();
        }
      }
      if (!this._broken) {
        this._leave(node2, parent);
      }
      this._current = parent;
    }
    /**
     * Calculates the keys to use for traversal.
     * @param {ASTNode} node The node to read keys from.
     * @returns {string[]} An array of keys to visit on the node.
     * @private
     */
    static getKeys(node2) {
      return vk.getKeys(node2);
    }
    /**
     * Traverse the given AST tree.
     * @param {ASTNode} node The root node to traverse.
     * @param {Object} options The option object.
     * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.
     * @param {Function} [options.enter=noop] The callback function which is called on entering each node.
     * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.
     * @returns {void}
     */
    static traverse(node2, options) {
      new Traverser().traverse(node2, options);
    }
    /**
     * The default visitor keys.
     * @type {Object}
     */
    static get DEFAULT_VISITOR_KEYS() {
      return vk.KEYS;
    }
  }
  traverser = Traverser;
  return traverser;
}
var eslintUtils = {};
var eslintVisitorKeys = {};
var hasRequiredEslintVisitorKeys;
function requireEslintVisitorKeys() {
  if (hasRequiredEslintVisitorKeys) return eslintVisitorKeys;
  hasRequiredEslintVisitorKeys = 1;
  Object.defineProperty(eslintVisitorKeys, "__esModule", { value: true });
  const KEYS = {
    ArrayExpression: [
      "elements"
    ],
    ArrayPattern: [
      "elements"
    ],
    ArrowFunctionExpression: [
      "params",
      "body"
    ],
    AssignmentExpression: [
      "left",
      "right"
    ],
    AssignmentPattern: [
      "left",
      "right"
    ],
    AwaitExpression: [
      "argument"
    ],
    BinaryExpression: [
      "left",
      "right"
    ],
    BlockStatement: [
      "body"
    ],
    BreakStatement: [
      "label"
    ],
    CallExpression: [
      "callee",
      "arguments"
    ],
    CatchClause: [
      "param",
      "body"
    ],
    ChainExpression: [
      "expression"
    ],
    ClassBody: [
      "body"
    ],
    ClassDeclaration: [
      "id",
      "superClass",
      "body"
    ],
    ClassExpression: [
      "id",
      "superClass",
      "body"
    ],
    ConditionalExpression: [
      "test",
      "consequent",
      "alternate"
    ],
    ContinueStatement: [
      "label"
    ],
    DebuggerStatement: [],
    DoWhileStatement: [
      "body",
      "test"
    ],
    EmptyStatement: [],
    ExperimentalRestProperty: [
      "argument"
    ],
    ExperimentalSpreadProperty: [
      "argument"
    ],
    ExportAllDeclaration: [
      "exported",
      "source"
    ],
    ExportDefaultDeclaration: [
      "declaration"
    ],
    ExportNamedDeclaration: [
      "declaration",
      "specifiers",
      "source"
    ],
    ExportSpecifier: [
      "exported",
      "local"
    ],
    ExpressionStatement: [
      "expression"
    ],
    ForInStatement: [
      "left",
      "right",
      "body"
    ],
    ForOfStatement: [
      "left",
      "right",
      "body"
    ],
    ForStatement: [
      "init",
      "test",
      "update",
      "body"
    ],
    FunctionDeclaration: [
      "id",
      "params",
      "body"
    ],
    FunctionExpression: [
      "id",
      "params",
      "body"
    ],
    Identifier: [],
    IfStatement: [
      "test",
      "consequent",
      "alternate"
    ],
    ImportDeclaration: [
      "specifiers",
      "source"
    ],
    ImportDefaultSpecifier: [
      "local"
    ],
    ImportExpression: [
      "source"
    ],
    ImportNamespaceSpecifier: [
      "local"
    ],
    ImportSpecifier: [
      "imported",
      "local"
    ],
    JSXAttribute: [
      "name",
      "value"
    ],
    JSXClosingElement: [
      "name"
    ],
    JSXClosingFragment: [],
    JSXElement: [
      "openingElement",
      "children",
      "closingElement"
    ],
    JSXEmptyExpression: [],
    JSXExpressionContainer: [
      "expression"
    ],
    JSXFragment: [
      "openingFragment",
      "children",
      "closingFragment"
    ],
    JSXIdentifier: [],
    JSXMemberExpression: [
      "object",
      "property"
    ],
    JSXNamespacedName: [
      "namespace",
      "name"
    ],
    JSXOpeningElement: [
      "name",
      "attributes"
    ],
    JSXOpeningFragment: [],
    JSXSpreadAttribute: [
      "argument"
    ],
    JSXSpreadChild: [
      "expression"
    ],
    JSXText: [],
    LabeledStatement: [
      "label",
      "body"
    ],
    Literal: [],
    LogicalExpression: [
      "left",
      "right"
    ],
    MemberExpression: [
      "object",
      "property"
    ],
    MetaProperty: [
      "meta",
      "property"
    ],
    MethodDefinition: [
      "key",
      "value"
    ],
    NewExpression: [
      "callee",
      "arguments"
    ],
    ObjectExpression: [
      "properties"
    ],
    ObjectPattern: [
      "properties"
    ],
    PrivateIdentifier: [],
    Program: [
      "body"
    ],
    Property: [
      "key",
      "value"
    ],
    PropertyDefinition: [
      "key",
      "value"
    ],
    RestElement: [
      "argument"
    ],
    ReturnStatement: [
      "argument"
    ],
    SequenceExpression: [
      "expressions"
    ],
    SpreadElement: [
      "argument"
    ],
    StaticBlock: [
      "body"
    ],
    Super: [],
    SwitchCase: [
      "test",
      "consequent"
    ],
    SwitchStatement: [
      "discriminant",
      "cases"
    ],
    TaggedTemplateExpression: [
      "tag",
      "quasi"
    ],
    TemplateElement: [],
    TemplateLiteral: [
      "quasis",
      "expressions"
    ],
    ThisExpression: [],
    ThrowStatement: [
      "argument"
    ],
    TryStatement: [
      "block",
      "handler",
      "finalizer"
    ],
    UnaryExpression: [
      "argument"
    ],
    UpdateExpression: [
      "argument"
    ],
    VariableDeclaration: [
      "declarations"
    ],
    VariableDeclarator: [
      "id",
      "init"
    ],
    WhileStatement: [
      "test",
      "body"
    ],
    WithStatement: [
      "object",
      "body"
    ],
    YieldExpression: [
      "argument"
    ]
  };
  const NODE_TYPES = Object.keys(KEYS);
  for (const type2 of NODE_TYPES) {
    Object.freeze(KEYS[type2]);
  }
  Object.freeze(KEYS);
  const KEY_BLACKLIST = /* @__PURE__ */ new Set([
    "parent",
    "leadingComments",
    "trailingComments"
  ]);
  function filterKey(key) {
    return !KEY_BLACKLIST.has(key) && key[0] !== "_";
  }
  function getKeys(node2) {
    return Object.keys(node2).filter(filterKey);
  }
  function unionWith(additionalKeys) {
    const retv = (
      /** @type {{
          [type: string]: ReadonlyArray<string>
      }} */
      Object.assign({}, KEYS)
    );
    for (const type2 of Object.keys(additionalKeys)) {
      if (Object.prototype.hasOwnProperty.call(retv, type2)) {
        const keys = new Set(additionalKeys[type2]);
        for (const key of retv[type2]) {
          keys.add(key);
        }
        retv[type2] = Object.freeze(Array.from(keys));
      } else {
        retv[type2] = Object.freeze(Array.from(additionalKeys[type2]));
      }
    }
    return Object.freeze(retv);
  }
  eslintVisitorKeys.KEYS = KEYS;
  eslintVisitorKeys.getKeys = getKeys;
  eslintVisitorKeys.unionWith = unionWith;
  return eslintVisitorKeys;
}
var hasRequiredEslintUtils;
function requireEslintUtils() {
  if (hasRequiredEslintUtils) return eslintUtils;
  hasRequiredEslintUtils = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var eslintVisitorKeys2 = requireEslintVisitorKeys();
    function getInnermostScope(initialScope, node2) {
      const location = (
        /** @type {[number, number]} */
        node2.range[0]
      );
      let scope = initialScope;
      let found = false;
      do {
        found = false;
        for (const childScope of scope.childScopes) {
          const range = (
            /** @type {[number, number]} */
            childScope.block.range
          );
          if (range[0] <= location && location < range[1]) {
            scope = childScope;
            found = true;
            break;
          }
        }
      } while (found);
      return scope;
    }
    function findVariable(initialScope, nameOrNode) {
      let name = "";
      let scope = initialScope;
      if (typeof nameOrNode === "string") {
        name = nameOrNode;
      } else {
        name = nameOrNode.name;
        scope = getInnermostScope(scope, nameOrNode);
      }
      while (scope != null) {
        const variable = scope.set.get(name);
        if (variable != null) {
          return variable;
        }
        scope = scope.upper;
      }
      return null;
    }
    function negate(f2) {
      return (token) => !f2(token);
    }
    function isPunctuatorTokenWithValue(token, value) {
      return token.type === "Punctuator" && token.value === value;
    }
    function isArrowToken(token) {
      return isPunctuatorTokenWithValue(token, "=>");
    }
    function isCommaToken(token) {
      return isPunctuatorTokenWithValue(token, ",");
    }
    function isSemicolonToken(token) {
      return isPunctuatorTokenWithValue(token, ";");
    }
    function isColonToken(token) {
      return isPunctuatorTokenWithValue(token, ":");
    }
    function isOpeningParenToken(token) {
      return isPunctuatorTokenWithValue(token, "(");
    }
    function isClosingParenToken(token) {
      return isPunctuatorTokenWithValue(token, ")");
    }
    function isOpeningBracketToken(token) {
      return isPunctuatorTokenWithValue(token, "[");
    }
    function isClosingBracketToken(token) {
      return isPunctuatorTokenWithValue(token, "]");
    }
    function isOpeningBraceToken(token) {
      return isPunctuatorTokenWithValue(token, "{");
    }
    function isClosingBraceToken(token) {
      return isPunctuatorTokenWithValue(token, "}");
    }
    function isCommentToken(token) {
      return ["Block", "Line", "Shebang"].includes(token.type);
    }
    const isNotArrowToken = negate(isArrowToken);
    const isNotCommaToken = negate(isCommaToken);
    const isNotSemicolonToken = negate(isSemicolonToken);
    const isNotColonToken = negate(isColonToken);
    const isNotOpeningParenToken = negate(isOpeningParenToken);
    const isNotClosingParenToken = negate(isClosingParenToken);
    const isNotOpeningBracketToken = negate(isOpeningBracketToken);
    const isNotClosingBracketToken = negate(isClosingBracketToken);
    const isNotOpeningBraceToken = negate(isOpeningBraceToken);
    const isNotClosingBraceToken = negate(isClosingBraceToken);
    const isNotCommentToken = negate(isCommentToken);
    function getOpeningParenOfParams(node2, sourceCode2) {
      return node2.id ? (
        /** @type {Token} */
        sourceCode2.getTokenAfter(node2.id, isOpeningParenToken)
      ) : (
        /** @type {Token} */
        sourceCode2.getFirstToken(node2, isOpeningParenToken)
      );
    }
    function getFunctionHeadLocation(node2, sourceCode2) {
      const parent = (
        /** @type {RuleNode} */
        node2.parent
      );
      let start = null;
      let end = null;
      if (node2.type === "ArrowFunctionExpression") {
        const arrowToken = (
          /** @type {Token} */
          sourceCode2.getTokenBefore(node2.body, isArrowToken)
        );
        start = arrowToken.loc.start;
        end = arrowToken.loc.end;
      } else if (parent.type === "Property" || parent.type === "MethodDefinition" || parent.type === "PropertyDefinition") {
        start = /** @type {SourceLocation} */
        parent.loc.start;
        end = getOpeningParenOfParams(node2, sourceCode2).loc.start;
      } else {
        start = /** @type {SourceLocation} */
        node2.loc.start;
        end = getOpeningParenOfParams(node2, sourceCode2).loc.start;
      }
      return {
        start: { ...start },
        end: { ...end }
      };
    }
    const globalObject = typeof globalThis !== "undefined" ? globalThis : (
      // @ts-ignore
      typeof self !== "undefined" ? (
        // @ts-ignore
        self
      ) : (
        // @ts-ignore
        typeof window !== "undefined" ? (
          // @ts-ignore
          window
        ) : typeof global$1 !== "undefined" ? global$1 : {}
      )
    );
    const builtinNames = Object.freeze(
      /* @__PURE__ */ new Set([
        "Array",
        "ArrayBuffer",
        "BigInt",
        "BigInt64Array",
        "BigUint64Array",
        "Boolean",
        "DataView",
        "Date",
        "decodeURI",
        "decodeURIComponent",
        "encodeURI",
        "encodeURIComponent",
        "escape",
        "Float32Array",
        "Float64Array",
        "Function",
        "Infinity",
        "Int16Array",
        "Int32Array",
        "Int8Array",
        "isFinite",
        "isNaN",
        "isPrototypeOf",
        "JSON",
        "Map",
        "Math",
        "NaN",
        "Number",
        "Object",
        "parseFloat",
        "parseInt",
        "Promise",
        "Proxy",
        "Reflect",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "Uint16Array",
        "Uint32Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "undefined",
        "unescape",
        "WeakMap",
        "WeakSet"
      ])
    );
    const callAllowed = new Set(
      [
        Array.isArray,
        Array.of,
        Array.prototype.at,
        Array.prototype.concat,
        Array.prototype.entries,
        Array.prototype.every,
        Array.prototype.filter,
        Array.prototype.find,
        Array.prototype.findIndex,
        Array.prototype.flat,
        Array.prototype.includes,
        Array.prototype.indexOf,
        Array.prototype.join,
        Array.prototype.keys,
        Array.prototype.lastIndexOf,
        Array.prototype.slice,
        Array.prototype.some,
        Array.prototype.toString,
        Array.prototype.values,
        typeof BigInt === "function" ? BigInt : void 0,
        Boolean,
        Date,
        Date.parse,
        decodeURI,
        decodeURIComponent,
        encodeURI,
        encodeURIComponent,
        escape,
        isFinite,
        isNaN,
        // @ts-ignore
        isPrototypeOf,
        Map,
        Map.prototype.entries,
        Map.prototype.get,
        Map.prototype.has,
        Map.prototype.keys,
        Map.prototype.values,
        .../** @type {(keyof typeof Math)[]} */
        Object.getOwnPropertyNames(Math).filter((k) => k !== "random").map((k) => Math[k]).filter((f2) => typeof f2 === "function"),
        Number,
        Number.isFinite,
        Number.isNaN,
        Number.parseFloat,
        Number.parseInt,
        Number.prototype.toExponential,
        Number.prototype.toFixed,
        Number.prototype.toPrecision,
        Number.prototype.toString,
        Object,
        Object.entries,
        Object.is,
        Object.isExtensible,
        Object.isFrozen,
        Object.isSealed,
        Object.keys,
        Object.values,
        parseFloat,
        parseInt,
        RegExp,
        Set,
        Set.prototype.entries,
        Set.prototype.has,
        Set.prototype.keys,
        Set.prototype.values,
        String,
        String.fromCharCode,
        String.fromCodePoint,
        String.raw,
        String.prototype.at,
        String.prototype.charAt,
        String.prototype.charCodeAt,
        String.prototype.codePointAt,
        String.prototype.concat,
        String.prototype.endsWith,
        String.prototype.includes,
        String.prototype.indexOf,
        String.prototype.lastIndexOf,
        String.prototype.normalize,
        String.prototype.padEnd,
        String.prototype.padStart,
        String.prototype.slice,
        String.prototype.startsWith,
        String.prototype.substr,
        String.prototype.substring,
        String.prototype.toLowerCase,
        String.prototype.toString,
        String.prototype.toUpperCase,
        String.prototype.trim,
        String.prototype.trimEnd,
        String.prototype.trimLeft,
        String.prototype.trimRight,
        String.prototype.trimStart,
        Symbol.for,
        Symbol.keyFor,
        unescape
      ].filter((f2) => typeof f2 === "function")
    );
    const callPassThrough = /* @__PURE__ */ new Set([
      Object.freeze,
      Object.preventExtensions,
      Object.seal
    ]);
    const getterAllowed = [
      [Map, /* @__PURE__ */ new Set(["size"])],
      [
        RegExp,
        /* @__PURE__ */ new Set([
          "dotAll",
          "flags",
          "global",
          "hasIndices",
          "ignoreCase",
          "multiline",
          "source",
          "sticky",
          "unicode"
        ])
      ],
      [Set, /* @__PURE__ */ new Set(["size"])]
    ];
    function getPropertyDescriptor(object, name) {
      let x2 = object;
      while ((typeof x2 === "object" || typeof x2 === "function") && x2 !== null) {
        const d2 = Object.getOwnPropertyDescriptor(x2, name);
        if (d2) {
          return d2;
        }
        x2 = Object.getPrototypeOf(x2);
      }
      return null;
    }
    function isGetter(object, name) {
      const d2 = getPropertyDescriptor(object, name);
      return d2 != null && d2.get != null;
    }
    function getElementValues(nodeList, initialScope) {
      const valueList = [];
      for (let i2 = 0; i2 < nodeList.length; ++i2) {
        const elementNode = nodeList[i2];
        if (elementNode == null) {
          valueList.length = i2 + 1;
        } else if (elementNode.type === "SpreadElement") {
          const argument = getStaticValueR(elementNode.argument, initialScope);
          if (argument == null) {
            return null;
          }
          valueList.push(.../** @type {Iterable<any>} */
          argument.value);
        } else {
          const element = getStaticValueR(elementNode, initialScope);
          if (element == null) {
            return null;
          }
          valueList.push(element.value);
        }
      }
      return valueList;
    }
    function isBuiltinGlobal(variable) {
      return variable != null && variable.defs.length === 0 && builtinNames.has(variable.name) && variable.name in globalObject;
    }
    function canBeConsideredConst(variable) {
      if (variable.defs.length !== 1) {
        return false;
      }
      const def = variable.defs[0];
      return Boolean(
        def.parent && def.type === "Variable" && (def.parent.kind === "const" || isEffectivelyConst(variable))
      );
    }
    function isEffectivelyConst(variable) {
      const refs = variable.references;
      const inits = refs.filter((r2) => r2.init).length;
      const reads = refs.filter((r2) => r2.isReadOnly()).length;
      if (inits === 1 && reads + inits === refs.length) {
        return true;
      }
      return false;
    }
    function hasMutationInProperty(variable, initialScope) {
      for (const ref2 of variable.references) {
        let node2 = (
          /** @type {TSESTreeNode} */
          ref2.identifier
        );
        while (node2 && node2.parent && node2.parent.type === "MemberExpression") {
          node2 = node2.parent;
        }
        if (!node2 || !node2.parent) {
          continue;
        }
        if (node2.parent.type === "AssignmentExpression" && node2.parent.left === node2 || node2.parent.type === "UpdateExpression" && node2.parent.argument === node2) {
          return true;
        }
        if (node2.parent.type === "CallExpression" && node2.parent.callee === node2 && node2.type === "MemberExpression") {
          const methodName = getStaticPropertyNameValue(node2, initialScope);
          if (isNameOfMutationArrayMethod(methodName)) {
            return true;
          }
        }
      }
      return false;
      function isNameOfMutationArrayMethod(methodName) {
        if (methodName == null || methodName.value == null) {
          return false;
        }
        const name = methodName.value;
        return name === "copyWithin" || name === "fill" || name === "pop" || name === "push" || name === "reverse" || name === "shift" || name === "sort" || name === "splice" || name === "unshift";
      }
    }
    const operations = Object.freeze({
      ArrayExpression(node2, initialScope) {
        const elements = getElementValues(node2.elements, initialScope);
        return elements != null ? { value: elements } : null;
      },
      AssignmentExpression(node2, initialScope) {
        if (node2.operator === "=") {
          return getStaticValueR(node2.right, initialScope);
        }
        return null;
      },
      //eslint-disable-next-line complexity
      BinaryExpression(node2, initialScope) {
        if (node2.operator === "in" || node2.operator === "instanceof") {
          return null;
        }
        const left = getStaticValueR(node2.left, initialScope);
        const right = getStaticValueR(node2.right, initialScope);
        if (left != null && right != null) {
          switch (node2.operator) {
            case "==":
              return { value: left.value == right.value };
            //eslint-disable-line eqeqeq
            case "!=":
              return { value: left.value != right.value };
            //eslint-disable-line eqeqeq
            case "===":
              return { value: left.value === right.value };
            case "!==":
              return { value: left.value !== right.value };
            case "<":
              return {
                value: (
                  /** @type {any} */
                  left.value < /** @type {any} */
                  right.value
                )
              };
            case "<=":
              return {
                value: (
                  /** @type {any} */
                  left.value <= /** @type {any} */
                  right.value
                )
              };
            case ">":
              return {
                value: (
                  /** @type {any} */
                  left.value > /** @type {any} */
                  right.value
                )
              };
            case ">=":
              return {
                value: (
                  /** @type {any} */
                  left.value >= /** @type {any} */
                  right.value
                )
              };
            case "<<":
              return {
                value: (
                  /** @type {any} */
                  left.value << /** @type {any} */
                  right.value
                )
              };
            case ">>":
              return {
                value: (
                  /** @type {any} */
                  left.value >> /** @type {any} */
                  right.value
                )
              };
            case ">>>":
              return {
                value: (
                  /** @type {any} */
                  left.value >>> /** @type {any} */
                  right.value
                )
              };
            case "+":
              return {
                value: (
                  /** @type {any} */
                  left.value + /** @type {any} */
                  right.value
                )
              };
            case "-":
              return {
                value: (
                  /** @type {any} */
                  left.value - /** @type {any} */
                  right.value
                )
              };
            case "*":
              return {
                value: (
                  /** @type {any} */
                  left.value * /** @type {any} */
                  right.value
                )
              };
            case "/":
              return {
                value: (
                  /** @type {any} */
                  left.value / /** @type {any} */
                  right.value
                )
              };
            case "%":
              return {
                value: (
                  /** @type {any} */
                  left.value % /** @type {any} */
                  right.value
                )
              };
            case "**":
              return {
                value: (
                  /** @type {any} */
                  left.value ** /** @type {any} */
                  right.value
                )
              };
            case "|":
              return {
                value: (
                  /** @type {any} */
                  left.value | /** @type {any} */
                  right.value
                )
              };
            case "^":
              return {
                value: (
                  /** @type {any} */
                  left.value ^ /** @type {any} */
                  right.value
                )
              };
            case "&":
              return {
                value: (
                  /** @type {any} */
                  left.value & /** @type {any} */
                  right.value
                )
              };
          }
        }
        return null;
      },
      CallExpression(node2, initialScope) {
        const calleeNode = node2.callee;
        const args = getElementValues(node2.arguments, initialScope);
        if (args != null) {
          if (calleeNode.type === "MemberExpression") {
            if (calleeNode.property.type === "PrivateIdentifier") {
              return null;
            }
            const object = getStaticValueR(calleeNode.object, initialScope);
            if (object != null) {
              if (object.value == null && (object.optional || node2.optional)) {
                return { value: void 0, optional: true };
              }
              const property = getStaticPropertyNameValue(
                calleeNode,
                initialScope
              );
              if (property != null) {
                const receiver = (
                  /** @type {Record<PropertyKey, (...args: any[]) => any>} */
                  object.value
                );
                const methodName = (
                  /** @type {PropertyKey} */
                  property.value
                );
                if (callAllowed.has(receiver[methodName])) {
                  return {
                    value: receiver[methodName](...args)
                  };
                }
                if (callPassThrough.has(receiver[methodName])) {
                  return { value: args[0] };
                }
              }
            }
          } else {
            const callee = getStaticValueR(calleeNode, initialScope);
            if (callee != null) {
              if (callee.value == null && node2.optional) {
                return { value: void 0, optional: true };
              }
              const func = (
                /** @type {(...args: any[]) => any} */
                callee.value
              );
              if (callAllowed.has(func)) {
                return { value: func(...args) };
              }
              if (callPassThrough.has(func)) {
                return { value: args[0] };
              }
            }
          }
        }
        return null;
      },
      ConditionalExpression(node2, initialScope) {
        const test = getStaticValueR(node2.test, initialScope);
        if (test != null) {
          return test.value ? getStaticValueR(node2.consequent, initialScope) : getStaticValueR(node2.alternate, initialScope);
        }
        return null;
      },
      ExpressionStatement(node2, initialScope) {
        return getStaticValueR(node2.expression, initialScope);
      },
      Identifier(node2, initialScope) {
        if (initialScope != null) {
          const variable = findVariable(initialScope, node2);
          if (variable != null) {
            if (isBuiltinGlobal(variable)) {
              return { value: globalObject[variable.name] };
            }
            if (canBeConsideredConst(variable)) {
              const def = variable.defs[0];
              if (
                // TODO(mysticatea): don't support destructuring here.
                def.node.id.type === "Identifier"
              ) {
                const init2 = getStaticValueR(
                  def.node.init,
                  initialScope
                );
                if (init2 && typeof init2.value === "object" && init2.value !== null) {
                  if (hasMutationInProperty(variable, initialScope)) {
                    return null;
                  }
                }
                return init2;
              }
            }
          }
        }
        return null;
      },
      Literal(node2) {
        const literal = (
          /** @type {Partial<Literal> & Partial<RegExpLiteral> & Partial<BigIntLiteral>} */
          node2
        );
        if ((literal.regex != null || literal.bigint != null) && literal.value == null) {
          return null;
        }
        return { value: literal.value };
      },
      LogicalExpression(node2, initialScope) {
        const left = getStaticValueR(node2.left, initialScope);
        if (left != null) {
          if (node2.operator === "||" && Boolean(left.value) === true || node2.operator === "&&" && Boolean(left.value) === false || node2.operator === "??" && left.value != null) {
            return left;
          }
          const right = getStaticValueR(node2.right, initialScope);
          if (right != null) {
            return right;
          }
        }
        return null;
      },
      MemberExpression(node2, initialScope) {
        if (node2.property.type === "PrivateIdentifier") {
          return null;
        }
        const object = getStaticValueR(node2.object, initialScope);
        if (object != null) {
          if (object.value == null && (object.optional || node2.optional)) {
            return { value: void 0, optional: true };
          }
          const property = getStaticPropertyNameValue(node2, initialScope);
          if (property != null) {
            if (!isGetter(
              /** @type {object} */
              object.value,
              /** @type {PropertyKey} */
              property.value
            )) {
              return {
                value: (
                  /** @type {Record<PropertyKey, unknown>} */
                  object.value[
                    /** @type {PropertyKey} */
                    property.value
                  ]
                )
              };
            }
            for (const [classFn, allowed] of getterAllowed) {
              if (object.value instanceof classFn && allowed.has(
                /** @type {string} */
                property.value
              )) {
                return {
                  value: (
                    /** @type {Record<PropertyKey, unknown>} */
                    object.value[
                      /** @type {PropertyKey} */
                      property.value
                    ]
                  )
                };
              }
            }
          }
        }
        return null;
      },
      ChainExpression(node2, initialScope) {
        const expression = getStaticValueR(node2.expression, initialScope);
        if (expression != null) {
          return { value: expression.value };
        }
        return null;
      },
      NewExpression(node2, initialScope) {
        const callee = getStaticValueR(node2.callee, initialScope);
        const args = getElementValues(node2.arguments, initialScope);
        if (callee != null && args != null) {
          const Func2 = (
            /** @type {new (...args: any[]) => any} */
            callee.value
          );
          if (callAllowed.has(Func2)) {
            return { value: new Func2(...args) };
          }
        }
        return null;
      },
      ObjectExpression(node2, initialScope) {
        const object = {};
        for (const propertyNode of node2.properties) {
          if (propertyNode.type === "Property") {
            if (propertyNode.kind !== "init") {
              return null;
            }
            const key = getStaticPropertyNameValue(
              propertyNode,
              initialScope
            );
            const value = getStaticValueR(propertyNode.value, initialScope);
            if (key == null || value == null) {
              return null;
            }
            object[
              /** @type {PropertyKey} */
              key.value
            ] = value.value;
          } else if (propertyNode.type === "SpreadElement" || // @ts-expect-error -- Backward compatibility
          propertyNode.type === "ExperimentalSpreadProperty") {
            const argument = getStaticValueR(
              propertyNode.argument,
              initialScope
            );
            if (argument == null) {
              return null;
            }
            Object.assign(object, argument.value);
          } else {
            return null;
          }
        }
        return { value: object };
      },
      SequenceExpression(node2, initialScope) {
        const last = node2.expressions[node2.expressions.length - 1];
        return getStaticValueR(last, initialScope);
      },
      TaggedTemplateExpression(node2, initialScope) {
        const tag = getStaticValueR(node2.tag, initialScope);
        const expressions = getElementValues(
          node2.quasi.expressions,
          initialScope
        );
        if (tag != null && expressions != null) {
          const func = (
            /** @type {(...args: any[]) => any} */
            tag.value
          );
          const strings = node2.quasi.quasis.map((q) => q.value.cooked);
          strings.raw = node2.quasi.quasis.map((q) => q.value.raw);
          if (func === String.raw) {
            return { value: func(strings, ...expressions) };
          }
        }
        return null;
      },
      TemplateLiteral(node2, initialScope) {
        const expressions = getElementValues(node2.expressions, initialScope);
        if (expressions != null) {
          let value = node2.quasis[0].value.cooked;
          for (let i2 = 0; i2 < expressions.length; ++i2) {
            value += expressions[i2];
            value += /** @type {string} */
            node2.quasis[i2 + 1].value.cooked;
          }
          return { value };
        }
        return null;
      },
      UnaryExpression(node2, initialScope) {
        if (node2.operator === "delete") {
          return null;
        }
        if (node2.operator === "void") {
          return { value: void 0 };
        }
        const arg = getStaticValueR(node2.argument, initialScope);
        if (arg != null) {
          switch (node2.operator) {
            case "-":
              return { value: -/** @type {any} */
              arg.value };
            case "+":
              return { value: +/** @type {any} */
              arg.value };
            //eslint-disable-line no-implicit-coercion
            case "!":
              return { value: !arg.value };
            case "~":
              return { value: ~/** @type {any} */
              arg.value };
            case "typeof":
              return { value: typeof arg.value };
          }
        }
        return null;
      },
      TSAsExpression(node2, initialScope) {
        return getStaticValueR(node2.expression, initialScope);
      },
      TSSatisfiesExpression(node2, initialScope) {
        return getStaticValueR(node2.expression, initialScope);
      },
      TSTypeAssertion(node2, initialScope) {
        return getStaticValueR(node2.expression, initialScope);
      },
      TSNonNullExpression(node2, initialScope) {
        return getStaticValueR(node2.expression, initialScope);
      },
      TSInstantiationExpression(node2, initialScope) {
        return getStaticValueR(node2.expression, initialScope);
      }
    });
    function getStaticValueR(node2, initialScope) {
      if (node2 != null && Object.hasOwnProperty.call(operations, node2.type)) {
        return (
          /** @type {VisitorCallback<any>} */
          operations[node2.type](
            /** @type {TSESTreeNode} */
            node2,
            initialScope
          )
        );
      }
      return null;
    }
    function getStaticPropertyNameValue(node2, initialScope) {
      const nameNode = node2.type === "Property" ? node2.key : node2.property;
      if (node2.computed) {
        return getStaticValueR(nameNode, initialScope);
      }
      if (nameNode.type === "Identifier") {
        return { value: nameNode.name };
      }
      if (nameNode.type === "Literal") {
        if (
          /** @type {Partial<BigIntLiteral>} */
          nameNode.bigint
        ) {
          return { value: (
            /** @type {BigIntLiteral} */
            nameNode.bigint
          ) };
        }
        return { value: String(nameNode.value) };
      }
      return null;
    }
    function getStaticValue(node2, initialScope = null) {
      try {
        return getStaticValueR(node2, initialScope);
      } catch (_error) {
        return null;
      }
    }
    function getStringIfConstant(node2, initialScope = null) {
      if (node2 && node2.type === "Literal" && node2.value === null) {
        const literal = (
          /** @type {Partial<SimpleLiteral> & Partial<RegExpLiteral> & Partial<BigIntLiteral>} */
          node2
        );
        if (literal.regex) {
          return `/${literal.regex.pattern}/${literal.regex.flags}`;
        }
        if (literal.bigint) {
          return literal.bigint;
        }
      }
      const evaluated = getStaticValue(node2, initialScope);
      if (evaluated) {
        try {
          return String(evaluated.value);
        } catch {
        }
      }
      return null;
    }
    function getPropertyName(node2, initialScope) {
      switch (node2.type) {
        case "MemberExpression":
          if (node2.computed) {
            return getStringIfConstant(node2.property, initialScope);
          }
          if (node2.property.type === "PrivateIdentifier") {
            return null;
          }
          return (
            /** @type {Partial<Identifier>} */
            node2.property.name
          );
        case "Property":
        case "MethodDefinition":
        case "PropertyDefinition":
          if (node2.computed) {
            return getStringIfConstant(node2.key, initialScope);
          }
          if (node2.key.type === "Literal") {
            return String(node2.key.value);
          }
          if (node2.key.type === "PrivateIdentifier") {
            return null;
          }
          return (
            /** @type {Partial<Identifier>} */
            node2.key.name
          );
      }
      return null;
    }
    function getFunctionNameWithKind(node2, sourceCode2) {
      const parent = (
        /** @type {RuleNode} */
        node2.parent
      );
      const tokens = [];
      const isObjectMethod = parent.type === "Property" && parent.value === node2;
      const isClassMethod = parent.type === "MethodDefinition" && parent.value === node2;
      const isClassFieldMethod = parent.type === "PropertyDefinition" && parent.value === node2;
      if (isClassMethod || isClassFieldMethod) {
        if (parent.static) {
          tokens.push("static");
        }
        if (parent.key.type === "PrivateIdentifier") {
          tokens.push("private");
        }
      }
      if (node2.async) {
        tokens.push("async");
      }
      if (node2.generator) {
        tokens.push("generator");
      }
      if (isObjectMethod || isClassMethod) {
        if (parent.kind === "constructor") {
          return "constructor";
        }
        if (parent.kind === "get") {
          tokens.push("getter");
        } else if (parent.kind === "set") {
          tokens.push("setter");
        } else {
          tokens.push("method");
        }
      } else if (isClassFieldMethod) {
        tokens.push("method");
      } else {
        if (node2.type === "ArrowFunctionExpression") {
          tokens.push("arrow");
        }
        tokens.push("function");
      }
      if (isObjectMethod || isClassMethod || isClassFieldMethod) {
        if (parent.key.type === "PrivateIdentifier") {
          tokens.push(`#${parent.key.name}`);
        } else {
          const name = getPropertyName(parent);
          if (name) {
            tokens.push(`'${name}'`);
          } else if (sourceCode2) {
            const keyText = sourceCode2.getText(parent.key);
            if (!keyText.includes("\n")) {
              tokens.push(`[${keyText}]`);
            }
          }
        }
      } else if (hasId(node2)) {
        tokens.push(`'${node2.id.name}'`);
      } else if (parent.type === "VariableDeclarator" && parent.id && parent.id.type === "Identifier") {
        tokens.push(`'${parent.id.name}'`);
      } else if ((parent.type === "AssignmentExpression" || parent.type === "AssignmentPattern") && parent.left && parent.left.type === "Identifier") {
        tokens.push(`'${parent.left.name}'`);
      } else if (parent.type === "ExportDefaultDeclaration" && parent.declaration === node2) {
        tokens.push("'default'");
      }
      return tokens.join(" ");
    }
    function hasId(node2) {
      return Boolean(
        /** @type {Partial<FunctionDeclaration | FunctionExpression>} */
        node2.id
      );
    }
    const typeConversionBinaryOps = Object.freeze(
      /* @__PURE__ */ new Set([
        "==",
        "!=",
        "<",
        "<=",
        ">",
        ">=",
        "<<",
        ">>",
        ">>>",
        "+",
        "-",
        "*",
        "/",
        "%",
        "|",
        "^",
        "&",
        "in"
      ])
    );
    const typeConversionUnaryOps = Object.freeze(/* @__PURE__ */ new Set(["-", "+", "!", "~"]));
    function isNode(x2) {
      return x2 !== null && typeof x2 === "object" && typeof x2.type === "string";
    }
    const visitor = Object.freeze(
      Object.assign(/* @__PURE__ */ Object.create(null), {
        /**
         * @param {Node} node
         * @param {HasSideEffectOptions} options
         * @param {Record<string, string[]>} visitorKeys
         */
        $visit(node2, options, visitorKeys) {
          const { type: type2 } = node2;
          if (typeof /** @type {any} */
          this[type2] === "function") {
            return (
              /** @type {any} */
              this[type2](
                node2,
                options,
                visitorKeys
              )
            );
          }
          return this.$visitChildren(node2, options, visitorKeys);
        },
        /**
         * @param {Node} node
         * @param {HasSideEffectOptions} options
         * @param {Record<string, string[]>} visitorKeys
         */
        $visitChildren(node2, options, visitorKeys) {
          const { type: type2 } = node2;
          for (
            const key of
            /** @type {(keyof Node)[]} */
            visitorKeys[type2] || eslintVisitorKeys2.getKeys(node2)
          ) {
            const value = node2[key];
            if (Array.isArray(value)) {
              for (const element of value) {
                if (isNode(element) && this.$visit(element, options, visitorKeys)) {
                  return true;
                }
              }
            } else if (isNode(value) && this.$visit(value, options, visitorKeys)) {
              return true;
            }
          }
          return false;
        },
        ArrowFunctionExpression() {
          return false;
        },
        AssignmentExpression() {
          return true;
        },
        AwaitExpression() {
          return true;
        },
        /**
         * @param {BinaryExpression} node
         * @param {HasSideEffectOptions} options
         * @param {Record<string, string[]>} visitorKeys
         */
        BinaryExpression(node2, options, visitorKeys) {
          if (options.considerImplicitTypeConversion && typeConversionBinaryOps.has(node2.operator) && (node2.left.type !== "Literal" || node2.right.type !== "Literal")) {
            return true;
          }
          return this.$visitChildren(node2, options, visitorKeys);
        },
        CallExpression() {
          return true;
        },
        FunctionExpression() {
          return false;
        },
        ImportExpression() {
          return true;
        },
        /**
         * @param {MemberExpression} node
         * @param {HasSideEffectOptions} options
         * @param {Record<string, string[]>} visitorKeys
         */
        MemberExpression(node2, options, visitorKeys) {
          if (options.considerGetters) {
            return true;
          }
          if (options.considerImplicitTypeConversion && node2.computed && node2.property.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node2, options, visitorKeys);
        },
        /**
         * @param {MethodDefinition} node
         * @param {HasSideEffectOptions} options
         * @param {Record<string, string[]>} visitorKeys
         */
        MethodDefinition(node2, options, visitorKeys) {
          if (options.considerImplicitTypeConversion && node2.computed && node2.key.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node2, options, visitorKeys);
        },
        NewExpression() {
          return true;
        },
        /**
         * @param {Property} node
         * @param {HasSideEffectOptions} options
         * @param {Record<string, string[]>} visitorKeys
         */
        Property(node2, options, visitorKeys) {
          if (options.considerImplicitTypeConversion && node2.computed && node2.key.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node2, options, visitorKeys);
        },
        /**
         * @param {PropertyDefinition} node
         * @param {HasSideEffectOptions} options
         * @param {Record<string, string[]>} visitorKeys
         */
        PropertyDefinition(node2, options, visitorKeys) {
          if (options.considerImplicitTypeConversion && node2.computed && node2.key.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node2, options, visitorKeys);
        },
        /**
         * @param {UnaryExpression} node
         * @param {HasSideEffectOptions} options
         * @param {Record<string, string[]>} visitorKeys
         */
        UnaryExpression(node2, options, visitorKeys) {
          if (node2.operator === "delete") {
            return true;
          }
          if (options.considerImplicitTypeConversion && typeConversionUnaryOps.has(node2.operator) && node2.argument.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node2, options, visitorKeys);
        },
        UpdateExpression() {
          return true;
        },
        YieldExpression() {
          return true;
        }
      })
    );
    function hasSideEffect(node2, sourceCode2, options = {}) {
      const { considerGetters = false, considerImplicitTypeConversion = false } = options;
      return visitor.$visit(
        node2,
        { considerGetters, considerImplicitTypeConversion },
        sourceCode2.visitorKeys || eslintVisitorKeys2.KEYS
      );
    }
    function getParentSyntaxParen(node2, sourceCode2) {
      const parent = (
        /** @type {RuleNode} */
        node2.parent
      );
      switch (parent.type) {
        case "CallExpression":
        case "NewExpression":
          if (parent.arguments.length === 1 && parent.arguments[0] === node2) {
            return sourceCode2.getTokenAfter(
              /** @type {RuleNode} */
              /** @type {unknown} */
              /** @type {TSNewExpression | TSCallExpression} */
              parent.typeParameters || parent.callee,
              isOpeningParenToken
            );
          }
          return null;
        case "DoWhileStatement":
          if (parent.test === node2) {
            return sourceCode2.getTokenAfter(
              parent.body,
              isOpeningParenToken
            );
          }
          return null;
        case "IfStatement":
        case "WhileStatement":
          if (parent.test === node2) {
            return sourceCode2.getFirstToken(parent, 1);
          }
          return null;
        case "ImportExpression":
          if (parent.source === node2) {
            return sourceCode2.getFirstToken(parent, 1);
          }
          return null;
        case "SwitchStatement":
          if (parent.discriminant === node2) {
            return sourceCode2.getFirstToken(parent, 1);
          }
          return null;
        case "WithStatement":
          if (parent.object === node2) {
            return sourceCode2.getFirstToken(parent, 1);
          }
          return null;
        default:
          return null;
      }
    }
    function isParenthesized(timesOrNode, nodeOrSourceCode, optionalSourceCode) {
      let times, node2, sourceCode2, maybeLeftParen, maybeRightParen;
      if (typeof timesOrNode === "number") {
        times = timesOrNode | 0;
        node2 = /** @type {RuleNode} */
        nodeOrSourceCode;
        sourceCode2 = /** @type {SourceCode} */
        optionalSourceCode;
        if (!(times >= 1)) {
          throw new TypeError("'times' should be a positive integer.");
        }
      } else {
        times = 1;
        node2 = /** @type {RuleNode} */
        timesOrNode;
        sourceCode2 = /** @type {SourceCode} */
        nodeOrSourceCode;
      }
      if (node2 == null || // `Program` can't be parenthesized
      node2.parent == null || // `CatchClause.param` can't be parenthesized, example `try {} catch (error) {}`
      node2.parent.type === "CatchClause" && node2.parent.param === node2) {
        return false;
      }
      maybeLeftParen = maybeRightParen = node2;
      do {
        maybeLeftParen = sourceCode2.getTokenBefore(maybeLeftParen);
        maybeRightParen = sourceCode2.getTokenAfter(maybeRightParen);
      } while (maybeLeftParen != null && maybeRightParen != null && isOpeningParenToken(maybeLeftParen) && isClosingParenToken(maybeRightParen) && // Avoid false positive such as `if (a) {}`
      maybeLeftParen !== getParentSyntaxParen(node2, sourceCode2) && --times > 0);
      return times === 0;
    }
    const placeholder = /\$(?:[$&`']|[1-9][0-9]?)/gu;
    const internal = /* @__PURE__ */ new WeakMap();
    function isEscaped(str, index2) {
      let escaped = false;
      for (let i2 = index2 - 1; i2 >= 0 && str.charCodeAt(i2) === 92; --i2) {
        escaped = !escaped;
      }
      return escaped;
    }
    function replaceS(matcher, str, replacement) {
      const chunks = [];
      let index2 = 0;
      function replacer(key, match) {
        switch (key) {
          case "$$":
            return "$";
          case "$&":
            return match[0];
          case "$`":
            return str.slice(0, match.index);
          case "$'":
            return str.slice(match.index + match[0].length);
          default: {
            const i2 = key.slice(1);
            if (i2 in match) {
              return match[
                /** @type {any} */
                i2
              ];
            }
            return key;
          }
        }
      }
      for (const match of matcher.execAll(str)) {
        chunks.push(str.slice(index2, match.index));
        chunks.push(
          replacement.replace(placeholder, (key) => replacer(key, match))
        );
        index2 = match.index + match[0].length;
      }
      chunks.push(str.slice(index2));
      return chunks.join("");
    }
    function replaceF(matcher, str, replace) {
      const chunks = [];
      let index2 = 0;
      for (const match of matcher.execAll(str)) {
        chunks.push(str.slice(index2, match.index));
        chunks.push(
          String(
            replace(
              .../** @type {[string, ...string[]]} */
              /** @type {string[]} */
              match,
              match.index,
              match.input
            )
          )
        );
        index2 = match.index + match[0].length;
      }
      chunks.push(str.slice(index2));
      return chunks.join("");
    }
    class PatternMatcher {
      /**
       * Initialize this matcher.
       * @param {RegExp} pattern The pattern to match.
       * @param {{escaped?:boolean}} [options] The options.
       */
      constructor(pattern2, options = {}) {
        const { escaped = false } = options;
        if (!(pattern2 instanceof RegExp)) {
          throw new TypeError("'pattern' should be a RegExp instance.");
        }
        if (!pattern2.flags.includes("g")) {
          throw new Error("'pattern' should contains 'g' flag.");
        }
        internal.set(this, {
          pattern: new RegExp(pattern2.source, pattern2.flags),
          escaped: Boolean(escaped)
        });
      }
      /**
       * Find the pattern in a given string.
       * @param {string} str The string to find.
       * @returns {IterableIterator<RegExpExecArray>} The iterator which iterate the matched information.
       */
      *execAll(str) {
        const { pattern: pattern2, escaped } = (
          /** @type {{pattern:RegExp,escaped:boolean}} */
          internal.get(this)
        );
        let match = null;
        let lastIndex = 0;
        pattern2.lastIndex = 0;
        while ((match = pattern2.exec(str)) != null) {
          if (escaped || !isEscaped(str, match.index)) {
            lastIndex = pattern2.lastIndex;
            yield match;
            pattern2.lastIndex = lastIndex;
          }
        }
      }
      /**
       * Check whether the pattern is found in a given string.
       * @param {string} str The string to check.
       * @returns {boolean} `true` if the pattern was found in the string.
       */
      test(str) {
        const it = this.execAll(str);
        const ret = it.next();
        return !ret.done;
      }
      /**
       * Replace a given string.
       * @param {string} str The string to be replaced.
       * @param {(string|((...strs:string[])=>string))} replacer The string or function to replace. This is the same as the 2nd argument of `String.prototype.replace`.
       * @returns {string} The replaced string.
       */
      [Symbol.replace](str, replacer) {
        return typeof replacer === "function" ? replaceF(this, String(str), replacer) : replaceS(this, String(str), String(replacer));
      }
    }
    const IMPORT_TYPE = /^(?:Import|Export(?:All|Default|Named))Declaration$/u;
    function isHasSource(node2) {
      return IMPORT_TYPE.test(node2.type) && /** @type {ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration} */
      node2.source != null;
    }
    const has = (
      /** @type {<T>(traceMap: TraceMap<unknown>, v: T) => v is (string extends T ? string : T)} */
      Function.call.bind(Object.hasOwnProperty)
    );
    const READ = Symbol("read");
    const CALL = Symbol("call");
    const CONSTRUCT = Symbol("construct");
    const ESM = Symbol("esm");
    const requireCall = { require: { [CALL]: true } };
    function isModifiedGlobal(variable) {
      return variable == null || variable.defs.length !== 0 || variable.references.some((r2) => r2.isWrite());
    }
    function isPassThrough(node2) {
      const parent = (
        /** @type {TSESTreeNode} */
        node2.parent
      );
      if (parent) {
        switch (parent.type) {
          case "ConditionalExpression":
            return parent.consequent === node2 || parent.alternate === node2;
          case "LogicalExpression":
            return true;
          case "SequenceExpression":
            return parent.expressions[parent.expressions.length - 1] === node2;
          case "ChainExpression":
            return true;
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSNonNullExpression":
          case "TSInstantiationExpression":
            return true;
          default:
            return false;
        }
      }
      return false;
    }
    class ReferenceTracker {
      /**
       * Initialize this tracker.
       * @param {Scope} globalScope The global scope.
       * @param {object} [options] The options.
       * @param {"legacy"|"strict"} [options.mode="strict"] The mode to determine the ImportDeclaration's behavior for CJS modules.
       * @param {string[]} [options.globalObjectNames=["global","globalThis","self","window"]] The variable names for Global Object.
       */
      constructor(globalScope, options = {}) {
        const {
          mode = "strict",
          globalObjectNames = ["global", "globalThis", "self", "window"]
        } = options;
        this.variableStack = [];
        this.globalScope = globalScope;
        this.mode = mode;
        this.globalObjectNames = globalObjectNames.slice(0);
      }
      /**
       * Iterate the references of global variables.
       * @template T
       * @param {TraceMap<T>} traceMap The trace map.
       * @returns {IterableIterator<TrackedReferences<T>>} The iterator to iterate references.
       */
      *iterateGlobalReferences(traceMap) {
        for (const key of Object.keys(traceMap)) {
          const nextTraceMap = traceMap[key];
          const path = [key];
          const variable = this.globalScope.set.get(key);
          if (isModifiedGlobal(variable)) {
            continue;
          }
          yield* this._iterateVariableReferences(
            /** @type {Variable} */
            variable,
            path,
            nextTraceMap,
            true
          );
        }
        for (const key of this.globalObjectNames) {
          const path = [];
          const variable = this.globalScope.set.get(key);
          if (isModifiedGlobal(variable)) {
            continue;
          }
          yield* this._iterateVariableReferences(
            /** @type {Variable} */
            variable,
            path,
            traceMap,
            false
          );
        }
      }
      /**
       * Iterate the references of CommonJS modules.
       * @template T
       * @param {TraceMap<T>} traceMap The trace map.
       * @returns {IterableIterator<TrackedReferences<T>>} The iterator to iterate references.
       */
      *iterateCjsReferences(traceMap) {
        for (const { node: node2 } of this.iterateGlobalReferences(requireCall)) {
          const key = getStringIfConstant(
            /** @type {CallExpression} */
            node2.arguments[0]
          );
          if (key == null || !has(traceMap, key)) {
            continue;
          }
          const nextTraceMap = traceMap[key];
          const path = [key];
          if (nextTraceMap[READ]) {
            yield {
              node: node2,
              path,
              type: READ,
              info: nextTraceMap[READ]
            };
          }
          yield* this._iteratePropertyReferences(
            /** @type {CallExpression} */
            node2,
            path,
            nextTraceMap
          );
        }
      }
      /**
       * Iterate the references of ES modules.
       * @template T
       * @param {TraceMap<T>} traceMap The trace map.
       * @returns {IterableIterator<TrackedReferences<T>>} The iterator to iterate references.
       */
      *iterateEsmReferences(traceMap) {
        const programNode = (
          /** @type {Program} */
          this.globalScope.block
        );
        for (const node2 of programNode.body) {
          if (!isHasSource(node2)) {
            continue;
          }
          const moduleId = (
            /** @type {string} */
            node2.source.value
          );
          if (!has(traceMap, moduleId)) {
            continue;
          }
          const nextTraceMap = traceMap[moduleId];
          const path = [moduleId];
          if (nextTraceMap[READ]) {
            yield {
              // eslint-disable-next-line object-shorthand -- apply type
              node: (
                /** @type {RuleNode} */
                node2
              ),
              path,
              type: READ,
              info: nextTraceMap[READ]
            };
          }
          if (node2.type === "ExportAllDeclaration") {
            for (const key of Object.keys(nextTraceMap)) {
              const exportTraceMap = nextTraceMap[key];
              if (exportTraceMap[READ]) {
                yield {
                  // eslint-disable-next-line object-shorthand -- apply type
                  node: (
                    /** @type {RuleNode} */
                    node2
                  ),
                  path: path.concat(key),
                  type: READ,
                  info: exportTraceMap[READ]
                };
              }
            }
          } else {
            for (const specifier of node2.specifiers) {
              const esm = has(nextTraceMap, ESM);
              const it = this._iterateImportReferences(
                specifier,
                path,
                esm ? nextTraceMap : this.mode === "legacy" ? { default: nextTraceMap, ...nextTraceMap } : { default: nextTraceMap }
              );
              if (esm) {
                yield* it;
              } else {
                for (const report of it) {
                  report.path = report.path.filter(exceptDefault);
                  if (report.path.length >= 2 || report.type !== READ) {
                    yield report;
                  }
                }
              }
            }
          }
        }
      }
      /**
       * Iterate the property references for a given expression AST node.
       * @template T
       * @param {Expression} node The expression AST node to iterate property references.
       * @param {TraceMap<T>} traceMap The trace map.
       * @returns {IterableIterator<TrackedReferences<T>>} The iterator to iterate property references.
       */
      *iteratePropertyReferences(node2, traceMap) {
        yield* this._iteratePropertyReferences(node2, [], traceMap);
      }
      /**
       * Iterate the references for a given variable.
       * @private
       * @template T
       * @param {Variable} variable The variable to iterate that references.
       * @param {string[]} path The current path.
       * @param {TraceMapObject<T>} traceMap The trace map.
       * @param {boolean} shouldReport = The flag to report those references.
       * @returns {IterableIterator<TrackedReferences<T>>} The iterator to iterate references.
       */
      *_iterateVariableReferences(variable, path, traceMap, shouldReport) {
        if (this.variableStack.includes(variable)) {
          return;
        }
        this.variableStack.push(variable);
        try {
          for (const reference of variable.references) {
            if (!reference.isRead()) {
              continue;
            }
            const node2 = (
              /** @type {RuleNode & Identifier} */
              reference.identifier
            );
            if (shouldReport && traceMap[READ]) {
              yield { node: node2, path, type: READ, info: traceMap[READ] };
            }
            yield* this._iteratePropertyReferences(node2, path, traceMap);
          }
        } finally {
          this.variableStack.pop();
        }
      }
      /**
       * Iterate the references for a given AST node.
       * @private
       * @template T
       * @param {Expression} rootNode The AST node to iterate references.
       * @param {string[]} path The current path.
       * @param {TraceMapObject<T>} traceMap The trace map.
       * @returns {IterableIterator<TrackedReferences<T>>} The iterator to iterate references.
       */
      //eslint-disable-next-line complexity
      *_iteratePropertyReferences(rootNode, path, traceMap) {
        let node2 = rootNode;
        while (isPassThrough(node2)) {
          node2 = node2.parent;
        }
        const parent = (
          /** @type {RuleNode} */
          node2.parent
        );
        if (parent.type === "MemberExpression") {
          if (parent.object === node2) {
            const key = getPropertyName(parent);
            if (key == null || !has(traceMap, key)) {
              return;
            }
            path = path.concat(key);
            const nextTraceMap = traceMap[key];
            if (nextTraceMap[READ]) {
              yield {
                node: parent,
                path,
                type: READ,
                info: nextTraceMap[READ]
              };
            }
            yield* this._iteratePropertyReferences(
              parent,
              path,
              nextTraceMap
            );
          }
          return;
        }
        if (parent.type === "CallExpression") {
          if (parent.callee === node2 && traceMap[CALL]) {
            yield { node: parent, path, type: CALL, info: traceMap[CALL] };
          }
          return;
        }
        if (parent.type === "NewExpression") {
          if (parent.callee === node2 && traceMap[CONSTRUCT]) {
            yield {
              node: parent,
              path,
              type: CONSTRUCT,
              info: traceMap[CONSTRUCT]
            };
          }
          return;
        }
        if (parent.type === "AssignmentExpression") {
          if (parent.right === node2) {
            yield* this._iterateLhsReferences(parent.left, path, traceMap);
            yield* this._iteratePropertyReferences(parent, path, traceMap);
          }
          return;
        }
        if (parent.type === "AssignmentPattern") {
          if (parent.right === node2) {
            yield* this._iterateLhsReferences(parent.left, path, traceMap);
          }
          return;
        }
        if (parent.type === "VariableDeclarator") {
          if (parent.init === node2) {
            yield* this._iterateLhsReferences(parent.id, path, traceMap);
          }
        }
      }
      /**
       * Iterate the references for a given Pattern node.
       * @private
       * @template T
       * @param {Pattern} patternNode The Pattern node to iterate references.
       * @param {string[]} path The current path.
       * @param {TraceMapObject<T>} traceMap The trace map.
       * @returns {IterableIterator<TrackedReferences<T>>} The iterator to iterate references.
       */
      *_iterateLhsReferences(patternNode, path, traceMap) {
        if (patternNode.type === "Identifier") {
          const variable = findVariable(this.globalScope, patternNode);
          if (variable != null) {
            yield* this._iterateVariableReferences(
              variable,
              path,
              traceMap,
              false
            );
          }
          return;
        }
        if (patternNode.type === "ObjectPattern") {
          for (const property of patternNode.properties) {
            const key = getPropertyName(
              /** @type {AssignmentProperty} */
              property
            );
            if (key == null || !has(traceMap, key)) {
              continue;
            }
            const nextPath = path.concat(key);
            const nextTraceMap = traceMap[key];
            if (nextTraceMap[READ]) {
              yield {
                node: (
                  /** @type {RuleNode} */
                  property
                ),
                path: nextPath,
                type: READ,
                info: nextTraceMap[READ]
              };
            }
            yield* this._iterateLhsReferences(
              /** @type {AssignmentProperty} */
              property.value,
              nextPath,
              nextTraceMap
            );
          }
          return;
        }
        if (patternNode.type === "AssignmentPattern") {
          yield* this._iterateLhsReferences(patternNode.left, path, traceMap);
        }
      }
      /**
       * Iterate the references for a given ModuleSpecifier node.
       * @private
       * @template T
       * @param {ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier | ExportSpecifier} specifierNode The ModuleSpecifier node to iterate references.
       * @param {string[]} path The current path.
       * @param {TraceMapObject<T>} traceMap The trace map.
       * @returns {IterableIterator<TrackedReferences<T>>} The iterator to iterate references.
       */
      *_iterateImportReferences(specifierNode, path, traceMap) {
        const type2 = specifierNode.type;
        if (type2 === "ImportSpecifier" || type2 === "ImportDefaultSpecifier") {
          const key = type2 === "ImportDefaultSpecifier" ? "default" : specifierNode.imported.type === "Identifier" ? specifierNode.imported.name : specifierNode.imported.value;
          if (!has(traceMap, key)) {
            return;
          }
          path = path.concat(key);
          const nextTraceMap = traceMap[key];
          if (nextTraceMap[READ]) {
            yield {
              node: (
                /** @type {RuleNode} */
                specifierNode
              ),
              path,
              type: READ,
              info: nextTraceMap[READ]
            };
          }
          yield* this._iterateVariableReferences(
            /** @type {Variable} */
            findVariable(this.globalScope, specifierNode.local),
            path,
            nextTraceMap,
            false
          );
          return;
        }
        if (type2 === "ImportNamespaceSpecifier") {
          yield* this._iterateVariableReferences(
            /** @type {Variable} */
            findVariable(this.globalScope, specifierNode.local),
            path,
            traceMap,
            false
          );
          return;
        }
        if (type2 === "ExportSpecifier") {
          const key = specifierNode.local.type === "Identifier" ? specifierNode.local.name : specifierNode.local.value;
          if (!has(traceMap, key)) {
            return;
          }
          path = path.concat(key);
          const nextTraceMap = traceMap[key];
          if (nextTraceMap[READ]) {
            yield {
              node: (
                /** @type {RuleNode} */
                specifierNode
              ),
              path,
              type: READ,
              info: nextTraceMap[READ]
            };
          }
        }
      }
    }
    ReferenceTracker.READ = READ;
    ReferenceTracker.CALL = CALL;
    ReferenceTracker.CONSTRUCT = CONSTRUCT;
    ReferenceTracker.ESM = ESM;
    function exceptDefault(name, index2) {
      return !(index2 === 1 && name === "default");
    }
    var index = {
      CALL,
      CONSTRUCT,
      ESM,
      findVariable,
      getFunctionHeadLocation,
      getFunctionNameWithKind,
      getInnermostScope,
      getPropertyName,
      getStaticValue,
      getStringIfConstant,
      hasSideEffect,
      isArrowToken,
      isClosingBraceToken,
      isClosingBracketToken,
      isClosingParenToken,
      isColonToken,
      isCommaToken,
      isCommentToken,
      isNotArrowToken,
      isNotClosingBraceToken,
      isNotClosingBracketToken,
      isNotClosingParenToken,
      isNotColonToken,
      isNotCommaToken,
      isNotCommentToken,
      isNotOpeningBraceToken,
      isNotOpeningBracketToken,
      isNotOpeningParenToken,
      isNotSemicolonToken,
      isOpeningBraceToken,
      isOpeningBracketToken,
      isOpeningParenToken,
      isParenthesized,
      isSemicolonToken,
      PatternMatcher,
      READ,
      ReferenceTracker
    };
    exports.CALL = CALL;
    exports.CONSTRUCT = CONSTRUCT;
    exports.ESM = ESM;
    exports.PatternMatcher = PatternMatcher;
    exports.READ = READ;
    exports.ReferenceTracker = ReferenceTracker;
    exports["default"] = index;
    exports.findVariable = findVariable;
    exports.getFunctionHeadLocation = getFunctionHeadLocation;
    exports.getFunctionNameWithKind = getFunctionNameWithKind;
    exports.getInnermostScope = getInnermostScope;
    exports.getPropertyName = getPropertyName;
    exports.getStaticValue = getStaticValue;
    exports.getStringIfConstant = getStringIfConstant;
    exports.hasSideEffect = hasSideEffect;
    exports.isArrowToken = isArrowToken;
    exports.isClosingBraceToken = isClosingBraceToken;
    exports.isClosingBracketToken = isClosingBracketToken;
    exports.isClosingParenToken = isClosingParenToken;
    exports.isColonToken = isColonToken;
    exports.isCommaToken = isCommaToken;
    exports.isCommentToken = isCommentToken;
    exports.isNotArrowToken = isNotArrowToken;
    exports.isNotClosingBraceToken = isNotClosingBraceToken;
    exports.isNotClosingBracketToken = isNotClosingBracketToken;
    exports.isNotClosingParenToken = isNotClosingParenToken;
    exports.isNotColonToken = isNotColonToken;
    exports.isNotCommaToken = isNotCommaToken;
    exports.isNotCommentToken = isNotCommentToken;
    exports.isNotOpeningBraceToken = isNotOpeningBraceToken;
    exports.isNotOpeningBracketToken = isNotOpeningBracketToken;
    exports.isNotOpeningParenToken = isNotOpeningParenToken;
    exports.isNotSemicolonToken = isNotSemicolonToken;
    exports.isOpeningBraceToken = isOpeningBraceToken;
    exports.isOpeningBracketToken = isOpeningBracketToken;
    exports.isOpeningParenToken = isOpeningParenToken;
    exports.isParenthesized = isParenthesized;
    exports.isSemicolonToken = isSemicolonToken;
  })(eslintUtils);
  return eslintUtils;
}
var assert;
var hasRequiredAssert;
function requireAssert() {
  if (hasRequiredAssert) return assert;
  hasRequiredAssert = 1;
  function ok(value, message = "Assertion failed.") {
    if (!value) {
      throw new Error(message);
    }
  }
  assert = ok;
  return assert;
}
var cursor;
var hasRequiredCursor;
function requireCursor() {
  if (hasRequiredCursor) return cursor;
  hasRequiredCursor = 1;
  cursor = class Cursor {
    /**
     * Initializes this cursor.
     */
    constructor() {
      this.current = null;
    }
    /**
     * Gets the first token.
     * This consumes this cursor.
     * @returns {Token|Comment} The first token or null.
     */
    getOneToken() {
      return this.moveNext() ? this.current : null;
    }
    /**
     * Gets the first tokens.
     * This consumes this cursor.
     * @returns {(Token|Comment)[]} All tokens.
     */
    getAllTokens() {
      const tokens = [];
      while (this.moveNext()) {
        tokens.push(this.current);
      }
      return tokens;
    }
    /**
     * Moves this cursor to the next token.
     * @returns {boolean} `true` if the next token exists.
     * @abstract
     */
    /* c8 ignore next */
    // eslint-disable-next-line class-methods-use-this -- Unused
    moveNext() {
      throw new Error("Not implemented.");
    }
  };
  return cursor;
}
var utils$1 = {};
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1) return utils$1;
  hasRequiredUtils$1 = 1;
  utils$1.search = function search(tokens, location) {
    for (let minIndex = 0, maxIndex = tokens.length - 1; minIndex <= maxIndex; ) {
      const index = (minIndex + maxIndex) / 2 | 0;
      const token = tokens[index];
      const tokenStartLocation = token.range[0];
      if (location <= tokenStartLocation) {
        if (index === minIndex) {
          return index;
        }
        maxIndex = index;
      } else {
        minIndex = index + 1;
      }
    }
    return tokens.length;
  };
  utils$1.getFirstIndex = function getFirstIndex(tokens, indexMap, startLoc) {
    if (startLoc in indexMap) {
      return indexMap[startLoc];
    }
    if (startLoc - 1 in indexMap) {
      const index = indexMap[startLoc - 1];
      const token = tokens[index];
      if (!token) {
        return tokens.length;
      }
      if (token.range[0] >= startLoc) {
        return index;
      }
      return index + 1;
    }
    return 0;
  };
  utils$1.getLastIndex = function getLastIndex(tokens, indexMap, endLoc) {
    if (endLoc in indexMap) {
      return indexMap[endLoc] - 1;
    }
    if (endLoc - 1 in indexMap) {
      const index = indexMap[endLoc - 1];
      const token = tokens[index];
      if (!token) {
        return tokens.length - 1;
      }
      if (token.range[1] > endLoc) {
        return index - 1;
      }
      return index;
    }
    return tokens.length - 1;
  };
  return utils$1;
}
var backwardTokenCommentCursor;
var hasRequiredBackwardTokenCommentCursor;
function requireBackwardTokenCommentCursor() {
  if (hasRequiredBackwardTokenCommentCursor) return backwardTokenCommentCursor;
  hasRequiredBackwardTokenCommentCursor = 1;
  const Cursor = requireCursor();
  const utils2 = requireUtils$1();
  backwardTokenCommentCursor = class BackwardTokenCommentCursor extends Cursor {
    /**
     * Initializes this cursor.
     * @param {Token[]} tokens The array of tokens.
     * @param {Comment[]} comments The array of comments.
     * @param {Object} indexMap The map from locations to indices in `tokens`.
     * @param {number} startLoc The start location of the iteration range.
     * @param {number} endLoc The end location of the iteration range.
     */
    constructor(tokens, comments, indexMap, startLoc, endLoc) {
      super();
      this.tokens = tokens;
      this.comments = comments;
      this.tokenIndex = utils2.getLastIndex(tokens, indexMap, endLoc);
      this.commentIndex = utils2.search(comments, endLoc) - 1;
      this.border = startLoc;
    }
    /** @inheritdoc */
    moveNext() {
      const token = this.tokenIndex >= 0 ? this.tokens[this.tokenIndex] : null;
      const comment2 = this.commentIndex >= 0 ? this.comments[this.commentIndex] : null;
      if (token && (!comment2 || token.range[1] > comment2.range[1])) {
        this.current = token;
        this.tokenIndex -= 1;
      } else if (comment2) {
        this.current = comment2;
        this.commentIndex -= 1;
      } else {
        this.current = null;
      }
      return Boolean(this.current) && (this.border === -1 || this.current.range[0] >= this.border);
    }
  };
  return backwardTokenCommentCursor;
}
var backwardTokenCursor;
var hasRequiredBackwardTokenCursor;
function requireBackwardTokenCursor() {
  if (hasRequiredBackwardTokenCursor) return backwardTokenCursor;
  hasRequiredBackwardTokenCursor = 1;
  const Cursor = requireCursor();
  const { getLastIndex, getFirstIndex } = requireUtils$1();
  backwardTokenCursor = class BackwardTokenCursor extends Cursor {
    /**
     * Initializes this cursor.
     * @param {Token[]} tokens The array of tokens.
     * @param {Comment[]} comments The array of comments.
     * @param {Object} indexMap The map from locations to indices in `tokens`.
     * @param {number} startLoc The start location of the iteration range.
     * @param {number} endLoc The end location of the iteration range.
     */
    constructor(tokens, comments, indexMap, startLoc, endLoc) {
      super();
      this.tokens = tokens;
      this.index = getLastIndex(tokens, indexMap, endLoc);
      this.indexEnd = getFirstIndex(tokens, indexMap, startLoc);
    }
    /** @inheritdoc */
    moveNext() {
      if (this.index >= this.indexEnd) {
        this.current = this.tokens[this.index];
        this.index -= 1;
        return true;
      }
      return false;
    }
    /*
     *
     * Shorthand for performance.
     *
     */
    /** @inheritdoc */
    getOneToken() {
      return this.index >= this.indexEnd ? this.tokens[this.index] : null;
    }
  };
  return backwardTokenCursor;
}
var decorativeCursor;
var hasRequiredDecorativeCursor;
function requireDecorativeCursor() {
  if (hasRequiredDecorativeCursor) return decorativeCursor;
  hasRequiredDecorativeCursor = 1;
  const Cursor = requireCursor();
  decorativeCursor = class DecorativeCursor extends Cursor {
    /**
     * Initializes this cursor.
     * @param {Cursor} cursor The cursor to be decorated.
     */
    constructor(cursor2) {
      super();
      this.cursor = cursor2;
    }
    /** @inheritdoc */
    moveNext() {
      const retv = this.cursor.moveNext();
      this.current = this.cursor.current;
      return retv;
    }
  };
  return decorativeCursor;
}
var filterCursor;
var hasRequiredFilterCursor;
function requireFilterCursor() {
  if (hasRequiredFilterCursor) return filterCursor;
  hasRequiredFilterCursor = 1;
  const DecorativeCursor = requireDecorativeCursor();
  filterCursor = class FilterCursor extends DecorativeCursor {
    /**
     * Initializes this cursor.
     * @param {Cursor} cursor The cursor to be decorated.
     * @param {Function} predicate The predicate function to decide tokens this cursor iterates.
     */
    constructor(cursor2, predicate) {
      super(cursor2);
      this.predicate = predicate;
    }
    /** @inheritdoc */
    moveNext() {
      const predicate = this.predicate;
      while (super.moveNext()) {
        if (predicate(this.current)) {
          return true;
        }
      }
      return false;
    }
  };
  return filterCursor;
}
var forwardTokenCommentCursor;
var hasRequiredForwardTokenCommentCursor;
function requireForwardTokenCommentCursor() {
  if (hasRequiredForwardTokenCommentCursor) return forwardTokenCommentCursor;
  hasRequiredForwardTokenCommentCursor = 1;
  const Cursor = requireCursor();
  const { getFirstIndex, search } = requireUtils$1();
  forwardTokenCommentCursor = class ForwardTokenCommentCursor extends Cursor {
    /**
     * Initializes this cursor.
     * @param {Token[]} tokens The array of tokens.
     * @param {Comment[]} comments The array of comments.
     * @param {Object} indexMap The map from locations to indices in `tokens`.
     * @param {number} startLoc The start location of the iteration range.
     * @param {number} endLoc The end location of the iteration range.
     */
    constructor(tokens, comments, indexMap, startLoc, endLoc) {
      super();
      this.tokens = tokens;
      this.comments = comments;
      this.tokenIndex = getFirstIndex(tokens, indexMap, startLoc);
      this.commentIndex = search(comments, startLoc);
      this.border = endLoc;
    }
    /** @inheritdoc */
    moveNext() {
      const token = this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex] : null;
      const comment2 = this.commentIndex < this.comments.length ? this.comments[this.commentIndex] : null;
      if (token && (!comment2 || token.range[0] < comment2.range[0])) {
        this.current = token;
        this.tokenIndex += 1;
      } else if (comment2) {
        this.current = comment2;
        this.commentIndex += 1;
      } else {
        this.current = null;
      }
      return Boolean(this.current) && (this.border === -1 || this.current.range[1] <= this.border);
    }
  };
  return forwardTokenCommentCursor;
}
var forwardTokenCursor;
var hasRequiredForwardTokenCursor;
function requireForwardTokenCursor() {
  if (hasRequiredForwardTokenCursor) return forwardTokenCursor;
  hasRequiredForwardTokenCursor = 1;
  const Cursor = requireCursor();
  const { getFirstIndex, getLastIndex } = requireUtils$1();
  forwardTokenCursor = class ForwardTokenCursor extends Cursor {
    /**
     * Initializes this cursor.
     * @param {Token[]} tokens The array of tokens.
     * @param {Comment[]} comments The array of comments.
     * @param {Object} indexMap The map from locations to indices in `tokens`.
     * @param {number} startLoc The start location of the iteration range.
     * @param {number} endLoc The end location of the iteration range.
     */
    constructor(tokens, comments, indexMap, startLoc, endLoc) {
      super();
      this.tokens = tokens;
      this.index = getFirstIndex(tokens, indexMap, startLoc);
      this.indexEnd = getLastIndex(tokens, indexMap, endLoc);
    }
    /** @inheritdoc */
    moveNext() {
      if (this.index <= this.indexEnd) {
        this.current = this.tokens[this.index];
        this.index += 1;
        return true;
      }
      return false;
    }
    /*
     *
     * Shorthand for performance.
     *
     */
    /** @inheritdoc */
    getOneToken() {
      return this.index <= this.indexEnd ? this.tokens[this.index] : null;
    }
    /** @inheritdoc */
    getAllTokens() {
      return this.tokens.slice(this.index, this.indexEnd + 1);
    }
  };
  return forwardTokenCursor;
}
var limitCursor;
var hasRequiredLimitCursor;
function requireLimitCursor() {
  if (hasRequiredLimitCursor) return limitCursor;
  hasRequiredLimitCursor = 1;
  const DecorativeCursor = requireDecorativeCursor();
  limitCursor = class LimitCursor extends DecorativeCursor {
    /**
     * Initializes this cursor.
     * @param {Cursor} cursor The cursor to be decorated.
     * @param {number} count The count of tokens this cursor iterates.
     */
    constructor(cursor2, count) {
      super(cursor2);
      this.count = count;
    }
    /** @inheritdoc */
    moveNext() {
      if (this.count > 0) {
        this.count -= 1;
        return super.moveNext();
      }
      return false;
    }
  };
  return limitCursor;
}
var skipCursor;
var hasRequiredSkipCursor;
function requireSkipCursor() {
  if (hasRequiredSkipCursor) return skipCursor;
  hasRequiredSkipCursor = 1;
  const DecorativeCursor = requireDecorativeCursor();
  skipCursor = class SkipCursor extends DecorativeCursor {
    /**
     * Initializes this cursor.
     * @param {Cursor} cursor The cursor to be decorated.
     * @param {number} count The count of tokens this cursor skips.
     */
    constructor(cursor2, count) {
      super(cursor2);
      this.count = count;
    }
    /** @inheritdoc */
    moveNext() {
      while (this.count > 0) {
        this.count -= 1;
        if (!super.moveNext()) {
          return false;
        }
      }
      return super.moveNext();
    }
  };
  return skipCursor;
}
var cursors;
var hasRequiredCursors;
function requireCursors() {
  if (hasRequiredCursors) return cursors;
  hasRequiredCursors = 1;
  const BackwardTokenCommentCursor = requireBackwardTokenCommentCursor();
  const BackwardTokenCursor = requireBackwardTokenCursor();
  const FilterCursor = requireFilterCursor();
  const ForwardTokenCommentCursor = requireForwardTokenCommentCursor();
  const ForwardTokenCursor = requireForwardTokenCursor();
  const LimitCursor = requireLimitCursor();
  const SkipCursor = requireSkipCursor();
  class CursorFactory {
    /**
     * Initializes this cursor.
     * @param {Function} TokenCursor The class of the cursor which iterates tokens only.
     * @param {Function} TokenCommentCursor The class of the cursor which iterates the mix of tokens and comments.
     */
    constructor(TokenCursor, TokenCommentCursor) {
      this.TokenCursor = TokenCursor;
      this.TokenCommentCursor = TokenCommentCursor;
    }
    /**
     * Creates a base cursor instance that can be decorated by createCursor.
     * @param {Token[]} tokens The array of tokens.
     * @param {Comment[]} comments The array of comments.
     * @param {Object} indexMap The map from locations to indices in `tokens`.
     * @param {number} startLoc The start location of the iteration range.
     * @param {number} endLoc The end location of the iteration range.
     * @param {boolean} includeComments The flag to iterate comments as well.
     * @returns {Cursor} The created base cursor.
     */
    createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments) {
      const Cursor = includeComments ? this.TokenCommentCursor : this.TokenCursor;
      return new Cursor(tokens, comments, indexMap, startLoc, endLoc);
    }
    /**
     * Creates a cursor that iterates tokens with normalized options.
     * @param {Token[]} tokens The array of tokens.
     * @param {Comment[]} comments The array of comments.
     * @param {Object} indexMap The map from locations to indices in `tokens`.
     * @param {number} startLoc The start location of the iteration range.
     * @param {number} endLoc The end location of the iteration range.
     * @param {boolean} includeComments The flag to iterate comments as well.
     * @param {Function|null} filter The predicate function to choose tokens.
     * @param {number} skip The count of tokens the cursor skips.
     * @param {number} count The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility.
     * @returns {Cursor} The created cursor.
     */
    createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter2, skip, count) {
      let cursor2 = this.createBaseCursor(
        tokens,
        comments,
        indexMap,
        startLoc,
        endLoc,
        includeComments
      );
      if (filter2) {
        cursor2 = new FilterCursor(cursor2, filter2);
      }
      if (skip >= 1) {
        cursor2 = new SkipCursor(cursor2, skip);
      }
      if (count >= 0) {
        cursor2 = new LimitCursor(cursor2, count);
      }
      return cursor2;
    }
  }
  cursors = {
    forward: new CursorFactory(ForwardTokenCursor, ForwardTokenCommentCursor),
    backward: new CursorFactory(
      BackwardTokenCursor,
      BackwardTokenCommentCursor
    )
  };
  return cursors;
}
var paddedTokenCursor;
var hasRequiredPaddedTokenCursor;
function requirePaddedTokenCursor() {
  if (hasRequiredPaddedTokenCursor) return paddedTokenCursor;
  hasRequiredPaddedTokenCursor = 1;
  const ForwardTokenCursor = requireForwardTokenCursor();
  paddedTokenCursor = class PaddedTokenCursor extends ForwardTokenCursor {
    /**
     * Initializes this cursor.
     * @param {Token[]} tokens The array of tokens.
     * @param {Comment[]} comments The array of comments.
     * @param {Object} indexMap The map from locations to indices in `tokens`.
     * @param {number} startLoc The start location of the iteration range.
     * @param {number} endLoc The end location of the iteration range.
     * @param {number} beforeCount The number of tokens this cursor iterates before start.
     * @param {number} afterCount The number of tokens this cursor iterates after end.
     */
    constructor(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {
      super(tokens, comments, indexMap, startLoc, endLoc);
      this.index = Math.max(0, this.index - beforeCount);
      this.indexEnd = Math.min(tokens.length - 1, this.indexEnd + afterCount);
    }
  };
  return paddedTokenCursor;
}
var tokenStore;
var hasRequiredTokenStore;
function requireTokenStore() {
  if (hasRequiredTokenStore) return tokenStore;
  hasRequiredTokenStore = 1;
  const { isCommentToken } = /* @__PURE__ */ requireEslintUtils();
  const assert2 = requireAssert();
  const cursors2 = requireCursors();
  const ForwardTokenCursor = requireForwardTokenCursor();
  const PaddedTokenCursor = requirePaddedTokenCursor();
  const utils2 = requireUtils$1();
  const TOKENS = Symbol("tokens");
  const COMMENTS = Symbol("comments");
  const INDEX_MAP = Symbol("indexMap");
  function createIndexMap(tokens, comments) {
    const map = /* @__PURE__ */ Object.create(null);
    let tokenIndex = 0;
    let commentIndex = 0;
    let nextStart;
    let range;
    while (tokenIndex < tokens.length || commentIndex < comments.length) {
      nextStart = commentIndex < comments.length ? comments[commentIndex].range[0] : Number.MAX_SAFE_INTEGER;
      while (tokenIndex < tokens.length && (range = tokens[tokenIndex].range)[0] < nextStart) {
        map[range[0]] = tokenIndex;
        map[range[1] - 1] = tokenIndex;
        tokenIndex += 1;
      }
      nextStart = tokenIndex < tokens.length ? tokens[tokenIndex].range[0] : Number.MAX_SAFE_INTEGER;
      while (commentIndex < comments.length && (range = comments[commentIndex].range)[0] < nextStart) {
        map[range[0]] = tokenIndex;
        map[range[1] - 1] = tokenIndex;
        commentIndex += 1;
      }
    }
    return map;
  }
  function createCursorWithSkip(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {
    let includeComments = false;
    let skip = 0;
    let filter2 = null;
    if (typeof opts === "number") {
      skip = opts | 0;
    } else if (typeof opts === "function") {
      filter2 = opts;
    } else if (opts) {
      includeComments = !!opts.includeComments;
      skip = opts.skip | 0;
      filter2 = opts.filter || null;
    }
    assert2(skip >= 0, "options.skip should be zero or a positive integer.");
    assert2(
      !filter2 || typeof filter2 === "function",
      "options.filter should be a function."
    );
    return factory.createCursor(
      tokens,
      comments,
      indexMap,
      startLoc,
      endLoc,
      includeComments,
      filter2,
      skip,
      -1
    );
  }
  function createCursorWithCount(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {
    let includeComments = false;
    let count = 0;
    let countExists = false;
    let filter2 = null;
    if (typeof opts === "number") {
      count = opts | 0;
      countExists = true;
    } else if (typeof opts === "function") {
      filter2 = opts;
    } else if (opts) {
      includeComments = !!opts.includeComments;
      count = opts.count | 0;
      countExists = typeof opts.count === "number";
      filter2 = opts.filter || null;
    }
    assert2(count >= 0, "options.count should be zero or a positive integer.");
    assert2(
      !filter2 || typeof filter2 === "function",
      "options.filter should be a function."
    );
    return factory.createCursor(
      tokens,
      comments,
      indexMap,
      startLoc,
      endLoc,
      includeComments,
      filter2,
      0,
      countExists ? count : -1
    );
  }
  function createCursorWithPadding(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {
    if (typeof beforeCount === "undefined" && typeof afterCount === "undefined") {
      return new ForwardTokenCursor(
        tokens,
        comments,
        indexMap,
        startLoc,
        endLoc
      );
    }
    if (typeof beforeCount === "number" || typeof beforeCount === "undefined") {
      return new PaddedTokenCursor(
        tokens,
        comments,
        indexMap,
        startLoc,
        endLoc,
        beforeCount | 0,
        afterCount | 0
      );
    }
    return createCursorWithCount(
      cursors2.forward,
      tokens,
      comments,
      indexMap,
      startLoc,
      endLoc,
      beforeCount
    );
  }
  function getAdjacentCommentTokensFromCursor(cursor2) {
    const tokens = [];
    let currentToken = cursor2.getOneToken();
    while (currentToken && isCommentToken(currentToken)) {
      tokens.push(currentToken);
      currentToken = cursor2.getOneToken();
    }
    return tokens;
  }
  tokenStore = class TokenStore {
    /**
     * Initializes this token store.
     * @param {Token[]} tokens The array of tokens.
     * @param {Comment[]} comments The array of comments.
     */
    constructor(tokens, comments) {
      this[TOKENS] = tokens;
      this[COMMENTS] = comments;
      this[INDEX_MAP] = createIndexMap(tokens, comments);
    }
    //--------------------------------------------------------------------------
    // Gets single token.
    //--------------------------------------------------------------------------
    /**
     * Gets the token starting at the specified index.
     * @param {number} offset Index of the start of the token's range.
     * @param {Object} [options=0] The option object.
     * @param {boolean} [options.includeComments=false] The flag to iterate comments as well.
     * @returns {Token|null} The token starting at index, or null if no such token.
     */
    getTokenByRangeStart(offset, options) {
      const includeComments = options && options.includeComments;
      const token = cursors2.forward.createBaseCursor(
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        offset,
        -1,
        includeComments
      ).getOneToken();
      if (token && token.range[0] === offset) {
        return token;
      }
      return null;
    }
    /**
     * Gets the first token of the given node.
     * @param {ASTNode} node The AST node.
     * @param {number|Function|Object} [options=0] The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.
     * @param {boolean} [options.includeComments=false] The flag to iterate comments as well.
     * @param {Function|null} [options.filter=null] The predicate function to choose tokens.
     * @param {number} [options.skip=0] The count of tokens the cursor skips.
     * @returns {Token|null} An object representing the token.
     */
    getFirstToken(node2, options) {
      return createCursorWithSkip(
        cursors2.forward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        node2.range[0],
        node2.range[1],
        options
      ).getOneToken();
    }
    /**
     * Gets the last token of the given node.
     * @param {ASTNode} node The AST node.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstToken()
     * @returns {Token|null} An object representing the token.
     */
    getLastToken(node2, options) {
      return createCursorWithSkip(
        cursors2.backward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        node2.range[0],
        node2.range[1],
        options
      ).getOneToken();
    }
    /**
     * Gets the token that precedes a given node or token.
     * @param {ASTNode|Token|Comment} node The AST node or token.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstToken()
     * @returns {Token|null} An object representing the token.
     */
    getTokenBefore(node2, options) {
      return createCursorWithSkip(
        cursors2.backward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        -1,
        node2.range[0],
        options
      ).getOneToken();
    }
    /**
     * Gets the token that follows a given node or token.
     * @param {ASTNode|Token|Comment} node The AST node or token.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstToken()
     * @returns {Token|null} An object representing the token.
     */
    getTokenAfter(node2, options) {
      return createCursorWithSkip(
        cursors2.forward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        node2.range[1],
        -1,
        options
      ).getOneToken();
    }
    /**
     * Gets the first token between two non-overlapping nodes.
     * @param {ASTNode|Token|Comment} left Node before the desired token range.
     * @param {ASTNode|Token|Comment} right Node after the desired token range.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstToken()
     * @returns {Token|null} An object representing the token.
     */
    getFirstTokenBetween(left, right, options) {
      return createCursorWithSkip(
        cursors2.forward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        left.range[1],
        right.range[0],
        options
      ).getOneToken();
    }
    /**
     * Gets the last token between two non-overlapping nodes.
     * @param {ASTNode|Token|Comment} left Node before the desired token range.
     * @param {ASTNode|Token|Comment} right Node after the desired token range.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstToken()
     * @returns {Token|null} An object representing the token.
     */
    getLastTokenBetween(left, right, options) {
      return createCursorWithSkip(
        cursors2.backward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        left.range[1],
        right.range[0],
        options
      ).getOneToken();
    }
    /**
     * Gets the token that precedes a given node or token in the token stream.
     * This is defined for backward compatibility. Use `includeComments` option instead.
     * TODO: We have a plan to remove this in a future major version.
     * @param {ASTNode|Token|Comment} node The AST node or token.
     * @param {number} [skip=0] A number of tokens to skip.
     * @returns {Token|null} An object representing the token.
     * @deprecated
     */
    getTokenOrCommentBefore(node2, skip) {
      return this.getTokenBefore(node2, { includeComments: true, skip });
    }
    /**
     * Gets the token that follows a given node or token in the token stream.
     * This is defined for backward compatibility. Use `includeComments` option instead.
     * TODO: We have a plan to remove this in a future major version.
     * @param {ASTNode|Token|Comment} node The AST node or token.
     * @param {number} [skip=0] A number of tokens to skip.
     * @returns {Token|null} An object representing the token.
     * @deprecated
     */
    getTokenOrCommentAfter(node2, skip) {
      return this.getTokenAfter(node2, { includeComments: true, skip });
    }
    //--------------------------------------------------------------------------
    // Gets multiple tokens.
    //--------------------------------------------------------------------------
    /**
     * Gets the first `count` tokens of the given node.
     * @param {ASTNode} node The AST node.
     * @param {number|Function|Object} [options=0] The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.
     * @param {boolean} [options.includeComments=false] The flag to iterate comments as well.
     * @param {Function|null} [options.filter=null] The predicate function to choose tokens.
     * @param {number} [options.count=0] The maximum count of tokens the cursor iterates.
     * @returns {Token[]} Tokens.
     */
    getFirstTokens(node2, options) {
      return createCursorWithCount(
        cursors2.forward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        node2.range[0],
        node2.range[1],
        options
      ).getAllTokens();
    }
    /**
     * Gets the last `count` tokens of the given node.
     * @param {ASTNode} node The AST node.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstTokens()
     * @returns {Token[]} Tokens.
     */
    getLastTokens(node2, options) {
      return createCursorWithCount(
        cursors2.backward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        node2.range[0],
        node2.range[1],
        options
      ).getAllTokens().reverse();
    }
    /**
     * Gets the `count` tokens that precedes a given node or token.
     * @param {ASTNode|Token|Comment} node The AST node or token.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstTokens()
     * @returns {Token[]} Tokens.
     */
    getTokensBefore(node2, options) {
      return createCursorWithCount(
        cursors2.backward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        -1,
        node2.range[0],
        options
      ).getAllTokens().reverse();
    }
    /**
     * Gets the `count` tokens that follows a given node or token.
     * @param {ASTNode|Token|Comment} node The AST node or token.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstTokens()
     * @returns {Token[]} Tokens.
     */
    getTokensAfter(node2, options) {
      return createCursorWithCount(
        cursors2.forward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        node2.range[1],
        -1,
        options
      ).getAllTokens();
    }
    /**
     * Gets the first `count` tokens between two non-overlapping nodes.
     * @param {ASTNode|Token|Comment} left Node before the desired token range.
     * @param {ASTNode|Token|Comment} right Node after the desired token range.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstTokens()
     * @returns {Token[]} Tokens between left and right.
     */
    getFirstTokensBetween(left, right, options) {
      return createCursorWithCount(
        cursors2.forward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        left.range[1],
        right.range[0],
        options
      ).getAllTokens();
    }
    /**
     * Gets the last `count` tokens between two non-overlapping nodes.
     * @param {ASTNode|Token|Comment} left Node before the desired token range.
     * @param {ASTNode|Token|Comment} right Node after the desired token range.
     * @param {number|Function|Object} [options=0] The option object. Same options as getFirstTokens()
     * @returns {Token[]} Tokens between left and right.
     */
    getLastTokensBetween(left, right, options) {
      return createCursorWithCount(
        cursors2.backward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        left.range[1],
        right.range[0],
        options
      ).getAllTokens().reverse();
    }
    /**
     * Gets all tokens that are related to the given node.
     * @param {ASTNode} node The AST node.
     * @param {Function|Object} options The option object. If this is a function then it's `options.filter`.
     * @param {boolean} [options.includeComments=false] The flag to iterate comments as well.
     * @param {Function|null} [options.filter=null] The predicate function to choose tokens.
     * @param {number} [options.count=0] The maximum count of tokens the cursor iterates.
     * @returns {Token[]} Array of objects representing tokens.
     */
    /**
     * Gets all tokens that are related to the given node.
     * @param {ASTNode} node The AST node.
     * @param {number} [beforeCount=0] The number of tokens before the node to retrieve.
     * @param {number} [afterCount=0] The number of tokens after the node to retrieve.
     * @returns {Token[]} Array of objects representing tokens.
     */
    getTokens(node2, beforeCount, afterCount) {
      return createCursorWithPadding(
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        node2.range[0],
        node2.range[1],
        beforeCount,
        afterCount
      ).getAllTokens();
    }
    /**
     * Gets all of the tokens between two non-overlapping nodes.
     * @param {ASTNode|Token|Comment} left Node before the desired token range.
     * @param {ASTNode|Token|Comment} right Node after the desired token range.
     * @param {Function|Object} options The option object. If this is a function then it's `options.filter`.
     * @param {boolean} [options.includeComments=false] The flag to iterate comments as well.
     * @param {Function|null} [options.filter=null] The predicate function to choose tokens.
     * @param {number} [options.count=0] The maximum count of tokens the cursor iterates.
     * @returns {Token[]} Tokens between left and right.
     */
    /**
     * Gets all of the tokens between two non-overlapping nodes.
     * @param {ASTNode|Token|Comment} left Node before the desired token range.
     * @param {ASTNode|Token|Comment} right Node after the desired token range.
     * @param {number} [padding=0] Number of extra tokens on either side of center.
     * @returns {Token[]} Tokens between left and right.
     */
    getTokensBetween(left, right, padding) {
      return createCursorWithPadding(
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        left.range[1],
        right.range[0],
        padding,
        padding
      ).getAllTokens();
    }
    //--------------------------------------------------------------------------
    // Others.
    //--------------------------------------------------------------------------
    /**
     * Checks whether any comments exist or not between the given 2 nodes.
     * @param {ASTNode} left The node to check.
     * @param {ASTNode} right The node to check.
     * @returns {boolean} `true` if one or more comments exist.
     */
    commentsExistBetween(left, right) {
      const index = utils2.search(this[COMMENTS], left.range[1]);
      return index < this[COMMENTS].length && this[COMMENTS][index].range[1] <= right.range[0];
    }
    /**
     * Gets all comment tokens directly before the given node or token.
     * @param {ASTNode|token} nodeOrToken The AST node or token to check for adjacent comment tokens.
     * @returns {Array} An array of comments in occurrence order.
     */
    getCommentsBefore(nodeOrToken) {
      const cursor2 = createCursorWithCount(
        cursors2.backward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        -1,
        nodeOrToken.range[0],
        { includeComments: true }
      );
      return getAdjacentCommentTokensFromCursor(cursor2).reverse();
    }
    /**
     * Gets all comment tokens directly after the given node or token.
     * @param {ASTNode|token} nodeOrToken The AST node or token to check for adjacent comment tokens.
     * @returns {Array} An array of comments in occurrence order.
     */
    getCommentsAfter(nodeOrToken) {
      const cursor2 = createCursorWithCount(
        cursors2.forward,
        this[TOKENS],
        this[COMMENTS],
        this[INDEX_MAP],
        nodeOrToken.range[1],
        -1,
        { includeComments: true }
      );
      return getAdjacentCommentTokensFromCursor(cursor2);
    }
    /**
     * Gets all comment tokens inside the given node.
     * @param {ASTNode} node The AST node to get the comments for.
     * @returns {Array} An array of comments in occurrence order.
     */
    getCommentsInside(node2) {
      return this.getTokens(node2, {
        includeComments: true,
        filter: isCommentToken
      });
    }
  };
  return tokenStore;
}
var astUtils$1;
var hasRequiredAstUtils$1;
function requireAstUtils$1() {
  if (hasRequiredAstUtils$1) return astUtils$1;
  hasRequiredAstUtils$1 = 1;
  const breakableTypePattern = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/u;
  const lineBreakPattern = /\r\n|[\r\n\u2028\u2029]/u;
  const shebangPattern = /^#!([^\r\n]+)/u;
  function createGlobalLinebreakMatcher() {
    return new RegExp(lineBreakPattern.source, "gu");
  }
  astUtils$1 = {
    breakableTypePattern,
    lineBreakPattern,
    createGlobalLinebreakMatcher,
    shebangPattern
  };
  return astUtils$1;
}
var globals;
var hasRequiredGlobals;
function requireGlobals() {
  if (hasRequiredGlobals) return globals;
  hasRequiredGlobals = 1;
  const commonjs2 = {
    exports: true,
    global: false,
    module: false,
    require: false
  };
  const es3 = {
    Array: false,
    Boolean: false,
    constructor: false,
    Date: false,
    decodeURI: false,
    decodeURIComponent: false,
    encodeURI: false,
    encodeURIComponent: false,
    Error: false,
    escape: false,
    eval: false,
    EvalError: false,
    Function: false,
    hasOwnProperty: false,
    Infinity: false,
    isFinite: false,
    isNaN: false,
    isPrototypeOf: false,
    Math: false,
    NaN: false,
    Number: false,
    Object: false,
    parseFloat: false,
    parseInt: false,
    propertyIsEnumerable: false,
    RangeError: false,
    ReferenceError: false,
    RegExp: false,
    String: false,
    SyntaxError: false,
    toLocaleString: false,
    toString: false,
    TypeError: false,
    undefined: false,
    unescape: false,
    URIError: false,
    valueOf: false
  };
  const es52 = {
    ...es3,
    JSON: false
  };
  const es20152 = {
    ...es52,
    ArrayBuffer: false,
    DataView: false,
    Float32Array: false,
    Float64Array: false,
    Int16Array: false,
    Int32Array: false,
    Int8Array: false,
    Intl: false,
    Map: false,
    Promise: false,
    Proxy: false,
    Reflect: false,
    Set: false,
    Symbol: false,
    Uint16Array: false,
    Uint32Array: false,
    Uint8Array: false,
    Uint8ClampedArray: false,
    WeakMap: false,
    WeakSet: false
  };
  const es2016 = {
    ...es20152
  };
  const es20172 = {
    ...es2016,
    Atomics: false,
    SharedArrayBuffer: false
  };
  const es2018 = {
    ...es20172
  };
  const es2019 = {
    ...es2018
  };
  const es20202 = {
    ...es2019,
    BigInt: false,
    BigInt64Array: false,
    BigUint64Array: false,
    globalThis: false
  };
  const es20212 = {
    ...es20202,
    AggregateError: false,
    FinalizationRegistry: false,
    WeakRef: false
  };
  const es2022 = {
    ...es20212
  };
  const es2023 = {
    ...es2022
  };
  const es2024 = {
    ...es2023
  };
  const es2025 = {
    ...es2024,
    Float16Array: false,
    Iterator: false
  };
  const es2026 = {
    ...es2025,
    AsyncDisposableStack: false,
    DisposableStack: false,
    SuppressedError: false
  };
  globals = {
    commonjs: commonjs2,
    es3,
    es5: es52,
    es2015: es20152,
    es2016,
    es2017: es20172,
    es2018,
    es2019,
    es2020: es20202,
    es2021: es20212,
    es2022,
    es2023,
    es2024,
    es2025,
    es2026
  };
  return globals;
}
var directives;
var hasRequiredDirectives;
function requireDirectives() {
  if (hasRequiredDirectives) return directives;
  hasRequiredDirectives = 1;
  const directivesPattern = /^(eslint(?:-env|-enable|-disable(?:(?:-next)?-line)?)?|exported|globals?)(?:\s|$)/u;
  directives = {
    directivesPattern
  };
  return directives;
}
var debugHelpers;
var hasRequiredDebugHelpers;
function requireDebugHelpers() {
  if (hasRequiredDebugHelpers) return debugHelpers;
  hasRequiredDebugHelpers = 1;
  const debug = requireSrc()("eslint:code-path");
  function getId(segment) {
    return segment.id + (segment.reachable ? "" : "!");
  }
  function nodeToString(node2, label) {
    const suffix = label ? `:${label}` : "";
    switch (node2.type) {
      case "Identifier":
        return `${node2.type}${suffix} (${node2.name})`;
      case "Literal":
        return `${node2.type}${suffix} (${node2.value})`;
      default:
        return `${node2.type}${suffix}`;
    }
  }
  debugHelpers = {
    /**
     * A flag that debug dumping is enabled or not.
     * @type {boolean}
     */
    enabled: debug.enabled,
    /**
     * Dumps given objects.
     * @param {...any} args objects to dump.
     * @returns {void}
     */
    dump: debug,
    /**
     * Dumps the current analyzing state.
     * @param {ASTNode} node A node to dump.
     * @param {CodePathState} state A state to dump.
     * @param {boolean} leaving A flag whether or not it's leaving
     * @returns {void}
     */
    dumpState: !debug.enabled ? debug : (
      /* c8 ignore next */
      (function(node2, state, leaving) {
        for (let i2 = 0; i2 < state.currentSegments.length; ++i2) {
          const segInternal = state.currentSegments[i2].internal;
          if (leaving) {
            const last = segInternal.nodes.length - 1;
            if (last >= 0 && segInternal.nodes[last] === nodeToString(node2, "enter")) {
              segInternal.nodes[last] = nodeToString(
                node2,
                void 0
              );
            } else {
              segInternal.nodes.push(nodeToString(node2, "exit"));
            }
          } else {
            segInternal.nodes.push(nodeToString(node2, "enter"));
          }
        }
        debug(
          [
            `${state.currentSegments.map(getId).join(",")})`,
            `${node2.type}${leaving ? ":exit" : ""}`
          ].join(" ")
        );
      })
    ),
    /**
     * Dumps a DOT code of a given code path.
     * The DOT code can be visualized with Graphvis.
     * @param {CodePath} codePath A code path to dump.
     * @returns {void}
     * @see http://www.graphviz.org
     * @see http://www.webgraphviz.com
     */
    dumpDot: !debug.enabled ? debug : (
      /* c8 ignore next */
      (function(codePath2) {
        let text = '\ndigraph {\nnode[shape=box,style="rounded,filled",fillcolor=white];\ninitial[label="",shape=circle,style=filled,fillcolor=black,width=0.25,height=0.25];\n';
        if (codePath2.returnedSegments.length > 0) {
          text += 'final[label="",shape=doublecircle,style=filled,fillcolor=black,width=0.25,height=0.25];\n';
        }
        if (codePath2.thrownSegments.length > 0) {
          text += 'thrown[label="✘",shape=circle,width=0.3,height=0.3,fixedsize=true];\n';
        }
        const traceMap = /* @__PURE__ */ Object.create(null);
        const arrows = this.makeDotArrows(codePath2, traceMap);
        for (const id2 in traceMap) {
          const segment = traceMap[id2];
          text += `${id2}[`;
          if (segment.reachable) {
            text += 'label="';
          } else {
            text += 'style="rounded,dashed,filled",fillcolor="#FF9800",label="<<unreachable>>\\n';
          }
          if (segment.internal.nodes.length > 0) {
            text += segment.internal.nodes.join("\\n");
          } else {
            text += "????";
          }
          text += '"];\n';
        }
        text += `${arrows}
`;
        text += "}";
        debug("DOT", text);
      })
    ),
    /**
     * Makes a DOT code of a given code path.
     * The DOT code can be visualized with Graphvis.
     * @param {CodePath} codePath A code path to make DOT.
     * @param {Object} traceMap Optional. A map to check whether or not segments had been done.
     * @returns {string} A DOT code of the code path.
     */
    makeDotArrows(codePath2, traceMap) {
      const stack = [[codePath2.initialSegment, 0]];
      const done = traceMap || /* @__PURE__ */ Object.create(null);
      let lastId = codePath2.initialSegment.id;
      let text = `initial->${codePath2.initialSegment.id}`;
      while (stack.length > 0) {
        const item = stack.pop();
        const segment = item[0];
        const index = item[1];
        if (done[segment.id] && index === 0) {
          continue;
        }
        done[segment.id] = segment;
        const nextSegment = segment.allNextSegments[index];
        if (!nextSegment) {
          continue;
        }
        if (lastId === segment.id) {
          text += `->${nextSegment.id}`;
        } else {
          text += `;
${segment.id}->${nextSegment.id}`;
        }
        lastId = nextSegment.id;
        stack.unshift([segment, 1 + index]);
        stack.push([nextSegment, 0]);
      }
      codePath2.returnedSegments.forEach((finalSegment) => {
        if (lastId === finalSegment.id) {
          text += "->final";
        } else {
          text += `;
${finalSegment.id}->final`;
        }
        lastId = null;
      });
      codePath2.thrownSegments.forEach((finalSegment) => {
        if (lastId === finalSegment.id) {
          text += "->thrown";
        } else {
          text += `;
${finalSegment.id}->thrown`;
        }
        lastId = null;
      });
      return `${text};`;
    }
  };
  return debugHelpers;
}
var codePathSegment;
var hasRequiredCodePathSegment;
function requireCodePathSegment() {
  if (hasRequiredCodePathSegment) return codePathSegment;
  hasRequiredCodePathSegment = 1;
  const debug = requireDebugHelpers();
  function isReachable(segment) {
    return segment.reachable;
  }
  class CodePathSegment {
    /**
     * Creates a new instance.
     * @param {string} id An identifier.
     * @param {CodePathSegment[]} allPrevSegments An array of the previous segments.
     *   This array includes unreachable segments.
     * @param {boolean} reachable A flag which shows this is reachable.
     */
    constructor(id2, allPrevSegments, reachable) {
      this.id = id2;
      this.nextSegments = [];
      this.prevSegments = allPrevSegments.filter(isReachable);
      this.allNextSegments = [];
      this.allPrevSegments = allPrevSegments;
      this.reachable = reachable;
      Object.defineProperty(this, "internal", {
        value: {
          // determines if the segment has been attached to the code path
          used: false,
          // array of previous segments coming from the end of a loop
          loopedPrevSegments: []
        }
      });
      if (debug.enabled) {
        this.internal.nodes = [];
      }
    }
    /**
     * Checks a given previous segment is coming from the end of a loop.
     * @param {CodePathSegment} segment A previous segment to check.
     * @returns {boolean} `true` if the segment is coming from the end of a loop.
     */
    isLoopedPrevSegment(segment) {
      return this.internal.loopedPrevSegments.includes(segment);
    }
    /**
     * Creates the root segment.
     * @param {string} id An identifier.
     * @returns {CodePathSegment} The created segment.
     */
    static newRoot(id2) {
      return new CodePathSegment(id2, [], true);
    }
    /**
     * Creates a new segment and appends it after the given segments.
     * @param {string} id An identifier.
     * @param {CodePathSegment[]} allPrevSegments An array of the previous segments
     *      to append to.
     * @returns {CodePathSegment} The created segment.
     */
    static newNext(id2, allPrevSegments) {
      return new CodePathSegment(
        id2,
        CodePathSegment.flattenUnusedSegments(allPrevSegments),
        allPrevSegments.some(isReachable)
      );
    }
    /**
     * Creates an unreachable segment and appends it after the given segments.
     * @param {string} id An identifier.
     * @param {CodePathSegment[]} allPrevSegments An array of the previous segments.
     * @returns {CodePathSegment} The created segment.
     */
    static newUnreachable(id2, allPrevSegments) {
      const segment = new CodePathSegment(
        id2,
        CodePathSegment.flattenUnusedSegments(allPrevSegments),
        false
      );
      CodePathSegment.markUsed(segment);
      return segment;
    }
    /**
     * Creates a segment that follows given segments.
     * This factory method does not connect with `allPrevSegments`.
     * But this inherits `reachable` flag.
     * @param {string} id An identifier.
     * @param {CodePathSegment[]} allPrevSegments An array of the previous segments.
     * @returns {CodePathSegment} The created segment.
     */
    static newDisconnected(id2, allPrevSegments) {
      return new CodePathSegment(id2, [], allPrevSegments.some(isReachable));
    }
    /**
     * Marks a given segment as used.
     *
     * And this function registers the segment into the previous segments as a next.
     * @param {CodePathSegment} segment A segment to mark.
     * @returns {void}
     */
    static markUsed(segment) {
      if (segment.internal.used) {
        return;
      }
      segment.internal.used = true;
      let i2;
      if (segment.reachable) {
        for (i2 = 0; i2 < segment.allPrevSegments.length; ++i2) {
          const prevSegment = segment.allPrevSegments[i2];
          prevSegment.allNextSegments.push(segment);
          prevSegment.nextSegments.push(segment);
        }
      } else {
        for (i2 = 0; i2 < segment.allPrevSegments.length; ++i2) {
          segment.allPrevSegments[i2].allNextSegments.push(segment);
        }
      }
    }
    /**
     * Marks a previous segment as looped.
     * @param {CodePathSegment} segment A segment.
     * @param {CodePathSegment} prevSegment A previous segment to mark.
     * @returns {void}
     */
    static markPrevSegmentAsLooped(segment, prevSegment) {
      segment.internal.loopedPrevSegments.push(prevSegment);
    }
    /**
     * Creates a new array based on an array of segments. If any segment in the
     * array is unused, then it is replaced by all of its previous segments.
     * All used segments are returned as-is without replacement.
     * @param {CodePathSegment[]} segments The array of segments to flatten.
     * @returns {CodePathSegment[]} The flattened array.
     */
    static flattenUnusedSegments(segments) {
      const done = /* @__PURE__ */ new Set();
      for (let i2 = 0; i2 < segments.length; ++i2) {
        const segment = segments[i2];
        if (done.has(segment)) {
          continue;
        }
        if (!segment.internal.used) {
          for (let j = 0; j < segment.allPrevSegments.length; ++j) {
            const prevSegment = segment.allPrevSegments[j];
            if (!done.has(prevSegment)) {
              done.add(prevSegment);
            }
          }
        } else {
          done.add(segment);
        }
      }
      return [...done];
    }
  }
  codePathSegment = CodePathSegment;
  return codePathSegment;
}
var forkContext;
var hasRequiredForkContext;
function requireForkContext() {
  if (hasRequiredForkContext) return forkContext;
  hasRequiredForkContext = 1;
  const assert2 = requireAssert(), CodePathSegment = requireCodePathSegment();
  function isReachable(segment) {
    return segment.reachable;
  }
  function createSegments(context, startIndex, endIndex, create) {
    const list = context.segmentsList;
    const normalizedBegin = startIndex >= 0 ? startIndex : list.length + startIndex;
    const normalizedEnd = endIndex >= 0 ? endIndex : list.length + endIndex;
    const segments = [];
    for (let i2 = 0; i2 < context.count; ++i2) {
      const allPrevSegments = [];
      for (let j = normalizedBegin; j <= normalizedEnd; ++j) {
        allPrevSegments.push(list[j][i2]);
      }
      segments.push(create(context.idGenerator.next(), allPrevSegments));
    }
    return segments;
  }
  function mergeExtraSegments(context, segments) {
    let currentSegments = segments;
    while (currentSegments.length > context.count) {
      const merged = [];
      for (let i2 = 0, length = Math.floor(currentSegments.length / 2); i2 < length; ++i2) {
        merged.push(
          CodePathSegment.newNext(context.idGenerator.next(), [
            currentSegments[i2],
            currentSegments[i2 + length]
          ])
        );
      }
      currentSegments = merged;
    }
    return currentSegments;
  }
  class ForkContext {
    /**
     * Creates a new instance.
     * @param {IdGenerator} idGenerator An identifier generator for segments.
     * @param {ForkContext|null} upper The preceding fork context.
     * @param {number} count The number of parallel segments in each element
     *      of `segmentsList`.
     */
    constructor(idGenerator2, upper, count) {
      this.idGenerator = idGenerator2;
      this.upper = upper;
      this.count = count;
      this.segmentsList = [];
    }
    /**
     * The segments that begin this fork context.
     * @type {Array<CodePathSegment>}
     */
    get head() {
      const list = this.segmentsList;
      return list.length === 0 ? [] : list.at(-1);
    }
    /**
     * Indicates if the context contains no segments.
     * @type {boolean}
     */
    get empty() {
      return this.segmentsList.length === 0;
    }
    /**
     * Indicates if there are any segments that are reachable.
     * @type {boolean}
     */
    get reachable() {
      const segments = this.head;
      return segments.length > 0 && segments.some(isReachable);
    }
    /**
     * Creates new segments in this context and appends them to the end of the
     * already existing `CodePathSegment`s specified by `startIndex` and
     * `endIndex`.
     * @param {number} startIndex The index of the first segment in the context
     *      that should be specified as previous segments for the newly created segments.
     * @param {number} endIndex The index of the last segment in the context
     *      that should be specified as previous segments for the newly created segments.
     * @returns {Array<CodePathSegment>} An array of the newly created segments.
     */
    makeNext(startIndex, endIndex) {
      return createSegments(
        this,
        startIndex,
        endIndex,
        CodePathSegment.newNext
      );
    }
    /**
     * Creates new unreachable segments in this context and appends them to the end of the
     * already existing `CodePathSegment`s specified by `startIndex` and
     * `endIndex`.
     * @param {number} startIndex The index of the first segment in the context
     *      that should be specified as previous segments for the newly created segments.
     * @param {number} endIndex The index of the last segment in the context
     *      that should be specified as previous segments for the newly created segments.
     * @returns {Array<CodePathSegment>} An array of the newly created segments.
     */
    makeUnreachable(startIndex, endIndex) {
      return createSegments(
        this,
        startIndex,
        endIndex,
        CodePathSegment.newUnreachable
      );
    }
    /**
     * Creates new segments in this context and does not append them to the end
     *  of the already existing `CodePathSegment`s specified by `startIndex` and
     * `endIndex`. The `startIndex` and `endIndex` are only used to determine if
     * the new segments should be reachable. If any of the segments in this range
     * are reachable then the new segments are also reachable; otherwise, the new
     * segments are unreachable.
     * @param {number} startIndex The index of the first segment in the context
     *      that should be considered for reachability.
     * @param {number} endIndex The index of the last segment in the context
     *      that should be considered for reachability.
     * @returns {Array<CodePathSegment>} An array of the newly created segments.
     */
    makeDisconnected(startIndex, endIndex) {
      return createSegments(
        this,
        startIndex,
        endIndex,
        CodePathSegment.newDisconnected
      );
    }
    /**
     * Adds segments to the head of this context.
     * @param {Array<CodePathSegment>} segments The segments to add.
     * @returns {void}
     */
    add(segments) {
      assert2(
        segments.length >= this.count,
        `${segments.length} >= ${this.count}`
      );
      this.segmentsList.push(mergeExtraSegments(this, segments));
    }
    /**
     * Replaces the head segments with the given segments.
     * The current head segments are removed.
     * @param {Array<CodePathSegment>} replacementHeadSegments The new head segments.
     * @returns {void}
     */
    replaceHead(replacementHeadSegments) {
      assert2(
        replacementHeadSegments.length >= this.count,
        `${replacementHeadSegments.length} >= ${this.count}`
      );
      this.segmentsList.splice(
        -1,
        1,
        mergeExtraSegments(this, replacementHeadSegments)
      );
    }
    /**
     * Adds all segments of a given fork context into this context.
     * @param {ForkContext} otherForkContext The fork context to add from.
     * @returns {void}
     */
    addAll(otherForkContext) {
      assert2(otherForkContext.count === this.count);
      this.segmentsList.push(...otherForkContext.segmentsList);
    }
    /**
     * Clears all segments in this context.
     * @returns {void}
     */
    clear() {
      this.segmentsList = [];
    }
    /**
     * Creates a new root context, meaning that there are no parent
     * fork contexts.
     * @param {IdGenerator} idGenerator An identifier generator for segments.
     * @returns {ForkContext} New fork context.
     */
    static newRoot(idGenerator2) {
      const context = new ForkContext(idGenerator2, null, 1);
      context.add([CodePathSegment.newRoot(idGenerator2.next())]);
      return context;
    }
    /**
     * Creates an empty fork context preceded by a given context.
     * @param {ForkContext} parentContext The parent fork context.
     * @param {boolean} shouldForkLeavingPath Indicates that we are inside of
     *      a `finally` block and should therefore fork the path that leaves
     *      `finally`.
     * @returns {ForkContext} New fork context.
     */
    static newEmpty(parentContext, shouldForkLeavingPath) {
      return new ForkContext(
        parentContext.idGenerator,
        parentContext,
        (shouldForkLeavingPath ? 2 : 1) * parentContext.count
      );
    }
  }
  forkContext = ForkContext;
  return forkContext;
}
var codePathState;
var hasRequiredCodePathState;
function requireCodePathState() {
  if (hasRequiredCodePathState) return codePathState;
  hasRequiredCodePathState = 1;
  const CodePathSegment = requireCodePathSegment(), ForkContext = requireForkContext();
  class BreakContext {
    /**
     * Creates a new instance.
     * @param {BreakContext} upperContext The previous `BreakContext`.
     * @param {boolean} breakable Indicates if we are inside a statement where
     *      `break` without a label will exit the statement.
     * @param {string|null} label The label for the statement.
     * @param {ForkContext} forkContext The current fork context.
     */
    constructor(upperContext, breakable, label, forkContext2) {
      this.upper = upperContext;
      this.breakable = breakable;
      this.label = label;
      this.brokenForkContext = ForkContext.newEmpty(forkContext2);
    }
  }
  class ChainContext {
    /**
     * Creates a new instance.
     * @param {ChainContext} upperContext The previous `ChainContext`.
     */
    constructor(upperContext) {
      this.upper = upperContext;
      this.choiceContextCount = 0;
    }
  }
  class ChoiceContext {
    /**
     * Creates a new instance.
     * @param {ChoiceContext} upperContext The previous `ChoiceContext`.
     * @param {string} kind The kind of choice. If it's a logical or assignment expression, this
     *      is `"&&"` or `"||"` or `"??"`; if it's an `if` statement or
     *      conditional expression, this is `"test"`; otherwise, this is `"loop"`.
     * @param {boolean} isForkingAsResult Indicates if the result of the choice
     *      creates a fork.
     * @param {ForkContext} forkContext The containing `ForkContext`.
     */
    constructor(upperContext, kind, isForkingAsResult, forkContext2) {
      this.upper = upperContext;
      this.kind = kind;
      this.isForkingAsResult = isForkingAsResult;
      this.trueForkContext = ForkContext.newEmpty(forkContext2);
      this.falseForkContext = ForkContext.newEmpty(forkContext2);
      this.nullishForkContext = ForkContext.newEmpty(forkContext2);
      this.processed = false;
    }
  }
  class LoopContextBase {
    /**
     * Creates a new instance.
     * @param {LoopContext|null} upperContext The previous `LoopContext`.
     * @param {string} type The AST node's `type` for the loop.
     * @param {string|null} label The label for the loop from an enclosing `LabeledStatement`.
     * @param {BreakContext} breakContext The context for breaking the loop.
     */
    constructor(upperContext, type2, label, breakContext) {
      this.upper = upperContext;
      this.type = type2;
      this.label = label;
      this.brokenForkContext = breakContext.brokenForkContext;
    }
  }
  class WhileLoopContext extends LoopContextBase {
    /**
     * Creates a new instance.
     * @param {LoopContext|null} upperContext The previous `LoopContext`.
     * @param {string|null} label The label for the loop from an enclosing `LabeledStatement`.
     * @param {BreakContext} breakContext The context for breaking the loop.
     */
    constructor(upperContext, label, breakContext) {
      super(upperContext, "WhileStatement", label, breakContext);
      this.test = void 0;
      this.continueDestSegments = null;
    }
  }
  class DoWhileLoopContext extends LoopContextBase {
    /**
     * Creates a new instance.
     * @param {LoopContext|null} upperContext The previous `LoopContext`.
     * @param {string|null} label The label for the loop from an enclosing `LabeledStatement`.
     * @param {BreakContext} breakContext The context for breaking the loop.
     * @param {ForkContext} forkContext The enclosing fork context.
     */
    constructor(upperContext, label, breakContext, forkContext2) {
      super(upperContext, "DoWhileStatement", label, breakContext);
      this.test = void 0;
      this.entrySegments = null;
      this.continueForkContext = ForkContext.newEmpty(forkContext2);
    }
  }
  class ForLoopContext extends LoopContextBase {
    /**
     * Creates a new instance.
     * @param {LoopContext|null} upperContext The previous `LoopContext`.
     * @param {string|null} label The label for the loop from an enclosing `LabeledStatement`.
     * @param {BreakContext} breakContext The context for breaking the loop.
     */
    constructor(upperContext, label, breakContext) {
      super(upperContext, "ForStatement", label, breakContext);
      this.test = void 0;
      this.endOfInitSegments = null;
      this.testSegments = null;
      this.endOfTestSegments = null;
      this.updateSegments = null;
      this.endOfUpdateSegments = null;
      this.continueDestSegments = null;
    }
  }
  class ForInLoopContext extends LoopContextBase {
    /**
     * Creates a new instance.
     * @param {LoopContext|null} upperContext The previous `LoopContext`.
     * @param {string|null} label The label for the loop from an enclosing `LabeledStatement`.
     * @param {BreakContext} breakContext The context for breaking the loop.
     */
    constructor(upperContext, label, breakContext) {
      super(upperContext, "ForInStatement", label, breakContext);
      this.prevSegments = null;
      this.leftSegments = null;
      this.endOfLeftSegments = null;
      this.continueDestSegments = null;
    }
  }
  class ForOfLoopContext extends LoopContextBase {
    /**
     * Creates a new instance.
     * @param {LoopContext|null} upperContext The previous `LoopContext`.
     * @param {string|null} label The label for the loop from an enclosing `LabeledStatement`.
     * @param {BreakContext} breakContext The context for breaking the loop.
     */
    constructor(upperContext, label, breakContext) {
      super(upperContext, "ForOfStatement", label, breakContext);
      this.prevSegments = null;
      this.leftSegments = null;
      this.endOfLeftSegments = null;
      this.continueDestSegments = null;
    }
  }
  class SwitchContext {
    /**
     * Creates a new instance.
     * @param {SwitchContext} upperContext The previous context.
     * @param {boolean} hasCase Indicates if there is at least one `case` statement.
     *      `default` doesn't count.
     */
    constructor(upperContext, hasCase) {
      this.upper = upperContext;
      this.hasCase = hasCase;
      this.defaultSegments = null;
      this.defaultBodySegments = null;
      this.foundEmptyDefault = false;
      this.lastIsDefault = false;
      this.forkCount = 0;
    }
  }
  class TryContext {
    /**
     * Creates a new instance.
     * @param {TryContext} upperContext The previous context.
     * @param {boolean} hasFinalizer Indicates if the `try` statement has a
     *      `finally` block.
     * @param {ForkContext} forkContext The enclosing fork context.
     */
    constructor(upperContext, hasFinalizer, forkContext2) {
      this.upper = upperContext;
      this.hasFinalizer = hasFinalizer;
      this.position = "try";
      this.returnedForkContext = hasFinalizer ? ForkContext.newEmpty(forkContext2) : null;
      this.thrownForkContext = ForkContext.newEmpty(forkContext2);
      this.lastOfTryIsReachable = false;
      this.lastOfCatchIsReachable = false;
    }
  }
  function addToReturnedOrThrown(dest, others, all, segments) {
    for (let i2 = 0; i2 < segments.length; ++i2) {
      const segment = segments[i2];
      dest.push(segment);
      if (!others.includes(segment)) {
        all.push(segment);
      }
    }
  }
  function getContinueContext(state, label) {
    if (!label) {
      return state.loopContext;
    }
    let context = state.loopContext;
    while (context) {
      if (context.label === label) {
        return context;
      }
      context = context.upper;
    }
    return null;
  }
  function getBreakContext(state, label) {
    let context = state.breakContext;
    while (context) {
      if (label ? context.label === label : context.breakable) {
        return context;
      }
      context = context.upper;
    }
    return null;
  }
  function getReturnContext(state) {
    let context = state.tryContext;
    while (context) {
      if (context.hasFinalizer && context.position !== "finally") {
        return context;
      }
      context = context.upper;
    }
    return state;
  }
  function getThrowContext(state) {
    let context = state.tryContext;
    while (context) {
      if (context.position === "try" || context.hasFinalizer && context.position === "catch") {
        return context;
      }
      context = context.upper;
    }
    return state;
  }
  function removeFromArray(elements, value) {
    elements.splice(elements.indexOf(value), 1);
  }
  function disconnectSegments(prevSegments, nextSegments) {
    for (let i2 = 0; i2 < prevSegments.length; ++i2) {
      const prevSegment = prevSegments[i2];
      const nextSegment = nextSegments[i2];
      removeFromArray(prevSegment.nextSegments, nextSegment);
      removeFromArray(prevSegment.allNextSegments, nextSegment);
      removeFromArray(nextSegment.prevSegments, prevSegment);
      removeFromArray(nextSegment.allPrevSegments, prevSegment);
    }
  }
  function makeLooped(state, unflattenedFromSegments, unflattenedToSegments) {
    const fromSegments = CodePathSegment.flattenUnusedSegments(
      unflattenedFromSegments
    );
    const toSegments = CodePathSegment.flattenUnusedSegments(
      unflattenedToSegments
    );
    const end = Math.min(fromSegments.length, toSegments.length);
    for (let i2 = 0; i2 < end; ++i2) {
      const fromSegment = fromSegments[i2];
      const toSegment = toSegments[i2];
      if (toSegment.reachable) {
        fromSegment.nextSegments.push(toSegment);
      }
      if (fromSegment.reachable) {
        toSegment.prevSegments.push(fromSegment);
      }
      fromSegment.allNextSegments.push(toSegment);
      toSegment.allPrevSegments.push(fromSegment);
      if (toSegment.allPrevSegments.length >= 2) {
        CodePathSegment.markPrevSegmentAsLooped(toSegment, fromSegment);
      }
      state.notifyLooped(fromSegment, toSegment);
    }
  }
  function finalizeTestSegmentsOfFor(context, choiceContext, head) {
    if (!choiceContext.processed) {
      choiceContext.trueForkContext.add(head);
      choiceContext.falseForkContext.add(head);
      choiceContext.nullishForkContext.add(head);
    }
    if (context.test !== true) {
      context.brokenForkContext.addAll(choiceContext.falseForkContext);
    }
    context.endOfTestSegments = choiceContext.trueForkContext.makeNext(0, -1);
  }
  class CodePathState {
    /**
     * Creates a new instance.
     * @param {IdGenerator} idGenerator An id generator to generate id for code
     *   path segments.
     * @param {Function} onLooped A callback function to notify looping.
     */
    constructor(idGenerator2, onLooped) {
      this.idGenerator = idGenerator2;
      this.notifyLooped = onLooped;
      this.forkContext = ForkContext.newRoot(idGenerator2);
      this.choiceContext = null;
      this.switchContext = null;
      this.tryContext = null;
      this.loopContext = null;
      this.breakContext = null;
      this.chainContext = null;
      this.currentSegments = [];
      this.initialSegment = this.forkContext.head[0];
      this.finalSegments = [];
      this.returnedForkContext = [];
      this.thrownForkContext = [];
      const final = this.finalSegments;
      const returned = this.returnedForkContext;
      const thrown = this.thrownForkContext;
      returned.add = addToReturnedOrThrown.bind(
        null,
        returned,
        thrown,
        final
      );
      thrown.add = addToReturnedOrThrown.bind(null, thrown, returned, final);
    }
    /**
     * A passthrough property exposing the current pointer as part of the API.
     * @type {CodePathSegment[]}
     */
    get headSegments() {
      return this.forkContext.head;
    }
    /**
     * The parent forking context.
     * This is used for the root of new forks.
     * @type {ForkContext}
     */
    get parentForkContext() {
      const current = this.forkContext;
      return current && current.upper;
    }
    /**
     * Creates and stacks new forking context.
     * @param {boolean} forkLeavingPath A flag which shows being in a
     *   "finally" block.
     * @returns {ForkContext} The created context.
     */
    pushForkContext(forkLeavingPath) {
      this.forkContext = ForkContext.newEmpty(
        this.forkContext,
        forkLeavingPath
      );
      return this.forkContext;
    }
    /**
     * Pops and merges the last forking context.
     * @returns {ForkContext} The last context.
     */
    popForkContext() {
      const lastContext = this.forkContext;
      this.forkContext = lastContext.upper;
      this.forkContext.replaceHead(lastContext.makeNext(0, -1));
      return lastContext;
    }
    /**
     * Creates a new path.
     * @returns {void}
     */
    forkPath() {
      this.forkContext.add(this.parentForkContext.makeNext(-1, -1));
    }
    /**
     * Creates a bypass path.
     * This is used for such as IfStatement which does not have "else" chunk.
     * @returns {void}
     */
    forkBypassPath() {
      this.forkContext.add(this.parentForkContext.head);
    }
    //--------------------------------------------------------------------------
    // ConditionalExpression, LogicalExpression, IfStatement
    //--------------------------------------------------------------------------
    /**
     * Creates a context for ConditionalExpression, LogicalExpression, AssignmentExpression (logical assignments only),
     * IfStatement, WhileStatement, DoWhileStatement, or ForStatement.
     *
     * LogicalExpressions have cases that it goes different paths between the
     * `true` case and the `false` case.
     *
     * For Example:
     *
     *     if (a || b) {
     *         foo();
     *     } else {
     *         bar();
     *     }
     *
     * In this case, `b` is evaluated always in the code path of the `else`
     * block, but it's not so in the code path of the `if` block.
     * So there are 3 paths.
     *
     *     a -> foo();
     *     a -> b -> foo();
     *     a -> b -> bar();
     * @param {string} kind A kind string.
     *   If the new context is LogicalExpression's or AssignmentExpression's, this is `"&&"` or `"||"` or `"??"`.
     *   If it's IfStatement's or ConditionalExpression's, this is `"test"`.
     *   Otherwise, this is `"loop"`.
     * @param {boolean} isForkingAsResult Indicates if the result of the choice
     *      creates a fork.
     * @returns {void}
     */
    pushChoiceContext(kind, isForkingAsResult) {
      this.choiceContext = new ChoiceContext(
        this.choiceContext,
        kind,
        isForkingAsResult,
        this.forkContext
      );
    }
    /**
     * Pops the last choice context and finalizes it.
     * This is called upon leaving a node that represents a choice.
     * @throws {Error} (Unreachable.)
     * @returns {ChoiceContext} The popped context.
     */
    popChoiceContext() {
      const poppedChoiceContext = this.choiceContext;
      const forkContext2 = this.forkContext;
      const head = forkContext2.head;
      this.choiceContext = poppedChoiceContext.upper;
      switch (poppedChoiceContext.kind) {
        case "&&":
        case "||":
        case "??":
          if (!poppedChoiceContext.processed) {
            poppedChoiceContext.trueForkContext.add(head);
            poppedChoiceContext.falseForkContext.add(head);
            poppedChoiceContext.nullishForkContext.add(head);
          }
          if (poppedChoiceContext.isForkingAsResult) {
            const parentContext = this.choiceContext;
            parentContext.trueForkContext.addAll(
              poppedChoiceContext.trueForkContext
            );
            parentContext.falseForkContext.addAll(
              poppedChoiceContext.falseForkContext
            );
            parentContext.nullishForkContext.addAll(
              poppedChoiceContext.nullishForkContext
            );
            parentContext.processed = true;
            return poppedChoiceContext;
          }
          break;
        case "test":
          if (!poppedChoiceContext.processed) {
            poppedChoiceContext.trueForkContext.clear();
            poppedChoiceContext.trueForkContext.add(head);
          } else {
            poppedChoiceContext.falseForkContext.clear();
            poppedChoiceContext.falseForkContext.add(head);
          }
          break;
        case "loop":
          return poppedChoiceContext;
        /* c8 ignore next */
        default:
          throw new Error("unreachable");
      }
      const combinedForkContext = poppedChoiceContext.trueForkContext;
      combinedForkContext.addAll(poppedChoiceContext.falseForkContext);
      forkContext2.replaceHead(combinedForkContext.makeNext(0, -1));
      return poppedChoiceContext;
    }
    /**
     * Creates a code path segment to represent right-hand operand of a logical
     * expression.
     * This is called in the preprocessing phase when entering a node.
     * @throws {Error} (Unreachable.)
     * @returns {void}
     */
    makeLogicalRight() {
      const currentChoiceContext = this.choiceContext;
      const forkContext2 = this.forkContext;
      if (currentChoiceContext.processed) {
        let prevForkContext;
        switch (currentChoiceContext.kind) {
          case "&&":
            prevForkContext = currentChoiceContext.trueForkContext;
            break;
          case "||":
            prevForkContext = currentChoiceContext.falseForkContext;
            break;
          case "??":
            prevForkContext = currentChoiceContext.nullishForkContext;
            break;
          default:
            throw new Error("unreachable");
        }
        forkContext2.replaceHead(prevForkContext.makeNext(0, -1));
        prevForkContext.clear();
        currentChoiceContext.processed = false;
      } else {
        switch (currentChoiceContext.kind) {
          case "&&":
            currentChoiceContext.falseForkContext.add(forkContext2.head);
            currentChoiceContext.nullishForkContext.add(
              forkContext2.head
            );
            break;
          case "||":
            currentChoiceContext.trueForkContext.add(forkContext2.head);
            break;
          case "??":
            currentChoiceContext.trueForkContext.add(forkContext2.head);
            currentChoiceContext.falseForkContext.add(forkContext2.head);
            break;
          default:
            throw new Error("unreachable");
        }
        forkContext2.replaceHead(forkContext2.makeNext(-1, -1));
      }
    }
    /**
     * Makes a code path segment of the `if` block.
     * @returns {void}
     */
    makeIfConsequent() {
      const context = this.choiceContext;
      const forkContext2 = this.forkContext;
      if (!context.processed) {
        context.trueForkContext.add(forkContext2.head);
        context.falseForkContext.add(forkContext2.head);
        context.nullishForkContext.add(forkContext2.head);
      }
      context.processed = false;
      forkContext2.replaceHead(context.trueForkContext.makeNext(0, -1));
    }
    /**
     * Makes a code path segment of the `else` block.
     * @returns {void}
     */
    makeIfAlternate() {
      const context = this.choiceContext;
      const forkContext2 = this.forkContext;
      context.trueForkContext.clear();
      context.trueForkContext.add(forkContext2.head);
      context.processed = true;
      forkContext2.replaceHead(context.falseForkContext.makeNext(0, -1));
    }
    //--------------------------------------------------------------------------
    // ChainExpression
    //--------------------------------------------------------------------------
    /**
     * Pushes a new `ChainExpression` context to the stack. This method is
     * called when entering a `ChainExpression` node. A chain context is used to
     * count forking in the optional chain then merge them on the exiting from the
     * `ChainExpression` node.
     * @returns {void}
     */
    pushChainContext() {
      this.chainContext = new ChainContext(this.chainContext);
    }
    /**
     * Pop a `ChainExpression` context from the stack. This method is called on
     * exiting from each `ChainExpression` node. This merges all forks of the
     * last optional chaining.
     * @returns {void}
     */
    popChainContext() {
      const context = this.chainContext;
      this.chainContext = context.upper;
      for (let i2 = context.choiceContextCount; i2 > 0; --i2) {
        this.popChoiceContext();
      }
    }
    /**
     * Create a choice context for optional access.
     * This method is called on entering to each `(Call|Member)Expression[optional=true]` node.
     * This creates a choice context as similar to `LogicalExpression[operator="??"]` node.
     * @returns {void}
     */
    makeOptionalNode() {
      if (this.chainContext) {
        this.chainContext.choiceContextCount += 1;
        this.pushChoiceContext("??", false);
      }
    }
    /**
     * Create a fork.
     * This method is called on entering to the `arguments|property` property of each `(Call|Member)Expression` node.
     * @returns {void}
     */
    makeOptionalRight() {
      if (this.chainContext) {
        this.makeLogicalRight();
      }
    }
    //--------------------------------------------------------------------------
    // SwitchStatement
    //--------------------------------------------------------------------------
    /**
     * Creates a context object of SwitchStatement and stacks it.
     * @param {boolean} hasCase `true` if the switch statement has one or more
     *   case parts.
     * @param {string|null} label The label text.
     * @returns {void}
     */
    pushSwitchContext(hasCase, label) {
      this.switchContext = new SwitchContext(this.switchContext, hasCase);
      this.pushBreakContext(true, label);
    }
    /**
     * Pops the last context of SwitchStatement and finalizes it.
     *
     * - Disposes all forking stack for `case` and `default`.
     * - Creates the next code path segment from `context.brokenForkContext`.
     * - If the last `SwitchCase` node is not a `default` part, creates a path
     *   to the `default` body.
     * @returns {void}
     */
    popSwitchContext() {
      const context = this.switchContext;
      this.switchContext = context.upper;
      const forkContext2 = this.forkContext;
      const brokenForkContext = this.popBreakContext().brokenForkContext;
      if (context.forkCount === 0) {
        if (!brokenForkContext.empty) {
          brokenForkContext.add(forkContext2.makeNext(-1, -1));
          forkContext2.replaceHead(brokenForkContext.makeNext(0, -1));
        }
        return;
      }
      const lastSegments = forkContext2.head;
      this.forkBypassPath();
      const lastCaseSegments = forkContext2.head;
      brokenForkContext.add(lastSegments);
      if (!context.lastIsDefault) {
        if (context.defaultBodySegments) {
          disconnectSegments(
            context.defaultSegments,
            context.defaultBodySegments
          );
          makeLooped(this, lastCaseSegments, context.defaultBodySegments);
        } else {
          brokenForkContext.add(lastCaseSegments);
        }
      }
      for (let i2 = 0; i2 < context.forkCount; ++i2) {
        this.forkContext = this.forkContext.upper;
      }
      this.forkContext.replaceHead(brokenForkContext.makeNext(0, -1));
    }
    /**
     * Makes a code path segment for a `SwitchCase` node.
     * @param {boolean} isCaseBodyEmpty `true` if the body is empty.
     * @param {boolean} isDefaultCase `true` if the body is the default case.
     * @returns {void}
     */
    makeSwitchCaseBody(isCaseBodyEmpty, isDefaultCase) {
      const context = this.switchContext;
      if (!context.hasCase) {
        return;
      }
      const parentForkContext = this.forkContext;
      const forkContext2 = this.pushForkContext();
      forkContext2.add(parentForkContext.makeNext(0, -1));
      if (isDefaultCase) {
        context.defaultSegments = parentForkContext.head;
        if (isCaseBodyEmpty) {
          context.foundEmptyDefault = true;
        } else {
          context.defaultBodySegments = forkContext2.head;
        }
      } else {
        if (!isCaseBodyEmpty && context.foundEmptyDefault) {
          context.foundEmptyDefault = false;
          context.defaultBodySegments = forkContext2.head;
        }
      }
      context.lastIsDefault = isDefaultCase;
      context.forkCount += 1;
    }
    //--------------------------------------------------------------------------
    // TryStatement
    //--------------------------------------------------------------------------
    /**
     * Creates a context object of TryStatement and stacks it.
     * @param {boolean} hasFinalizer `true` if the try statement has a
     *   `finally` block.
     * @returns {void}
     */
    pushTryContext(hasFinalizer) {
      this.tryContext = new TryContext(
        this.tryContext,
        hasFinalizer,
        this.forkContext
      );
    }
    /**
     * Pops the last context of TryStatement and finalizes it.
     * @returns {void}
     */
    popTryContext() {
      const context = this.tryContext;
      this.tryContext = context.upper;
      if (context.position === "catch") {
        this.popForkContext();
        return;
      }
      const originalReturnedForkContext = context.returnedForkContext;
      const originalThrownForkContext = context.thrownForkContext;
      if (originalReturnedForkContext.empty && originalThrownForkContext.empty) {
        return;
      }
      const headSegments = this.forkContext.head;
      this.forkContext = this.forkContext.upper;
      const normalSegments = headSegments.slice(
        0,
        headSegments.length / 2 | 0
      );
      const leavingSegments = headSegments.slice(
        headSegments.length / 2 | 0
      );
      if (!originalReturnedForkContext.empty) {
        getReturnContext(this).returnedForkContext.add(leavingSegments);
      }
      if (!originalThrownForkContext.empty) {
        getThrowContext(this).thrownForkContext.add(leavingSegments);
      }
      this.forkContext.replaceHead(normalSegments);
      if (!context.lastOfTryIsReachable && !context.lastOfCatchIsReachable) {
        this.forkContext.makeUnreachable();
      }
    }
    /**
     * Makes a code path segment for a `catch` block.
     * @returns {void}
     */
    makeCatchBlock() {
      const context = this.tryContext;
      const forkContext2 = this.forkContext;
      const originalThrownForkContext = context.thrownForkContext;
      context.position = "catch";
      context.thrownForkContext = ForkContext.newEmpty(forkContext2);
      context.lastOfTryIsReachable = forkContext2.reachable;
      originalThrownForkContext.add(forkContext2.head);
      const thrownSegments = originalThrownForkContext.makeNext(0, -1);
      this.pushForkContext();
      this.forkBypassPath();
      this.forkContext.add(thrownSegments);
    }
    /**
     * Makes a code path segment for a `finally` block.
     *
     * In the `finally` block, parallel paths are created. The parallel paths
     * are used as leaving-paths. The leaving-paths are paths from `return`
     * statements and `throw` statements in a `try` block or a `catch` block.
     * @returns {void}
     */
    makeFinallyBlock() {
      const context = this.tryContext;
      let forkContext2 = this.forkContext;
      const originalReturnedForkContext = context.returnedForkContext;
      const originalThrownForContext = context.thrownForkContext;
      const headOfLeavingSegments = forkContext2.head;
      if (context.position === "catch") {
        this.popForkContext();
        forkContext2 = this.forkContext;
        context.lastOfCatchIsReachable = forkContext2.reachable;
      } else {
        context.lastOfTryIsReachable = forkContext2.reachable;
      }
      context.position = "finally";
      if (originalReturnedForkContext.empty && originalThrownForContext.empty) {
        return;
      }
      const segments = forkContext2.makeNext(-1, -1);
      for (let i2 = 0; i2 < forkContext2.count; ++i2) {
        const prevSegsOfLeavingSegment = [headOfLeavingSegments[i2]];
        for (let j = 0; j < originalReturnedForkContext.segmentsList.length; ++j) {
          prevSegsOfLeavingSegment.push(
            originalReturnedForkContext.segmentsList[j][i2]
          );
        }
        for (let j = 0; j < originalThrownForContext.segmentsList.length; ++j) {
          prevSegsOfLeavingSegment.push(
            originalThrownForContext.segmentsList[j][i2]
          );
        }
        segments.push(
          CodePathSegment.newNext(
            this.idGenerator.next(),
            prevSegsOfLeavingSegment
          )
        );
      }
      this.pushForkContext(true);
      this.forkContext.add(segments);
    }
    /**
     * Makes a code path segment from the first throwable node to the `catch`
     * block or the `finally` block.
     * @returns {void}
     */
    makeFirstThrowablePathInTryBlock() {
      const forkContext2 = this.forkContext;
      if (!forkContext2.reachable) {
        return;
      }
      const context = getThrowContext(this);
      if (context === this || context.position !== "try" || !context.thrownForkContext.empty) {
        return;
      }
      context.thrownForkContext.add(forkContext2.head);
      forkContext2.replaceHead(forkContext2.makeNext(-1, -1));
    }
    //--------------------------------------------------------------------------
    // Loop Statements
    //--------------------------------------------------------------------------
    /**
     * Creates a context object of a loop statement and stacks it.
     * @param {string} type The type of the node which was triggered. One of
     *   `WhileStatement`, `DoWhileStatement`, `ForStatement`, `ForInStatement`,
     *   and `ForStatement`.
     * @param {string|null} label A label of the node which was triggered.
     * @throws {Error} (Unreachable - unknown type.)
     * @returns {void}
     */
    pushLoopContext(type2, label) {
      const forkContext2 = this.forkContext;
      const breakContext = this.pushBreakContext(true, label);
      switch (type2) {
        case "WhileStatement":
          this.pushChoiceContext("loop", false);
          this.loopContext = new WhileLoopContext(
            this.loopContext,
            label,
            breakContext
          );
          break;
        case "DoWhileStatement":
          this.pushChoiceContext("loop", false);
          this.loopContext = new DoWhileLoopContext(
            this.loopContext,
            label,
            breakContext,
            forkContext2
          );
          break;
        case "ForStatement":
          this.pushChoiceContext("loop", false);
          this.loopContext = new ForLoopContext(
            this.loopContext,
            label,
            breakContext
          );
          break;
        case "ForInStatement":
          this.loopContext = new ForInLoopContext(
            this.loopContext,
            label,
            breakContext
          );
          break;
        case "ForOfStatement":
          this.loopContext = new ForOfLoopContext(
            this.loopContext,
            label,
            breakContext
          );
          break;
        /* c8 ignore next */
        default:
          throw new Error(`unknown type: "${type2}"`);
      }
    }
    /**
     * Pops the last context of a loop statement and finalizes it.
     * @throws {Error} (Unreachable - unknown type.)
     * @returns {void}
     */
    popLoopContext() {
      const context = this.loopContext;
      this.loopContext = context.upper;
      const forkContext2 = this.forkContext;
      const brokenForkContext = this.popBreakContext().brokenForkContext;
      switch (context.type) {
        case "WhileStatement":
        case "ForStatement":
          this.popChoiceContext();
          makeLooped(
            this,
            forkContext2.head,
            context.continueDestSegments
          );
          break;
        case "DoWhileStatement": {
          const choiceContext = this.popChoiceContext();
          if (!choiceContext.processed) {
            choiceContext.trueForkContext.add(forkContext2.head);
            choiceContext.falseForkContext.add(forkContext2.head);
          }
          if (context.test !== true) {
            brokenForkContext.addAll(choiceContext.falseForkContext);
          }
          const segmentsList = choiceContext.trueForkContext.segmentsList;
          for (let i2 = 0; i2 < segmentsList.length; ++i2) {
            makeLooped(this, segmentsList[i2], context.entrySegments);
          }
          break;
        }
        case "ForInStatement":
        case "ForOfStatement":
          brokenForkContext.add(forkContext2.head);
          makeLooped(this, forkContext2.head, context.leftSegments);
          break;
        /* c8 ignore next */
        default:
          throw new Error("unreachable");
      }
      if (brokenForkContext.empty) {
        forkContext2.replaceHead(forkContext2.makeUnreachable(-1, -1));
      } else {
        forkContext2.replaceHead(brokenForkContext.makeNext(0, -1));
      }
    }
    /**
     * Makes a code path segment for the test part of a WhileStatement.
     * @param {boolean|undefined} test The test value (only when constant).
     * @returns {void}
     */
    makeWhileTest(test) {
      const context = this.loopContext;
      const forkContext2 = this.forkContext;
      const testSegments = forkContext2.makeNext(0, -1);
      context.test = test;
      context.continueDestSegments = testSegments;
      forkContext2.replaceHead(testSegments);
    }
    /**
     * Makes a code path segment for the body part of a WhileStatement.
     * @returns {void}
     */
    makeWhileBody() {
      const context = this.loopContext;
      const choiceContext = this.choiceContext;
      const forkContext2 = this.forkContext;
      if (!choiceContext.processed) {
        choiceContext.trueForkContext.add(forkContext2.head);
        choiceContext.falseForkContext.add(forkContext2.head);
      }
      if (context.test !== true) {
        context.brokenForkContext.addAll(choiceContext.falseForkContext);
      }
      forkContext2.replaceHead(choiceContext.trueForkContext.makeNext(0, -1));
    }
    /**
     * Makes a code path segment for the body part of a DoWhileStatement.
     * @returns {void}
     */
    makeDoWhileBody() {
      const context = this.loopContext;
      const forkContext2 = this.forkContext;
      const bodySegments = forkContext2.makeNext(-1, -1);
      context.entrySegments = bodySegments;
      forkContext2.replaceHead(bodySegments);
    }
    /**
     * Makes a code path segment for the test part of a DoWhileStatement.
     * @param {boolean|undefined} test The test value (only when constant).
     * @returns {void}
     */
    makeDoWhileTest(test) {
      const context = this.loopContext;
      const forkContext2 = this.forkContext;
      context.test = test;
      if (!context.continueForkContext.empty) {
        context.continueForkContext.add(forkContext2.head);
        const testSegments = context.continueForkContext.makeNext(0, -1);
        forkContext2.replaceHead(testSegments);
      }
    }
    /**
     * Makes a code path segment for the test part of a ForStatement.
     * @param {boolean|undefined} test The test value (only when constant).
     * @returns {void}
     */
    makeForTest(test) {
      const context = this.loopContext;
      const forkContext2 = this.forkContext;
      const endOfInitSegments = forkContext2.head;
      const testSegments = forkContext2.makeNext(-1, -1);
      context.test = test;
      context.endOfInitSegments = endOfInitSegments;
      context.continueDestSegments = context.testSegments = testSegments;
      forkContext2.replaceHead(testSegments);
    }
    /**
     * Makes a code path segment for the update part of a ForStatement.
     * @returns {void}
     */
    makeForUpdate() {
      const context = this.loopContext;
      const choiceContext = this.choiceContext;
      const forkContext2 = this.forkContext;
      if (context.testSegments) {
        finalizeTestSegmentsOfFor(context, choiceContext, forkContext2.head);
      } else {
        context.endOfInitSegments = forkContext2.head;
      }
      const updateSegments = forkContext2.makeDisconnected(-1, -1);
      context.continueDestSegments = context.updateSegments = updateSegments;
      forkContext2.replaceHead(updateSegments);
    }
    /**
     * Makes a code path segment for the body part of a ForStatement.
     * @returns {void}
     */
    makeForBody() {
      const context = this.loopContext;
      const choiceContext = this.choiceContext;
      const forkContext2 = this.forkContext;
      if (context.updateSegments) {
        context.endOfUpdateSegments = forkContext2.head;
        if (context.testSegments) {
          makeLooped(
            this,
            context.endOfUpdateSegments,
            context.testSegments
          );
        }
      } else if (context.testSegments) {
        finalizeTestSegmentsOfFor(context, choiceContext, forkContext2.head);
      } else {
        context.endOfInitSegments = forkContext2.head;
      }
      let bodySegments = context.endOfTestSegments;
      if (!bodySegments) {
        const prevForkContext = ForkContext.newEmpty(forkContext2);
        prevForkContext.add(context.endOfInitSegments);
        if (context.endOfUpdateSegments) {
          prevForkContext.add(context.endOfUpdateSegments);
        }
        bodySegments = prevForkContext.makeNext(0, -1);
      }
      context.continueDestSegments = context.continueDestSegments || bodySegments;
      forkContext2.replaceHead(bodySegments);
    }
    /**
     * Makes a code path segment for the left part of a ForInStatement and a
     * ForOfStatement.
     * @returns {void}
     */
    makeForInOfLeft() {
      const context = this.loopContext;
      const forkContext2 = this.forkContext;
      const leftSegments = forkContext2.makeDisconnected(-1, -1);
      context.prevSegments = forkContext2.head;
      context.leftSegments = context.continueDestSegments = leftSegments;
      forkContext2.replaceHead(leftSegments);
    }
    /**
     * Makes a code path segment for the right part of a ForInStatement and a
     * ForOfStatement.
     * @returns {void}
     */
    makeForInOfRight() {
      const context = this.loopContext;
      const forkContext2 = this.forkContext;
      const temp = ForkContext.newEmpty(forkContext2);
      temp.add(context.prevSegments);
      const rightSegments = temp.makeNext(-1, -1);
      context.endOfLeftSegments = forkContext2.head;
      forkContext2.replaceHead(rightSegments);
    }
    /**
     * Makes a code path segment for the body part of a ForInStatement and a
     * ForOfStatement.
     * @returns {void}
     */
    makeForInOfBody() {
      const context = this.loopContext;
      const forkContext2 = this.forkContext;
      const temp = ForkContext.newEmpty(forkContext2);
      temp.add(context.endOfLeftSegments);
      const bodySegments = temp.makeNext(-1, -1);
      makeLooped(this, forkContext2.head, context.leftSegments);
      context.brokenForkContext.add(forkContext2.head);
      forkContext2.replaceHead(bodySegments);
    }
    //--------------------------------------------------------------------------
    // Control Statements
    //--------------------------------------------------------------------------
    /**
     * Creates new context in which a `break` statement can be used. This occurs inside of a loop,
     * labeled statement, or switch statement.
     * @param {boolean} breakable Indicates if we are inside a statement where
     *      `break` without a label will exit the statement.
     * @param {string|null} label The label associated with the statement.
     * @returns {BreakContext} The new context.
     */
    pushBreakContext(breakable, label) {
      this.breakContext = new BreakContext(
        this.breakContext,
        breakable,
        label,
        this.forkContext
      );
      return this.breakContext;
    }
    /**
     * Removes the top item of the break context stack.
     * @returns {Object} The removed context.
     */
    popBreakContext() {
      const context = this.breakContext;
      const forkContext2 = this.forkContext;
      this.breakContext = context.upper;
      if (!context.breakable) {
        const brokenForkContext = context.brokenForkContext;
        if (!brokenForkContext.empty) {
          brokenForkContext.add(forkContext2.head);
          forkContext2.replaceHead(brokenForkContext.makeNext(0, -1));
        }
      }
      return context;
    }
    /**
     * Makes a path for a `break` statement.
     *
     * It registers the head segment to a context of `break`.
     * It makes new unreachable segment, then it set the head with the segment.
     * @param {string|null} label A label of the break statement.
     * @returns {void}
     */
    makeBreak(label) {
      const forkContext2 = this.forkContext;
      if (!forkContext2.reachable) {
        return;
      }
      const context = getBreakContext(this, label);
      if (context) {
        context.brokenForkContext.add(forkContext2.head);
      }
      forkContext2.replaceHead(forkContext2.makeUnreachable(-1, -1));
    }
    /**
     * Makes a path for a `continue` statement.
     *
     * It makes a looping path.
     * It makes new unreachable segment, then it set the head with the segment.
     * @param {string|null} label A label of the continue statement.
     * @returns {void}
     */
    makeContinue(label) {
      const forkContext2 = this.forkContext;
      if (!forkContext2.reachable) {
        return;
      }
      const context = getContinueContext(this, label);
      if (context) {
        if (context.continueDestSegments) {
          makeLooped(
            this,
            forkContext2.head,
            context.continueDestSegments
          );
          if (context.type === "ForInStatement" || context.type === "ForOfStatement") {
            context.brokenForkContext.add(forkContext2.head);
          }
        } else {
          context.continueForkContext.add(forkContext2.head);
        }
      }
      forkContext2.replaceHead(forkContext2.makeUnreachable(-1, -1));
    }
    /**
     * Makes a path for a `return` statement.
     *
     * It registers the head segment to a context of `return`.
     * It makes new unreachable segment, then it set the head with the segment.
     * @returns {void}
     */
    makeReturn() {
      const forkContext2 = this.forkContext;
      if (forkContext2.reachable) {
        getReturnContext(this).returnedForkContext.add(forkContext2.head);
        forkContext2.replaceHead(forkContext2.makeUnreachable(-1, -1));
      }
    }
    /**
     * Makes a path for a `throw` statement.
     *
     * It registers the head segment to a context of `throw`.
     * It makes new unreachable segment, then it set the head with the segment.
     * @returns {void}
     */
    makeThrow() {
      const forkContext2 = this.forkContext;
      if (forkContext2.reachable) {
        getThrowContext(this).thrownForkContext.add(forkContext2.head);
        forkContext2.replaceHead(forkContext2.makeUnreachable(-1, -1));
      }
    }
    /**
     * Makes the final path.
     * @returns {void}
     */
    makeFinal() {
      const segments = this.currentSegments;
      if (segments.length > 0 && segments[0].reachable) {
        this.returnedForkContext.add(segments);
      }
    }
  }
  codePathState = CodePathState;
  return codePathState;
}
var idGenerator;
var hasRequiredIdGenerator;
function requireIdGenerator() {
  if (hasRequiredIdGenerator) return idGenerator;
  hasRequiredIdGenerator = 1;
  class IdGenerator {
    /**
     * @param {string} prefix Optional. A prefix of generated ids.
     */
    constructor(prefix) {
      this.prefix = String(prefix);
      this.n = 0;
    }
    /**
     * Generates id.
     * @returns {string} A generated id.
     */
    next() {
      this.n = 1 + this.n | 0;
      if (this.n < 0) {
        this.n = 1;
      }
      return this.prefix + this.n;
    }
  }
  idGenerator = IdGenerator;
  return idGenerator;
}
var codePath;
var hasRequiredCodePath;
function requireCodePath() {
  if (hasRequiredCodePath) return codePath;
  hasRequiredCodePath = 1;
  const CodePathState = requireCodePathState();
  const IdGenerator = requireIdGenerator();
  class CodePath {
    /**
     * Creates a new instance.
     * @param {Object} options Options for the function (see below).
     * @param {string} options.id An identifier.
     * @param {string} options.origin The type of code path origin.
     * @param {CodePath|null} options.upper The code path of the upper function scope.
     * @param {Function} options.onLooped A callback function to notify looping.
     */
    constructor({ id: id2, origin, upper, onLooped }) {
      this.id = id2;
      this.origin = origin;
      this.upper = upper;
      this.childCodePaths = [];
      Object.defineProperty(this, "internal", {
        value: new CodePathState(new IdGenerator(`${id2}_`), onLooped)
      });
      if (upper) {
        upper.childCodePaths.push(this);
      }
    }
    /**
     * Gets the state of a given code path.
     * @param {CodePath} codePath A code path to get.
     * @returns {CodePathState} The state of the code path.
     */
    static getState(codePath2) {
      return codePath2.internal;
    }
    /**
     * The initial code path segment. This is the segment that is at the head
     * of the code path.
     * This is a passthrough to the underlying `CodePathState`.
     * @type {CodePathSegment}
     */
    get initialSegment() {
      return this.internal.initialSegment;
    }
    /**
     * Final code path segments. These are the terminal (tail) segments in the
     * code path, which is the combination of `returnedSegments` and `thrownSegments`.
     * All segments in this array are reachable.
     * This is a passthrough to the underlying `CodePathState`.
     * @type {CodePathSegment[]}
     */
    get finalSegments() {
      return this.internal.finalSegments;
    }
    /**
     * Final code path segments that represent normal completion of the code path.
     * For functions, this means both explicit `return` statements and implicit returns,
     * such as the last reachable segment in a function that does not have an
     * explicit `return` as this implicitly returns `undefined`. For scripts,
     * modules, class field initializers, and class static blocks, this means
     * all lines of code have been executed.
     * These segments are also present in `finalSegments`.
     * This is a passthrough to the underlying `CodePathState`.
     * @type {CodePathSegment[]}
     */
    get returnedSegments() {
      return this.internal.returnedForkContext;
    }
    /**
     * Final code path segments that represent `throw` statements.
     * This is a passthrough to the underlying `CodePathState`.
     * These segments are also present in `finalSegments`.
     * @type {CodePathSegment[]}
     */
    get thrownSegments() {
      return this.internal.thrownForkContext;
    }
    /**
     * Traverses all segments in this code path.
     *
     *     codePath.traverseSegments((segment, controller) => {
     *         // do something.
     *     });
     *
     * This method enumerates segments in order from the head.
     *
     * The `controller` argument has two methods:
     *
     * - `skip()` - skips the following segments in this branch
     * - `break()` - skips all following segments in the traversal
     *
     * A note on the parameters: the `options` argument is optional. This means
     * the first argument might be an options object or the callback function.
     * @param {Object} [optionsOrCallback] Optional first and last segments to traverse.
     * @param {CodePathSegment} [optionsOrCallback.first] The first segment to traverse.
     * @param {CodePathSegment} [optionsOrCallback.last] The last segment to traverse.
     * @param {Function} callback A callback function.
     * @returns {void}
     */
    traverseSegments(optionsOrCallback, callback) {
      let resolvedOptions;
      let resolvedCallback;
      if (typeof optionsOrCallback === "function") {
        resolvedCallback = optionsOrCallback;
        resolvedOptions = {};
      } else {
        resolvedOptions = optionsOrCallback || {};
        resolvedCallback = callback;
      }
      const startSegment = resolvedOptions.first || this.internal.initialSegment;
      const lastSegment = resolvedOptions.last;
      let record;
      let index;
      let end;
      let segment = null;
      const visited = /* @__PURE__ */ new Set();
      const stack = [[startSegment, 0]];
      const skipped = /* @__PURE__ */ new Set();
      let broken = false;
      const controller = {
        /**
         * Skip the following segments in this branch.
         * @returns {void}
         */
        skip() {
          skipped.add(segment);
        },
        /**
         * Stop traversal completely - do not traverse to any
         * other segments.
         * @returns {void}
         */
        break() {
          broken = true;
        }
      };
      function isVisited(prevSegment) {
        return visited.has(prevSegment) || segment.isLoopedPrevSegment(prevSegment);
      }
      function isSkipped(prevSegment) {
        return skipped.has(prevSegment) || segment.isLoopedPrevSegment(prevSegment);
      }
      while (stack.length > 0) {
        record = stack.at(-1);
        segment = record[0];
        index = record[1];
        if (index === 0) {
          if (visited.has(segment)) {
            stack.pop();
            continue;
          }
          if (segment !== startSegment && segment.prevSegments.length > 0 && !segment.prevSegments.every(isVisited)) {
            stack.pop();
            continue;
          }
          visited.add(segment);
          const shouldSkip = skipped.size > 0 && segment.prevSegments.length > 0 && segment.prevSegments.every(isSkipped);
          if (!shouldSkip) {
            resolvedCallback.call(this, segment, controller);
            if (segment === lastSegment) {
              controller.skip();
            }
            if (broken) {
              break;
            }
          } else {
            skipped.add(segment);
          }
        }
        end = segment.nextSegments.length - 1;
        if (index < end) {
          record[1] += 1;
          stack.push([segment.nextSegments[index], 0]);
        } else if (index === end) {
          record[0] = segment.nextSegments[index];
          record[1] = 0;
        } else {
          stack.pop();
        }
      }
    }
  }
  codePath = CodePath;
  return codePath;
}
var codePathAnalyzer;
var hasRequiredCodePathAnalyzer;
function requireCodePathAnalyzer() {
  if (hasRequiredCodePathAnalyzer) return codePathAnalyzer;
  hasRequiredCodePathAnalyzer = 1;
  const assert2 = requireAssert(), { breakableTypePattern } = requireAstUtils$1(), CodePath = requireCodePath(), CodePathSegment = requireCodePathSegment(), IdGenerator = requireIdGenerator(), debug = requireDebugHelpers();
  function isCaseNode(node2) {
    return Boolean(node2.test);
  }
  function isPropertyDefinitionValue(node2) {
    const parent = node2.parent;
    return parent && parent.type === "PropertyDefinition" && parent.value === node2;
  }
  function isHandledLogicalOperator(operator) {
    return operator === "&&" || operator === "||" || operator === "??";
  }
  function isLogicalAssignmentOperator(operator) {
    return operator === "&&=" || operator === "||=" || operator === "??=";
  }
  function getLabel(node2) {
    if (node2.parent.type === "LabeledStatement") {
      return node2.parent.label.name;
    }
    return null;
  }
  function isForkingByTrueOrFalse(node2) {
    const parent = node2.parent;
    switch (parent.type) {
      case "ConditionalExpression":
      case "IfStatement":
      case "WhileStatement":
      case "DoWhileStatement":
      case "ForStatement":
        return parent.test === node2;
      case "LogicalExpression":
        return isHandledLogicalOperator(parent.operator);
      case "AssignmentExpression":
        return isLogicalAssignmentOperator(parent.operator);
      default:
        return false;
    }
  }
  function getBooleanValueIfSimpleConstant(node2) {
    if (node2.type === "Literal") {
      return Boolean(node2.value);
    }
    return void 0;
  }
  function isIdentifierReference(node2) {
    const parent = node2.parent;
    switch (parent.type) {
      case "LabeledStatement":
      case "BreakStatement":
      case "ContinueStatement":
      case "ArrayPattern":
      case "RestElement":
      case "ImportSpecifier":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "CatchClause":
        return false;
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ArrowFunctionExpression":
      case "ClassDeclaration":
      case "ClassExpression":
      case "VariableDeclarator":
        return parent.id !== node2;
      case "Property":
      case "PropertyDefinition":
      case "MethodDefinition":
        return parent.key !== node2 || parent.computed || parent.shorthand;
      case "AssignmentPattern":
        return parent.key !== node2;
      default:
        return true;
    }
  }
  function forwardCurrentToHead(analyzer, node2) {
    const codePath2 = analyzer.codePath;
    const state = CodePath.getState(codePath2);
    const currentSegments = state.currentSegments;
    const headSegments = state.headSegments;
    const end = Math.max(currentSegments.length, headSegments.length);
    let i2, currentSegment, headSegment;
    for (i2 = 0; i2 < end; ++i2) {
      currentSegment = currentSegments[i2];
      headSegment = headSegments[i2];
      if (currentSegment !== headSegment && currentSegment) {
        const eventName = currentSegment.reachable ? "onCodePathSegmentEnd" : "onUnreachableCodePathSegmentEnd";
        debug.dump(`${eventName} ${currentSegment.id}`);
        analyzer.emit(eventName, [currentSegment, node2]);
      }
    }
    state.currentSegments = headSegments;
    for (i2 = 0; i2 < end; ++i2) {
      currentSegment = currentSegments[i2];
      headSegment = headSegments[i2];
      if (currentSegment !== headSegment && headSegment) {
        const eventName = headSegment.reachable ? "onCodePathSegmentStart" : "onUnreachableCodePathSegmentStart";
        debug.dump(`${eventName} ${headSegment.id}`);
        CodePathSegment.markUsed(headSegment);
        analyzer.emit(eventName, [headSegment, node2]);
      }
    }
  }
  function leaveFromCurrentSegment(analyzer, node2) {
    const state = CodePath.getState(analyzer.codePath);
    const currentSegments = state.currentSegments;
    for (let i2 = 0; i2 < currentSegments.length; ++i2) {
      const currentSegment = currentSegments[i2];
      const eventName = currentSegment.reachable ? "onCodePathSegmentEnd" : "onUnreachableCodePathSegmentEnd";
      debug.dump(`${eventName} ${currentSegment.id}`);
      analyzer.emit(eventName, [currentSegment, node2]);
    }
    state.currentSegments = [];
  }
  function preprocess(analyzer, node2) {
    const codePath2 = analyzer.codePath;
    const state = CodePath.getState(codePath2);
    const parent = node2.parent;
    switch (parent.type) {
      // The `arguments.length == 0` case is in `postprocess` function.
      case "CallExpression":
        if (parent.optional === true && parent.arguments.length >= 1 && parent.arguments[0] === node2) {
          state.makeOptionalRight();
        }
        break;
      case "MemberExpression":
        if (parent.optional === true && parent.property === node2) {
          state.makeOptionalRight();
        }
        break;
      case "LogicalExpression":
        if (parent.right === node2 && isHandledLogicalOperator(parent.operator)) {
          state.makeLogicalRight();
        }
        break;
      case "AssignmentExpression":
        if (parent.right === node2 && isLogicalAssignmentOperator(parent.operator)) {
          state.makeLogicalRight();
        }
        break;
      case "ConditionalExpression":
      case "IfStatement":
        if (parent.consequent === node2) {
          state.makeIfConsequent();
        } else if (parent.alternate === node2) {
          state.makeIfAlternate();
        }
        break;
      case "SwitchCase":
        if (parent.consequent[0] === node2) {
          state.makeSwitchCaseBody(false, !parent.test);
        }
        break;
      case "TryStatement":
        if (parent.handler === node2) {
          state.makeCatchBlock();
        } else if (parent.finalizer === node2) {
          state.makeFinallyBlock();
        }
        break;
      case "WhileStatement":
        if (parent.test === node2) {
          state.makeWhileTest(getBooleanValueIfSimpleConstant(node2));
        } else {
          assert2(parent.body === node2);
          state.makeWhileBody();
        }
        break;
      case "DoWhileStatement":
        if (parent.body === node2) {
          state.makeDoWhileBody();
        } else {
          assert2(parent.test === node2);
          state.makeDoWhileTest(getBooleanValueIfSimpleConstant(node2));
        }
        break;
      case "ForStatement":
        if (parent.test === node2) {
          state.makeForTest(getBooleanValueIfSimpleConstant(node2));
        } else if (parent.update === node2) {
          state.makeForUpdate();
        } else if (parent.body === node2) {
          state.makeForBody();
        }
        break;
      case "ForInStatement":
      case "ForOfStatement":
        if (parent.left === node2) {
          state.makeForInOfLeft();
        } else if (parent.right === node2) {
          state.makeForInOfRight();
        } else {
          assert2(parent.body === node2);
          state.makeForInOfBody();
        }
        break;
      case "AssignmentPattern":
        if (parent.right === node2) {
          state.pushForkContext();
          state.forkBypassPath();
          state.forkPath();
        }
        break;
    }
  }
  function processCodePathToEnter(analyzer, node2) {
    let codePath2 = analyzer.codePath;
    let state = codePath2 && CodePath.getState(codePath2);
    const parent = node2.parent;
    function startCodePath(origin) {
      if (codePath2) {
        forwardCurrentToHead(analyzer, node2);
        debug.dumpState(node2, state, false);
      }
      codePath2 = analyzer.codePath = new CodePath({
        id: analyzer.idGenerator.next(),
        origin,
        upper: codePath2,
        onLooped: analyzer.onLooped
      });
      state = CodePath.getState(codePath2);
      debug.dump(`onCodePathStart ${codePath2.id}`);
      analyzer.emit("onCodePathStart", [codePath2, node2]);
    }
    if (isPropertyDefinitionValue(node2)) {
      startCodePath("class-field-initializer");
    }
    switch (node2.type) {
      case "Program":
        startCodePath("program");
        break;
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ArrowFunctionExpression":
        startCodePath("function");
        break;
      case "StaticBlock":
        startCodePath("class-static-block");
        break;
      case "ChainExpression":
        state.pushChainContext();
        break;
      case "CallExpression":
        if (node2.optional === true) {
          state.makeOptionalNode();
        }
        break;
      case "MemberExpression":
        if (node2.optional === true) {
          state.makeOptionalNode();
        }
        break;
      case "LogicalExpression":
        if (isHandledLogicalOperator(node2.operator)) {
          state.pushChoiceContext(
            node2.operator,
            isForkingByTrueOrFalse(node2)
          );
        }
        break;
      case "AssignmentExpression":
        if (isLogicalAssignmentOperator(node2.operator)) {
          state.pushChoiceContext(
            node2.operator.slice(0, -1),
            // removes `=` from the end
            isForkingByTrueOrFalse(node2)
          );
        }
        break;
      case "ConditionalExpression":
      case "IfStatement":
        state.pushChoiceContext("test", false);
        break;
      case "SwitchStatement":
        state.pushSwitchContext(
          node2.cases.some(isCaseNode),
          getLabel(node2)
        );
        break;
      case "TryStatement":
        state.pushTryContext(Boolean(node2.finalizer));
        break;
      case "SwitchCase":
        if (parent.discriminant !== node2 && parent.cases[0] !== node2) {
          state.forkPath();
        }
        break;
      case "WhileStatement":
      case "DoWhileStatement":
      case "ForStatement":
      case "ForInStatement":
      case "ForOfStatement":
        state.pushLoopContext(node2.type, getLabel(node2));
        break;
      case "LabeledStatement":
        if (!breakableTypePattern.test(node2.body.type)) {
          state.pushBreakContext(false, node2.label.name);
        }
        break;
    }
    forwardCurrentToHead(analyzer, node2);
    debug.dumpState(node2, state, false);
  }
  function processCodePathToExit(analyzer, node2) {
    const codePath2 = analyzer.codePath;
    const state = CodePath.getState(codePath2);
    let dontForward = false;
    switch (node2.type) {
      case "ChainExpression":
        state.popChainContext();
        break;
      case "IfStatement":
      case "ConditionalExpression":
        state.popChoiceContext();
        break;
      case "LogicalExpression":
        if (isHandledLogicalOperator(node2.operator)) {
          state.popChoiceContext();
        }
        break;
      case "AssignmentExpression":
        if (isLogicalAssignmentOperator(node2.operator)) {
          state.popChoiceContext();
        }
        break;
      case "SwitchStatement":
        state.popSwitchContext();
        break;
      case "SwitchCase":
        if (node2.consequent.length === 0) {
          state.makeSwitchCaseBody(true, !node2.test);
        }
        if (state.forkContext.reachable) {
          dontForward = true;
        }
        break;
      case "TryStatement":
        state.popTryContext();
        break;
      case "BreakStatement":
        forwardCurrentToHead(analyzer, node2);
        state.makeBreak(node2.label && node2.label.name);
        dontForward = true;
        break;
      case "ContinueStatement":
        forwardCurrentToHead(analyzer, node2);
        state.makeContinue(node2.label && node2.label.name);
        dontForward = true;
        break;
      case "ReturnStatement":
        forwardCurrentToHead(analyzer, node2);
        state.makeReturn();
        dontForward = true;
        break;
      case "ThrowStatement":
        forwardCurrentToHead(analyzer, node2);
        state.makeThrow();
        dontForward = true;
        break;
      case "Identifier":
        if (isIdentifierReference(node2)) {
          state.makeFirstThrowablePathInTryBlock();
          dontForward = true;
        }
        break;
      case "CallExpression":
      case "ImportExpression":
      case "MemberExpression":
      case "NewExpression":
      case "YieldExpression":
        state.makeFirstThrowablePathInTryBlock();
        break;
      case "WhileStatement":
      case "DoWhileStatement":
      case "ForStatement":
      case "ForInStatement":
      case "ForOfStatement":
        state.popLoopContext();
        break;
      case "AssignmentPattern":
        state.popForkContext();
        break;
      case "LabeledStatement":
        if (!breakableTypePattern.test(node2.body.type)) {
          state.popBreakContext();
        }
        break;
    }
    if (!dontForward) {
      forwardCurrentToHead(analyzer, node2);
    }
    debug.dumpState(node2, state, true);
  }
  function postprocess(analyzer, node2) {
    function endCodePath() {
      let codePath2 = analyzer.codePath;
      CodePath.getState(codePath2).makeFinal();
      leaveFromCurrentSegment(analyzer, node2);
      debug.dump(`onCodePathEnd ${codePath2.id}`);
      analyzer.emit("onCodePathEnd", [codePath2, node2]);
      debug.dumpDot(codePath2);
      codePath2 = analyzer.codePath = analyzer.codePath.upper;
      if (codePath2) {
        debug.dumpState(node2, CodePath.getState(codePath2), true);
      }
    }
    switch (node2.type) {
      case "Program":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ArrowFunctionExpression":
      case "StaticBlock": {
        endCodePath();
        break;
      }
      // The `arguments.length >= 1` case is in `preprocess` function.
      case "CallExpression":
        if (node2.optional === true && node2.arguments.length === 0) {
          CodePath.getState(analyzer.codePath).makeOptionalRight();
        }
        break;
    }
    if (isPropertyDefinitionValue(node2)) {
      endCodePath();
    }
  }
  class CodePathAnalyzer {
    /**
     * @param {EventGenerator} eventGenerator An event generator to wrap.
     */
    constructor(eventGenerator) {
      this.original = eventGenerator;
      this.emit = eventGenerator.emit;
      this.codePath = null;
      this.idGenerator = new IdGenerator("s");
      this.currentNode = null;
      this.onLooped = this.onLooped.bind(this);
    }
    /**
     * Does the process to enter a given AST node.
     * This updates state of analysis and calls `enterNode` of the wrapped.
     * @param {ASTNode} node A node which is entering.
     * @returns {void}
     */
    enterNode(node2) {
      this.currentNode = node2;
      if (node2.parent) {
        preprocess(this, node2);
      }
      processCodePathToEnter(this, node2);
      this.original.enterNode(node2);
      this.currentNode = null;
    }
    /**
     * Does the process to leave a given AST node.
     * This updates state of analysis and calls `leaveNode` of the wrapped.
     * @param {ASTNode} node A node which is leaving.
     * @returns {void}
     */
    leaveNode(node2) {
      this.currentNode = node2;
      processCodePathToExit(this, node2);
      this.original.leaveNode(node2);
      postprocess(this, node2);
      this.currentNode = null;
    }
    /**
     * This is called on a code path looped.
     * Then this raises a looped event.
     * @param {CodePathSegment} fromSegment A segment of prev.
     * @param {CodePathSegment} toSegment A segment of next.
     * @returns {void}
     */
    onLooped(fromSegment, toSegment) {
      if (fromSegment.reachable && toSegment.reachable) {
        debug.dump(
          `onCodePathSegmentLoop ${fromSegment.id} -> ${toSegment.id}`
        );
        this.emit("onCodePathSegmentLoop", [
          fromSegment,
          toSegment,
          this.currentNode
        ]);
      }
    }
  }
  codePathAnalyzer = CodePathAnalyzer;
  return codePathAnalyzer;
}
var cjs$2 = {};
var lib$2 = { exports: {} };
var parseString = { exports: {} };
var Func;
var hasRequiredFunc;
function requireFunc() {
  if (hasRequiredFunc) return Func;
  hasRequiredFunc = 1;
  var apply, curry, flip, fix, over, memoize, toString$ = {}.toString;
  apply = curry$(function(f2, list) {
    return f2.apply(null, list);
  });
  curry = function(f2) {
    return curry$(f2);
  };
  flip = curry$(function(f2, x2, y2) {
    return f2(y2, x2);
  });
  fix = function(f2) {
    return /* @__PURE__ */ (function(g2) {
      return function() {
        return f2(g2(g2)).apply(null, arguments);
      };
    })(function(g2) {
      return function() {
        return f2(g2(g2)).apply(null, arguments);
      };
    });
  };
  over = curry$(function(f2, g2, x2, y2) {
    return f2(g2(x2), g2(y2));
  });
  memoize = function(f2) {
    var memo;
    memo = {};
    return function() {
      var args, res$, i$, to$, key, arg;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      key = (function() {
        var i$2, ref$, len$, results$ = [];
        for (i$2 = 0, len$ = (ref$ = args).length; i$2 < len$; ++i$2) {
          arg = ref$[i$2];
          results$.push(arg + toString$.call(arg).slice(8, -1));
        }
        return results$;
      })().join("");
      return memo[key] = key in memo ? memo[key] : f2.apply(null, args);
    };
  };
  Func = {
    curry,
    flip,
    fix,
    apply,
    over,
    memoize
  };
  function curry$(f2, bound) {
    var context, _curry = function(args) {
      return f2.length > 1 ? function() {
        var params = args ? args.concat() : [];
        context = this;
        return params.push.apply(params, arguments) < f2.length && arguments.length ? _curry.call(context, params) : f2.apply(context, params);
      } : f2;
    };
    return _curry();
  }
  return Func;
}
var List;
var hasRequiredList;
function requireList() {
  if (hasRequiredList) return List;
  hasRequiredList = 1;
  var each, map, compact, filter2, reject, remove, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat2, concatMap2, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice2, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = {}.toString;
  each = curry$(function(f2, xs) {
    var i$, len$, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      f2(x2);
    }
    return xs;
  });
  map = curry$(function(f2, xs) {
    var i$, len$, x2, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      results$.push(f2(x2));
    }
    return results$;
  });
  compact = function(xs) {
    var i$, len$, x2, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (x2) {
        results$.push(x2);
      }
    }
    return results$;
  };
  filter2 = curry$(function(f2, xs) {
    var i$, len$, x2, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (f2(x2)) {
        results$.push(x2);
      }
    }
    return results$;
  });
  reject = curry$(function(f2, xs) {
    var i$, len$, x2, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (!f2(x2)) {
        results$.push(x2);
      }
    }
    return results$;
  });
  remove = curry$(function(el, xs) {
    var i2, x$;
    i2 = elemIndex(el, xs);
    x$ = xs.slice();
    if (i2 != null) {
      x$.splice(i2, 1);
    }
    return x$;
  });
  partition = curry$(function(f2, xs) {
    var passed, failed, i$, len$, x2;
    passed = [];
    failed = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      (f2(x2) ? passed : failed).push(x2);
    }
    return [passed, failed];
  });
  find = curry$(function(f2, xs) {
    var i$, len$, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (f2(x2)) {
        return x2;
      }
    }
  });
  head = first = function(xs) {
    return xs[0];
  };
  tail = function(xs) {
    if (!xs.length) {
      return;
    }
    return xs.slice(1);
  };
  last = function(xs) {
    return xs[xs.length - 1];
  };
  initial = function(xs) {
    if (!xs.length) {
      return;
    }
    return xs.slice(0, -1);
  };
  empty = function(xs) {
    return !xs.length;
  };
  reverse = function(xs) {
    return xs.concat().reverse();
  };
  unique = function(xs) {
    var result, i$, len$, x2;
    result = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (!in$(x2, result)) {
        result.push(x2);
      }
    }
    return result;
  };
  uniqueBy = curry$(function(f2, xs) {
    var seen, i$, len$, x2, val, results$ = [];
    seen = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      val = f2(x2);
      if (in$(val, seen)) {
        continue;
      }
      seen.push(val);
      results$.push(x2);
    }
    return results$;
  });
  fold = foldl = curry$(function(f2, memo, xs) {
    var i$, len$, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      memo = f2(memo, x2);
    }
    return memo;
  });
  fold1 = foldl1 = curry$(function(f2, xs) {
    return fold(f2, xs[0], xs.slice(1));
  });
  foldr = curry$(function(f2, memo, xs) {
    var i$, x2;
    for (i$ = xs.length - 1; i$ >= 0; --i$) {
      x2 = xs[i$];
      memo = f2(x2, memo);
    }
    return memo;
  });
  foldr1 = curry$(function(f2, xs) {
    return foldr(f2, xs[xs.length - 1], xs.slice(0, -1));
  });
  unfoldr = curry$(function(f2, b) {
    var result, x2, that;
    result = [];
    x2 = b;
    while ((that = f2(x2)) != null) {
      result.push(that[0]);
      x2 = that[1];
    }
    return result;
  });
  concat2 = function(xss) {
    return [].concat.apply([], xss);
  };
  concatMap2 = curry$(function(f2, xs) {
    var x2;
    return [].concat.apply([], (function() {
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
        x2 = ref$[i$];
        results$.push(f2(x2));
      }
      return results$;
    })());
  });
  flatten = function(xs) {
    var x2;
    return [].concat.apply([], (function() {
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
        x2 = ref$[i$];
        if (toString$.call(x2).slice(8, -1) === "Array") {
          results$.push(flatten(x2));
        } else {
          results$.push(x2);
        }
      }
      return results$;
    })());
  };
  difference = function(xs) {
    var yss, res$, i$, to$, results, len$, x2, j$, len1$, ys;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    yss = res$;
    results = [];
    outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
        ys = yss[j$];
        if (in$(x2, ys)) {
          continue outer;
        }
      }
      results.push(x2);
    }
    return results;
  };
  intersection = function(xs) {
    var yss, res$, i$, to$, results, len$, x2, j$, len1$, ys;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    yss = res$;
    results = [];
    outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
        ys = yss[j$];
        if (!in$(x2, ys)) {
          continue outer;
        }
      }
      results.push(x2);
    }
    return results;
  };
  union = function() {
    var xss, res$, i$, to$, results, len$, xs, j$, len1$, x2;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    xss = res$;
    results = [];
    for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
      xs = xss[i$];
      for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
        x2 = xs[j$];
        if (!in$(x2, results)) {
          results.push(x2);
        }
      }
    }
    return results;
  };
  countBy = curry$(function(f2, xs) {
    var results, i$, len$, x2, key;
    results = {};
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      key = f2(x2);
      if (key in results) {
        results[key] += 1;
      } else {
        results[key] = 1;
      }
    }
    return results;
  });
  groupBy = curry$(function(f2, xs) {
    var results, i$, len$, x2, key;
    results = {};
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      key = f2(x2);
      if (key in results) {
        results[key].push(x2);
      } else {
        results[key] = [x2];
      }
    }
    return results;
  });
  andList = function(xs) {
    var i$, len$, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (!x2) {
        return false;
      }
    }
    return true;
  };
  orList = function(xs) {
    var i$, len$, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (x2) {
        return true;
      }
    }
    return false;
  };
  any = curry$(function(f2, xs) {
    var i$, len$, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (f2(x2)) {
        return true;
      }
    }
    return false;
  });
  all = curry$(function(f2, xs) {
    var i$, len$, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      if (!f2(x2)) {
        return false;
      }
    }
    return true;
  });
  sort = function(xs) {
    return xs.concat().sort(function(x2, y2) {
      if (x2 > y2) {
        return 1;
      } else if (x2 < y2) {
        return -1;
      } else {
        return 0;
      }
    });
  };
  sortWith = curry$(function(f2, xs) {
    return xs.concat().sort(f2);
  });
  sortBy = curry$(function(f2, xs) {
    return xs.concat().sort(function(x2, y2) {
      if (f2(x2) > f2(y2)) {
        return 1;
      } else if (f2(x2) < f2(y2)) {
        return -1;
      } else {
        return 0;
      }
    });
  });
  sum = function(xs) {
    var result, i$, len$, x2;
    result = 0;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      result += x2;
    }
    return result;
  };
  product = function(xs) {
    var result, i$, len$, x2;
    result = 1;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      result *= x2;
    }
    return result;
  };
  mean = average = function(xs) {
    var sum2, i$, len$, x2;
    sum2 = 0;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x2 = xs[i$];
      sum2 += x2;
    }
    return sum2 / xs.length;
  };
  maximum = function(xs) {
    var max, i$, ref$, len$, x2;
    max = xs[0];
    for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
      x2 = ref$[i$];
      if (x2 > max) {
        max = x2;
      }
    }
    return max;
  };
  minimum = function(xs) {
    var min, i$, ref$, len$, x2;
    min = xs[0];
    for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
      x2 = ref$[i$];
      if (x2 < min) {
        min = x2;
      }
    }
    return min;
  };
  maximumBy = curry$(function(f2, xs) {
    var max, i$, ref$, len$, x2;
    max = xs[0];
    for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
      x2 = ref$[i$];
      if (f2(x2) > f2(max)) {
        max = x2;
      }
    }
    return max;
  });
  minimumBy = curry$(function(f2, xs) {
    var min, i$, ref$, len$, x2;
    min = xs[0];
    for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
      x2 = ref$[i$];
      if (f2(x2) < f2(min)) {
        min = x2;
      }
    }
    return min;
  });
  scan = scanl = curry$(function(f2, memo, xs) {
    var last2, x2;
    last2 = memo;
    return [memo].concat((function() {
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
        x2 = ref$[i$];
        results$.push(last2 = f2(last2, x2));
      }
      return results$;
    })());
  });
  scan1 = scanl1 = curry$(function(f2, xs) {
    if (!xs.length) {
      return;
    }
    return scan(f2, xs[0], xs.slice(1));
  });
  scanr = curry$(function(f2, memo, xs) {
    xs = xs.concat().reverse();
    return scan(f2, memo, xs).reverse();
  });
  scanr1 = curry$(function(f2, xs) {
    if (!xs.length) {
      return;
    }
    xs = xs.concat().reverse();
    return scan(f2, xs[0], xs.slice(1)).reverse();
  });
  slice2 = curry$(function(x2, y2, xs) {
    return xs.slice(x2, y2);
  });
  take = curry$(function(n2, xs) {
    if (n2 <= 0) {
      return xs.slice(0, 0);
    } else {
      return xs.slice(0, n2);
    }
  });
  drop = curry$(function(n2, xs) {
    if (n2 <= 0) {
      return xs;
    } else {
      return xs.slice(n2);
    }
  });
  splitAt = curry$(function(n2, xs) {
    return [take(n2, xs), drop(n2, xs)];
  });
  takeWhile = curry$(function(p2, xs) {
    var len, i2;
    len = xs.length;
    if (!len) {
      return xs;
    }
    i2 = 0;
    while (i2 < len && p2(xs[i2])) {
      i2 += 1;
    }
    return xs.slice(0, i2);
  });
  dropWhile = curry$(function(p2, xs) {
    var len, i2;
    len = xs.length;
    if (!len) {
      return xs;
    }
    i2 = 0;
    while (i2 < len && p2(xs[i2])) {
      i2 += 1;
    }
    return xs.slice(i2);
  });
  span = curry$(function(p2, xs) {
    return [takeWhile(p2, xs), dropWhile(p2, xs)];
  });
  breakList = curry$(function(p2, xs) {
    return span(compose$(p2, not$), xs);
  });
  zip = curry$(function(xs, ys) {
    var result, len, i$, len$, i2, x2;
    result = [];
    len = ys.length;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i2 = i$;
      x2 = xs[i$];
      if (i2 === len) {
        break;
      }
      result.push([x2, ys[i2]]);
    }
    return result;
  });
  zipWith = curry$(function(f2, xs, ys) {
    var result, len, i$, len$, i2, x2;
    result = [];
    len = ys.length;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i2 = i$;
      x2 = xs[i$];
      if (i2 === len) {
        break;
      }
      result.push(f2(x2, ys[i2]));
    }
    return result;
  });
  zipAll = function() {
    var xss, res$, i$, to$, minLength, len$, xs, ref$, i2, lresult$, j$, results$ = [];
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    xss = res$;
    minLength = void 0;
    for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
      xs = xss[i$];
      minLength <= (ref$ = xs.length) || (minLength = ref$);
    }
    for (i$ = 0; i$ < minLength; ++i$) {
      i2 = i$;
      lresult$ = [];
      for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
        xs = xss[j$];
        lresult$.push(xs[i2]);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  zipAllWith = function(f2) {
    var xss, res$, i$, to$, minLength, len$, xs, ref$, i2, results$ = [];
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    xss = res$;
    minLength = void 0;
    for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
      xs = xss[i$];
      minLength <= (ref$ = xs.length) || (minLength = ref$);
    }
    for (i$ = 0; i$ < minLength; ++i$) {
      i2 = i$;
      results$.push(f2.apply(null, fn$()));
    }
    return results$;
    function fn$() {
      var i$2, ref$2, len$2, results$2 = [];
      for (i$2 = 0, len$2 = (ref$2 = xss).length; i$2 < len$2; ++i$2) {
        xs = ref$2[i$2];
        results$2.push(xs[i2]);
      }
      return results$2;
    }
  };
  at = curry$(function(n2, xs) {
    if (n2 < 0) {
      return xs[xs.length + n2];
    } else {
      return xs[n2];
    }
  });
  elemIndex = curry$(function(el, xs) {
    var i$, len$, i2, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i2 = i$;
      x2 = xs[i$];
      if (x2 === el) {
        return i2;
      }
    }
  });
  elemIndices = curry$(function(el, xs) {
    var i$, len$, i2, x2, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i2 = i$;
      x2 = xs[i$];
      if (x2 === el) {
        results$.push(i2);
      }
    }
    return results$;
  });
  findIndex = curry$(function(f2, xs) {
    var i$, len$, i2, x2;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i2 = i$;
      x2 = xs[i$];
      if (f2(x2)) {
        return i2;
      }
    }
  });
  findIndices = curry$(function(f2, xs) {
    var i$, len$, i2, x2, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i2 = i$;
      x2 = xs[i$];
      if (f2(x2)) {
        results$.push(i2);
      }
    }
    return results$;
  });
  List = {
    each,
    map,
    filter: filter2,
    compact,
    reject,
    remove,
    partition,
    find,
    head,
    first,
    tail,
    last,
    initial,
    empty,
    reverse,
    difference,
    intersection,
    union,
    countBy,
    groupBy,
    fold,
    fold1,
    foldl,
    foldl1,
    foldr,
    foldr1,
    unfoldr,
    andList,
    orList,
    any,
    all,
    unique,
    uniqueBy,
    sort,
    sortWith,
    sortBy,
    sum,
    product,
    mean,
    average,
    concat: concat2,
    concatMap: concatMap2,
    flatten,
    maximum,
    minimum,
    maximumBy,
    minimumBy,
    scan,
    scan1,
    scanl,
    scanl1,
    scanr,
    scanr1,
    slice: slice2,
    take,
    drop,
    splitAt,
    takeWhile,
    dropWhile,
    span,
    breakList,
    zip,
    zipWith,
    zipAll,
    zipAllWith,
    at,
    elemIndex,
    elemIndices,
    findIndex,
    findIndices
  };
  function curry$(f2, bound) {
    var context, _curry = function(args) {
      return f2.length > 1 ? function() {
        var params = args ? args.concat() : [];
        context = this;
        return params.push.apply(params, arguments) < f2.length && arguments.length ? _curry.call(context, params) : f2.apply(context, params);
      } : f2;
    };
    return _curry();
  }
  function in$(x2, xs) {
    var i2 = -1, l2 = xs.length >>> 0;
    while (++i2 < l2) if (x2 === xs[i2]) return true;
    return false;
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i2, result;
      result = functions[0].apply(this, arguments);
      for (i2 = 1; i2 < functions.length; ++i2) {
        result = functions[i2](result);
      }
      return result;
    };
  }
  function not$(x2) {
    return !x2;
  }
  return List;
}
var Obj;
var hasRequiredObj;
function requireObj() {
  if (hasRequiredObj) return Obj;
  hasRequiredObj = 1;
  var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter2, reject, partition, find;
  values = function(object) {
    var i$, x2, results$ = [];
    for (i$ in object) {
      x2 = object[i$];
      results$.push(x2);
    }
    return results$;
  };
  keys = function(object) {
    var x2, results$ = [];
    for (x2 in object) {
      results$.push(x2);
    }
    return results$;
  };
  pairsToObj = function(object) {
    var i$, len$, x2, resultObj$ = {};
    for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
      x2 = object[i$];
      resultObj$[x2[0]] = x2[1];
    }
    return resultObj$;
  };
  objToPairs = function(object) {
    var key, value, results$ = [];
    for (key in object) {
      value = object[key];
      results$.push([key, value]);
    }
    return results$;
  };
  listsToObj = curry$(function(keys2, values2) {
    var i$, len$, i2, key, resultObj$ = {};
    for (i$ = 0, len$ = keys2.length; i$ < len$; ++i$) {
      i2 = i$;
      key = keys2[i$];
      resultObj$[key] = values2[i2];
    }
    return resultObj$;
  });
  objToLists = function(object) {
    var keys2, values2, key, value;
    keys2 = [];
    values2 = [];
    for (key in object) {
      value = object[key];
      keys2.push(key);
      values2.push(value);
    }
    return [keys2, values2];
  };
  empty = function(object) {
    var x2;
    for (x2 in object) {
      return false;
    }
    return true;
  };
  each = curry$(function(f2, object) {
    var i$, x2;
    for (i$ in object) {
      x2 = object[i$];
      f2(x2);
    }
    return object;
  });
  map = curry$(function(f2, object) {
    var k, x2, resultObj$ = {};
    for (k in object) {
      x2 = object[k];
      resultObj$[k] = f2(x2);
    }
    return resultObj$;
  });
  compact = function(object) {
    var k, x2, resultObj$ = {};
    for (k in object) {
      x2 = object[k];
      if (x2) {
        resultObj$[k] = x2;
      }
    }
    return resultObj$;
  };
  filter2 = curry$(function(f2, object) {
    var k, x2, resultObj$ = {};
    for (k in object) {
      x2 = object[k];
      if (f2(x2)) {
        resultObj$[k] = x2;
      }
    }
    return resultObj$;
  });
  reject = curry$(function(f2, object) {
    var k, x2, resultObj$ = {};
    for (k in object) {
      x2 = object[k];
      if (!f2(x2)) {
        resultObj$[k] = x2;
      }
    }
    return resultObj$;
  });
  partition = curry$(function(f2, object) {
    var passed, failed, k, x2;
    passed = {};
    failed = {};
    for (k in object) {
      x2 = object[k];
      (f2(x2) ? passed : failed)[k] = x2;
    }
    return [passed, failed];
  });
  find = curry$(function(f2, object) {
    var i$, x2;
    for (i$ in object) {
      x2 = object[i$];
      if (f2(x2)) {
        return x2;
      }
    }
  });
  Obj = {
    values,
    keys,
    pairsToObj,
    objToPairs,
    listsToObj,
    objToLists,
    empty,
    each,
    map,
    filter: filter2,
    compact,
    reject,
    partition,
    find
  };
  function curry$(f2, bound) {
    var context, _curry = function(args) {
      return f2.length > 1 ? function() {
        var params = args ? args.concat() : [];
        context = this;
        return params.push.apply(params, arguments) < f2.length && arguments.length ? _curry.call(context, params) : f2.apply(context, params);
      } : f2;
    };
    return _curry();
  }
  return Obj;
}
var Str;
var hasRequiredStr;
function requireStr() {
  if (hasRequiredStr) return Str;
  hasRequiredStr = 1;
  var split, join2, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;
  split = curry$(function(sep2, str) {
    return str.split(sep2);
  });
  join2 = curry$(function(sep2, xs) {
    return xs.join(sep2);
  });
  lines = function(str) {
    if (!str.length) {
      return [];
    }
    return str.split("\n");
  };
  unlines = function(it) {
    return it.join("\n");
  };
  words = function(str) {
    if (!str.length) {
      return [];
    }
    return str.split(/[ ]+/);
  };
  unwords = function(it) {
    return it.join(" ");
  };
  chars = function(it) {
    return it.split("");
  };
  unchars = function(it) {
    return it.join("");
  };
  reverse = function(str) {
    return str.split("").reverse().join("");
  };
  repeat = curry$(function(n2, str) {
    var result, i$;
    result = "";
    for (i$ = 0; i$ < n2; ++i$) {
      result += str;
    }
    return result;
  });
  capitalize = function(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  };
  camelize = function(it) {
    return it.replace(/[-_]+(.)?/g, function(arg$, c2) {
      return (c2 != null ? c2 : "").toUpperCase();
    });
  };
  dasherize = function(str) {
    return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper) {
      return lower + "-" + (upper.length > 1 ? upper : upper.toLowerCase());
    }).replace(/^([A-Z]+)/, function(arg$, upper) {
      if (upper.length > 1) {
        return upper + "-";
      } else {
        return upper.toLowerCase();
      }
    });
  };
  Str = {
    split,
    join: join2,
    lines,
    unlines,
    words,
    unwords,
    chars,
    unchars,
    reverse,
    repeat,
    capitalize,
    camelize,
    dasherize
  };
  function curry$(f2, bound) {
    var context, _curry = function(args) {
      return f2.length > 1 ? function() {
        var params = args ? args.concat() : [];
        context = this;
        return params.push.apply(params, arguments) < f2.length && arguments.length ? _curry.call(context, params) : f2.apply(context, params);
      } : f2;
    };
    return _curry();
  }
  return Str;
}
var Num;
var hasRequiredNum;
function requireNum() {
  if (hasRequiredNum) return Num;
  hasRequiredNum = 1;
  var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
  max = curry$(function(x$, y$) {
    return x$ > y$ ? x$ : y$;
  });
  min = curry$(function(x$, y$) {
    return x$ < y$ ? x$ : y$;
  });
  negate = function(x2) {
    return -x2;
  };
  abs = Math.abs;
  signum = function(x2) {
    if (x2 < 0) {
      return -1;
    } else if (x2 > 0) {
      return 1;
    } else {
      return 0;
    }
  };
  quot = curry$(function(x2, y2) {
    return ~~(x2 / y2);
  });
  rem = curry$(function(x$, y$) {
    return x$ % y$;
  });
  div = curry$(function(x2, y2) {
    return Math.floor(x2 / y2);
  });
  mod = curry$(function(x$, y$) {
    var ref$;
    return (x$ % (ref$ = y$) + ref$) % ref$;
  });
  recip = (function(it) {
    return 1 / it;
  });
  pi = Math.PI;
  tau = pi * 2;
  exp = Math.exp;
  sqrt = Math.sqrt;
  ln = Math.log;
  pow = curry$(function(x$, y$) {
    return Math.pow(x$, y$);
  });
  sin = Math.sin;
  tan = Math.tan;
  cos = Math.cos;
  asin = Math.asin;
  acos = Math.acos;
  atan = Math.atan;
  atan2 = curry$(function(x2, y2) {
    return Math.atan2(x2, y2);
  });
  truncate = function(x2) {
    return ~~x2;
  };
  round = Math.round;
  ceiling = Math.ceil;
  floor = Math.floor;
  isItNaN = function(x2) {
    return x2 !== x2;
  };
  even = function(x2) {
    return x2 % 2 === 0;
  };
  odd = function(x2) {
    return x2 % 2 !== 0;
  };
  gcd = curry$(function(x2, y2) {
    var z;
    x2 = Math.abs(x2);
    y2 = Math.abs(y2);
    while (y2 !== 0) {
      z = x2 % y2;
      x2 = y2;
      y2 = z;
    }
    return x2;
  });
  lcm = curry$(function(x2, y2) {
    return Math.abs(Math.floor(x2 / gcd(x2, y2) * y2));
  });
  Num = {
    max,
    min,
    negate,
    abs,
    signum,
    quot,
    rem,
    div,
    mod,
    recip,
    pi,
    tau,
    exp,
    sqrt,
    ln,
    pow,
    sin,
    tan,
    cos,
    acos,
    asin,
    atan,
    atan2,
    truncate,
    round,
    ceiling,
    floor,
    isItNaN,
    even,
    odd,
    gcd,
    lcm
  };
  function curry$(f2, bound) {
    var context, _curry = function(args) {
      return f2.length > 1 ? function() {
        var params = args ? args.concat() : [];
        context = this;
        return params.push.apply(params, arguments) < f2.length && arguments.length ? _curry.call(context, params) : f2.apply(context, params);
      } : f2;
    };
    return _curry();
  }
  return Num;
}
var lib$1;
var hasRequiredLib$2;
function requireLib$2() {
  if (hasRequiredLib$2) return lib$1;
  hasRequiredLib$2 = 1;
  var Func2, List2, Obj2, Str2, Num2, id2, isType, replicate, prelude, toString$ = {}.toString;
  Func2 = requireFunc();
  List2 = requireList();
  Obj2 = requireObj();
  Str2 = requireStr();
  Num2 = requireNum();
  id2 = function(x2) {
    return x2;
  };
  isType = curry$(function(type2, x2) {
    return toString$.call(x2).slice(8, -1) === type2;
  });
  replicate = curry$(function(n2, x2) {
    var i$, results$ = [];
    for (i$ = 0; i$ < n2; ++i$) {
      results$.push(x2);
    }
    return results$;
  });
  Str2.empty = List2.empty;
  Str2.slice = List2.slice;
  Str2.take = List2.take;
  Str2.drop = List2.drop;
  Str2.splitAt = List2.splitAt;
  Str2.takeWhile = List2.takeWhile;
  Str2.dropWhile = List2.dropWhile;
  Str2.span = List2.span;
  Str2.breakStr = List2.breakList;
  prelude = {
    Func: Func2,
    List: List2,
    Obj: Obj2,
    Str: Str2,
    Num: Num2,
    id: id2,
    isType,
    replicate
  };
  prelude.each = List2.each;
  prelude.map = List2.map;
  prelude.filter = List2.filter;
  prelude.compact = List2.compact;
  prelude.reject = List2.reject;
  prelude.partition = List2.partition;
  prelude.find = List2.find;
  prelude.head = List2.head;
  prelude.first = List2.first;
  prelude.tail = List2.tail;
  prelude.last = List2.last;
  prelude.initial = List2.initial;
  prelude.empty = List2.empty;
  prelude.reverse = List2.reverse;
  prelude.difference = List2.difference;
  prelude.intersection = List2.intersection;
  prelude.union = List2.union;
  prelude.countBy = List2.countBy;
  prelude.groupBy = List2.groupBy;
  prelude.fold = List2.fold;
  prelude.foldl = List2.foldl;
  prelude.fold1 = List2.fold1;
  prelude.foldl1 = List2.foldl1;
  prelude.foldr = List2.foldr;
  prelude.foldr1 = List2.foldr1;
  prelude.unfoldr = List2.unfoldr;
  prelude.andList = List2.andList;
  prelude.orList = List2.orList;
  prelude.any = List2.any;
  prelude.all = List2.all;
  prelude.unique = List2.unique;
  prelude.uniqueBy = List2.uniqueBy;
  prelude.sort = List2.sort;
  prelude.sortWith = List2.sortWith;
  prelude.sortBy = List2.sortBy;
  prelude.sum = List2.sum;
  prelude.product = List2.product;
  prelude.mean = List2.mean;
  prelude.average = List2.average;
  prelude.concat = List2.concat;
  prelude.concatMap = List2.concatMap;
  prelude.flatten = List2.flatten;
  prelude.maximum = List2.maximum;
  prelude.minimum = List2.minimum;
  prelude.maximumBy = List2.maximumBy;
  prelude.minimumBy = List2.minimumBy;
  prelude.scan = List2.scan;
  prelude.scanl = List2.scanl;
  prelude.scan1 = List2.scan1;
  prelude.scanl1 = List2.scanl1;
  prelude.scanr = List2.scanr;
  prelude.scanr1 = List2.scanr1;
  prelude.slice = List2.slice;
  prelude.take = List2.take;
  prelude.drop = List2.drop;
  prelude.splitAt = List2.splitAt;
  prelude.takeWhile = List2.takeWhile;
  prelude.dropWhile = List2.dropWhile;
  prelude.span = List2.span;
  prelude.breakList = List2.breakList;
  prelude.zip = List2.zip;
  prelude.zipWith = List2.zipWith;
  prelude.zipAll = List2.zipAll;
  prelude.zipAllWith = List2.zipAllWith;
  prelude.at = List2.at;
  prelude.elemIndex = List2.elemIndex;
  prelude.elemIndices = List2.elemIndices;
  prelude.findIndex = List2.findIndex;
  prelude.findIndices = List2.findIndices;
  prelude.apply = Func2.apply;
  prelude.curry = Func2.curry;
  prelude.flip = Func2.flip;
  prelude.fix = Func2.fix;
  prelude.over = Func2.over;
  prelude.split = Str2.split;
  prelude.join = Str2.join;
  prelude.lines = Str2.lines;
  prelude.unlines = Str2.unlines;
  prelude.words = Str2.words;
  prelude.unwords = Str2.unwords;
  prelude.chars = Str2.chars;
  prelude.unchars = Str2.unchars;
  prelude.repeat = Str2.repeat;
  prelude.capitalize = Str2.capitalize;
  prelude.camelize = Str2.camelize;
  prelude.dasherize = Str2.dasherize;
  prelude.values = Obj2.values;
  prelude.keys = Obj2.keys;
  prelude.pairsToObj = Obj2.pairsToObj;
  prelude.objToPairs = Obj2.objToPairs;
  prelude.listsToObj = Obj2.listsToObj;
  prelude.objToLists = Obj2.objToLists;
  prelude.max = Num2.max;
  prelude.min = Num2.min;
  prelude.negate = Num2.negate;
  prelude.abs = Num2.abs;
  prelude.signum = Num2.signum;
  prelude.quot = Num2.quot;
  prelude.rem = Num2.rem;
  prelude.div = Num2.div;
  prelude.mod = Num2.mod;
  prelude.recip = Num2.recip;
  prelude.pi = Num2.pi;
  prelude.tau = Num2.tau;
  prelude.exp = Num2.exp;
  prelude.sqrt = Num2.sqrt;
  prelude.ln = Num2.ln;
  prelude.pow = Num2.pow;
  prelude.sin = Num2.sin;
  prelude.tan = Num2.tan;
  prelude.cos = Num2.cos;
  prelude.acos = Num2.acos;
  prelude.asin = Num2.asin;
  prelude.atan = Num2.atan;
  prelude.atan2 = Num2.atan2;
  prelude.truncate = Num2.truncate;
  prelude.round = Num2.round;
  prelude.ceiling = Num2.ceiling;
  prelude.floor = Num2.floor;
  prelude.isItNaN = Num2.isItNaN;
  prelude.even = Num2.even;
  prelude.odd = Num2.odd;
  prelude.gcd = Num2.gcd;
  prelude.lcm = Num2.lcm;
  prelude.VERSION = "1.2.1";
  lib$1 = prelude;
  function curry$(f2, bound) {
    var context, _curry = function(args) {
      return f2.length > 1 ? function() {
        var params = args ? args.concat() : [];
        context = this;
        return params.push.apply(params, arguments) < f2.length && arguments.length ? _curry.call(context, params) : f2.apply(context, params);
      } : f2;
    };
    return _curry();
  }
  return lib$1;
}
var hasRequiredParseString;
function requireParseString() {
  if (hasRequiredParseString) return parseString.exports;
  hasRequiredParseString = 1;
  (function() {
    var reject, special, tokenRegex;
    reject = requireLib$2().reject;
    function consumeOp(tokens, op) {
      if (tokens[0] === op) {
        return tokens.shift();
      } else {
        throw new Error("Expected '" + op + "', but got '" + tokens[0] + "' instead in " + JSON.stringify(tokens) + ".");
      }
    }
    function maybeConsumeOp(tokens, op) {
      if (tokens[0] === op) {
        return tokens.shift();
      }
    }
    function consumeList(tokens, arg$, hasDelimiters) {
      var open, close, result, untilTest;
      open = arg$[0], close = arg$[1];
      if (hasDelimiters) {
        consumeOp(tokens, open);
      }
      result = [];
      untilTest = "," + (hasDelimiters ? close : "");
      while (tokens.length && (hasDelimiters && tokens[0] !== close)) {
        result.push(consumeElement(tokens, untilTest));
        maybeConsumeOp(tokens, ",");
      }
      if (hasDelimiters) {
        consumeOp(tokens, close);
      }
      return result;
    }
    function consumeArray(tokens, hasDelimiters) {
      return consumeList(tokens, ["[", "]"], hasDelimiters);
    }
    function consumeTuple(tokens, hasDelimiters) {
      return consumeList(tokens, ["(", ")"], hasDelimiters);
    }
    function consumeFields(tokens, hasDelimiters) {
      var result, untilTest, key;
      if (hasDelimiters) {
        consumeOp(tokens, "{");
      }
      result = {};
      untilTest = "," + (hasDelimiters ? "}" : "");
      while (tokens.length && (!hasDelimiters || tokens[0] !== "}")) {
        key = consumeValue(tokens, ":");
        consumeOp(tokens, ":");
        result[key] = consumeElement(tokens, untilTest);
        maybeConsumeOp(tokens, ",");
      }
      if (hasDelimiters) {
        consumeOp(tokens, "}");
      }
      return result;
    }
    function consumeValue(tokens, untilTest) {
      var out;
      untilTest == null && (untilTest = "");
      out = "";
      while (tokens.length && -1 === untilTest.indexOf(tokens[0])) {
        out += tokens.shift();
      }
      return out;
    }
    function consumeElement(tokens, untilTest) {
      switch (tokens[0]) {
        case "[":
          return consumeArray(tokens, true);
        case "(":
          return consumeTuple(tokens, true);
        case "{":
          return consumeFields(tokens, true);
        default:
          return consumeValue(tokens, untilTest);
      }
    }
    function consumeTopLevel(tokens, types, options) {
      var ref$, type2, structure, origTokens, result, finalResult, x$, y$;
      ref$ = types[0], type2 = ref$.type, structure = ref$.structure;
      origTokens = tokens.concat();
      if (!options.explicit && types.length === 1 && (!type2 && structure || (type2 === "Array" || type2 === "Object"))) {
        result = structure === "array" || type2 === "Array" ? consumeArray(tokens, tokens[0] === "[") : structure === "tuple" ? consumeTuple(tokens, tokens[0] === "(") : consumeFields(tokens, tokens[0] === "{");
        finalResult = tokens.length ? consumeElement(structure === "array" || type2 === "Array" ? (x$ = origTokens, x$.unshift("["), x$.push("]"), x$) : (y$ = origTokens, y$.unshift("("), y$.push(")"), y$)) : result;
      } else {
        finalResult = consumeElement(tokens);
      }
      return finalResult;
    }
    special = /\[\]\(\)}{:,/.source;
    tokenRegex = RegExp(`("(?:\\\\"|[^"])*")|('(?:\\\\'|[^'])*')|(/(?:\\\\/|[^/])*/[a-zA-Z]*)|(#.*#)|([` + special + "])|([^\\s" + special + "](?:\\s*[^\\s" + special + "]+)*)|\\s*");
    parseString.exports = function(types, string, options) {
      var tokens, node2;
      options == null && (options = {});
      if (!options.explicit && types.length === 1 && types[0].type === "String") {
        return string;
      }
      tokens = reject(not$, string.split(tokenRegex));
      node2 = consumeTopLevel(tokens, types, options);
      if (!node2) {
        throw new Error("Error parsing '" + string + "'.");
      }
      return node2;
    };
    function not$(x2) {
      return !x2;
    }
  }).call(this);
  return parseString.exports;
}
var cast = { exports: {} };
var lib = { exports: {} };
var parseType = { exports: {} };
var hasRequiredParseType;
function requireParseType() {
  if (hasRequiredParseType) return parseType.exports;
  hasRequiredParseType = 1;
  (function() {
    var identifierRegex, tokenRegex;
    identifierRegex = /[\$\w]+/;
    function peek(tokens) {
      var token;
      token = tokens[0];
      if (token == null) {
        throw new Error("Unexpected end of input.");
      }
      return token;
    }
    function consumeIdent(tokens) {
      var token;
      token = peek(tokens);
      if (!identifierRegex.test(token)) {
        throw new Error("Expected text, got '" + token + "' instead.");
      }
      return tokens.shift();
    }
    function consumeOp(tokens, op) {
      var token;
      token = peek(tokens);
      if (token !== op) {
        throw new Error("Expected '" + op + "', got '" + token + "' instead.");
      }
      return tokens.shift();
    }
    function maybeConsumeOp(tokens, op) {
      var token;
      token = tokens[0];
      if (token === op) {
        return tokens.shift();
      } else {
        return null;
      }
    }
    function consumeArray(tokens) {
      var types;
      consumeOp(tokens, "[");
      if (peek(tokens) === "]") {
        throw new Error("Must specify type of Array - eg. [Type], got [] instead.");
      }
      types = consumeTypes(tokens);
      consumeOp(tokens, "]");
      return {
        structure: "array",
        of: types
      };
    }
    function consumeTuple(tokens) {
      var components;
      components = [];
      consumeOp(tokens, "(");
      if (peek(tokens) === ")") {
        throw new Error("Tuple must be of at least length 1 - eg. (Type), got () instead.");
      }
      for (; ; ) {
        components.push(consumeTypes(tokens));
        maybeConsumeOp(tokens, ",");
        if (")" === peek(tokens)) {
          break;
        }
      }
      consumeOp(tokens, ")");
      return {
        structure: "tuple",
        of: components
      };
    }
    function consumeFields(tokens) {
      var fields, subset, ref$, key, types;
      fields = {};
      consumeOp(tokens, "{");
      subset = false;
      for (; ; ) {
        if (maybeConsumeOp(tokens, "...")) {
          subset = true;
          break;
        }
        ref$ = consumeField(tokens), key = ref$[0], types = ref$[1];
        fields[key] = types;
        maybeConsumeOp(tokens, ",");
        if ("}" === peek(tokens)) {
          break;
        }
      }
      consumeOp(tokens, "}");
      return {
        structure: "fields",
        of: fields,
        subset
      };
    }
    function consumeField(tokens) {
      var key, types;
      key = consumeIdent(tokens);
      consumeOp(tokens, ":");
      types = consumeTypes(tokens);
      return [key, types];
    }
    function maybeConsumeStructure(tokens) {
      switch (tokens[0]) {
        case "[":
          return consumeArray(tokens);
        case "(":
          return consumeTuple(tokens);
        case "{":
          return consumeFields(tokens);
      }
    }
    function consumeType(tokens) {
      var token, wildcard, type2, structure;
      token = peek(tokens);
      wildcard = token === "*";
      if (wildcard || identifierRegex.test(token)) {
        type2 = wildcard ? consumeOp(tokens, "*") : consumeIdent(tokens);
        structure = maybeConsumeStructure(tokens);
        if (structure) {
          return structure.type = type2, structure;
        } else {
          return {
            type: type2
          };
        }
      } else {
        structure = maybeConsumeStructure(tokens);
        if (!structure) {
          throw new Error("Unexpected character: " + token);
        }
        return structure;
      }
    }
    function consumeTypes(tokens) {
      var lookahead, types, typesSoFar, typeObj, type2, structure;
      if ("::" === peek(tokens)) {
        throw new Error("No comment before comment separator '::' found.");
      }
      lookahead = tokens[1];
      if (lookahead != null && lookahead === "::") {
        tokens.shift();
        tokens.shift();
      }
      types = [];
      typesSoFar = {};
      if ("Maybe" === peek(tokens)) {
        tokens.shift();
        types = [
          {
            type: "Undefined"
          },
          {
            type: "Null"
          }
        ];
        typesSoFar = {
          Undefined: true,
          Null: true
        };
      }
      for (; ; ) {
        typeObj = consumeType(tokens), type2 = typeObj.type, structure = typeObj.structure;
        if (!typesSoFar[type2]) {
          types.push(typeObj);
        }
        if (structure == null) {
          typesSoFar[type2] = true;
        }
        if (!maybeConsumeOp(tokens, "|")) {
          break;
        }
      }
      return types;
    }
    tokenRegex = RegExp("\\.\\.\\.|::|->|" + identifierRegex.source + "|\\S", "g");
    parseType.exports = function(input) {
      var tokens, e2;
      if (!input.length) {
        throw new Error("No type specified.");
      }
      tokens = input.match(tokenRegex) || [];
      if (in$("->", tokens)) {
        throw new Error("Function types are not supported. To validate that something is a function, you may use 'Function'.");
      }
      try {
        return consumeTypes(tokens);
      } catch (e$) {
        e2 = e$;
        throw new Error(e2.message + " - Remaining tokens: " + JSON.stringify(tokens) + " - Initial input: '" + input + "'");
      }
    };
    function in$(x2, xs) {
      var i2 = -1, l2 = xs.length >>> 0;
      while (++i2 < l2) if (x2 === xs[i2]) return true;
      return false;
    }
  }).call(this);
  return parseType.exports;
}
var check = { exports: {} };
var hasRequiredCheck;
function requireCheck() {
  if (hasRequiredCheck) return check.exports;
  hasRequiredCheck = 1;
  (function() {
    var ref$, any, all, isItNaN, types, defaultType, toString$ = {}.toString;
    ref$ = requireLib$2(), any = ref$.any, all = ref$.all, isItNaN = ref$.isItNaN;
    types = {
      Number: {
        typeOf: "Number",
        validate: function(it) {
          return !isItNaN(it);
        }
      },
      NaN: {
        typeOf: "Number",
        validate: isItNaN
      },
      Int: {
        typeOf: "Number",
        validate: function(it) {
          return !isItNaN(it) && it % 1 === 0;
        }
      },
      Float: {
        typeOf: "Number",
        validate: function(it) {
          return !isItNaN(it);
        }
      },
      Date: {
        typeOf: "Date",
        validate: function(it) {
          return !isItNaN(it.getTime());
        }
      }
    };
    defaultType = {
      array: "Array",
      tuple: "Array"
    };
    function checkArray(input, type2, options) {
      return all(function(it) {
        return checkMultiple(it, type2.of, options);
      }, input);
    }
    function checkTuple(input, type2, options) {
      var i2, i$, ref$2, len$, types2;
      i2 = 0;
      for (i$ = 0, len$ = (ref$2 = type2.of).length; i$ < len$; ++i$) {
        types2 = ref$2[i$];
        if (!checkMultiple(input[i2], types2, options)) {
          return false;
        }
        i2++;
      }
      return input.length <= i2;
    }
    function checkFields(input, type2, options) {
      var inputKeys, numInputKeys, k, numOfKeys, key, ref$2, types2;
      inputKeys = {};
      numInputKeys = 0;
      for (k in input) {
        inputKeys[k] = true;
        numInputKeys++;
      }
      numOfKeys = 0;
      for (key in ref$2 = type2.of) {
        types2 = ref$2[key];
        if (!checkMultiple(input[key], types2, options)) {
          return false;
        }
        if (inputKeys[key]) {
          numOfKeys++;
        }
      }
      return type2.subset || numInputKeys === numOfKeys;
    }
    function checkStructure(input, type2, options) {
      if (!(input instanceof Object)) {
        return false;
      }
      switch (type2.structure) {
        case "fields":
          return checkFields(input, type2, options);
        case "array":
          return checkArray(input, type2, options);
        case "tuple":
          return checkTuple(input, type2, options);
      }
    }
    function check$1(input, typeObj, options) {
      var type2, structure, setting, that;
      type2 = typeObj.type, structure = typeObj.structure;
      if (type2) {
        if (type2 === "*") {
          return true;
        }
        setting = options.customTypes[type2] || types[type2];
        if (setting) {
          return (setting.typeOf === void 0 || setting.typeOf === toString$.call(input).slice(8, -1)) && setting.validate(input);
        } else {
          return type2 === toString$.call(input).slice(8, -1) && (!structure || checkStructure(input, typeObj, options));
        }
      } else if (structure) {
        if (that = defaultType[structure]) {
          if (that !== toString$.call(input).slice(8, -1)) {
            return false;
          }
        }
        return checkStructure(input, typeObj, options);
      } else {
        throw new Error("No type defined. Input: " + input + ".");
      }
    }
    function checkMultiple(input, types2, options) {
      if (toString$.call(types2).slice(8, -1) !== "Array") {
        throw new Error("Types must be in an array. Input: " + input + ".");
      }
      return any(function(it) {
        return check$1(input, it, options);
      }, types2);
    }
    check.exports = function(parsedType, input, options) {
      options == null && (options = {});
      if (options.customTypes == null) {
        options.customTypes = {};
      }
      return checkMultiple(input, parsedType, options);
    };
  }).call(this);
  return check.exports;
}
var hasRequiredLib$1;
function requireLib$1() {
  if (hasRequiredLib$1) return lib.exports;
  hasRequiredLib$1 = 1;
  (function() {
    var VERSION, parseType2, parsedTypeCheck, typeCheck;
    VERSION = "0.4.0";
    parseType2 = requireParseType();
    parsedTypeCheck = requireCheck();
    typeCheck = function(type2, input, options) {
      return parsedTypeCheck(parseType2(type2), input, options);
    };
    lib.exports = {
      VERSION,
      typeCheck,
      parsedTypeCheck,
      parseType: parseType2
    };
  }).call(this);
  return lib.exports;
}
var hasRequiredCast;
function requireCast() {
  if (hasRequiredCast) return cast.exports;
  hasRequiredCast = 1;
  (function() {
    var parsedTypeCheck, types, toString$ = {}.toString;
    parsedTypeCheck = requireLib$1().parsedTypeCheck;
    types = {
      "*": function(value, options) {
        switch (toString$.call(value).slice(8, -1)) {
          case "Array":
            return typeCast(value, {
              type: "Array"
            }, options);
          case "Object":
            return typeCast(value, {
              type: "Object"
            }, options);
          default:
            return {
              type: "Just",
              value: typesCast(value, [
                {
                  type: "Undefined"
                },
                {
                  type: "Null"
                },
                {
                  type: "NaN"
                },
                {
                  type: "Boolean"
                },
                {
                  type: "Number"
                },
                {
                  type: "Date"
                },
                {
                  type: "RegExp"
                },
                {
                  type: "Array"
                },
                {
                  type: "Object"
                },
                {
                  type: "String"
                }
              ], (options.explicit = true, options))
            };
        }
      },
      Undefined: function(it) {
        if (it === "undefined" || it === void 0) {
          return {
            type: "Just",
            value: void 0
          };
        } else {
          return {
            type: "Nothing"
          };
        }
      },
      Null: function(it) {
        if (it === "null") {
          return {
            type: "Just",
            value: null
          };
        } else {
          return {
            type: "Nothing"
          };
        }
      },
      NaN: function(it) {
        if (it === "NaN") {
          return {
            type: "Just",
            value: NaN
          };
        } else {
          return {
            type: "Nothing"
          };
        }
      },
      Boolean: function(it) {
        if (it === "true") {
          return {
            type: "Just",
            value: true
          };
        } else if (it === "false") {
          return {
            type: "Just",
            value: false
          };
        } else {
          return {
            type: "Nothing"
          };
        }
      },
      Number: function(it) {
        return {
          type: "Just",
          value: +it
        };
      },
      Int: function(it) {
        return {
          type: "Just",
          value: +it
        };
      },
      Float: function(it) {
        return {
          type: "Just",
          value: +it
        };
      },
      Date: function(value, options) {
        var that;
        if (that = /^\#([\s\S]*)\#$/.exec(value)) {
          return {
            type: "Just",
            value: new Date(+that[1] || that[1])
          };
        } else if (options.explicit) {
          return {
            type: "Nothing"
          };
        } else {
          return {
            type: "Just",
            value: new Date(+value || value)
          };
        }
      },
      RegExp: function(value, options) {
        var that;
        if (that = /^\/([\s\S]*)\/([gimy]*)$/.exec(value)) {
          return {
            type: "Just",
            value: new RegExp(that[1], that[2])
          };
        } else if (options.explicit) {
          return {
            type: "Nothing"
          };
        } else {
          return {
            type: "Just",
            value: new RegExp(value)
          };
        }
      },
      Array: function(value, options) {
        return castArray(value, {
          of: [{
            type: "*"
          }]
        }, options);
      },
      Object: function(value, options) {
        return castFields(value, {
          of: {}
        }, options);
      },
      String: function(it) {
        var replace, that;
        if (toString$.call(it).slice(8, -1) !== "String") {
          return {
            type: "Nothing"
          };
        }
        replace = function(value, quote) {
          return value.replace(/\\([^u]|u[0-9a-fA-F]{4})/g, function(all, escaped) {
            switch (escaped[0]) {
              case quote:
                return quote;
              case "\\":
                return "\\";
              case "b":
                return "\b";
              case "f":
                return "\f";
              case "n":
                return "\n";
              case "r":
                return "\r";
              case "t":
                return "	";
              case "u":
                return JSON.parse('"' + all + '"');
              default:
                return escaped;
            }
          });
        };
        if (that = it.match(/^'([\s\S]*)'$/)) {
          return {
            type: "Just",
            value: replace(that[1], "'")
          };
        } else if (that = it.match(/^"([\s\S]*)"$/)) {
          return {
            type: "Just",
            value: replace(that[1], '"')
          };
        } else {
          return {
            type: "Just",
            value: it
          };
        }
      }
    };
    function castArray(node2, type2, options) {
      var typeOf, element;
      if (toString$.call(node2).slice(8, -1) !== "Array") {
        return {
          type: "Nothing"
        };
      }
      typeOf = type2.of;
      return {
        type: "Just",
        value: (function() {
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = node2).length; i$ < len$; ++i$) {
            element = ref$[i$];
            results$.push(typesCast(element, typeOf, options));
          }
          return results$;
        })()
      };
    }
    function castTuple(node2, type2, options) {
      var result, i2, i$, ref$, len$, types2, cast2;
      if (toString$.call(node2).slice(8, -1) !== "Array") {
        return {
          type: "Nothing"
        };
      }
      result = [];
      i2 = 0;
      for (i$ = 0, len$ = (ref$ = type2.of).length; i$ < len$; ++i$) {
        types2 = ref$[i$];
        cast2 = typesCast(node2[i2], types2, options);
        if (toString$.call(cast2).slice(8, -1) !== "Undefined") {
          result.push(cast2);
        }
        i2++;
      }
      if (node2.length <= i2) {
        return {
          type: "Just",
          value: result
        };
      } else {
        return {
          type: "Nothing"
        };
      }
    }
    function castFields(node2, type2, options) {
      var typeOf, key, value;
      if (toString$.call(node2).slice(8, -1) !== "Object") {
        return {
          type: "Nothing"
        };
      }
      typeOf = type2.of;
      return {
        type: "Just",
        value: (function() {
          var ref$, resultObj$ = {};
          for (key in ref$ = node2) {
            value = ref$[key];
            resultObj$[typesCast(key, [{
              type: "String"
            }], options)] = typesCast(value, typeOf[key] || [{
              type: "*"
            }], options);
          }
          return resultObj$;
        })()
      };
    }
    function typeCast(node2, typeObj, options) {
      var type2, structure, castFunc, ref$;
      type2 = typeObj.type, structure = typeObj.structure;
      if (type2) {
        castFunc = ((ref$ = options.customTypes[type2]) != null ? ref$.cast : void 0) || types[type2];
        if (!castFunc) {
          throw new Error("Type not defined: " + type2 + ".");
        }
        return castFunc(node2, options, typesCast);
      } else {
        switch (structure) {
          case "array":
            return castArray(node2, typeObj, options);
          case "tuple":
            return castTuple(node2, typeObj, options);
          case "fields":
            return castFields(node2, typeObj, options);
        }
      }
    }
    function typesCast(node2, types2, options) {
      var i$, len$, type2, ref$, valueType, value;
      for (i$ = 0, len$ = types2.length; i$ < len$; ++i$) {
        type2 = types2[i$];
        ref$ = typeCast(node2, type2, options), valueType = ref$.type, value = ref$.value;
        if (valueType === "Nothing") {
          continue;
        }
        if (parsedTypeCheck([type2], value, {
          customTypes: options.customTypes
        })) {
          return value;
        }
      }
      throw new Error("Value " + JSON.stringify(node2) + " does not type check against " + JSON.stringify(types2) + ".");
    }
    cast.exports = function(node2, types2, options) {
      if (!options.explicit && types2.length === 1 && types2[0].type === "String") {
        return node2;
      }
      return typesCast(node2, types2, options);
    };
  }).call(this);
  return cast.exports;
}
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib) return lib$2.exports;
  hasRequiredLib = 1;
  (function() {
    var parseString2, cast2, parseType2, VERSION, parsedTypeParse, parse;
    parseString2 = requireParseString();
    cast2 = requireCast();
    parseType2 = requireLib$1().parseType;
    VERSION = "0.4.1";
    parsedTypeParse = function(parsedType, string, options) {
      options == null && (options = {});
      options.explicit == null && (options.explicit = false);
      options.customTypes == null && (options.customTypes = {});
      return cast2(parseString2(parsedType, string, options), parsedType, options);
    };
    parse = function(type2, string, options) {
      return parsedTypeParse(parseType2(type2), string, options);
    };
    lib$2.exports = {
      VERSION,
      parse,
      parsedTypeParse
    };
  }).call(this);
  return lib$2.exports;
}
var hasRequiredCjs$2;
function requireCjs$2() {
  if (hasRequiredCjs$2) return cjs$2;
  hasRequiredCjs$2 = 1;
  var levn = requireLib();
  const directivesPattern = /^([a-z]+(?:-[a-z]+)*)(?:\s|$)/u;
  const validSeverities = /* @__PURE__ */ new Set([0, 1, 2, "off", "warn", "error"]);
  function isSeverityValid(ruleConfig) {
    const severity2 = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;
    return validSeverities.has(severity2);
  }
  function isEverySeverityValid(rulesConfig) {
    return Object.values(rulesConfig).every(isSeverityValid);
  }
  class DirectiveComment {
    /**
     * The label of the directive, such as "eslint", "eslint-disable", etc.
     * @type {string}
     */
    label = "";
    /**
     * The value of the directive (the string after the label).
     * @type {string}
     */
    value = "";
    /**
     * The justification of the directive (the string after the --).
     * @type {string}
     */
    justification = "";
    /**
     * Creates a new directive comment.
     * @param {string} label The label of the directive.
     * @param {string} value The value of the directive.
     * @param {string} justification The justification of the directive.
     */
    constructor(label, value, justification) {
      this.label = label;
      this.value = value;
      this.justification = justification;
    }
  }
  class ConfigCommentParser {
    /**
     * Parses a list of "name:string_value" or/and "name" options divided by comma or
     * whitespace. Used for "global" comments.
     * @param {string} string The string to parse.
     * @returns {StringConfig} Result map object of names and string values, or null values if no value was provided.
     */
    parseStringConfig(string) {
      const items2 = (
        /** @type {StringConfig} */
        {}
      );
      const trimmedString = string.trim().replace(new RegExp("(?<!\\s)\\s*([:,])\\s*", "gu"), "$1");
      trimmedString.split(/\s|,+/u).forEach((name) => {
        if (!name) {
          return;
        }
        const [key, value = null] = name.split(":");
        items2[key] = value;
      });
      return items2;
    }
    /**
     * Parses a JSON-like config.
     * @param {string} string The string to parse.
     * @returns {({ok: true, config: RulesConfig}|{ok: false, error: {message: string}})} Result map object
     */
    parseJSONLikeConfig(string) {
      try {
        const items2 = (
          /** @type {RulesConfig} */
          levn.parse("Object", string) || {}
        );
        if (isEverySeverityValid(items2)) {
          return {
            ok: true,
            config: items2
          };
        }
      } catch {
      }
      const normalizedString = string.replace(new RegExp("(?<![-a-zA-Z0-9/])([-a-zA-Z0-9/]+):", "gu"), '"$1":').replace(/(\]|[0-9])\s+(?=")/u, "$1,");
      try {
        const items2 = JSON.parse(`{${normalizedString}}`);
        return {
          ok: true,
          config: items2
        };
      } catch (ex) {
        const errorMessage = ex instanceof Error ? ex.message : String(ex);
        return {
          ok: false,
          error: {
            message: `Failed to parse JSON from '${normalizedString}': ${errorMessage}`
          }
        };
      }
    }
    /**
     * Parses a config of values separated by comma.
     * @param {string} string The string to parse.
     * @returns {BooleanConfig} Result map of values and true values
     */
    parseListConfig(string) {
      const items2 = (
        /** @type {BooleanConfig} */
        {}
      );
      string.split(",").forEach((name) => {
        const trimmedName = name.trim().replace(
          /^(?<quote>['"]?)(?<ruleId>.*)\k<quote>$/su,
          "$<ruleId>"
        );
        if (trimmedName) {
          items2[trimmedName] = true;
        }
      });
      return items2;
    }
    /**
     * Extract the directive and the justification from a given directive comment and trim them.
     * @param {string} value The comment text to extract.
     * @returns {{directivePart: string, justificationPart: string}} The extracted directive and justification.
     */
    #extractDirectiveComment(value) {
      const match = /\s-{2,}\s/u.exec(value);
      if (!match) {
        return { directivePart: value.trim(), justificationPart: "" };
      }
      const directive = value.slice(0, match.index).trim();
      const justification = value.slice(match.index + match[0].length).trim();
      return { directivePart: directive, justificationPart: justification };
    }
    /**
     * Parses a directive comment into directive text and value.
     * @param {string} string The string with the directive to be parsed.
     * @returns {DirectiveComment|undefined} The parsed directive or `undefined` if the directive is invalid.
     */
    parseDirective(string) {
      const { directivePart, justificationPart } = this.#extractDirectiveComment(string);
      const match = directivesPattern.exec(directivePart);
      if (!match) {
        return void 0;
      }
      const directiveText = match[1];
      const directiveValue = directivePart.slice(
        match.index + directiveText.length
      );
      return new DirectiveComment(
        directiveText,
        directiveValue.trim(),
        justificationPart
      );
    }
  }
  function hasESTreeStyleLoc(node2) {
    return "loc" in node2;
  }
  function hasPosStyleLoc(node2) {
    return "position" in node2;
  }
  function hasESTreeStyleRange(node2) {
    return "range" in node2;
  }
  function hasPosStyleRange(node2) {
    return "position" in node2;
  }
  class VisitNodeStep {
    /**
     * The type of the step.
     * @type {"visit"}
     * @readonly
     */
    type = "visit";
    /**
     * The kind of the step. Represents the same data as the `type` property
     * but it's a number for performance.
     * @type {1}
     * @readonly
     */
    kind = 1;
    /**
     * The target of the step.
     * @type {object}
     */
    target;
    /**
     * The phase of the step.
     * @type {1|2}
     */
    phase;
    /**
     * The arguments of the step.
     * @type {Array<any>}
     */
    args;
    /**
     * Creates a new instance.
     * @param {Object} options The options for the step.
     * @param {object} options.target The target of the step.
     * @param {1|2} options.phase The phase of the step.
     * @param {Array<any>} options.args The arguments of the step.
     */
    constructor({ target, phase, args }) {
      this.target = target;
      this.phase = phase;
      this.args = args;
    }
  }
  class CallMethodStep {
    /**
     * The type of the step.
     * @type {"call"}
     * @readonly
     */
    type = "call";
    /**
     * The kind of the step. Represents the same data as the `type` property
     * but it's a number for performance.
     * @type {2}
     * @readonly
     */
    kind = 2;
    /**
     * The name of the method to call.
     * @type {string}
     */
    target;
    /**
     * The arguments to pass to the method.
     * @type {Array<any>}
     */
    args;
    /**
     * Creates a new instance.
     * @param {Object} options The options for the step.
     * @param {string} options.target The target of the step.
     * @param {Array<any>} options.args The arguments of the step.
     */
    constructor({ target, args }) {
      this.target = target;
      this.args = args;
    }
  }
  class Directive {
    /**
     * The type of directive.
     * @type {DirectiveType}
     * @readonly
     */
    type;
    /**
     * The node representing the directive.
     * @type {unknown}
     * @readonly
     */
    node;
    /**
     * Everything after the "eslint-disable" portion of the directive,
     * but before the "--" that indicates the justification.
     * @type {string}
     * @readonly
     */
    value;
    /**
     * The justification for the directive.
     * @type {string}
     * @readonly
     */
    justification;
    /**
     * Creates a new instance.
     * @param {Object} options The options for the directive.
     * @param {"disable"|"enable"|"disable-next-line"|"disable-line"} options.type The type of directive.
     * @param {unknown} options.node The node representing the directive.
     * @param {string} options.value The value of the directive.
     * @param {string} options.justification The justification for the directive.
     */
    constructor({ type: type2, node: node2, value, justification }) {
      this.type = type2;
      this.node = node2;
      this.value = value;
      this.justification = justification;
    }
  }
  class TextSourceCodeBase {
    /**
     * The lines of text in the source code.
     * @type {Array<string>}
     */
    #lines;
    /**
     * The AST of the source code.
     * @type {Options['RootNode']}
     */
    ast;
    /**
     * The text of the source code.
     * @type {string}
     */
    text;
    /**
     * Creates a new instance.
     * @param {Object} options The options for the instance.
     * @param {string} options.text The source code text.
     * @param {Options['RootNode']} options.ast The root AST node.
     * @param {RegExp} [options.lineEndingPattern] The pattern to match lineEndings in the source code.
     */
    constructor({ text, ast: ast2, lineEndingPattern = /\r?\n/u }) {
      this.ast = ast2;
      this.text = text;
      this.#lines = text.split(lineEndingPattern);
    }
    /**
     * Returns the loc information for the given node or token.
     * @param {Options['SyntaxElementWithLoc']} nodeOrToken The node or token to get the loc information for.
     * @returns {SourceLocation} The loc information for the node or token.
     * @throws {Error} If the node or token does not have loc information.
     */
    getLoc(nodeOrToken) {
      if (hasESTreeStyleLoc(nodeOrToken)) {
        return nodeOrToken.loc;
      }
      if (hasPosStyleLoc(nodeOrToken)) {
        return nodeOrToken.position;
      }
      throw new Error(
        "Custom getLoc() method must be implemented in the subclass."
      );
    }
    /**
     * Returns the range information for the given node or token.
     * @param {Options['SyntaxElementWithLoc']} nodeOrToken The node or token to get the range information for.
     * @returns {SourceRange} The range information for the node or token.
     * @throws {Error} If the node or token does not have range information.
     */
    getRange(nodeOrToken) {
      if (hasESTreeStyleRange(nodeOrToken)) {
        return nodeOrToken.range;
      }
      if (hasPosStyleRange(nodeOrToken)) {
        return [
          nodeOrToken.position.start.offset,
          nodeOrToken.position.end.offset
        ];
      }
      throw new Error(
        "Custom getRange() method must be implemented in the subclass."
      );
    }
    /* eslint-disable no-unused-vars -- Required to complete interface. */
    /**
     * Returns the parent of the given node.
     * @param {Options['SyntaxElementWithLoc']} node The node to get the parent of.
     * @returns {Options['SyntaxElementWithLoc']|undefined} The parent of the node.
     * @throws {Error} If the method is not implemented in the subclass.
     */
    getParent(node2) {
      throw new Error("Not implemented.");
    }
    /* eslint-enable no-unused-vars -- Required to complete interface. */
    /**
     * Gets all the ancestors of a given node
     * @param {Options['SyntaxElementWithLoc']} node The node
     * @returns {Array<Options['SyntaxElementWithLoc']>} All the ancestor nodes in the AST, not including the provided node, starting
     * from the root node at index 0 and going inwards to the parent node.
     * @throws {TypeError} When `node` is missing.
     */
    getAncestors(node2) {
      if (!node2) {
        throw new TypeError("Missing required argument: node.");
      }
      const ancestorsStartingAtParent = [];
      for (let ancestor = this.getParent(node2); ancestor; ancestor = this.getParent(ancestor)) {
        ancestorsStartingAtParent.push(ancestor);
      }
      return ancestorsStartingAtParent.reverse();
    }
    /**
     * Gets the source code for the given node.
     * @param {Options['SyntaxElementWithLoc']} [node] The AST node to get the text for.
     * @param {number} [beforeCount] The number of characters before the node to retrieve.
     * @param {number} [afterCount] The number of characters after the node to retrieve.
     * @returns {string} The text representing the AST node.
     * @public
     */
    getText(node2, beforeCount, afterCount) {
      if (node2) {
        const range = this.getRange(node2);
        return this.text.slice(
          Math.max(range[0] - (beforeCount || 0), 0),
          range[1] + (afterCount || 0)
        );
      }
      return this.text;
    }
    /**
     * Gets the entire source text split into an array of lines.
     * @returns {Array<string>} The source text as an array of lines.
     * @public
     */
    get lines() {
      return this.#lines;
    }
    /**
     * Traverse the source code and return the steps that were taken.
     * @returns {Iterable<TraversalStep>} The steps that were taken while traversing the source code.
     */
    traverse() {
      throw new Error("Not implemented.");
    }
  }
  cjs$2.CallMethodStep = CallMethodStep;
  cjs$2.ConfigCommentParser = ConfigCommentParser;
  cjs$2.Directive = Directive;
  cjs$2.TextSourceCodeBase = TextSourceCodeBase;
  cjs$2.VisitNodeStep = VisitNodeStep;
  return cjs$2;
}
var sourceCode$1;
var hasRequiredSourceCode$1;
function requireSourceCode$1() {
  if (hasRequiredSourceCode$1) return sourceCode$1;
  hasRequiredSourceCode$1 = 1;
  const { isCommentToken } = /* @__PURE__ */ requireEslintUtils(), TokenStore = requireTokenStore(), astUtils2 = requireAstUtils$1(), Traverser = requireTraverser(), globals2 = requireGlobals(), { directivesPattern } = requireDirectives(), CodePathAnalyzer = requireCodePathAnalyzer(), {
    ConfigCommentParser,
    VisitNodeStep,
    CallMethodStep,
    Directive
  } = requireCjs$2(), eslintScope2 = requireEslintScope();
  const commentParser = new ConfigCommentParser();
  function validate2(ast2) {
    if (!ast2) {
      throw new TypeError(`Unexpected empty AST. (${ast2})`);
    }
    if (!ast2.tokens) {
      throw new TypeError("AST is missing the tokens array.");
    }
    if (!ast2.comments) {
      throw new TypeError("AST is missing the comments array.");
    }
    if (!ast2.loc) {
      throw new TypeError("AST is missing location information.");
    }
    if (!ast2.range) {
      throw new TypeError("AST is missing range information");
    }
  }
  function getGlobalsForEcmaVersion(ecmaVersion2) {
    switch (ecmaVersion2) {
      case 3:
        return globals2.es3;
      case 5:
        return globals2.es5;
      default:
        if (ecmaVersion2 < 2015) {
          return globals2[`es${ecmaVersion2 + 2009}`];
        }
        return globals2[`es${ecmaVersion2}`];
    }
  }
  function looksLikeExport(astNode) {
    return astNode.type === "ExportDefaultDeclaration" || astNode.type === "ExportNamedDeclaration" || astNode.type === "ExportAllDeclaration" || astNode.type === "ExportSpecifier";
  }
  function sortedMerge(tokens, comments) {
    const result = [];
    let tokenIndex = 0;
    let commentIndex = 0;
    while (tokenIndex < tokens.length || commentIndex < comments.length) {
      if (commentIndex >= comments.length || tokenIndex < tokens.length && tokens[tokenIndex].range[0] < comments[commentIndex].range[0]) {
        result.push(tokens[tokenIndex++]);
      } else {
        result.push(comments[commentIndex++]);
      }
    }
    return result;
  }
  function normalizeConfigGlobal(configuredValue) {
    switch (configuredValue) {
      case "off":
        return "off";
      case true:
      case "true":
      case "writeable":
      case "writable":
        return "writable";
      case null:
      case false:
      case "false":
      case "readable":
      case "readonly":
        return "readonly";
      default:
        throw new Error(
          `'${configuredValue}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`
        );
    }
  }
  function nodesOrTokensOverlap(first, second) {
    return first.range[0] <= second.range[0] && first.range[1] >= second.range[0] || second.range[0] <= first.range[0] && second.range[1] >= first.range[0];
  }
  function isSpaceBetween(sourceCode2, first, second, checkInsideOfJSXText) {
    if (nodesOrTokensOverlap(first, second)) {
      return false;
    }
    const [startingNodeOrToken, endingNodeOrToken] = first.range[1] <= second.range[0] ? [first, second] : [second, first];
    const firstToken = sourceCode2.getLastToken(startingNodeOrToken) || startingNodeOrToken;
    const finalToken = sourceCode2.getFirstToken(endingNodeOrToken) || endingNodeOrToken;
    let currentToken = firstToken;
    while (currentToken !== finalToken) {
      const nextToken = sourceCode2.getTokenAfter(currentToken, {
        includeComments: true
      });
      if (currentToken.range[1] !== nextToken.range[0] || /*
      * For backward compatibility, check spaces in JSXText.
      * https://github.com/eslint/eslint/issues/12614
      */
      checkInsideOfJSXText && nextToken !== finalToken && nextToken.type === "JSXText" && /\s/u.test(nextToken.value)) {
        return true;
      }
      currentToken = nextToken;
    }
    return false;
  }
  function findLineNumberBinarySearch(lineStartIndices, target) {
    let low = 0;
    let high = lineStartIndices.length;
    while (low < high) {
      const mid = (low + high) / 2 | 0;
      if (target < lineStartIndices[mid]) {
        high = mid;
      } else {
        low = mid + 1;
      }
    }
    return low;
  }
  function addDeclaredGlobals(globalScope, configGlobals = {}, inlineGlobals = {}) {
    for (const id2 of /* @__PURE__ */ new Set([
      ...Object.keys(configGlobals),
      ...Object.keys(inlineGlobals)
    ])) {
      const configValue = configGlobals[id2] === void 0 ? void 0 : normalizeConfigGlobal(configGlobals[id2]);
      const commentValue = inlineGlobals[id2] && inlineGlobals[id2].value;
      const value = commentValue || configValue;
      const sourceComments = inlineGlobals[id2] && inlineGlobals[id2].comments;
      if (value === "off") {
        continue;
      }
      let variable = globalScope.set.get(id2);
      if (!variable) {
        variable = new eslintScope2.Variable(id2, globalScope);
        globalScope.variables.push(variable);
        globalScope.set.set(id2, variable);
      }
      variable.eslintImplicitGlobalSetting = configValue;
      variable.eslintExplicitGlobal = sourceComments !== void 0;
      variable.eslintExplicitGlobalComments = sourceComments;
      variable.writeable = value === "writable";
    }
    globalScope.through = globalScope.through.filter((reference) => {
      const name = reference.identifier.name;
      const variable = globalScope.set.get(name);
      if (variable) {
        reference.resolved = variable;
        variable.references.push(reference);
        return false;
      }
      return true;
    });
    const { implicit } = globalScope;
    if (typeof implicit === "object" && implicit !== null) {
      implicit.variables = implicit.variables.filter((variable) => {
        const name = variable.name;
        if (globalScope.set.has(name)) {
          implicit.set.delete(name);
          return false;
        }
        return true;
      });
      if (implicit.left) {
        implicit.left = implicit.left.filter(
          (reference) => !globalScope.set.has(reference.identifier.name)
        );
      }
    }
  }
  function markExportedVariables(globalScope, variables) {
    Object.keys(variables).forEach((name) => {
      const variable = globalScope.set.get(name);
      if (variable) {
        variable.eslintUsed = true;
        variable.eslintExported = true;
      }
    });
  }
  const caches = Symbol("caches");
  class SourceCode extends TokenStore {
    /**
     * The cache of steps that were taken while traversing the source code.
     * @type {Array<ITraversalStep>}
     */
    #steps;
    /**
     * Creates a new instance.
     * @param {string|Object} textOrConfig The source code text or config object.
     * @param {string} textOrConfig.text The source code text.
     * @param {ASTNode} textOrConfig.ast The Program node of the AST representing the code. This AST should be created from the text that BOM was stripped.
     * @param {boolean} textOrConfig.hasBOM Indicates if the text has a Unicode BOM.
     * @param {Object|null} textOrConfig.parserServices The parser services.
     * @param {ScopeManager|null} textOrConfig.scopeManager The scope of this source code.
     * @param {Object|null} textOrConfig.visitorKeys The visitor keys to traverse AST.
     * @param {ASTNode} [astIfNoConfig] The Program node of the AST representing the code. This AST should be created from the text that BOM was stripped.
     */
    constructor(textOrConfig, astIfNoConfig) {
      let text, hasBOM, ast2, parserServices, scopeManager, visitorKeys;
      if (typeof textOrConfig === "string") {
        text = textOrConfig;
        ast2 = astIfNoConfig;
        hasBOM = false;
      } else if (typeof textOrConfig === "object" && textOrConfig !== null) {
        text = textOrConfig.text;
        ast2 = textOrConfig.ast;
        hasBOM = textOrConfig.hasBOM;
        parserServices = textOrConfig.parserServices;
        scopeManager = textOrConfig.scopeManager;
        visitorKeys = textOrConfig.visitorKeys;
      }
      validate2(ast2);
      super(ast2.tokens, ast2.comments);
      this[caches] = /* @__PURE__ */ new Map([
        ["scopes", /* @__PURE__ */ new WeakMap()],
        ["vars", /* @__PURE__ */ new Map()],
        ["configNodes", void 0],
        ["isGlobalReference", /* @__PURE__ */ new WeakMap()]
      ]);
      this.isESTree = ast2.type === "Program";
      const textHasBOM = text.charCodeAt(0) === 65279;
      this.hasBOM = textHasBOM || !!hasBOM;
      this.text = textHasBOM ? text.slice(1) : text;
      this.ast = ast2;
      this.parserServices = parserServices || {};
      this.scopeManager = scopeManager || null;
      this.visitorKeys = visitorKeys || Traverser.DEFAULT_VISITOR_KEYS;
      const shebangMatched = this.text.match(astUtils2.shebangPattern);
      const hasShebang = shebangMatched && ast2.comments.length && ast2.comments[0].value === shebangMatched[1];
      if (hasShebang) {
        ast2.comments[0].type = "Shebang";
      }
      this.tokensAndComments = sortedMerge(ast2.tokens, ast2.comments);
      this.lines = [];
      this.lineStartIndices = [0];
      const lineEndingPattern = astUtils2.createGlobalLinebreakMatcher();
      let match;
      while (match = lineEndingPattern.exec(this.text)) {
        this.lines.push(
          this.text.slice(this.lineStartIndices.at(-1), match.index)
        );
        this.lineStartIndices.push(match.index + match[0].length);
      }
      this.lines.push(this.text.slice(this.lineStartIndices.at(-1)));
      Object.freeze(this);
      Object.freeze(this.lines);
    }
    /**
     * Split the source code into multiple lines based on the line delimiters.
     * @param {string} text Source code as a string.
     * @returns {string[]} Array of source code lines.
     * @public
     */
    static splitLines(text) {
      return text.split(astUtils2.createGlobalLinebreakMatcher());
    }
    /**
     * Gets the source code for the given node.
     * @param {ASTNode} [node] The AST node to get the text for.
     * @param {number} [beforeCount] The number of characters before the node to retrieve.
     * @param {number} [afterCount] The number of characters after the node to retrieve.
     * @returns {string} The text representing the AST node.
     * @public
     */
    getText(node2, beforeCount, afterCount) {
      if (node2) {
        return this.text.slice(
          Math.max(node2.range[0] - (beforeCount || 0), 0),
          node2.range[1] + (afterCount || 0)
        );
      }
      return this.text;
    }
    /**
     * Gets the entire source text split into an array of lines.
     * @returns {string[]} The source text as an array of lines.
     * @public
     */
    getLines() {
      return this.lines;
    }
    /**
     * Retrieves an array containing all comments in the source code.
     * @returns {ASTNode[]} An array of comment nodes.
     * @public
     */
    getAllComments() {
      return this.ast.comments;
    }
    /**
     * Retrieves the JSDoc comment for a given node.
     * @param {ASTNode} node The AST node to get the comment for.
     * @returns {Token|null} The Block comment token containing the JSDoc comment
     *      for the given node or null if not found.
     * @public
     * @deprecated
     */
    getJSDocComment(node2) {
      const findJSDocComment = (astNode) => {
        const tokenBefore = this.getTokenBefore(astNode, {
          includeComments: true
        });
        if (tokenBefore && isCommentToken(tokenBefore) && tokenBefore.type === "Block" && tokenBefore.value.charAt(0) === "*" && astNode.loc.start.line - tokenBefore.loc.end.line <= 1) {
          return tokenBefore;
        }
        return null;
      };
      let parent = node2.parent;
      switch (node2.type) {
        case "ClassDeclaration":
        case "FunctionDeclaration":
          return findJSDocComment(
            looksLikeExport(parent) ? parent : node2
          );
        case "ClassExpression":
          return findJSDocComment(parent.parent);
        case "ArrowFunctionExpression":
        case "FunctionExpression":
          if (parent.type !== "CallExpression" && parent.type !== "NewExpression") {
            while (!this.getCommentsBefore(parent).length && !/Function/u.test(parent.type) && parent.type !== "MethodDefinition" && parent.type !== "Property") {
              parent = parent.parent;
              if (!parent) {
                break;
              }
            }
            if (parent && parent.type !== "FunctionDeclaration" && parent.type !== "Program") {
              return findJSDocComment(parent);
            }
          }
          return findJSDocComment(node2);
        // falls through
        default:
          return null;
      }
    }
    /**
     * Gets the deepest node containing a range index.
     * @param {number} index Range index of the desired node.
     * @returns {ASTNode} The node if found or null if not found.
     * @public
     */
    getNodeByRangeIndex(index) {
      let result = null;
      Traverser.traverse(this.ast, {
        visitorKeys: this.visitorKeys,
        enter(node2) {
          if (node2.range[0] <= index && index < node2.range[1]) {
            result = node2;
          } else {
            this.skip();
          }
        },
        leave(node2) {
          if (node2 === result) {
            this.break();
          }
        }
      });
      return result;
    }
    /**
     * Determines if two nodes or tokens have at least one whitespace character
     * between them. Order does not matter. Returns false if the given nodes or
     * tokens overlap.
     * @param {ASTNode|Token} first The first node or token to check between.
     * @param {ASTNode|Token} second The second node or token to check between.
     * @returns {boolean} True if there is a whitespace character between
     * any of the tokens found between the two given nodes or tokens.
     * @public
     */
    isSpaceBetween(first, second) {
      return isSpaceBetween(this, first, second, false);
    }
    /**
     * Determines if two nodes or tokens have at least one whitespace character
     * between them. Order does not matter. Returns false if the given nodes or
     * tokens overlap.
     * For backward compatibility, this method returns true if there are
     * `JSXText` tokens that contain whitespaces between the two.
     * @param {ASTNode|Token} first The first node or token to check between.
     * @param {ASTNode|Token} second The second node or token to check between.
     * @returns {boolean} True if there is a whitespace character between
     * any of the tokens found between the two given nodes or tokens.
     * @deprecated in favor of isSpaceBetween().
     * @public
     */
    isSpaceBetweenTokens(first, second) {
      return isSpaceBetween(this, first, second, true);
    }
    /**
     * Converts a source text index into a (line, column) pair.
     * @param {number} index The index of a character in a file.
     * @throws {TypeError|RangeError} If non-numeric index or index out of range.
     * @returns {{line: number, column: number}} A {line, column} location object with 1-indexed line and 0-indexed column.
     * @public
     */
    getLocFromIndex(index) {
      if (typeof index !== "number") {
        throw new TypeError("Expected `index` to be a number.");
      }
      if (index < 0 || index > this.text.length) {
        throw new RangeError(
          `Index out of range (requested index ${index}, but source text has length ${this.text.length}).`
        );
      }
      if (index === this.text.length) {
        return {
          line: this.lines.length,
          column: this.lines.at(-1).length
        };
      }
      const lineNumber = index >= this.lineStartIndices.at(-1) ? this.lineStartIndices.length : findLineNumberBinarySearch(this.lineStartIndices, index);
      return {
        line: lineNumber,
        column: index - this.lineStartIndices[lineNumber - 1]
      };
    }
    /**
     * Converts a (line, column) pair into a range index.
     * @param {Object} loc A line/column location
     * @param {number} loc.line The line number of the location (1-indexed)
     * @param {number} loc.column The column number of the location (0-indexed)
     * @throws {TypeError|RangeError} If `loc` is not an object with a numeric
     *   `line` and `column`, if the `line` is less than or equal to zero or
     *   the line or column is out of the expected range.
     * @returns {number} The range index of the location in the file.
     * @public
     */
    getIndexFromLoc(loc) {
      if (loc === null || typeof loc !== "object" || typeof loc.line !== "number" || typeof loc.column !== "number") {
        throw new TypeError(
          "Expected `loc` to be an object with numeric `line` and `column` properties."
        );
      }
      if (loc.line <= 0) {
        throw new RangeError(
          `Line number out of range (line ${loc.line} requested). Line numbers should be 1-based.`
        );
      }
      if (loc.line > this.lineStartIndices.length) {
        throw new RangeError(
          `Line number out of range (line ${loc.line} requested, but only ${this.lineStartIndices.length} lines present).`
        );
      }
      if (loc.column < 0) {
        throw new RangeError(
          `Invalid column number (column ${loc.column} requested).`
        );
      }
      const lineStartIndex = this.lineStartIndices[loc.line - 1];
      const lineEndIndex = loc.line === this.lineStartIndices.length ? this.text.length : this.lineStartIndices[loc.line];
      const positionIndex = lineStartIndex + loc.column;
      if (loc.line === this.lineStartIndices.length && positionIndex > lineEndIndex || loc.line < this.lineStartIndices.length && positionIndex >= lineEndIndex) {
        throw new RangeError(
          `Column number out of range (column ${loc.column} requested, but the length of line ${loc.line} is ${lineEndIndex - lineStartIndex}).`
        );
      }
      return positionIndex;
    }
    /**
     * Gets the scope for the given node
     * @param {ASTNode} currentNode The node to get the scope of
     * @returns {Scope} The scope information for this node
     * @throws {TypeError} If the `currentNode` argument is missing.
     */
    getScope(currentNode) {
      if (!currentNode) {
        throw new TypeError("Missing required argument: node.");
      }
      const cache2 = this[caches].get("scopes");
      const cachedScope = cache2.get(currentNode);
      if (cachedScope) {
        return cachedScope;
      }
      const inner = currentNode.type !== "Program";
      for (let node2 = currentNode; node2; node2 = node2.parent) {
        const scope = this.scopeManager.acquire(node2, inner);
        if (scope) {
          if (scope.type === "function-expression-name") {
            cache2.set(currentNode, scope.childScopes[0]);
            return scope.childScopes[0];
          }
          cache2.set(currentNode, scope);
          return scope;
        }
      }
      cache2.set(currentNode, this.scopeManager.scopes[0]);
      return this.scopeManager.scopes[0];
    }
    /**
     * Get the variables that `node` defines.
     * This is a convenience method that passes through
     * to the same method on the `scopeManager`.
     * @param {ASTNode} node The node for which the variables are obtained.
     * @returns {Array<Variable>} An array of variable nodes representing
     *      the variables that `node` defines.
     */
    getDeclaredVariables(node2) {
      return this.scopeManager.getDeclaredVariables(node2);
    }
    /* eslint-disable class-methods-use-this -- node is owned by SourceCode */
    /**
     * Gets all the ancestors of a given node
     * @param {ASTNode} node The node
     * @returns {Array<ASTNode>} All the ancestor nodes in the AST, not including the provided node, starting
     * from the root node at index 0 and going inwards to the parent node.
     * @throws {TypeError} When `node` is missing.
     */
    getAncestors(node2) {
      if (!node2) {
        throw new TypeError("Missing required argument: node.");
      }
      const ancestorsStartingAtParent = [];
      for (let ancestor = node2.parent; ancestor; ancestor = ancestor.parent) {
        ancestorsStartingAtParent.push(ancestor);
      }
      return ancestorsStartingAtParent.reverse();
    }
    /**
     * Determines whether the given identifier node is a reference to a global variable.
     * @param {ASTNode} node `Identifier` node to check.
     * @returns {boolean} True if the identifier is a reference to a global variable.
     */
    isGlobalReference(node2) {
      if (!node2) {
        throw new TypeError("Missing required argument: node.");
      }
      const cache2 = this[caches].get("isGlobalReference");
      if (cache2.has(node2)) {
        return cache2.get(node2);
      }
      if (node2.type !== "Identifier") {
        cache2.set(node2, false);
        return false;
      }
      const variable = this.scopeManager.scopes[0].set.get(node2.name);
      if (!variable || variable.defs.length > 0) {
        cache2.set(node2, false);
        return false;
      }
      const result = variable.references.some(
        ({ identifier }) => identifier === node2
      );
      cache2.set(node2, result);
      return result;
    }
    /**
     * Returns the location of the given node or token.
     * @param {ASTNode|Token} nodeOrToken The node or token to get the location of.
     * @returns {SourceLocation} The location of the node or token.
     */
    getLoc(nodeOrToken) {
      return nodeOrToken.loc;
    }
    /**
     * Returns the range of the given node or token.
     * @param {ASTNode|Token} nodeOrToken The node or token to get the range of.
     * @returns {[number, number]} The range of the node or token.
     */
    getRange(nodeOrToken) {
      return nodeOrToken.range;
    }
    /* eslint-enable class-methods-use-this -- node is owned by SourceCode */
    /**
     * Marks a variable as used in the current scope
     * @param {string} name The name of the variable to mark as used.
     * @param {ASTNode} [refNode] The closest node to the variable reference.
     * @returns {boolean} True if the variable was found and marked as used, false if not.
     */
    markVariableAsUsed(name, refNode = this.ast) {
      const currentScope = this.getScope(refNode);
      let initialScope = currentScope;
      if (currentScope.type === "global" && currentScope.childScopes.length > 0 && // top-level scopes refer to a `Program` node
      currentScope.childScopes[0].block === this.ast) {
        initialScope = currentScope.childScopes[0];
      }
      for (let scope = initialScope; scope; scope = scope.upper) {
        const variable = scope.variables.find(
          (scopeVar) => scopeVar.name === name
        );
        if (variable) {
          variable.eslintUsed = true;
          return true;
        }
      }
      return false;
    }
    /**
     * Returns an array of all inline configuration nodes found in the
     * source code.
     * @returns {Array<Token>} An array of all inline configuration nodes.
     */
    getInlineConfigNodes() {
      let configNodes = this[caches].get("configNodes");
      if (configNodes) {
        return configNodes;
      }
      configNodes = this.ast.comments.filter((comment2) => {
        if (comment2.type === "Shebang") {
          return false;
        }
        const directive = commentParser.parseDirective(comment2.value);
        if (!directive) {
          return false;
        }
        if (!directivesPattern.test(directive.label)) {
          return false;
        }
        return comment2.type !== "Line" || !!/^eslint-disable-(?:next-)?line$/u.test(directive.label);
      });
      this[caches].set("configNodes", configNodes);
      return configNodes;
    }
    /**
     * Returns an all directive nodes that enable or disable rules along with any problems
     * encountered while parsing the directives.
     * @returns {{problems:Array<Problem>,directives:Array<Directive>}} Information
     *      that ESLint needs to further process the directives.
     */
    getDisableDirectives() {
      const cachedDirectives = this[caches].get("disableDirectives");
      if (cachedDirectives) {
        return cachedDirectives;
      }
      const problems = [];
      const directives2 = [];
      this.getInlineConfigNodes().forEach((comment2) => {
        const {
          label,
          value,
          justification: justificationPart
        } = commentParser.parseDirective(comment2.value);
        const lineCommentSupported = /^eslint-disable-(?:next-)?line$/u.test(label);
        if (comment2.type === "Line" && !lineCommentSupported) {
          return;
        }
        if (label === "eslint-disable-line" && comment2.loc.start.line !== comment2.loc.end.line) {
          const message = `${label} comment should not span multiple lines.`;
          problems.push({
            ruleId: null,
            message,
            loc: comment2.loc
          });
          return;
        }
        switch (label) {
          case "eslint-disable":
          case "eslint-enable":
          case "eslint-disable-next-line":
          case "eslint-disable-line": {
            const directiveType = label.slice("eslint-".length);
            directives2.push(
              new Directive({
                type: directiveType,
                node: comment2,
                value,
                justification: justificationPart
              })
            );
          }
        }
      });
      const result = { problems, directives: directives2 };
      this[caches].set("disableDirectives", result);
      return result;
    }
    /**
     * Applies language options sent in from the core.
     * @param {Object} languageOptions The language options for this run.
     * @returns {void}
     */
    applyLanguageOptions(languageOptions) {
      const configGlobals = Object.assign(
        /* @__PURE__ */ Object.create(null),
        // https://github.com/eslint/eslint/issues/18363
        getGlobalsForEcmaVersion(languageOptions.ecmaVersion),
        languageOptions.sourceType === "commonjs" ? globals2.commonjs : void 0,
        languageOptions.globals
      );
      const varsCache = this[caches].get("vars");
      varsCache.set("configGlobals", configGlobals);
    }
    /**
     * Applies configuration found inside of the source code. This method is only
     * called when ESLint is running with inline configuration allowed.
     * @returns {{problems:Array<Problem>,configs:{config:FlatConfigArray,loc:Location}}} Information
     *      that ESLint needs to further process the inline configuration.
     */
    applyInlineConfig() {
      const problems = [];
      const configs = [];
      const exportedVariables = {};
      const inlineGlobals = /* @__PURE__ */ Object.create(null);
      this.getInlineConfigNodes().forEach((comment2) => {
        const { label, value } = commentParser.parseDirective(
          comment2.value
        );
        switch (label) {
          case "exported":
            Object.assign(
              exportedVariables,
              commentParser.parseListConfig(value)
            );
            break;
          case "globals":
          case "global":
            for (const [id2, idSetting] of Object.entries(
              commentParser.parseStringConfig(value)
            )) {
              let normalizedValue;
              try {
                normalizedValue = normalizeConfigGlobal(idSetting);
              } catch (err) {
                problems.push({
                  ruleId: null,
                  loc: comment2.loc,
                  message: err.message
                });
                continue;
              }
              if (inlineGlobals[id2]) {
                inlineGlobals[id2].comments.push(comment2);
                inlineGlobals[id2].value = normalizedValue;
              } else {
                inlineGlobals[id2] = {
                  comments: [comment2],
                  value: normalizedValue
                };
              }
            }
            break;
          case "eslint": {
            const parseResult = commentParser.parseJSONLikeConfig(value);
            if (parseResult.ok) {
              configs.push({
                config: {
                  rules: parseResult.config
                },
                loc: comment2.loc
              });
            } else {
              problems.push({
                ruleId: null,
                loc: comment2.loc,
                message: parseResult.error.message
              });
            }
            break;
          }
        }
      });
      const varsCache = this[caches].get("vars");
      varsCache.set("inlineGlobals", inlineGlobals);
      varsCache.set("exportedVariables", exportedVariables);
      return {
        configs,
        problems
      };
    }
    /**
     * Called by ESLint core to indicate that it has finished providing
     * information. We now add in all the missing variables and ensure that
     * state-changing methods cannot be called by rules.
     * @returns {void}
     */
    finalize() {
      const varsCache = this[caches].get("vars");
      const configGlobals = varsCache.get("configGlobals");
      const inlineGlobals = varsCache.get("inlineGlobals");
      const exportedVariables = varsCache.get("exportedVariables");
      const globalScope = this.scopeManager.scopes[0];
      addDeclaredGlobals(globalScope, configGlobals, inlineGlobals);
      if (exportedVariables) {
        markExportedVariables(globalScope, exportedVariables);
      }
    }
    /**
     * Traverse the source code and return the steps that were taken.
     * @returns {Array<TraversalStep>} The steps that were taken while traversing the source code.
     */
    traverse() {
      if (this.#steps) {
        return this.#steps;
      }
      const steps = this.#steps = [];
      let analyzer = {
        enterNode(node2) {
          steps.push(
            new VisitNodeStep({
              target: node2,
              phase: 1,
              args: [node2, node2.parent]
            })
          );
        },
        leaveNode(node2) {
          steps.push(
            new VisitNodeStep({
              target: node2,
              phase: 2,
              args: [node2, node2.parent]
            })
          );
        },
        emit(eventName, args) {
          steps.push(
            new CallMethodStep({
              target: eventName,
              args
            })
          );
        }
      };
      if (this.isESTree) {
        analyzer = new CodePathAnalyzer(analyzer);
      }
      Traverser.traverse(this.ast, {
        enter(node2, parent) {
          node2.parent = parent;
          analyzer.enterNode(node2);
        },
        leave(node2) {
          analyzer.leaveNode(node2);
        },
        visitorKeys: this.visitorKeys
      });
      return steps;
    }
  }
  sourceCode$1 = SourceCode;
  return sourceCode$1;
}
var sourceCode;
var hasRequiredSourceCode;
function requireSourceCode() {
  if (hasRequiredSourceCode) return sourceCode;
  hasRequiredSourceCode = 1;
  const SourceCode = requireSourceCode$1();
  sourceCode = {
    SourceCode
  };
  return sourceCode;
}
var escapeStringRegexp;
var hasRequiredEscapeStringRegexp;
function requireEscapeStringRegexp() {
  if (hasRequiredEscapeStringRegexp) return escapeStringRegexp;
  hasRequiredEscapeStringRegexp = 1;
  escapeStringRegexp = (string) => {
    if (typeof string !== "string") {
      throw new TypeError("Expected a string");
    }
    return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
  };
  return escapeStringRegexp;
}
var deepMergeArrays_1;
var hasRequiredDeepMergeArrays;
function requireDeepMergeArrays() {
  if (hasRequiredDeepMergeArrays) return deepMergeArrays_1;
  hasRequiredDeepMergeArrays = 1;
  function isObjectNotArray(value) {
    return typeof value === "object" && value !== null && !Array.isArray(value);
  }
  function deepMergeObjects(first, second) {
    if (second === void 0) {
      return first;
    }
    if (!isObjectNotArray(first) || !isObjectNotArray(second)) {
      return second;
    }
    const result = { ...first, ...second };
    for (const key of Object.keys(second)) {
      if (Object.prototype.propertyIsEnumerable.call(first, key)) {
        result[key] = deepMergeObjects(first[key], second[key]);
      }
    }
    return result;
  }
  function deepMergeArrays(first, second) {
    if (!first || !second) {
      return second || first || [];
    }
    return [
      ...first.map(
        (value, i2) => deepMergeObjects(value, i2 < second.length ? second[i2] : void 0)
      ),
      ...second.slice(first.length)
    ];
  }
  deepMergeArrays_1 = { deepMergeArrays };
  return deepMergeArrays_1;
}
var severity;
var hasRequiredSeverity;
function requireSeverity() {
  if (hasRequiredSeverity) return severity;
  hasRequiredSeverity = 1;
  function normalizeSeverityToString(severity2) {
    if ([2, "2", "error"].includes(severity2)) {
      return "error";
    }
    if ([1, "1", "warn"].includes(severity2)) {
      return "warn";
    }
    if ([0, "0", "off"].includes(severity2)) {
      return "off";
    }
    throw new Error(`Invalid severity value: ${severity2}`);
  }
  function normalizeSeverityToNumber(severity2) {
    if ([2, "2", "error"].includes(severity2)) {
      return 2;
    }
    if ([1, "1", "warn"].includes(severity2)) {
      return 1;
    }
    if ([0, "0", "off"].includes(severity2)) {
      return 0;
    }
    throw new Error(`Invalid severity value: ${severity2}`);
  }
  severity = {
    normalizeSeverityToString,
    normalizeSeverityToNumber
  };
  return severity;
}
var flatConfigSchema_1;
var hasRequiredFlatConfigSchema;
function requireFlatConfigSchema() {
  if (hasRequiredFlatConfigSchema) return flatConfigSchema_1;
  hasRequiredFlatConfigSchema = 1;
  const { normalizeSeverityToNumber } = requireSeverity();
  const ruleSeverities = /* @__PURE__ */ new Map([
    [0, 0],
    ["off", 0],
    [1, 1],
    ["warn", 1],
    [2, 2],
    ["error", 2]
  ]);
  function isNonNullObject(value) {
    return typeof value === "object" && value !== null;
  }
  function isNonArrayObject(value) {
    return isNonNullObject(value) && !Array.isArray(value);
  }
  function isUndefined2(value) {
    return typeof value === "undefined";
  }
  function deepMerge(first, second, mergeMap = /* @__PURE__ */ new Map()) {
    let secondMergeMap = mergeMap.get(first);
    if (secondMergeMap) {
      const result2 = secondMergeMap.get(second);
      if (result2) {
        return result2;
      }
    } else {
      secondMergeMap = /* @__PURE__ */ new Map();
      mergeMap.set(first, secondMergeMap);
    }
    const result = {
      ...first,
      ...second
    };
    delete result.__proto__;
    secondMergeMap.set(second, result);
    for (const key of Object.keys(second)) {
      if (key === "__proto__" || !Object.prototype.propertyIsEnumerable.call(first, key)) {
        continue;
      }
      const firstValue = first[key];
      const secondValue = second[key];
      if (isNonArrayObject(firstValue) && isNonArrayObject(secondValue)) {
        result[key] = deepMerge(firstValue, secondValue, mergeMap);
      } else if (isUndefined2(secondValue)) {
        result[key] = firstValue;
      }
    }
    return result;
  }
  function normalizeRuleOptions(ruleOptions) {
    const finalOptions = Array.isArray(ruleOptions) ? ruleOptions.slice(0) : [ruleOptions];
    finalOptions[0] = ruleSeverities.get(finalOptions[0]);
    return structuredClone(finalOptions);
  }
  function hasMethod(object) {
    for (const key of Object.keys(object)) {
      if (typeof object[key] === "function") {
        return true;
      }
    }
    return false;
  }
  class InvalidRuleOptionsError extends Error {
    /**
     * @param {string} ruleId Rule name being configured.
     * @param {any} value The invalid value.
     */
    constructor(ruleId, value) {
      super(
        `Key "${ruleId}": Expected severity of "off", 0, "warn", 1, "error", or 2.`
      );
      this.messageTemplate = "invalid-rule-options";
      this.messageData = { ruleId, value };
    }
  }
  function assertIsRuleOptions(ruleId, value) {
    if (typeof value !== "string" && typeof value !== "number" && !Array.isArray(value)) {
      throw new InvalidRuleOptionsError(ruleId, value);
    }
  }
  class InvalidRuleSeverityError extends Error {
    /**
     * @param {string} ruleId Rule name being configured.
     * @param {any} value The invalid value.
     */
    constructor(ruleId, value) {
      super(
        `Key "${ruleId}": Expected severity of "off", 0, "warn", 1, "error", or 2.`
      );
      this.messageTemplate = "invalid-rule-severity";
      this.messageData = { ruleId, value };
    }
  }
  function assertIsRuleSeverity(ruleId, value) {
    const severity2 = ruleSeverities.get(value);
    if (typeof severity2 === "undefined") {
      throw new InvalidRuleSeverityError(ruleId, value);
    }
  }
  function assertIsPluginMemberName(value) {
    if (!/[\w\-@$]+(?:\/[\w\-$]+)+$/iu.test(value)) {
      throw new TypeError(
        `Expected string in the form "pluginName/objectName" but found "${value}".`
      );
    }
  }
  function assertIsObject(value) {
    if (!isNonNullObject(value)) {
      throw new TypeError("Expected an object.");
    }
  }
  class IncompatibleKeyError extends Error {
    /**
     * @param {string} key The invalid key.
     */
    constructor(key) {
      super(
        "This appears to be in eslintrc format rather than flat config format."
      );
      this.messageTemplate = "eslintrc-incompat";
      this.messageData = { key };
    }
  }
  class IncompatiblePluginsError extends Error {
    /**
     * Creates a new instance.
     * @param {Array<string>} plugins The plugins array.
     */
    constructor(plugins) {
      super(
        "This appears to be in eslintrc format (array of strings) rather than flat config format (object)."
      );
      this.messageTemplate = "eslintrc-plugins";
      this.messageData = { plugins };
    }
  }
  const booleanSchema = {
    merge: "replace",
    validate: "boolean"
  };
  const ALLOWED_SEVERITIES = /* @__PURE__ */ new Set(["error", "warn", "off", 2, 1, 0]);
  const disableDirectiveSeveritySchema = {
    merge(first, second) {
      const value = second === void 0 ? first : second;
      if (typeof value === "boolean") {
        return value ? "warn" : "off";
      }
      return normalizeSeverityToNumber(value);
    },
    validate(value) {
      if (!(ALLOWED_SEVERITIES.has(value) || typeof value === "boolean")) {
        throw new TypeError(
          'Expected one of: "error", "warn", "off", 0, 1, 2, or a boolean.'
        );
      }
    }
  };
  const unusedInlineConfigsSeveritySchema = {
    merge(first, second) {
      const value = second === void 0 ? first : second;
      return normalizeSeverityToNumber(value);
    },
    validate(value) {
      if (!ALLOWED_SEVERITIES.has(value)) {
        throw new TypeError(
          'Expected one of: "error", "warn", "off", 0, 1, or 2.'
        );
      }
    }
  };
  const deepObjectAssignSchema = {
    merge(first = {}, second = {}) {
      return deepMerge(first, second);
    },
    validate: "object"
  };
  const languageOptionsSchema = {
    merge(first = {}, second = {}) {
      const result = deepMerge(first, second);
      for (const [key, value] of Object.entries(result)) {
        if (isNonArrayObject(value)) {
          if (hasMethod(value)) {
            result[key] = second[key] ?? first[key];
            continue;
          }
          result[key] = { ...result[key] };
          continue;
        }
      }
      return result;
    },
    validate: "object"
  };
  const languageSchema = {
    merge: "replace",
    validate: assertIsPluginMemberName
  };
  const pluginsSchema = {
    merge(first = {}, second = {}) {
      const keys = /* @__PURE__ */ new Set([...Object.keys(first), ...Object.keys(second)]);
      const result = {};
      for (const key of keys) {
        if (key === "__proto__") {
          continue;
        }
        if (key in first && key in second && first[key] !== second[key]) {
          throw new TypeError(`Cannot redefine plugin "${key}".`);
        }
        result[key] = second[key] || first[key];
      }
      return result;
    },
    validate(value) {
      if (value === null || typeof value !== "object") {
        throw new TypeError("Expected an object.");
      }
      if (Array.isArray(value)) {
        throw new IncompatiblePluginsError(value);
      }
      for (const key of Object.keys(value)) {
        if (key === "__proto__") {
          continue;
        }
        if (value[key] === null || typeof value[key] !== "object") {
          throw new TypeError(`Key "${key}": Expected an object.`);
        }
      }
    }
  };
  const processorSchema = {
    merge: "replace",
    validate(value) {
      if (typeof value === "string") {
        assertIsPluginMemberName(value);
      } else if (value && typeof value === "object") {
        if (typeof value.preprocess !== "function" || typeof value.postprocess !== "function") {
          throw new TypeError(
            "Object must have a preprocess() and a postprocess() method."
          );
        }
      } else {
        throw new TypeError("Expected an object or a string.");
      }
    }
  };
  const rulesSchema = {
    merge(first = {}, second = {}) {
      const result = {
        ...first,
        ...second
      };
      for (const ruleId of Object.keys(result)) {
        try {
          if (ruleId === "__proto__") {
            delete result.__proto__;
            continue;
          }
          result[ruleId] = normalizeRuleOptions(result[ruleId]);
          if (!(ruleId in first) || !(ruleId in second)) {
            continue;
          }
          const firstRuleOptions = normalizeRuleOptions(first[ruleId]);
          const secondRuleOptions = normalizeRuleOptions(second[ruleId]);
          if (secondRuleOptions.length === 1) {
            result[ruleId] = [
              secondRuleOptions[0],
              ...firstRuleOptions.slice(1)
            ];
            continue;
          }
        } catch (ex) {
          throw new Error(`Key "${ruleId}": ${ex.message}`, {
            cause: ex
          });
        }
      }
      return result;
    },
    validate(value) {
      assertIsObject(value);
      for (const ruleId of Object.keys(value)) {
        if (ruleId === "__proto__") {
          continue;
        }
        const ruleOptions = value[ruleId];
        assertIsRuleOptions(ruleId, ruleOptions);
        if (Array.isArray(ruleOptions)) {
          assertIsRuleSeverity(ruleId, ruleOptions[0]);
        } else {
          assertIsRuleSeverity(ruleId, ruleOptions);
        }
      }
    }
  };
  function createEslintrcErrorSchema(key) {
    return {
      merge: "replace",
      validate() {
        throw new IncompatibleKeyError(key);
      }
    };
  }
  const eslintrcKeys = [
    "env",
    "extends",
    "globals",
    "ignorePatterns",
    "noInlineConfig",
    "overrides",
    "parser",
    "parserOptions",
    "reportUnusedDisableDirectives",
    "root"
  ];
  const flatConfigSchema = {
    // eslintrc-style keys that should always error
    ...Object.fromEntries(
      eslintrcKeys.map((key) => [key, createEslintrcErrorSchema(key)])
    ),
    // flat config keys
    settings: deepObjectAssignSchema,
    linterOptions: {
      schema: {
        noInlineConfig: booleanSchema,
        reportUnusedDisableDirectives: disableDirectiveSeveritySchema,
        reportUnusedInlineConfigs: unusedInlineConfigsSeveritySchema
      }
    },
    language: languageSchema,
    languageOptions: languageOptionsSchema,
    processor: processorSchema,
    plugins: pluginsSchema,
    rules: rulesSchema
  };
  flatConfigSchema_1 = {
    flatConfigSchema,
    hasMethod,
    assertIsRuleSeverity
  };
  return flatConfigSchema_1;
}
var cjs$1 = {};
var posix = {};
var hasRequiredPosix;
function requirePosix() {
  if (hasRequiredPosix) return posix;
  hasRequiredPosix = 1;
  function assertPath(path) {
    if (typeof path !== "string") {
      throw new TypeError(`Path must be a string, received "${JSON.stringify(path)}"`);
    }
  }
  function stripSuffix(name, suffix) {
    if (suffix.length >= name.length) {
      return name;
    }
    const lenDiff = name.length - suffix.length;
    for (let i2 = suffix.length - 1; i2 >= 0; --i2) {
      if (name.charCodeAt(lenDiff + i2) !== suffix.charCodeAt(i2)) {
        return name;
      }
    }
    return name.slice(0, -suffix.length);
  }
  function lastPathSegment(path, isSep, start = 0) {
    let matchedNonSeparator = false;
    let end = path.length;
    for (let i2 = path.length - 1; i2 >= start; --i2) {
      if (isSep(path.charCodeAt(i2))) {
        if (matchedNonSeparator) {
          start = i2 + 1;
          break;
        }
      } else if (!matchedNonSeparator) {
        matchedNonSeparator = true;
        end = i2 + 1;
      }
    }
    return path.slice(start, end);
  }
  function assertArgs$1(path, suffix) {
    assertPath(path);
    if (path.length === 0) return path;
    if (typeof suffix !== "string") {
      throw new TypeError(`Suffix must be a string, received "${JSON.stringify(suffix)}"`);
    }
  }
  function assertArg$3(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol !== "file:") {
      throw new TypeError(`URL must be a file URL: received "${url.protocol}"`);
    }
    return url;
  }
  function fromFileUrl(url) {
    url = assertArg$3(url);
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
  }
  function stripTrailingSeparators(segment, isSep) {
    if (segment.length <= 1) {
      return segment;
    }
    let end = segment.length;
    for (let i2 = segment.length - 1; i2 > 0; i2--) {
      if (isSep(segment.charCodeAt(i2))) {
        end = i2;
      } else {
        break;
      }
    }
    return segment.slice(0, end);
  }
  const CHAR_DOT = 46;
  const CHAR_FORWARD_SLASH = 47;
  function isPosixPathSeparator(code2) {
    return code2 === CHAR_FORWARD_SLASH;
  }
  function basename2(path, suffix = "") {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    assertArgs$1(path, suffix);
    const lastSegment = lastPathSegment(path, isPosixPathSeparator);
    const strippedSegment = stripTrailingSeparators(lastSegment, isPosixPathSeparator);
    return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
  }
  const DELIMITER = ":";
  const SEPARATOR = "/";
  const SEPARATOR_PATTERN = /\/+/;
  function assertArg$2(path) {
    assertPath(path);
    if (path.length === 0) return ".";
  }
  function dirname2(path) {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    assertArg$2(path);
    let end = -1;
    let matchedNonSeparator = false;
    for (let i2 = path.length - 1; i2 >= 1; --i2) {
      if (isPosixPathSeparator(path.charCodeAt(i2))) {
        if (matchedNonSeparator) {
          end = i2;
          break;
        }
      } else {
        matchedNonSeparator = true;
      }
    }
    if (end === -1) {
      return isPosixPathSeparator(path.charCodeAt(0)) ? "/" : ".";
    }
    return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator);
  }
  function extname2(path) {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    assertPath(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for (let i2 = path.length - 1; i2 >= 0; --i2) {
      const code2 = path.charCodeAt(i2);
      if (isPosixPathSeparator(code2)) {
        if (!matchedSlash) {
          startPart = i2 + 1;
          break;
        }
        continue;
      }
      if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
      if (code2 === CHAR_DOT) {
        if (startDot === -1) startDot = i2;
        else if (preDotState !== 1) preDotState = 1;
      } else if (startDot !== -1) {
        preDotState = -1;
      }
    }
    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return "";
    }
    return path.slice(startDot, end);
  }
  function _format(sep2, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name ?? "") + (pathObject.ext ?? "");
    if (!dir) return base;
    if (base === sep2) return dir;
    if (dir === pathObject.root) return dir + base;
    return dir + sep2 + base;
  }
  function assertArg$1(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
      throw new TypeError(`The "pathObject" argument must be of type Object, received type "${typeof pathObject}"`);
    }
  }
  function format2(pathObject) {
    assertArg$1(pathObject);
    return _format("/", pathObject);
  }
  function isAbsolute2(path) {
    assertPath(path);
    return path.length > 0 && isPosixPathSeparator(path.charCodeAt(0));
  }
  function assertArg(path) {
    assertPath(path);
    if (path.length === 0) return ".";
  }
  function normalizeString(path, allowAboveRoot, separator, isPathSeparator) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code2;
    for (let i2 = 0; i2 <= path.length; ++i2) {
      if (i2 < path.length) code2 = path.charCodeAt(i2);
      else if (isPathSeparator(code2)) break;
      else code2 = CHAR_FORWARD_SLASH;
      if (isPathSeparator(code2)) {
        if (lastSlash === i2 - 1 || dots === 1) ;
        else if (lastSlash !== i2 - 1 && dots === 2) {
          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
            if (res.length > 2) {
              const lastSlashIndex = res.lastIndexOf(separator);
              if (lastSlashIndex === -1) {
                res = "";
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
              }
              lastSlash = i2;
              dots = 0;
              continue;
            } else if (res.length === 2 || res.length === 1) {
              res = "";
              lastSegmentLength = 0;
              lastSlash = i2;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            if (res.length > 0) res += `${separator}..`;
            else res = "..";
            lastSegmentLength = 2;
          }
        } else {
          if (res.length > 0) res += separator + path.slice(lastSlash + 1, i2);
          else res = path.slice(lastSlash + 1, i2);
          lastSegmentLength = i2 - lastSlash - 1;
        }
        lastSlash = i2;
        dots = 0;
      } else if (code2 === CHAR_DOT && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }
    return res;
  }
  function normalize2(path) {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    assertArg(path);
    const isAbsolute3 = isPosixPathSeparator(path.charCodeAt(0));
    const trailingSeparator = isPosixPathSeparator(path.charCodeAt(path.length - 1));
    path = normalizeString(path, !isAbsolute3, "/", isPosixPathSeparator);
    if (path.length === 0 && !isAbsolute3) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute3) return `/${path}`;
    return path;
  }
  function join2(path, ...paths) {
    if (path === void 0) return ".";
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    paths = path ? [
      path,
      ...paths
    ] : paths;
    paths.forEach((path2) => assertPath(path2));
    const joined = paths.filter((path2) => path2.length > 0).join("/");
    return joined === "" ? "." : normalize2(joined);
  }
  function parse(path) {
    assertPath(path);
    const ret = {
      root: "",
      dir: "",
      base: "",
      ext: "",
      name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute3 = isPosixPathSeparator(path.charCodeAt(0));
    let start;
    if (isAbsolute3) {
      ret.root = "/";
      start = 1;
    } else {
      start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i2 = path.length - 1;
    let preDotState = 0;
    for (; i2 >= start; --i2) {
      const code2 = path.charCodeAt(i2);
      if (isPosixPathSeparator(code2)) {
        if (!matchedSlash) {
          startPart = i2 + 1;
          break;
        }
        continue;
      }
      if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
      if (code2 === CHAR_DOT) {
        if (startDot === -1) startDot = i2;
        else if (preDotState !== 1) preDotState = 1;
      } else if (startDot !== -1) {
        preDotState = -1;
      }
    }
    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute3) {
          ret.base = ret.name = path.slice(1, end);
        } else {
          ret.base = ret.name = path.slice(startPart, end);
        }
      }
      ret.base = ret.base || "/";
    } else {
      if (startPart === 0 && isAbsolute3) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) {
      ret.dir = stripTrailingSeparators(path.slice(0, startPart - 1), isPosixPathSeparator);
    } else if (isAbsolute3) ret.dir = "/";
    return ret;
  }
  function resolve2(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for (let i2 = pathSegments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
      let path;
      if (i2 >= 0) path = pathSegments[i2];
      else {
        const { Deno } = globalThis;
        if (typeof Deno?.cwd !== "function") {
          throw new TypeError("Resolved a relative path without a current working directory (CWD)");
        }
        path = Deno.cwd();
      }
      assertPath(path);
      if (path.length === 0) {
        continue;
      }
      resolvedPath = `${path}/${resolvedPath}`;
      resolvedAbsolute = isPosixPathSeparator(path.charCodeAt(0));
    }
    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator);
    if (resolvedAbsolute) {
      if (resolvedPath.length > 0) return `/${resolvedPath}`;
      else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
  }
  function assertArgs(from2, to) {
    assertPath(from2);
    assertPath(to);
    if (from2 === to) return "";
  }
  function relative2(from2, to) {
    assertArgs(from2, to);
    from2 = resolve2(from2);
    to = resolve2(to);
    if (from2 === to) return "";
    let fromStart = 1;
    const fromEnd = from2.length;
    for (; fromStart < fromEnd; ++fromStart) {
      if (!isPosixPathSeparator(from2.charCodeAt(fromStart))) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for (; toStart < toEnd; ++toStart) {
      if (!isPosixPathSeparator(to.charCodeAt(toStart))) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i2 = 0;
    for (; i2 <= length; ++i2) {
      if (i2 === length) {
        if (toLen > length) {
          if (isPosixPathSeparator(to.charCodeAt(toStart + i2))) {
            return to.slice(toStart + i2 + 1);
          } else if (i2 === 0) {
            return to.slice(toStart + i2);
          }
        } else if (fromLen > length) {
          if (isPosixPathSeparator(from2.charCodeAt(fromStart + i2))) {
            lastCommonSep = i2;
          } else if (i2 === 0) {
            lastCommonSep = 0;
          }
        }
        break;
      }
      const fromCode = from2.charCodeAt(fromStart + i2);
      const toCode = to.charCodeAt(toStart + i2);
      if (fromCode !== toCode) break;
      else if (isPosixPathSeparator(fromCode)) lastCommonSep = i2;
    }
    let out = "";
    for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
      if (i2 === fromEnd || isPosixPathSeparator(from2.charCodeAt(i2))) {
        if (out.length === 0) out += "..";
        else out += "/..";
      }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (isPosixPathSeparator(to.charCodeAt(toStart))) ++toStart;
      return to.slice(toStart);
    }
  }
  const WHITESPACE_ENCODINGS = {
    "	": "%09",
    "\n": "%0A",
    "\v": "%0B",
    "\f": "%0C",
    "\r": "%0D",
    " ": "%20"
  };
  function encodeWhitespace(string) {
    return string.replaceAll(/[\s]/g, (c2) => {
      return WHITESPACE_ENCODINGS[c2] ?? c2;
    });
  }
  function toFileUrl(path) {
    if (!isAbsolute2(path)) {
      throw new TypeError(`Path must be absolute: received "${path}"`);
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
  }
  function toNamespacedPath(path) {
    return path;
  }
  function common$1(paths, sep2) {
    const [first = "", ...remaining] = paths;
    const parts = first.split(sep2);
    let endOfPrefix = parts.length;
    let append = "";
    for (const path of remaining) {
      const compare3 = path.split(sep2);
      if (compare3.length <= endOfPrefix) {
        endOfPrefix = compare3.length;
        append = "";
      }
      for (let i2 = 0; i2 < endOfPrefix; i2++) {
        if (compare3[i2] !== parts[i2]) {
          endOfPrefix = i2;
          append = i2 === 0 ? "" : sep2;
          break;
        }
      }
    }
    return parts.slice(0, endOfPrefix).join(sep2) + append;
  }
  function common2(paths) {
    return common$1(paths, SEPARATOR);
  }
  const REG_EXP_ESCAPE_CHARS = [
    "!",
    "$",
    "(",
    ")",
    "*",
    "+",
    ".",
    "=",
    "?",
    "[",
    "\\",
    "^",
    "{",
    "|"
  ];
  const RANGE_ESCAPE_CHARS = [
    "-",
    "\\",
    "]"
  ];
  function _globToRegExp(c2, glob, {
    extended = true,
    globstar: globstarOption = true,
    // os = osType,
    caseInsensitive = false
  } = {}) {
    if (glob === "") {
      return /(?!)/;
    }
    let newLength = glob.length;
    for (; newLength > 1 && c2.seps.includes(glob[newLength - 1]); newLength--) ;
    glob = glob.slice(0, newLength);
    let regExpString = "";
    for (let j = 0; j < glob.length; ) {
      let segment = "";
      const groupStack = [];
      let inRange = false;
      let inEscape = false;
      let endsWithSep = false;
      let i2 = j;
      for (; i2 < glob.length && !c2.seps.includes(glob[i2]); i2++) {
        if (inEscape) {
          inEscape = false;
          const escapeChars = inRange ? RANGE_ESCAPE_CHARS : REG_EXP_ESCAPE_CHARS;
          segment += escapeChars.includes(glob[i2]) ? `\\${glob[i2]}` : glob[i2];
          continue;
        }
        if (glob[i2] === c2.escapePrefix) {
          inEscape = true;
          continue;
        }
        if (glob[i2] === "[") {
          if (!inRange) {
            inRange = true;
            segment += "[";
            if (glob[i2 + 1] === "!") {
              i2++;
              segment += "^";
            } else if (glob[i2 + 1] === "^") {
              i2++;
              segment += "\\^";
            }
            continue;
          } else if (glob[i2 + 1] === ":") {
            let k = i2 + 1;
            let value = "";
            while (glob[k + 1] !== void 0 && glob[k + 1] !== ":") {
              value += glob[k + 1];
              k++;
            }
            if (glob[k + 1] === ":" && glob[k + 2] === "]") {
              i2 = k + 2;
              if (value === "alnum") segment += "\\dA-Za-z";
              else if (value === "alpha") segment += "A-Za-z";
              else if (value === "ascii") segment += "\0-";
              else if (value === "blank") segment += "	 ";
              else if (value === "cntrl") segment += "\0-";
              else if (value === "digit") segment += "\\d";
              else if (value === "graph") segment += "!-~";
              else if (value === "lower") segment += "a-z";
              else if (value === "print") segment += " -~";
              else if (value === "punct") {
                segment += `!"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_‘{|}~`;
              } else if (value === "space") segment += "\\s\v";
              else if (value === "upper") segment += "A-Z";
              else if (value === "word") segment += "\\w";
              else if (value === "xdigit") segment += "\\dA-Fa-f";
              continue;
            }
          }
        }
        if (glob[i2] === "]" && inRange) {
          inRange = false;
          segment += "]";
          continue;
        }
        if (inRange) {
          segment += glob[i2];
          continue;
        }
        if (glob[i2] === ")" && groupStack.length > 0 && groupStack[groupStack.length - 1] !== "BRACE") {
          segment += ")";
          const type2 = groupStack.pop();
          if (type2 === "!") {
            segment += c2.wildcard;
          } else if (type2 !== "@") {
            segment += type2;
          }
          continue;
        }
        if (glob[i2] === "|" && groupStack.length > 0 && groupStack[groupStack.length - 1] !== "BRACE") {
          segment += "|";
          continue;
        }
        if (glob[i2] === "+" && extended && glob[i2 + 1] === "(") {
          i2++;
          groupStack.push("+");
          segment += "(?:";
          continue;
        }
        if (glob[i2] === "@" && extended && glob[i2 + 1] === "(") {
          i2++;
          groupStack.push("@");
          segment += "(?:";
          continue;
        }
        if (glob[i2] === "?") {
          if (extended && glob[i2 + 1] === "(") {
            i2++;
            groupStack.push("?");
            segment += "(?:";
          } else {
            segment += ".";
          }
          continue;
        }
        if (glob[i2] === "!" && extended && glob[i2 + 1] === "(") {
          i2++;
          groupStack.push("!");
          segment += "(?!";
          continue;
        }
        if (glob[i2] === "{") {
          groupStack.push("BRACE");
          segment += "(?:";
          continue;
        }
        if (glob[i2] === "}" && groupStack[groupStack.length - 1] === "BRACE") {
          groupStack.pop();
          segment += ")";
          continue;
        }
        if (glob[i2] === "," && groupStack[groupStack.length - 1] === "BRACE") {
          segment += "|";
          continue;
        }
        if (glob[i2] === "*") {
          if (extended && glob[i2 + 1] === "(") {
            i2++;
            groupStack.push("*");
            segment += "(?:";
          } else {
            const prevChar = glob[i2 - 1];
            let numStars = 1;
            while (glob[i2 + 1] === "*") {
              i2++;
              numStars++;
            }
            const nextChar = glob[i2 + 1];
            if (globstarOption && numStars === 2 && [
              ...c2.seps,
              void 0
            ].includes(prevChar) && [
              ...c2.seps,
              void 0
            ].includes(nextChar)) {
              segment += c2.globstar;
              endsWithSep = true;
            } else {
              segment += c2.wildcard;
            }
          }
          continue;
        }
        segment += REG_EXP_ESCAPE_CHARS.includes(glob[i2]) ? `\\${glob[i2]}` : glob[i2];
      }
      if (groupStack.length > 0 || inRange || inEscape) {
        segment = "";
        for (const c3 of glob.slice(j, i2)) {
          segment += REG_EXP_ESCAPE_CHARS.includes(c3) ? `\\${c3}` : c3;
          endsWithSep = false;
        }
      }
      regExpString += segment;
      if (!endsWithSep) {
        regExpString += i2 < glob.length ? c2.sep : c2.sepMaybe;
        endsWithSep = true;
      }
      while (c2.seps.includes(glob[i2])) i2++;
      j = i2;
    }
    regExpString = `^${regExpString}$`;
    return new RegExp(regExpString, caseInsensitive ? "i" : "");
  }
  const constants = {
    sep: "/+",
    sepMaybe: "/*",
    seps: [
      "/"
    ],
    globstar: "(?:[^/]*(?:/|$)+)*",
    wildcard: "[^/]*",
    escapePrefix: "\\"
  };
  function globToRegExp(glob, options = {}) {
    return _globToRegExp(constants, glob, options);
  }
  function isGlob(str) {
    const chars = {
      "{": "}",
      "(": ")",
      "[": "]"
    };
    const regex = /\\(.)|(^!|\*|\?|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/;
    if (str === "") {
      return false;
    }
    let match;
    while (match = regex.exec(str)) {
      if (match[2]) return true;
      let idx = match.index + match[0].length;
      const open = match[1];
      const close = open ? chars[open] : null;
      if (open && close) {
        const n2 = str.indexOf(close, idx);
        if (n2 !== -1) {
          idx = n2 + 1;
        }
      }
      str = str.slice(idx);
    }
    return false;
  }
  function normalizeGlob(glob, options = {}) {
    const { globstar = false } = options;
    if (glob.match(/\0/g)) {
      throw new Error(`Glob contains invalid characters: "${glob}"`);
    }
    if (!globstar) {
      return normalize2(glob);
    }
    const s2 = SEPARATOR_PATTERN.source;
    const badParentPattern = new RegExp(`(?<=(${s2}|^)\\*\\*${s2})\\.\\.(?=${s2}|$)`, "g");
    return normalize2(glob.replace(badParentPattern, "\0")).replace(/\0/g, "..");
  }
  function joinGlobs(globs, options = {}) {
    const { globstar = false } = options;
    if (!globstar || globs.length === 0) {
      return join2(...globs);
    }
    let joined;
    for (const glob of globs) {
      const path = glob;
      if (path.length > 0) {
        if (!joined) joined = path;
        else joined += `${SEPARATOR}${path}`;
      }
    }
    if (!joined) return ".";
    return normalizeGlob(joined, {
      globstar
    });
  }
  posix.DELIMITER = DELIMITER;
  posix.SEPARATOR = SEPARATOR;
  posix.SEPARATOR_PATTERN = SEPARATOR_PATTERN;
  posix.basename = basename2;
  posix.common = common2;
  posix.dirname = dirname2;
  posix.extname = extname2;
  posix.format = format2;
  posix.fromFileUrl = fromFileUrl;
  posix.globToRegExp = globToRegExp;
  posix.isAbsolute = isAbsolute2;
  posix.isGlob = isGlob;
  posix.join = join2;
  posix.joinGlobs = joinGlobs;
  posix.normalize = normalize2;
  posix.normalizeGlob = normalizeGlob;
  posix.parse = parse;
  posix.relative = relative2;
  posix.resolve = resolve2;
  posix.toFileUrl = toFileUrl;
  posix.toNamespacedPath = toNamespacedPath;
  return posix;
}
var windows = {};
var hasRequiredWindows;
function requireWindows() {
  if (hasRequiredWindows) return windows;
  hasRequiredWindows = 1;
  function assertPath(path) {
    if (typeof path !== "string") {
      throw new TypeError(`Path must be a string, received "${JSON.stringify(path)}"`);
    }
  }
  function stripSuffix(name, suffix) {
    if (suffix.length >= name.length) {
      return name;
    }
    const lenDiff = name.length - suffix.length;
    for (let i2 = suffix.length - 1; i2 >= 0; --i2) {
      if (name.charCodeAt(lenDiff + i2) !== suffix.charCodeAt(i2)) {
        return name;
      }
    }
    return name.slice(0, -suffix.length);
  }
  function lastPathSegment(path, isSep, start = 0) {
    let matchedNonSeparator = false;
    let end = path.length;
    for (let i2 = path.length - 1; i2 >= start; --i2) {
      if (isSep(path.charCodeAt(i2))) {
        if (matchedNonSeparator) {
          start = i2 + 1;
          break;
        }
      } else if (!matchedNonSeparator) {
        matchedNonSeparator = true;
        end = i2 + 1;
      }
    }
    return path.slice(start, end);
  }
  function assertArgs$1(path, suffix) {
    assertPath(path);
    if (path.length === 0) return path;
    if (typeof suffix !== "string") {
      throw new TypeError(`Suffix must be a string, received "${JSON.stringify(suffix)}"`);
    }
  }
  const CHAR_UPPERCASE_A = 65;
  const CHAR_LOWERCASE_A = 97;
  const CHAR_UPPERCASE_Z = 90;
  const CHAR_LOWERCASE_Z = 122;
  const CHAR_DOT = 46;
  const CHAR_FORWARD_SLASH = 47;
  const CHAR_BACKWARD_SLASH = 92;
  const CHAR_COLON = 58;
  const CHAR_QUESTION_MARK = 63;
  function stripTrailingSeparators(segment, isSep) {
    if (segment.length <= 1) {
      return segment;
    }
    let end = segment.length;
    for (let i2 = segment.length - 1; i2 > 0; i2--) {
      if (isSep(segment.charCodeAt(i2))) {
        end = i2;
      } else {
        break;
      }
    }
    return segment.slice(0, end);
  }
  function isPosixPathSeparator(code2) {
    return code2 === CHAR_FORWARD_SLASH;
  }
  function isPathSeparator(code2) {
    return code2 === CHAR_FORWARD_SLASH || code2 === CHAR_BACKWARD_SLASH;
  }
  function isWindowsDeviceRoot(code2) {
    return code2 >= CHAR_LOWERCASE_A && code2 <= CHAR_LOWERCASE_Z || code2 >= CHAR_UPPERCASE_A && code2 <= CHAR_UPPERCASE_Z;
  }
  function assertArg$3(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol !== "file:") {
      throw new TypeError(`URL must be a file URL: received "${url.protocol}"`);
    }
    return url;
  }
  function fromFileUrl(url) {
    url = assertArg$3(url);
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname !== "") {
      path = `\\\\${url.hostname}${path}`;
    }
    return path;
  }
  function basename2(path, suffix = "") {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    assertArgs$1(path, suffix);
    let start = 0;
    if (path.length >= 2) {
      const drive = path.charCodeAt(0);
      if (isWindowsDeviceRoot(drive)) {
        if (path.charCodeAt(1) === CHAR_COLON) start = 2;
      }
    }
    const lastSegment = lastPathSegment(path, isPathSeparator, start);
    const strippedSegment = stripTrailingSeparators(lastSegment, isPathSeparator);
    return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
  }
  const DELIMITER = ";";
  const SEPARATOR = "\\";
  const SEPARATOR_PATTERN = /[\\/]+/;
  function assertArg$2(path) {
    assertPath(path);
    if (path.length === 0) return ".";
  }
  function dirname2(path) {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    assertArg$2(path);
    const len = path.length;
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code2 = path.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator(code2)) {
        rootEnd = offset = 1;
        if (isPathSeparator(path.charCodeAt(1))) {
          let j = 2;
          let last = j;
          for (; j < len; ++j) {
            if (isPathSeparator(path.charCodeAt(j))) break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (!isPathSeparator(path.charCodeAt(j))) break;
            }
            if (j < len && j !== last) {
              last = j;
              for (; j < len; ++j) {
                if (isPathSeparator(path.charCodeAt(j))) break;
              }
              if (j === len) {
                return path;
              }
              if (j !== last) {
                rootEnd = offset = j + 1;
              }
            }
          }
        }
      } else if (isWindowsDeviceRoot(code2)) {
        if (path.charCodeAt(1) === CHAR_COLON) {
          rootEnd = offset = 2;
          if (len > 2) {
            if (isPathSeparator(path.charCodeAt(2))) rootEnd = offset = 3;
          }
        }
      }
    } else if (isPathSeparator(code2)) {
      return path;
    }
    for (let i2 = len - 1; i2 >= offset; --i2) {
      if (isPathSeparator(path.charCodeAt(i2))) {
        if (!matchedSlash) {
          end = i2;
          break;
        }
      } else {
        matchedSlash = false;
      }
    }
    if (end === -1) {
      if (rootEnd === -1) return ".";
      else end = rootEnd;
    }
    return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator);
  }
  function extname2(path) {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    assertPath(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {
      start = startPart = 2;
    }
    for (let i2 = path.length - 1; i2 >= start; --i2) {
      const code2 = path.charCodeAt(i2);
      if (isPathSeparator(code2)) {
        if (!matchedSlash) {
          startPart = i2 + 1;
          break;
        }
        continue;
      }
      if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
      if (code2 === CHAR_DOT) {
        if (startDot === -1) startDot = i2;
        else if (preDotState !== 1) preDotState = 1;
      } else if (startDot !== -1) {
        preDotState = -1;
      }
    }
    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return "";
    }
    return path.slice(startDot, end);
  }
  function _format(sep2, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name ?? "") + (pathObject.ext ?? "");
    if (!dir) return base;
    if (base === sep2) return dir;
    if (dir === pathObject.root) return dir + base;
    return dir + sep2 + base;
  }
  function assertArg$1(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
      throw new TypeError(`The "pathObject" argument must be of type Object, received type "${typeof pathObject}"`);
    }
  }
  function format2(pathObject) {
    assertArg$1(pathObject);
    return _format("\\", pathObject);
  }
  function isAbsolute2(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return false;
    const code2 = path.charCodeAt(0);
    if (isPathSeparator(code2)) {
      return true;
    } else if (isWindowsDeviceRoot(code2)) {
      if (len > 2 && path.charCodeAt(1) === CHAR_COLON) {
        if (isPathSeparator(path.charCodeAt(2))) return true;
      }
    }
    return false;
  }
  function assertArg(path) {
    assertPath(path);
    if (path.length === 0) return ".";
  }
  function normalizeString(path, allowAboveRoot, separator, isPathSeparator2) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code2;
    for (let i2 = 0; i2 <= path.length; ++i2) {
      if (i2 < path.length) code2 = path.charCodeAt(i2);
      else if (isPathSeparator2(code2)) break;
      else code2 = CHAR_FORWARD_SLASH;
      if (isPathSeparator2(code2)) {
        if (lastSlash === i2 - 1 || dots === 1) ;
        else if (lastSlash !== i2 - 1 && dots === 2) {
          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
            if (res.length > 2) {
              const lastSlashIndex = res.lastIndexOf(separator);
              if (lastSlashIndex === -1) {
                res = "";
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
              }
              lastSlash = i2;
              dots = 0;
              continue;
            } else if (res.length === 2 || res.length === 1) {
              res = "";
              lastSegmentLength = 0;
              lastSlash = i2;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            if (res.length > 0) res += `${separator}..`;
            else res = "..";
            lastSegmentLength = 2;
          }
        } else {
          if (res.length > 0) res += separator + path.slice(lastSlash + 1, i2);
          else res = path.slice(lastSlash + 1, i2);
          lastSegmentLength = i2 - lastSlash - 1;
        }
        lastSlash = i2;
        dots = 0;
      } else if (code2 === CHAR_DOT && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }
    return res;
  }
  function normalize2(path) {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    assertArg(path);
    const len = path.length;
    let rootEnd = 0;
    let device;
    let isAbsolute3 = false;
    const code2 = path.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator(code2)) {
        isAbsolute3 = true;
        if (isPathSeparator(path.charCodeAt(1))) {
          let j = 2;
          let last = j;
          for (; j < len; ++j) {
            if (isPathSeparator(path.charCodeAt(j))) break;
          }
          if (j < len && j !== last) {
            const firstPart = path.slice(last, j);
            last = j;
            for (; j < len; ++j) {
              if (!isPathSeparator(path.charCodeAt(j))) break;
            }
            if (j < len && j !== last) {
              last = j;
              for (; j < len; ++j) {
                if (isPathSeparator(path.charCodeAt(j))) break;
              }
              if (j === len) {
                return `\\\\${firstPart}\\${path.slice(last)}\\`;
              } else if (j !== last) {
                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                rootEnd = j;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot(code2)) {
        if (path.charCodeAt(1) === CHAR_COLON) {
          device = path.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator(path.charCodeAt(2))) {
              isAbsolute3 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator(code2)) {
      return "\\";
    }
    let tail;
    if (rootEnd < len) {
      tail = normalizeString(path.slice(rootEnd), !isAbsolute3, "\\", isPathSeparator);
    } else {
      tail = "";
    }
    if (tail.length === 0 && !isAbsolute3) tail = ".";
    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {
      tail += "\\";
    }
    if (device === void 0) {
      if (isAbsolute3) {
        if (tail.length > 0) return `\\${tail}`;
        else return "\\";
      }
      return tail;
    } else if (isAbsolute3) {
      if (tail.length > 0) return `${device}\\${tail}`;
      else return `${device}\\`;
    }
    return device + tail;
  }
  function join2(path, ...paths) {
    if (path instanceof URL) {
      path = fromFileUrl(path);
    }
    paths = path ? [
      path,
      ...paths
    ] : paths;
    paths.forEach((path2) => assertPath(path2));
    paths = paths.filter((path2) => path2.length > 0);
    if (paths.length === 0) return ".";
    let needsReplace = true;
    let slashCount = 0;
    const firstPart = paths[0];
    if (isPathSeparator(firstPart.charCodeAt(0))) {
      ++slashCount;
      const firstLen = firstPart.length;
      if (firstLen > 1) {
        if (isPathSeparator(firstPart.charCodeAt(1))) {
          ++slashCount;
          if (firstLen > 2) {
            if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
            else {
              needsReplace = false;
            }
          }
        }
      }
    }
    let joined = paths.join("\\");
    if (needsReplace) {
      for (; slashCount < joined.length; ++slashCount) {
        if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
      }
      if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize2(joined);
  }
  function parse(path) {
    assertPath(path);
    const ret = {
      root: "",
      dir: "",
      base: "",
      ext: "",
      name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code2 = path.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator(code2)) {
        rootEnd = 1;
        if (isPathSeparator(path.charCodeAt(1))) {
          let j = 2;
          let last = j;
          for (; j < len; ++j) {
            if (isPathSeparator(path.charCodeAt(j))) break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (!isPathSeparator(path.charCodeAt(j))) break;
            }
            if (j < len && j !== last) {
              last = j;
              for (; j < len; ++j) {
                if (isPathSeparator(path.charCodeAt(j))) break;
              }
              if (j === len) {
                rootEnd = j;
              } else if (j !== last) {
                rootEnd = j + 1;
              }
            }
          }
        }
      } else if (isWindowsDeviceRoot(code2)) {
        if (path.charCodeAt(1) === CHAR_COLON) {
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator(path.charCodeAt(2))) {
              if (len === 3) {
                ret.root = ret.dir = path;
                ret.base = "\\";
                return ret;
              }
              rootEnd = 3;
            }
          } else {
            ret.root = ret.dir = path;
            return ret;
          }
        }
      }
    } else if (isPathSeparator(code2)) {
      ret.root = ret.dir = path;
      ret.base = "\\";
      return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i2 = path.length - 1;
    let preDotState = 0;
    for (; i2 >= rootEnd; --i2) {
      code2 = path.charCodeAt(i2);
      if (isPathSeparator(code2)) {
        if (!matchedSlash) {
          startPart = i2 + 1;
          break;
        }
        continue;
      }
      if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
      if (code2 === CHAR_DOT) {
        if (startDot === -1) startDot = i2;
        else if (preDotState !== 1) preDotState = 1;
      } else if (startDot !== -1) {
        preDotState = -1;
      }
    }
    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      ret.name = path.slice(startPart, startDot);
      ret.base = path.slice(startPart, end);
      ret.ext = path.slice(startDot, end);
    }
    ret.base = ret.base || "\\";
    if (startPart > 0 && startPart !== rootEnd) {
      ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
  }
  function resolve2(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for (let i2 = pathSegments.length - 1; i2 >= -1; i2--) {
      let path;
      const { Deno } = globalThis;
      if (i2 >= 0) {
        path = pathSegments[i2];
      } else if (!resolvedDevice) {
        if (typeof Deno?.cwd !== "function") {
          throw new TypeError("Resolved a drive-letter-less path without a current working directory (CWD)");
        }
        path = Deno.cwd();
      } else {
        if (typeof Deno?.env?.get !== "function" || typeof Deno?.cwd !== "function") {
          throw new TypeError("Resolved a relative path without a current working directory (CWD)");
        }
        path = Deno.cwd();
        if (path === void 0 || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
          path = `${resolvedDevice}\\`;
        }
      }
      assertPath(path);
      const len = path.length;
      if (len === 0) continue;
      let rootEnd = 0;
      let device = "";
      let isAbsolute3 = false;
      const code2 = path.charCodeAt(0);
      if (len > 1) {
        if (isPathSeparator(code2)) {
          isAbsolute3 = true;
          if (isPathSeparator(path.charCodeAt(1))) {
            let j = 2;
            let last = j;
            for (; j < len; ++j) {
              if (isPathSeparator(path.charCodeAt(j))) break;
            }
            if (j < len && j !== last) {
              const firstPart = path.slice(last, j);
              last = j;
              for (; j < len; ++j) {
                if (!isPathSeparator(path.charCodeAt(j))) break;
              }
              if (j < len && j !== last) {
                last = j;
                for (; j < len; ++j) {
                  if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j === len) {
                  device = `\\\\${firstPart}\\${path.slice(last)}`;
                  rootEnd = j;
                } else if (j !== last) {
                  device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                  rootEnd = j;
                }
              }
            }
          } else {
            rootEnd = 1;
          }
        } else if (isWindowsDeviceRoot(code2)) {
          if (path.charCodeAt(1) === CHAR_COLON) {
            device = path.slice(0, 2);
            rootEnd = 2;
            if (len > 2) {
              if (isPathSeparator(path.charCodeAt(2))) {
                isAbsolute3 = true;
                rootEnd = 3;
              }
            }
          }
        }
      } else if (isPathSeparator(code2)) {
        rootEnd = 1;
        isAbsolute3 = true;
      }
      if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
        continue;
      }
      if (resolvedDevice.length === 0 && device.length > 0) {
        resolvedDevice = device;
      }
      if (!resolvedAbsolute) {
        resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
        resolvedAbsolute = isAbsolute3;
      }
      if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
  }
  function assertArgs(from2, to) {
    assertPath(from2);
    assertPath(to);
    if (from2 === to) return "";
  }
  function relative2(from2, to) {
    assertArgs(from2, to);
    const fromOrig = resolve2(from2);
    const toOrig = resolve2(to);
    if (fromOrig === toOrig) return "";
    from2 = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from2 === to) return "";
    let fromStart = 0;
    let fromEnd = from2.length;
    for (; fromStart < fromEnd; ++fromStart) {
      if (from2.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH) break;
    }
    for (; fromEnd - 1 > fromStart; --fromEnd) {
      if (from2.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for (; toStart < toEnd; ++toStart) {
      if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH) break;
    }
    for (; toEnd - 1 > toStart; --toEnd) {
      if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i2 = 0;
    for (; i2 <= length; ++i2) {
      if (i2 === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i2) === CHAR_BACKWARD_SLASH) {
            return toOrig.slice(toStart + i2 + 1);
          } else if (i2 === 2) {
            return toOrig.slice(toStart + i2);
          }
        }
        if (fromLen > length) {
          if (from2.charCodeAt(fromStart + i2) === CHAR_BACKWARD_SLASH) {
            lastCommonSep = i2;
          } else if (i2 === 2) {
            lastCommonSep = 3;
          }
        }
        break;
      }
      const fromCode = from2.charCodeAt(fromStart + i2);
      const toCode = to.charCodeAt(toStart + i2);
      if (fromCode !== toCode) break;
      else if (fromCode === CHAR_BACKWARD_SLASH) lastCommonSep = i2;
    }
    if (i2 !== length && lastCommonSep === -1) {
      return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
      if (i2 === fromEnd || from2.charCodeAt(i2) === CHAR_BACKWARD_SLASH) {
        if (out.length === 0) out += "..";
        else out += "\\..";
      }
    }
    if (out.length > 0) {
      return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
      toStart += lastCommonSep;
      if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) ++toStart;
      return toOrig.slice(toStart, toEnd);
    }
  }
  const WHITESPACE_ENCODINGS = {
    "	": "%09",
    "\n": "%0A",
    "\v": "%0B",
    "\f": "%0C",
    "\r": "%0D",
    " ": "%20"
  };
  function encodeWhitespace(string) {
    return string.replaceAll(/[\s]/g, (c2) => {
      return WHITESPACE_ENCODINGS[c2] ?? c2;
    });
  }
  function toFileUrl(path) {
    if (!isAbsolute2(path)) {
      throw new TypeError(`Path must be absolute: received "${path}"`);
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
    if (hostname !== void 0 && hostname !== "localhost") {
      url.hostname = hostname;
      if (!url.hostname) {
        throw new TypeError(`Invalid hostname: "${url.hostname}"`);
      }
    }
    return url;
  }
  function toNamespacedPath(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = resolve2(path);
    if (resolvedPath.length >= 3) {
      if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {
        if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {
          const code2 = resolvedPath.charCodeAt(2);
          if (code2 !== CHAR_QUESTION_MARK && code2 !== CHAR_DOT) {
            return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
          }
        }
      } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
        if (resolvedPath.charCodeAt(1) === CHAR_COLON && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {
          return `\\\\?\\${resolvedPath}`;
        }
      }
    }
    return path;
  }
  function common$1(paths, sep2) {
    const [first = "", ...remaining] = paths;
    const parts = first.split(sep2);
    let endOfPrefix = parts.length;
    let append = "";
    for (const path of remaining) {
      const compare3 = path.split(sep2);
      if (compare3.length <= endOfPrefix) {
        endOfPrefix = compare3.length;
        append = "";
      }
      for (let i2 = 0; i2 < endOfPrefix; i2++) {
        if (compare3[i2] !== parts[i2]) {
          endOfPrefix = i2;
          append = i2 === 0 ? "" : sep2;
          break;
        }
      }
    }
    return parts.slice(0, endOfPrefix).join(sep2) + append;
  }
  function common2(paths) {
    return common$1(paths, SEPARATOR);
  }
  const REG_EXP_ESCAPE_CHARS = [
    "!",
    "$",
    "(",
    ")",
    "*",
    "+",
    ".",
    "=",
    "?",
    "[",
    "\\",
    "^",
    "{",
    "|"
  ];
  const RANGE_ESCAPE_CHARS = [
    "-",
    "\\",
    "]"
  ];
  function _globToRegExp(c2, glob, {
    extended = true,
    globstar: globstarOption = true,
    // os = osType,
    caseInsensitive = false
  } = {}) {
    if (glob === "") {
      return /(?!)/;
    }
    let newLength = glob.length;
    for (; newLength > 1 && c2.seps.includes(glob[newLength - 1]); newLength--) ;
    glob = glob.slice(0, newLength);
    let regExpString = "";
    for (let j = 0; j < glob.length; ) {
      let segment = "";
      const groupStack = [];
      let inRange = false;
      let inEscape = false;
      let endsWithSep = false;
      let i2 = j;
      for (; i2 < glob.length && !c2.seps.includes(glob[i2]); i2++) {
        if (inEscape) {
          inEscape = false;
          const escapeChars = inRange ? RANGE_ESCAPE_CHARS : REG_EXP_ESCAPE_CHARS;
          segment += escapeChars.includes(glob[i2]) ? `\\${glob[i2]}` : glob[i2];
          continue;
        }
        if (glob[i2] === c2.escapePrefix) {
          inEscape = true;
          continue;
        }
        if (glob[i2] === "[") {
          if (!inRange) {
            inRange = true;
            segment += "[";
            if (glob[i2 + 1] === "!") {
              i2++;
              segment += "^";
            } else if (glob[i2 + 1] === "^") {
              i2++;
              segment += "\\^";
            }
            continue;
          } else if (glob[i2 + 1] === ":") {
            let k = i2 + 1;
            let value = "";
            while (glob[k + 1] !== void 0 && glob[k + 1] !== ":") {
              value += glob[k + 1];
              k++;
            }
            if (glob[k + 1] === ":" && glob[k + 2] === "]") {
              i2 = k + 2;
              if (value === "alnum") segment += "\\dA-Za-z";
              else if (value === "alpha") segment += "A-Za-z";
              else if (value === "ascii") segment += "\0-";
              else if (value === "blank") segment += "	 ";
              else if (value === "cntrl") segment += "\0-";
              else if (value === "digit") segment += "\\d";
              else if (value === "graph") segment += "!-~";
              else if (value === "lower") segment += "a-z";
              else if (value === "print") segment += " -~";
              else if (value === "punct") {
                segment += `!"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_‘{|}~`;
              } else if (value === "space") segment += "\\s\v";
              else if (value === "upper") segment += "A-Z";
              else if (value === "word") segment += "\\w";
              else if (value === "xdigit") segment += "\\dA-Fa-f";
              continue;
            }
          }
        }
        if (glob[i2] === "]" && inRange) {
          inRange = false;
          segment += "]";
          continue;
        }
        if (inRange) {
          segment += glob[i2];
          continue;
        }
        if (glob[i2] === ")" && groupStack.length > 0 && groupStack[groupStack.length - 1] !== "BRACE") {
          segment += ")";
          const type2 = groupStack.pop();
          if (type2 === "!") {
            segment += c2.wildcard;
          } else if (type2 !== "@") {
            segment += type2;
          }
          continue;
        }
        if (glob[i2] === "|" && groupStack.length > 0 && groupStack[groupStack.length - 1] !== "BRACE") {
          segment += "|";
          continue;
        }
        if (glob[i2] === "+" && extended && glob[i2 + 1] === "(") {
          i2++;
          groupStack.push("+");
          segment += "(?:";
          continue;
        }
        if (glob[i2] === "@" && extended && glob[i2 + 1] === "(") {
          i2++;
          groupStack.push("@");
          segment += "(?:";
          continue;
        }
        if (glob[i2] === "?") {
          if (extended && glob[i2 + 1] === "(") {
            i2++;
            groupStack.push("?");
            segment += "(?:";
          } else {
            segment += ".";
          }
          continue;
        }
        if (glob[i2] === "!" && extended && glob[i2 + 1] === "(") {
          i2++;
          groupStack.push("!");
          segment += "(?!";
          continue;
        }
        if (glob[i2] === "{") {
          groupStack.push("BRACE");
          segment += "(?:";
          continue;
        }
        if (glob[i2] === "}" && groupStack[groupStack.length - 1] === "BRACE") {
          groupStack.pop();
          segment += ")";
          continue;
        }
        if (glob[i2] === "," && groupStack[groupStack.length - 1] === "BRACE") {
          segment += "|";
          continue;
        }
        if (glob[i2] === "*") {
          if (extended && glob[i2 + 1] === "(") {
            i2++;
            groupStack.push("*");
            segment += "(?:";
          } else {
            const prevChar = glob[i2 - 1];
            let numStars = 1;
            while (glob[i2 + 1] === "*") {
              i2++;
              numStars++;
            }
            const nextChar = glob[i2 + 1];
            if (globstarOption && numStars === 2 && [
              ...c2.seps,
              void 0
            ].includes(prevChar) && [
              ...c2.seps,
              void 0
            ].includes(nextChar)) {
              segment += c2.globstar;
              endsWithSep = true;
            } else {
              segment += c2.wildcard;
            }
          }
          continue;
        }
        segment += REG_EXP_ESCAPE_CHARS.includes(glob[i2]) ? `\\${glob[i2]}` : glob[i2];
      }
      if (groupStack.length > 0 || inRange || inEscape) {
        segment = "";
        for (const c3 of glob.slice(j, i2)) {
          segment += REG_EXP_ESCAPE_CHARS.includes(c3) ? `\\${c3}` : c3;
          endsWithSep = false;
        }
      }
      regExpString += segment;
      if (!endsWithSep) {
        regExpString += i2 < glob.length ? c2.sep : c2.sepMaybe;
        endsWithSep = true;
      }
      while (c2.seps.includes(glob[i2])) i2++;
      j = i2;
    }
    regExpString = `^${regExpString}$`;
    return new RegExp(regExpString, caseInsensitive ? "i" : "");
  }
  const constants = {
    sep: "(?:\\\\|/)+",
    sepMaybe: "(?:\\\\|/)*",
    seps: [
      "\\",
      "/"
    ],
    globstar: "(?:[^\\\\/]*(?:\\\\|/|$)+)*",
    wildcard: "[^\\\\/]*",
    escapePrefix: "`"
  };
  function globToRegExp(glob, options = {}) {
    return _globToRegExp(constants, glob, options);
  }
  function isGlob(str) {
    const chars = {
      "{": "}",
      "(": ")",
      "[": "]"
    };
    const regex = /\\(.)|(^!|\*|\?|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/;
    if (str === "") {
      return false;
    }
    let match;
    while (match = regex.exec(str)) {
      if (match[2]) return true;
      let idx = match.index + match[0].length;
      const open = match[1];
      const close = open ? chars[open] : null;
      if (open && close) {
        const n2 = str.indexOf(close, idx);
        if (n2 !== -1) {
          idx = n2 + 1;
        }
      }
      str = str.slice(idx);
    }
    return false;
  }
  function normalizeGlob(glob, options = {}) {
    const { globstar = false } = options;
    if (glob.match(/\0/g)) {
      throw new Error(`Glob contains invalid characters: "${glob}"`);
    }
    if (!globstar) {
      return normalize2(glob);
    }
    const s2 = SEPARATOR_PATTERN.source;
    const badParentPattern = new RegExp(`(?<=(${s2}|^)\\*\\*${s2})\\.\\.(?=${s2}|$)`, "g");
    return normalize2(glob.replace(badParentPattern, "\0")).replace(/\0/g, "..");
  }
  function joinGlobs(globs, options = {}) {
    const { globstar = false } = options;
    if (!globstar || globs.length === 0) {
      return join2(...globs);
    }
    let joined;
    for (const glob of globs) {
      const path = glob;
      if (path.length > 0) {
        if (!joined) joined = path;
        else joined += `${SEPARATOR}${path}`;
      }
    }
    if (!joined) return ".";
    return normalizeGlob(joined, {
      globstar
    });
  }
  windows.DELIMITER = DELIMITER;
  windows.SEPARATOR = SEPARATOR;
  windows.SEPARATOR_PATTERN = SEPARATOR_PATTERN;
  windows.basename = basename2;
  windows.common = common2;
  windows.dirname = dirname2;
  windows.extname = extname2;
  windows.format = format2;
  windows.fromFileUrl = fromFileUrl;
  windows.globToRegExp = globToRegExp;
  windows.isAbsolute = isAbsolute2;
  windows.isGlob = isGlob;
  windows.join = join2;
  windows.joinGlobs = joinGlobs;
  windows.normalize = normalize2;
  windows.normalizeGlob = normalizeGlob;
  windows.parse = parse;
  windows.relative = relative2;
  windows.resolve = resolve2;
  windows.toFileUrl = toFileUrl;
  windows.toNamespacedPath = toNamespacedPath;
  return windows;
}
var concatMap;
var hasRequiredConcatMap;
function requireConcatMap() {
  if (hasRequiredConcatMap) return concatMap;
  hasRequiredConcatMap = 1;
  concatMap = function(xs, fn) {
    var res = [];
    for (var i2 = 0; i2 < xs.length; i2++) {
      var x2 = fn(xs[i2], i2);
      if (isArray2(x2)) res.push.apply(res, x2);
      else res.push(x2);
    }
    return res;
  };
  var isArray2 = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
  };
  return concatMap;
}
var balancedMatch;
var hasRequiredBalancedMatch;
function requireBalancedMatch() {
  if (hasRequiredBalancedMatch) return balancedMatch;
  hasRequiredBalancedMatch = 1;
  balancedMatch = balanced;
  function balanced(a2, b, str) {
    if (a2 instanceof RegExp) a2 = maybeMatch(a2, str);
    if (b instanceof RegExp) b = maybeMatch(b, str);
    var r2 = range(a2, b, str);
    return r2 && {
      start: r2[0],
      end: r2[1],
      pre: str.slice(0, r2[0]),
      body: str.slice(r2[0] + a2.length, r2[1]),
      post: str.slice(r2[1] + b.length)
    };
  }
  function maybeMatch(reg, str) {
    var m2 = str.match(reg);
    return m2 ? m2[0] : null;
  }
  balanced.range = range;
  function range(a2, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a2);
    var bi = str.indexOf(b, ai + 1);
    var i2 = ai;
    if (ai >= 0 && bi > 0) {
      if (a2 === b) {
        return [ai, bi];
      }
      begs = [];
      left = str.length;
      while (i2 >= 0 && !result) {
        if (i2 == ai) {
          begs.push(i2);
          ai = str.indexOf(a2, i2 + 1);
        } else if (begs.length == 1) {
          result = [begs.pop(), bi];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }
          bi = str.indexOf(b, i2 + 1);
        }
        i2 = ai < bi && ai >= 0 ? ai : bi;
      }
      if (begs.length) {
        result = [left, right];
      }
    }
    return result;
  }
  return balancedMatch;
}
var braceExpansion;
var hasRequiredBraceExpansion;
function requireBraceExpansion() {
  if (hasRequiredBraceExpansion) return braceExpansion;
  hasRequiredBraceExpansion = 1;
  var concatMap2 = requireConcatMap();
  var balanced = requireBalancedMatch();
  braceExpansion = expandTop;
  var escSlash = "\0SLASH" + Math.random() + "\0";
  var escOpen = "\0OPEN" + Math.random() + "\0";
  var escClose = "\0CLOSE" + Math.random() + "\0";
  var escComma = "\0COMMA" + Math.random() + "\0";
  var escPeriod = "\0PERIOD" + Math.random() + "\0";
  function numeric(str) {
    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
  }
  function escapeBraces(str) {
    return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
  }
  function unescapeBraces(str) {
    return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
  }
  function parseCommaParts(str) {
    if (!str)
      return [""];
    var parts = [];
    var m2 = balanced("{", "}", str);
    if (!m2)
      return str.split(",");
    var pre = m2.pre;
    var body = m2.body;
    var post = m2.post;
    var p2 = pre.split(",");
    p2[p2.length - 1] += "{" + body + "}";
    var postParts = parseCommaParts(post);
    if (post.length) {
      p2[p2.length - 1] += postParts.shift();
      p2.push.apply(p2, postParts);
    }
    parts.push.apply(parts, p2);
    return parts;
  }
  function expandTop(str) {
    if (!str)
      return [];
    if (str.substr(0, 2) === "{}") {
      str = "\\{\\}" + str.substr(2);
    }
    return expand(escapeBraces(str), true).map(unescapeBraces);
  }
  function embrace(str) {
    return "{" + str + "}";
  }
  function isPadded(el) {
    return /^-?0\d/.test(el);
  }
  function lte(i2, y2) {
    return i2 <= y2;
  }
  function gte(i2, y2) {
    return i2 >= y2;
  }
  function expand(str, isTop) {
    var expansions = [];
    var m2 = balanced("{", "}", str);
    if (!m2 || /\$$/.test(m2.pre)) return [str];
    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m2.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m2.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m2.body.indexOf(",") >= 0;
    if (!isSequence && !isOptions) {
      if (m2.post.match(/,.*\}/)) {
        str = m2.pre + "{" + m2.body + escClose + m2.post;
        return expand(str);
      }
      return [str];
    }
    var n2;
    if (isSequence) {
      n2 = m2.body.split(/\.\./);
    } else {
      n2 = parseCommaParts(m2.body);
      if (n2.length === 1) {
        n2 = expand(n2[0], false).map(embrace);
        if (n2.length === 1) {
          var post = m2.post.length ? expand(m2.post, false) : [""];
          return post.map(function(p2) {
            return m2.pre + n2[0] + p2;
          });
        }
      }
    }
    var pre = m2.pre;
    var post = m2.post.length ? expand(m2.post, false) : [""];
    var N;
    if (isSequence) {
      var x2 = numeric(n2[0]);
      var y2 = numeric(n2[1]);
      var width = Math.max(n2[0].length, n2[1].length);
      var incr = n2.length == 3 ? Math.abs(numeric(n2[2])) : 1;
      var test = lte;
      var reverse = y2 < x2;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad2 = n2.some(isPadded);
      N = [];
      for (var i2 = x2; test(i2, y2); i2 += incr) {
        var c2;
        if (isAlphaSequence) {
          c2 = String.fromCharCode(i2);
          if (c2 === "\\")
            c2 = "";
        } else {
          c2 = String(i2);
          if (pad2) {
            var need = width - c2.length;
            if (need > 0) {
              var z = new Array(need + 1).join("0");
              if (i2 < 0)
                c2 = "-" + z + c2.slice(1);
              else
                c2 = z + c2;
            }
          }
        }
        N.push(c2);
      }
    } else {
      N = concatMap2(n2, function(el) {
        return expand(el, false);
      });
    }
    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }
    return expansions;
  }
  return braceExpansion;
}
var minimatch_1;
var hasRequiredMinimatch;
function requireMinimatch() {
  if (hasRequiredMinimatch) return minimatch_1;
  hasRequiredMinimatch = 1;
  minimatch_1 = minimatch;
  minimatch.Minimatch = Minimatch;
  var path = (function() {
    try {
      return require$$0$1;
    } catch (e2) {
    }
  })() || {
    sep: "/"
  };
  minimatch.sep = path.sep;
  var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
  var expand = requireBraceExpansion();
  var plTypes = {
    "!": { open: "(?:(?!(?:", close: "))[^/]*?)" },
    "?": { open: "(?:", close: ")?" },
    "+": { open: "(?:", close: ")+" },
    "*": { open: "(?:", close: ")*" },
    "@": { open: "(?:", close: ")" }
  };
  var qmark = "[^/]";
  var star = qmark + "*?";
  var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
  var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
  var reSpecials = charSet("().*{}+?[]^$\\!");
  function charSet(s2) {
    return s2.split("").reduce(function(set, c2) {
      set[c2] = true;
      return set;
    }, {});
  }
  var slashSplit = /\/+/;
  minimatch.filter = filter2;
  function filter2(pattern2, options) {
    options = options || {};
    return function(p2, i2, list) {
      return minimatch(p2, pattern2, options);
    };
  }
  function ext(a2, b) {
    b = b || {};
    var t2 = {};
    Object.keys(a2).forEach(function(k) {
      t2[k] = a2[k];
    });
    Object.keys(b).forEach(function(k) {
      t2[k] = b[k];
    });
    return t2;
  }
  minimatch.defaults = function(def) {
    if (!def || typeof def !== "object" || !Object.keys(def).length) {
      return minimatch;
    }
    var orig = minimatch;
    var m2 = function minimatch2(p2, pattern2, options) {
      return orig(p2, pattern2, ext(def, options));
    };
    m2.Minimatch = function Minimatch2(pattern2, options) {
      return new orig.Minimatch(pattern2, ext(def, options));
    };
    m2.Minimatch.defaults = function defaults(options) {
      return orig.defaults(ext(def, options)).Minimatch;
    };
    m2.filter = function filter3(pattern2, options) {
      return orig.filter(pattern2, ext(def, options));
    };
    m2.defaults = function defaults(options) {
      return orig.defaults(ext(def, options));
    };
    m2.makeRe = function makeRe2(pattern2, options) {
      return orig.makeRe(pattern2, ext(def, options));
    };
    m2.braceExpand = function braceExpand2(pattern2, options) {
      return orig.braceExpand(pattern2, ext(def, options));
    };
    m2.match = function(list, pattern2, options) {
      return orig.match(list, pattern2, ext(def, options));
    };
    return m2;
  };
  Minimatch.defaults = function(def) {
    return minimatch.defaults(def).Minimatch;
  };
  function minimatch(p2, pattern2, options) {
    assertValidPattern(pattern2);
    if (!options) options = {};
    if (!options.nocomment && pattern2.charAt(0) === "#") {
      return false;
    }
    return new Minimatch(pattern2, options).match(p2);
  }
  function Minimatch(pattern2, options) {
    if (!(this instanceof Minimatch)) {
      return new Minimatch(pattern2, options);
    }
    assertValidPattern(pattern2);
    if (!options) options = {};
    pattern2 = pattern2.trim();
    if (!options.allowWindowsEscape && path.sep !== "/") {
      pattern2 = pattern2.split(path.sep).join("/");
    }
    this.options = options;
    this.set = [];
    this.pattern = pattern2;
    this.regexp = null;
    this.negate = false;
    this.comment = false;
    this.empty = false;
    this.partial = !!options.partial;
    this.make();
  }
  Minimatch.prototype.debug = function() {
  };
  Minimatch.prototype.make = make;
  function make() {
    var pattern2 = this.pattern;
    var options = this.options;
    if (!options.nocomment && pattern2.charAt(0) === "#") {
      this.comment = true;
      return;
    }
    if (!pattern2) {
      this.empty = true;
      return;
    }
    this.parseNegate();
    var set = this.globSet = this.braceExpand();
    if (options.debug) this.debug = function debug() {
      console.error.apply(console, arguments);
    };
    this.debug(this.pattern, set);
    set = this.globParts = set.map(function(s2) {
      return s2.split(slashSplit);
    });
    this.debug(this.pattern, set);
    set = set.map(function(s2, si, set2) {
      return s2.map(this.parse, this);
    }, this);
    this.debug(this.pattern, set);
    set = set.filter(function(s2) {
      return s2.indexOf(false) === -1;
    });
    this.debug(this.pattern, set);
    this.set = set;
  }
  Minimatch.prototype.parseNegate = parseNegate;
  function parseNegate() {
    var pattern2 = this.pattern;
    var negate = false;
    var options = this.options;
    var negateOffset = 0;
    if (options.nonegate) return;
    for (var i2 = 0, l2 = pattern2.length; i2 < l2 && pattern2.charAt(i2) === "!"; i2++) {
      negate = !negate;
      negateOffset++;
    }
    if (negateOffset) this.pattern = pattern2.substr(negateOffset);
    this.negate = negate;
  }
  minimatch.braceExpand = function(pattern2, options) {
    return braceExpand(pattern2, options);
  };
  Minimatch.prototype.braceExpand = braceExpand;
  function braceExpand(pattern2, options) {
    if (!options) {
      if (this instanceof Minimatch) {
        options = this.options;
      } else {
        options = {};
      }
    }
    pattern2 = typeof pattern2 === "undefined" ? this.pattern : pattern2;
    assertValidPattern(pattern2);
    if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern2)) {
      return [pattern2];
    }
    return expand(pattern2);
  }
  var MAX_PATTERN_LENGTH = 1024 * 64;
  var assertValidPattern = function(pattern2) {
    if (typeof pattern2 !== "string") {
      throw new TypeError("invalid pattern");
    }
    if (pattern2.length > MAX_PATTERN_LENGTH) {
      throw new TypeError("pattern is too long");
    }
  };
  Minimatch.prototype.parse = parse;
  var SUBPARSE = {};
  function parse(pattern2, isSub) {
    assertValidPattern(pattern2);
    var options = this.options;
    if (pattern2 === "**") {
      if (!options.noglobstar)
        return GLOBSTAR;
      else
        pattern2 = "*";
    }
    if (pattern2 === "") return "";
    var re = "";
    var hasMagic = !!options.nocase;
    var escaping = false;
    var patternListStack = [];
    var negativeLists = [];
    var stateChar;
    var inClass = false;
    var reClassStart = -1;
    var classStart = -1;
    var patternStart = pattern2.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
    var self2 = this;
    function clearStateChar() {
      if (stateChar) {
        switch (stateChar) {
          case "*":
            re += star;
            hasMagic = true;
            break;
          case "?":
            re += qmark;
            hasMagic = true;
            break;
          default:
            re += "\\" + stateChar;
            break;
        }
        self2.debug("clearStateChar %j %j", stateChar, re);
        stateChar = false;
      }
    }
    for (var i2 = 0, len = pattern2.length, c2; i2 < len && (c2 = pattern2.charAt(i2)); i2++) {
      this.debug("%s	%s %s %j", pattern2, i2, re, c2);
      if (escaping && reSpecials[c2]) {
        re += "\\" + c2;
        escaping = false;
        continue;
      }
      switch (c2) {
        /* istanbul ignore next */
        case "/": {
          return false;
        }
        case "\\":
          clearStateChar();
          escaping = true;
          continue;
        // the various stateChar values
        // for the "extglob" stuff.
        case "?":
        case "*":
        case "+":
        case "@":
        case "!":
          this.debug("%s	%s %s %j <-- stateChar", pattern2, i2, re, c2);
          if (inClass) {
            this.debug("  in class");
            if (c2 === "!" && i2 === classStart + 1) c2 = "^";
            re += c2;
            continue;
          }
          self2.debug("call clearStateChar %j", stateChar);
          clearStateChar();
          stateChar = c2;
          if (options.noext) clearStateChar();
          continue;
        case "(":
          if (inClass) {
            re += "(";
            continue;
          }
          if (!stateChar) {
            re += "\\(";
            continue;
          }
          patternListStack.push({
            type: stateChar,
            start: i2 - 1,
            reStart: re.length,
            open: plTypes[stateChar].open,
            close: plTypes[stateChar].close
          });
          re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
          this.debug("plType %j %j", stateChar, re);
          stateChar = false;
          continue;
        case ")":
          if (inClass || !patternListStack.length) {
            re += "\\)";
            continue;
          }
          clearStateChar();
          hasMagic = true;
          var pl = patternListStack.pop();
          re += pl.close;
          if (pl.type === "!") {
            negativeLists.push(pl);
          }
          pl.reEnd = re.length;
          continue;
        case "|":
          if (inClass || !patternListStack.length || escaping) {
            re += "\\|";
            escaping = false;
            continue;
          }
          clearStateChar();
          re += "|";
          continue;
        // these are mostly the same in regexp and glob
        case "[":
          clearStateChar();
          if (inClass) {
            re += "\\" + c2;
            continue;
          }
          inClass = true;
          classStart = i2;
          reClassStart = re.length;
          re += c2;
          continue;
        case "]":
          if (i2 === classStart + 1 || !inClass) {
            re += "\\" + c2;
            escaping = false;
            continue;
          }
          var cs = pattern2.substring(classStart + 1, i2);
          try {
            RegExp("[" + cs + "]");
          } catch (er) {
            var sp = this.parse(cs, SUBPARSE);
            re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
            hasMagic = hasMagic || sp[1];
            inClass = false;
            continue;
          }
          hasMagic = true;
          inClass = false;
          re += c2;
          continue;
        default:
          clearStateChar();
          if (escaping) {
            escaping = false;
          } else if (reSpecials[c2] && !(c2 === "^" && inClass)) {
            re += "\\";
          }
          re += c2;
      }
    }
    if (inClass) {
      cs = pattern2.substr(classStart + 1);
      sp = this.parse(cs, SUBPARSE);
      re = re.substr(0, reClassStart) + "\\[" + sp[0];
      hasMagic = hasMagic || sp[1];
    }
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      var tail = re.slice(pl.reStart + pl.open.length);
      this.debug("setting tail", re, pl);
      tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_, $1, $2) {
        if (!$2) {
          $2 = "\\";
        }
        return $1 + $1 + $2 + "|";
      });
      this.debug("tail=%j\n   %s", tail, tail, pl, re);
      var t2 = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
      hasMagic = true;
      re = re.slice(0, pl.reStart) + t2 + "\\(" + tail;
    }
    clearStateChar();
    if (escaping) {
      re += "\\\\";
    }
    var addPatternStart = false;
    switch (re.charAt(0)) {
      case "[":
      case ".":
      case "(":
        addPatternStart = true;
    }
    for (var n2 = negativeLists.length - 1; n2 > -1; n2--) {
      var nl = negativeLists[n2];
      var nlBefore = re.slice(0, nl.reStart);
      var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
      var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
      var nlAfter = re.slice(nl.reEnd);
      nlLast += nlAfter;
      var openParensBefore = nlBefore.split("(").length - 1;
      var cleanAfter = nlAfter;
      for (i2 = 0; i2 < openParensBefore; i2++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
      }
      nlAfter = cleanAfter;
      var dollar = "";
      if (nlAfter === "" && isSub !== SUBPARSE) {
        dollar = "$";
      }
      var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
      re = newRe;
    }
    if (re !== "" && hasMagic) {
      re = "(?=.)" + re;
    }
    if (addPatternStart) {
      re = patternStart + re;
    }
    if (isSub === SUBPARSE) {
      return [re, hasMagic];
    }
    if (!hasMagic) {
      return globUnescape(pattern2);
    }
    var flags2 = options.nocase ? "i" : "";
    try {
      var regExp = new RegExp("^" + re + "$", flags2);
    } catch (er) {
      return new RegExp("$.");
    }
    regExp._glob = pattern2;
    regExp._src = re;
    return regExp;
  }
  minimatch.makeRe = function(pattern2, options) {
    return new Minimatch(pattern2, options || {}).makeRe();
  };
  Minimatch.prototype.makeRe = makeRe;
  function makeRe() {
    if (this.regexp || this.regexp === false) return this.regexp;
    var set = this.set;
    if (!set.length) {
      this.regexp = false;
      return this.regexp;
    }
    var options = this.options;
    var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
    var flags2 = options.nocase ? "i" : "";
    var re = set.map(function(pattern2) {
      return pattern2.map(function(p2) {
        return p2 === GLOBSTAR ? twoStar : typeof p2 === "string" ? regExpEscape(p2) : p2._src;
      }).join("\\/");
    }).join("|");
    re = "^(?:" + re + ")$";
    if (this.negate) re = "^(?!" + re + ").*$";
    try {
      this.regexp = new RegExp(re, flags2);
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp;
  }
  minimatch.match = function(list, pattern2, options) {
    options = options || {};
    var mm = new Minimatch(pattern2, options);
    list = list.filter(function(f2) {
      return mm.match(f2);
    });
    if (mm.options.nonull && !list.length) {
      list.push(pattern2);
    }
    return list;
  };
  Minimatch.prototype.match = function match(f2, partial) {
    if (typeof partial === "undefined") partial = this.partial;
    this.debug("match", f2, this.pattern);
    if (this.comment) return false;
    if (this.empty) return f2 === "";
    if (f2 === "/" && partial) return true;
    var options = this.options;
    if (path.sep !== "/") {
      f2 = f2.split(path.sep).join("/");
    }
    f2 = f2.split(slashSplit);
    this.debug(this.pattern, "split", f2);
    var set = this.set;
    this.debug(this.pattern, "set", set);
    var filename;
    var i2;
    for (i2 = f2.length - 1; i2 >= 0; i2--) {
      filename = f2[i2];
      if (filename) break;
    }
    for (i2 = 0; i2 < set.length; i2++) {
      var pattern2 = set[i2];
      var file = f2;
      if (options.matchBase && pattern2.length === 1) {
        file = [filename];
      }
      var hit = this.matchOne(file, pattern2, partial);
      if (hit) {
        if (options.flipNegate) return true;
        return !this.negate;
      }
    }
    if (options.flipNegate) return false;
    return this.negate;
  };
  Minimatch.prototype.matchOne = function(file, pattern2, partial) {
    var options = this.options;
    this.debug(
      "matchOne",
      { "this": this, file, pattern: pattern2 }
    );
    this.debug("matchOne", file.length, pattern2.length);
    for (var fi = 0, pi = 0, fl = file.length, pl = pattern2.length; fi < fl && pi < pl; fi++, pi++) {
      this.debug("matchOne loop");
      var p2 = pattern2[pi];
      var f2 = file[fi];
      this.debug(pattern2, p2, f2);
      if (p2 === false) return false;
      if (p2 === GLOBSTAR) {
        this.debug("GLOBSTAR", [pattern2, p2, f2]);
        var fr = fi;
        var pr = pi + 1;
        if (pr === pl) {
          this.debug("** at the end");
          for (; fi < fl; fi++) {
            if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".") return false;
          }
          return true;
        }
        while (fr < fl) {
          var swallowee = file[fr];
          this.debug("\nglobstar while", file, fr, pattern2, pr, swallowee);
          if (this.matchOne(file.slice(fr), pattern2.slice(pr), partial)) {
            this.debug("globstar found match!", fr, fl, swallowee);
            return true;
          } else {
            if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
              this.debug("dot detected!", file, fr, pattern2, pr);
              break;
            }
            this.debug("globstar swallow a segment, and continue");
            fr++;
          }
        }
        if (partial) {
          this.debug("\n>>> no match, partial?", file, fr, pattern2, pr);
          if (fr === fl) return true;
        }
        return false;
      }
      var hit;
      if (typeof p2 === "string") {
        hit = f2 === p2;
        this.debug("string match", p2, f2, hit);
      } else {
        hit = f2.match(p2);
        this.debug("pattern match", p2, f2, hit);
      }
      if (!hit) return false;
    }
    if (fi === fl && pi === pl) {
      return true;
    } else if (fi === fl) {
      return partial;
    } else if (pi === pl) {
      return fi === fl - 1 && file[fi] === "";
    }
    throw new Error("wtf?");
  };
  function globUnescape(s2) {
    return s2.replace(/\\(.)/g, "$1");
  }
  function regExpEscape(s2) {
    return s2.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  return minimatch_1;
}
var cjs = {};
var hasRequiredCjs$1;
function requireCjs$1() {
  if (hasRequiredCjs$1) return cjs;
  hasRequiredCjs$1 = 1;
  class MergeStrategy {
    /**
     * Merges two keys by overwriting the first with the second.
     * @param {*} value1 The value from the first object key.
     * @param {*} value2 The value from the second object key.
     * @returns {*} The second value.
     */
    static overwrite(value1, value2) {
      return value2;
    }
    /**
     * Merges two keys by replacing the first with the second only if the
     * second is defined.
     * @param {*} value1 The value from the first object key.
     * @param {*} value2 The value from the second object key.
     * @returns {*} The second value if it is defined.
     */
    static replace(value1, value2) {
      if (typeof value2 !== "undefined") {
        return value2;
      }
      return value1;
    }
    /**
     * Merges two properties by assigning properties from the second to the first.
     * @param {*} value1 The value from the first object key.
     * @param {*} value2 The value from the second object key.
     * @returns {*} A new object containing properties from both value1 and
     *      value2.
     */
    static assign(value1, value2) {
      return Object.assign({}, value1, value2);
    }
  }
  class ValidationStrategy {
    /**
     * Validates that a value is an array.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static array(value) {
      if (!Array.isArray(value)) {
        throw new TypeError("Expected an array.");
      }
    }
    /**
     * Validates that a value is a boolean.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static boolean(value) {
      if (typeof value !== "boolean") {
        throw new TypeError("Expected a Boolean.");
      }
    }
    /**
     * Validates that a value is a number.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static number(value) {
      if (typeof value !== "number") {
        throw new TypeError("Expected a number.");
      }
    }
    /**
     * Validates that a value is a object.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static object(value) {
      if (!value || typeof value !== "object") {
        throw new TypeError("Expected an object.");
      }
    }
    /**
     * Validates that a value is a object or null.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static "object?"(value) {
      if (typeof value !== "object") {
        throw new TypeError("Expected an object or null.");
      }
    }
    /**
     * Validates that a value is a string.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static string(value) {
      if (typeof value !== "string") {
        throw new TypeError("Expected a string.");
      }
    }
    /**
     * Validates that a value is a non-empty string.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static "string!"(value) {
      if (typeof value !== "string" || value.length === 0) {
        throw new TypeError("Expected a non-empty string.");
      }
    }
  }
  function validateDefinition(name, definition) {
    let hasSchema = false;
    if (definition.schema) {
      if (typeof definition.schema === "object") {
        hasSchema = true;
      } else {
        throw new TypeError("Schema must be an object.");
      }
    }
    if (typeof definition.merge === "string") {
      if (!(definition.merge in MergeStrategy)) {
        throw new TypeError(
          `Definition for key "${name}" missing valid merge strategy.`
        );
      }
    } else if (!hasSchema && typeof definition.merge !== "function") {
      throw new TypeError(
        `Definition for key "${name}" must have a merge property.`
      );
    }
    if (typeof definition.validate === "string") {
      if (!(definition.validate in ValidationStrategy)) {
        throw new TypeError(
          `Definition for key "${name}" missing valid validation strategy.`
        );
      }
    } else if (!hasSchema && typeof definition.validate !== "function") {
      throw new TypeError(
        `Definition for key "${name}" must have a validate() method.`
      );
    }
  }
  class UnexpectedKeyError extends Error {
    /**
     * Creates a new instance.
     * @param {string} key The key that was unexpected.
     */
    constructor(key) {
      super(`Unexpected key "${key}" found.`);
    }
  }
  class MissingKeyError extends Error {
    /**
     * Creates a new instance.
     * @param {string} key The key that was missing.
     */
    constructor(key) {
      super(`Missing required key "${key}".`);
    }
  }
  class MissingDependentKeysError extends Error {
    /**
     * Creates a new instance.
     * @param {string} key The key that was unexpected.
     * @param {Array<string>} requiredKeys The keys that are required.
     */
    constructor(key, requiredKeys) {
      super(`Key "${key}" requires keys "${requiredKeys.join('", "')}".`);
    }
  }
  class WrapperError extends Error {
    /**
     * Creates a new instance.
     * @param {string} key The object key causing the error.
     * @param {Error} source The source error.
     */
    constructor(key, source) {
      super(`Key "${key}": ${source.message}`, { cause: source });
      for (const sourceKey of Object.keys(source)) {
        if (!(sourceKey in this)) {
          this[sourceKey] = source[sourceKey];
        }
      }
    }
  }
  class ObjectSchema {
    /**
     * Track all definitions in the schema by key.
     * @type {Map<string, PropertyDefinition>}
     */
    #definitions = /* @__PURE__ */ new Map();
    /**
     * Separately track any keys that are required for faster validtion.
     * @type {Map<string, PropertyDefinition>}
     */
    #requiredKeys = /* @__PURE__ */ new Map();
    /**
     * Creates a new instance.
     * @param {ObjectDefinition} definitions The schema definitions.
     */
    constructor(definitions2) {
      if (!definitions2) {
        throw new Error("Schema definitions missing.");
      }
      for (const key of Object.keys(definitions2)) {
        validateDefinition(key, definitions2[key]);
        if (typeof definitions2[key].schema === "object") {
          const schema = new ObjectSchema(definitions2[key].schema);
          definitions2[key] = {
            ...definitions2[key],
            merge(first = {}, second = {}) {
              return schema.merge(first, second);
            },
            validate(value) {
              ValidationStrategy.object(value);
              schema.validate(value);
            }
          };
        }
        if (typeof definitions2[key].merge === "string") {
          definitions2[key] = {
            ...definitions2[key],
            merge: MergeStrategy[
              /** @type {string} */
              definitions2[key].merge
            ]
          };
        }
        if (typeof definitions2[key].validate === "string") {
          definitions2[key] = {
            ...definitions2[key],
            validate: ValidationStrategy[
              /** @type {string} */
              definitions2[key].validate
            ]
          };
        }
        this.#definitions.set(key, definitions2[key]);
        if (definitions2[key].required) {
          this.#requiredKeys.set(key, definitions2[key]);
        }
      }
    }
    /**
     * Determines if a strategy has been registered for the given object key.
     * @param {string} key The object key to find a strategy for.
     * @returns {boolean} True if the key has a strategy registered, false if not.
     */
    hasKey(key) {
      return this.#definitions.has(key);
    }
    /**
     * Merges objects together to create a new object comprised of the keys
     * of the all objects. Keys are merged based on the each key's merge
     * strategy.
     * @param {...Object} objects The objects to merge.
     * @returns {Object} A new object with a mix of all objects' keys.
     * @throws {Error} If any object is invalid.
     */
    merge(...objects) {
      if (objects.length < 2) {
        throw new TypeError("merge() requires at least two arguments.");
      }
      if (objects.some(
        (object) => object === null || typeof object !== "object"
      )) {
        throw new TypeError("All arguments must be objects.");
      }
      return objects.reduce((result, object) => {
        this.validate(object);
        for (const [key, strategy] of this.#definitions) {
          try {
            if (key in result || key in object) {
              const merge = (
                /** @type {Function} */
                strategy.merge
              );
              const value = merge.call(
                this,
                result[key],
                object[key]
              );
              if (value !== void 0) {
                result[key] = value;
              }
            }
          } catch (ex) {
            throw new WrapperError(key, ex);
          }
        }
        return result;
      }, {});
    }
    /**
     * Validates an object's keys based on the validate strategy for each key.
     * @param {Object} object The object to validate.
     * @returns {void}
     * @throws {Error} When the object is invalid.
     */
    validate(object) {
      for (const key of Object.keys(object)) {
        if (!this.hasKey(key)) {
          throw new UnexpectedKeyError(key);
        }
        const definition = this.#definitions.get(key);
        if (Array.isArray(definition.requires)) {
          if (!definition.requires.every((otherKey) => otherKey in object)) {
            throw new MissingDependentKeysError(
              key,
              definition.requires
            );
          }
        }
        try {
          const validate2 = (
            /** @type {Function} */
            definition.validate
          );
          validate2.call(definition, object[key]);
        } catch (ex) {
          throw new WrapperError(key, ex);
        }
      }
      for (const [key] of this.#requiredKeys) {
        if (!(key in object)) {
          throw new MissingKeyError(key);
        }
      }
    }
  }
  cjs.MergeStrategy = MergeStrategy;
  cjs.ObjectSchema = ObjectSchema;
  cjs.ValidationStrategy = ValidationStrategy;
  return cjs;
}
var hasRequiredCjs;
function requireCjs() {
  if (hasRequiredCjs) return cjs$1;
  hasRequiredCjs = 1;
  (function(exports) {
    var posixPath = requirePosix();
    var windowsPath = requireWindows();
    var minimatch = requireMinimatch();
    var createDebug = requireSrc();
    var objectSchema = requireCjs$1();
    function _interopNamespaceDefault(e2) {
      var n2 = /* @__PURE__ */ Object.create(null);
      if (e2) {
        Object.keys(e2).forEach(function(k) {
          if (k !== "default") {
            var d2 = Object.getOwnPropertyDescriptor(e2, k);
            Object.defineProperty(n2, k, d2.get ? d2 : {
              enumerable: true,
              get: function() {
                return e2[k];
              }
            });
          }
        });
      }
      n2.default = e2;
      return Object.freeze(n2);
    }
    var posixPath__namespace = /* @__PURE__ */ _interopNamespaceDefault(posixPath);
    var windowsPath__namespace = /* @__PURE__ */ _interopNamespaceDefault(windowsPath);
    const NOOP_STRATEGY = {
      required: false,
      merge() {
        return void 0;
      },
      validate() {
      }
    };
    const baseSchema = Object.freeze({
      name: {
        required: false,
        merge() {
          return void 0;
        },
        validate(value) {
          if (typeof value !== "string") {
            throw new TypeError("Property must be a string.");
          }
        }
      },
      basePath: NOOP_STRATEGY,
      files: NOOP_STRATEGY,
      ignores: NOOP_STRATEGY
    });
    function assertIsArray(value) {
      if (!Array.isArray(value)) {
        throw new TypeError("Expected value to be an array.");
      }
    }
    function assertIsArrayOfStringsAndFunctions(value) {
      assertIsArray(value);
      if (value.some(
        (item) => typeof item !== "string" && typeof item !== "function"
      )) {
        throw new TypeError(
          "Expected array to only contain strings and functions."
        );
      }
    }
    function assertIsNonEmptyArray(value) {
      if (!Array.isArray(value) || value.length === 0) {
        throw new TypeError("Expected value to be a non-empty array.");
      }
    }
    const filesAndIgnoresSchema = Object.freeze({
      basePath: {
        required: false,
        merge() {
          return void 0;
        },
        validate(value) {
          if (typeof value !== "string") {
            throw new TypeError("Expected value to be a string.");
          }
        }
      },
      files: {
        required: false,
        merge() {
          return void 0;
        },
        validate(value) {
          assertIsNonEmptyArray(value);
          value.forEach((item) => {
            if (Array.isArray(item)) {
              assertIsArrayOfStringsAndFunctions(item);
            } else if (typeof item !== "string" && typeof item !== "function") {
              throw new TypeError(
                "Items must be a string, a function, or an array of strings and functions."
              );
            }
          });
        }
      },
      ignores: {
        required: false,
        merge() {
          return void 0;
        },
        validate: assertIsArrayOfStringsAndFunctions
      }
    });
    const Minimatch = minimatch.Minimatch;
    const debug = createDebug("@eslint/config-array");
    const minimatchCache = /* @__PURE__ */ new Map();
    const negatedMinimatchCache = /* @__PURE__ */ new Map();
    const MINIMATCH_OPTIONS = {
      // matchBase: true,
      dot: true,
      allowWindowsEscape: true
    };
    const CONFIG_TYPES = /* @__PURE__ */ new Set(["array", "function"]);
    const META_FIELDS = /* @__PURE__ */ new Set(["name", "basePath"]);
    const FILES_AND_IGNORES_SCHEMA = new objectSchema.ObjectSchema(filesAndIgnoresSchema);
    const CONFIG_WITH_STATUS_EXTERNAL = Object.freeze({ status: "external" });
    const CONFIG_WITH_STATUS_IGNORED = Object.freeze({ status: "ignored" });
    const CONFIG_WITH_STATUS_UNCONFIGURED = Object.freeze({
      status: "unconfigured"
    });
    const EXTERNAL_PATH_REGEX = /^\.\.(?:\/|$)/u;
    class ConfigError extends Error {
      /**
       * Creates a new instance.
       * @param {string} name The config object name causing the error.
       * @param {number} index The index of the config object in the array.
       * @param {Object} options The options for the error.
       * @param {Error} [options.cause] The error that caused this error.
       * @param {string} [options.message] The message to use for the error.
       */
      constructor(name, index, { cause, message }) {
        const finalMessage = message || cause.message;
        super(`Config ${name}: ${finalMessage}`, { cause });
        if (cause) {
          for (const key of Object.keys(cause)) {
            if (!(key in this)) {
              this[key] = cause[key];
            }
          }
        }
        this.name = "ConfigError";
        this.index = index;
      }
    }
    function getConfigName(config2) {
      if (config2 && typeof config2.name === "string" && config2.name) {
        return `"${config2.name}"`;
      }
      return "(unnamed)";
    }
    function rethrowConfigError(config2, index, error) {
      const configName = getConfigName(config2);
      throw new ConfigError(configName, index, { cause: error });
    }
    function isString2(value) {
      return typeof value === "string";
    }
    function assertValidBaseConfig(config2, index) {
      if (config2 === null) {
        throw new ConfigError(getConfigName(config2), index, {
          message: "Unexpected null config."
        });
      }
      if (config2 === void 0) {
        throw new ConfigError(getConfigName(config2), index, {
          message: "Unexpected undefined config."
        });
      }
      if (typeof config2 !== "object") {
        throw new ConfigError(getConfigName(config2), index, {
          message: "Unexpected non-object config."
        });
      }
      const validateConfig = {};
      if ("basePath" in config2) {
        validateConfig.basePath = config2.basePath;
      }
      if ("files" in config2) {
        validateConfig.files = config2.files;
      }
      if ("ignores" in config2) {
        validateConfig.ignores = config2.ignores;
      }
      try {
        FILES_AND_IGNORES_SCHEMA.validate(validateConfig);
      } catch (validationError) {
        rethrowConfigError(config2, index, validationError);
      }
    }
    function doMatch(filepath, pattern2, options = {}) {
      let cache2 = minimatchCache;
      if (options.flipNegate) {
        cache2 = negatedMinimatchCache;
      }
      let matcher = cache2.get(pattern2);
      if (!matcher) {
        matcher = new Minimatch(
          pattern2,
          Object.assign({}, MINIMATCH_OPTIONS, options)
        );
        cache2.set(pattern2, matcher);
      }
      return matcher.match(filepath);
    }
    function normalizePattern(pattern2) {
      if (isString2(pattern2)) {
        if (pattern2.startsWith("./")) {
          return pattern2.slice(2);
        }
        if (pattern2.startsWith("!./")) {
          return `!${pattern2.slice(3)}`;
        }
      }
      return pattern2;
    }
    function needsPatternNormalization(pattern2) {
      return isString2(pattern2) && (pattern2.startsWith("./") || pattern2.startsWith("!./"));
    }
    function normalizeConfigPatterns(config2, namespacedBasePath, path) {
      if (!config2) {
        return config2;
      }
      const hasBasePath = typeof config2.basePath === "string";
      let needsNormalization = false;
      if (hasBasePath) {
        needsNormalization = true;
      }
      if (!needsNormalization && Array.isArray(config2.files)) {
        needsNormalization = config2.files.some((pattern2) => {
          if (Array.isArray(pattern2)) {
            return pattern2.some(needsPatternNormalization);
          }
          return needsPatternNormalization(pattern2);
        });
      }
      if (!needsNormalization && Array.isArray(config2.ignores)) {
        needsNormalization = config2.ignores.some(needsPatternNormalization);
      }
      if (!needsNormalization) {
        return config2;
      }
      const newConfig = { ...config2 };
      if (hasBasePath) {
        if (path.isAbsolute(config2.basePath)) {
          newConfig.basePath = path.toNamespacedPath(config2.basePath);
        } else {
          newConfig.basePath = path.resolve(
            namespacedBasePath,
            config2.basePath
          );
        }
      }
      if (Array.isArray(newConfig.files)) {
        newConfig.files = newConfig.files.map((pattern2) => {
          if (Array.isArray(pattern2)) {
            return pattern2.map(normalizePattern);
          }
          return normalizePattern(pattern2);
        });
      }
      if (Array.isArray(newConfig.ignores)) {
        newConfig.ignores = newConfig.ignores.map(normalizePattern);
      }
      return newConfig;
    }
    async function normalize2(items2, context, extraConfigTypes, namespacedBasePath, path) {
      const allowFunctions = extraConfigTypes.includes("function");
      const allowArrays = extraConfigTypes.includes("array");
      async function* flatTraverse(array) {
        for (let item of array) {
          if (typeof item === "function") {
            if (!allowFunctions) {
              throw new TypeError("Unexpected function.");
            }
            item = item(context);
            if (item.then) {
              item = await item;
            }
          }
          if (Array.isArray(item)) {
            if (!allowArrays) {
              throw new TypeError("Unexpected array.");
            }
            yield* flatTraverse(item);
          } else if (typeof item === "function") {
            throw new TypeError(
              "A config function can only return an object or array."
            );
          } else {
            yield item;
          }
        }
      }
      const asyncIterable = await flatTraverse(items2);
      const configs = [];
      for await (const config2 of asyncIterable) {
        configs.push(normalizeConfigPatterns(config2, namespacedBasePath, path));
      }
      return configs;
    }
    function normalizeSync(items2, context, extraConfigTypes, namespacedBasePath, path) {
      const allowFunctions = extraConfigTypes.includes("function");
      const allowArrays = extraConfigTypes.includes("array");
      function* flatTraverse(array) {
        for (let item of array) {
          if (typeof item === "function") {
            if (!allowFunctions) {
              throw new TypeError("Unexpected function.");
            }
            item = item(context);
            if (item.then) {
              throw new TypeError(
                "Async config functions are not supported."
              );
            }
          }
          if (Array.isArray(item)) {
            if (!allowArrays) {
              throw new TypeError("Unexpected array.");
            }
            yield* flatTraverse(item);
          } else if (typeof item === "function") {
            throw new TypeError(
              "A config function can only return an object or array."
            );
          } else {
            yield item;
          }
        }
      }
      const configs = [];
      for (const config2 of flatTraverse(items2)) {
        configs.push(normalizeConfigPatterns(config2, namespacedBasePath, path));
      }
      return configs;
    }
    function toRelativePath(fileOrDirPath, namespacedBasePath, path) {
      const fullPath = path.resolve(namespacedBasePath, fileOrDirPath);
      const namespacedFullPath = path.toNamespacedPath(fullPath);
      const relativePath = path.relative(namespacedBasePath, namespacedFullPath);
      return relativePath.replaceAll(path.SEPARATOR, "/");
    }
    function shouldIgnorePath(configs, filePath, relativeFilePath, { basePath, path } = {}) {
      let shouldIgnore = false;
      for (const config2 of configs) {
        let relativeFilePathToCheck = relativeFilePath;
        if (config2.basePath) {
          relativeFilePathToCheck = toRelativePath(
            path.resolve(basePath, relativeFilePath),
            config2.basePath,
            path
          );
          if (relativeFilePathToCheck === "" || EXTERNAL_PATH_REGEX.test(relativeFilePathToCheck)) {
            continue;
          }
          if (relativeFilePath.endsWith("/")) {
            relativeFilePathToCheck += "/";
          }
        }
        shouldIgnore = config2.ignores.reduce((ignored, matcher) => {
          if (!ignored) {
            if (typeof matcher === "function") {
              return matcher(filePath);
            }
            if (!matcher.startsWith("!")) {
              return doMatch(relativeFilePathToCheck, matcher);
            }
            return false;
          }
          if (typeof matcher === "string" && matcher.startsWith("!")) {
            return !doMatch(relativeFilePathToCheck, matcher, {
              flipNegate: true
            });
          }
          return ignored;
        }, shouldIgnore);
      }
      return shouldIgnore;
    }
    function pathMatches(filePath, relativeFilePath, config2) {
      function match(pattern2) {
        if (isString2(pattern2)) {
          return doMatch(relativeFilePath, pattern2);
        }
        if (typeof pattern2 === "function") {
          return pattern2(filePath);
        }
        throw new TypeError(`Unexpected matcher type ${pattern2}.`);
      }
      let filePathMatchesPattern = config2.files.some((pattern2) => {
        if (Array.isArray(pattern2)) {
          return pattern2.every(match);
        }
        return match(pattern2);
      });
      if (filePathMatchesPattern && config2.ignores) {
        filePathMatchesPattern = !shouldIgnorePath(
          [{ ignores: config2.ignores }],
          filePath,
          relativeFilePath
        );
      }
      return filePathMatchesPattern;
    }
    function assertNormalized(configArray) {
      if (!configArray.isNormalized()) {
        throw new Error(
          "ConfigArray must be normalized to perform this operation."
        );
      }
    }
    function assertExtraConfigTypes(extraConfigTypes) {
      if (extraConfigTypes.length > 2) {
        throw new TypeError(
          "configTypes must be an array with at most two items."
        );
      }
      for (const configType of extraConfigTypes) {
        if (!CONFIG_TYPES.has(configType)) {
          throw new TypeError(
            `Unexpected config type "${configType}" found. Expected one of: "object", "array", "function".`
          );
        }
      }
    }
    function getPathImpl(fileOrDirPath) {
      if (fileOrDirPath.startsWith("/")) {
        return posixPath__namespace;
      }
      if (/^(?:[A-Za-z]:[/\\]|[/\\]{2})/u.test(fileOrDirPath)) {
        return windowsPath__namespace;
      }
      throw new Error(
        `Expected an absolute path but received "${fileOrDirPath}"`
      );
    }
    const ConfigArraySymbol = {
      isNormalized: Symbol("isNormalized"),
      configCache: Symbol("configCache"),
      schema: Symbol("schema"),
      finalizeConfig: Symbol("finalizeConfig"),
      preprocessConfig: Symbol("preprocessConfig")
    };
    const dataCache = /* @__PURE__ */ new WeakMap();
    class ConfigArray extends Array {
      /**
       * The namespaced path of the config file directory.
       * @type {string}
       */
      #namespacedBasePath;
      /**
       * Path-handling implementations.
       * @type {PathImpl}
       */
      #path;
      /**
       * Creates a new instance of ConfigArray.
       * @param {Iterable|Function|Object} configs An iterable yielding config
       *      objects, or a config function, or a config object.
       * @param {Object} options The options for the ConfigArray.
       * @param {string} [options.basePath="/"] The absolute path of the config file directory.
       * 		Defaults to `"/"`.
       * @param {boolean} [options.normalized=false] Flag indicating if the
       *      configs have already been normalized.
       * @param {Object} [options.schema] The additional schema
       *      definitions to use for the ConfigArray schema.
       * @param {Array<string>} [options.extraConfigTypes] List of config types supported.
       * @throws {TypeError} When the `basePath` is not a non-empty string,
       */
      constructor(configs, {
        basePath = "/",
        normalized = false,
        schema: customSchema,
        extraConfigTypes = []
      } = {}) {
        super();
        this[ConfigArraySymbol.isNormalized] = normalized;
        this[ConfigArraySymbol.schema] = new objectSchema.ObjectSchema(
          Object.assign({}, customSchema, baseSchema)
        );
        if (!isString2(basePath) || !basePath) {
          throw new TypeError("basePath must be a non-empty string");
        }
        this.basePath = basePath;
        assertExtraConfigTypes(extraConfigTypes);
        this.extraConfigTypes = [...extraConfigTypes];
        Object.freeze(this.extraConfigTypes);
        this[ConfigArraySymbol.configCache] = /* @__PURE__ */ new Map();
        dataCache.set(this, {
          explicitMatches: /* @__PURE__ */ new Map(),
          directoryMatches: /* @__PURE__ */ new Map(),
          files: void 0,
          ignores: void 0
        });
        if (Array.isArray(configs)) {
          this.push(...configs);
        } else {
          this.push(configs);
        }
        this.#path = getPathImpl(basePath);
        this.#namespacedBasePath = this.#path.toNamespacedPath(basePath);
      }
      /**
       * Prevent normal array methods from creating a new `ConfigArray` instance.
       * This is to ensure that methods such as `slice()` won't try to create a
       * new instance of `ConfigArray` behind the scenes as doing so may throw
       * an error due to the different constructor signature.
       * @type {ArrayConstructor} The `Array` constructor.
       */
      static get [Symbol.species]() {
        return Array;
      }
      /**
       * Returns the `files` globs from every config object in the array.
       * This can be used to determine which files will be matched by a
       * config array or to use as a glob pattern when no patterns are provided
       * for a command line interface.
       * @returns {Array<string|Function>} An array of matchers.
       */
      get files() {
        assertNormalized(this);
        const cache2 = dataCache.get(this);
        if (cache2.files) {
          return cache2.files;
        }
        const result = [];
        for (const config2 of this) {
          if (config2.files) {
            config2.files.forEach((filePattern) => {
              result.push(filePattern);
            });
          }
        }
        cache2.files = result;
        dataCache.set(this, cache2);
        return result;
      }
      /**
       * Returns ignore matchers that should always be ignored regardless of
       * the matching `files` fields in any configs. This is necessary to mimic
       * the behavior of things like .gitignore and .eslintignore, allowing a
       * globbing operation to be faster.
       * @returns {Object[]} An array of config objects representing global ignores.
       */
      get ignores() {
        assertNormalized(this);
        const cache2 = dataCache.get(this);
        if (cache2.ignores) {
          return cache2.ignores;
        }
        const result = [];
        for (const config2 of this) {
          if (config2.ignores && Object.keys(config2).filter((key) => !META_FIELDS.has(key)).length === 1) {
            result.push(config2);
          }
        }
        cache2.ignores = result;
        dataCache.set(this, cache2);
        return result;
      }
      /**
       * Indicates if the config array has been normalized.
       * @returns {boolean} True if the config array is normalized, false if not.
       */
      isNormalized() {
        return this[ConfigArraySymbol.isNormalized];
      }
      /**
       * Normalizes a config array by flattening embedded arrays and executing
       * config functions.
       * @param {Object} [context] The context object for config functions.
       * @returns {Promise<ConfigArray>} The current ConfigArray instance.
       */
      async normalize(context = {}) {
        if (!this.isNormalized()) {
          const normalizedConfigs = await normalize2(
            this,
            context,
            this.extraConfigTypes,
            this.#namespacedBasePath,
            this.#path
          );
          this.length = 0;
          this.push(
            ...normalizedConfigs.map(
              this[ConfigArraySymbol.preprocessConfig].bind(this)
            )
          );
          this.forEach(assertValidBaseConfig);
          this[ConfigArraySymbol.isNormalized] = true;
          Object.freeze(this);
        }
        return this;
      }
      /**
       * Normalizes a config array by flattening embedded arrays and executing
       * config functions.
       * @param {Object} [context] The context object for config functions.
       * @returns {ConfigArray} The current ConfigArray instance.
       */
      normalizeSync(context = {}) {
        if (!this.isNormalized()) {
          const normalizedConfigs = normalizeSync(
            this,
            context,
            this.extraConfigTypes,
            this.#namespacedBasePath,
            this.#path
          );
          this.length = 0;
          this.push(
            ...normalizedConfigs.map(
              this[ConfigArraySymbol.preprocessConfig].bind(this)
            )
          );
          this.forEach(assertValidBaseConfig);
          this[ConfigArraySymbol.isNormalized] = true;
          Object.freeze(this);
        }
        return this;
      }
      /* eslint-disable class-methods-use-this -- Desired as instance methods */
      /**
       * Finalizes the state of a config before being cached and returned by
       * `getConfig()`. Does nothing by default but is provided to be
       * overridden by subclasses as necessary.
       * @param {Object} config The config to finalize.
       * @returns {Object} The finalized config.
       */
      [ConfigArraySymbol.finalizeConfig](config2) {
        return config2;
      }
      /**
       * Preprocesses a config during the normalization process. This is the
       * method to override if you want to convert an array item before it is
       * validated for the first time. For example, if you want to replace a
       * string with an object, this is the method to override.
       * @param {Object} config The config to preprocess.
       * @returns {Object} The config to use in place of the argument.
       */
      [ConfigArraySymbol.preprocessConfig](config2) {
        return config2;
      }
      /* eslint-enable class-methods-use-this -- Desired as instance methods */
      /**
       * Returns the config object for a given file path and a status that can be used to determine why a file has no config.
       * @param {string} filePath The path of a file to get a config for.
       * @returns {{ config?: Object, status: "ignored"|"external"|"unconfigured"|"matched" }}
       * An object with an optional property `config` and property `status`.
       * `config` is the config object for the specified file as returned by {@linkcode ConfigArray.getConfig},
       * `status` a is one of the constants returned by {@linkcode ConfigArray.getConfigStatus}.
       */
      getConfigWithStatus(filePath) {
        assertNormalized(this);
        const cache2 = this[ConfigArraySymbol.configCache];
        if (cache2.has(filePath)) {
          return cache2.get(filePath);
        }
        const relativeToBaseFilePath = toRelativePath(
          filePath,
          this.#namespacedBasePath,
          this.#path
        );
        if (EXTERNAL_PATH_REGEX.test(relativeToBaseFilePath)) {
          debug(`No config for file ${filePath} outside of base path`);
          cache2.set(filePath, CONFIG_WITH_STATUS_EXTERNAL);
          return CONFIG_WITH_STATUS_EXTERNAL;
        }
        if (this.isDirectoryIgnored(this.#path.dirname(filePath))) {
          debug(`Ignoring ${filePath} based on directory pattern`);
          cache2.set(filePath, CONFIG_WITH_STATUS_IGNORED);
          return CONFIG_WITH_STATUS_IGNORED;
        }
        if (shouldIgnorePath(this.ignores, filePath, relativeToBaseFilePath, {
          basePath: this.#namespacedBasePath,
          path: this.#path
        })) {
          debug(`Ignoring ${filePath} based on file pattern`);
          cache2.set(filePath, CONFIG_WITH_STATUS_IGNORED);
          return CONFIG_WITH_STATUS_IGNORED;
        }
        const matchingConfigIndices = [];
        let matchFound = false;
        const universalPattern = /^\*$|^!|\/\*{1,2}$/u;
        this.forEach((config2, index) => {
          const relativeFilePath = config2.basePath ? toRelativePath(
            this.#path.resolve(this.#namespacedBasePath, filePath),
            config2.basePath,
            this.#path
          ) : relativeToBaseFilePath;
          if (config2.basePath && EXTERNAL_PATH_REGEX.test(relativeFilePath)) {
            debug(
              `Skipped config found for ${filePath} (based on config's base path: ${config2.basePath}`
            );
            return;
          }
          if (!config2.files) {
            if (!config2.ignores) {
              debug(`Universal config found for ${filePath}`);
              matchingConfigIndices.push(index);
              return;
            }
            if (Object.keys(config2).filter((key) => !META_FIELDS.has(key)).length === 1) {
              debug(
                `Skipped config found for ${filePath} (global ignores)`
              );
              return;
            }
            if (shouldIgnorePath(
              [{ ignores: config2.ignores }],
              filePath,
              relativeFilePath
            )) {
              debug(
                `Skipped config found for ${filePath} (based on ignores: ${config2.ignores})`
              );
              return;
            }
            debug(
              `Matching config found for ${filePath} (based on ignores: ${config2.ignores})`
            );
            matchingConfigIndices.push(index);
            return;
          }
          const nonUniversalFiles = [];
          const universalFiles = config2.files.filter((element) => {
            if (Array.isArray(element)) {
              if (element.every((pattern2) => universalPattern.test(pattern2))) {
                return true;
              }
              nonUniversalFiles.push(element);
              return false;
            }
            if (universalPattern.test(element)) {
              return true;
            }
            nonUniversalFiles.push(element);
            return false;
          });
          if (universalFiles.length) {
            debug("Universal files patterns found. Checking carefully.");
            if (nonUniversalFiles.length && pathMatches(filePath, relativeFilePath, {
              files: nonUniversalFiles,
              ignores: config2.ignores
            })) {
              debug(`Matching config found for ${filePath}`);
              matchingConfigIndices.push(index);
              matchFound = true;
              return;
            }
            if (universalFiles.length && pathMatches(filePath, relativeFilePath, {
              files: universalFiles,
              ignores: config2.ignores
            })) {
              debug(`Matching config found for ${filePath}`);
              matchingConfigIndices.push(index);
              return;
            }
            return;
          }
          if (pathMatches(filePath, relativeFilePath, config2)) {
            debug(`Matching config found for ${filePath}`);
            matchingConfigIndices.push(index);
            matchFound = true;
          }
        });
        if (!matchFound) {
          debug(`No matching configs found for ${filePath}`);
          cache2.set(filePath, CONFIG_WITH_STATUS_UNCONFIGURED);
          return CONFIG_WITH_STATUS_UNCONFIGURED;
        }
        const indicesKey = matchingConfigIndices.toString();
        let configWithStatus = cache2.get(indicesKey);
        if (configWithStatus) {
          cache2.set(filePath, configWithStatus);
          return configWithStatus;
        }
        let finalConfig = matchingConfigIndices.reduce((result, index) => {
          try {
            return this[ConfigArraySymbol.schema].merge(
              result,
              this[index]
            );
          } catch (validationError) {
            rethrowConfigError(this[index], index, validationError);
          }
        }, {});
        finalConfig = this[ConfigArraySymbol.finalizeConfig](finalConfig);
        configWithStatus = Object.freeze({
          config: finalConfig,
          status: "matched"
        });
        cache2.set(filePath, configWithStatus);
        cache2.set(indicesKey, configWithStatus);
        return configWithStatus;
      }
      /**
       * Returns the config object for a given file path.
       * @param {string} filePath The path of a file to get a config for.
       * @returns {Object|undefined} The config object for this file or `undefined`.
       */
      getConfig(filePath) {
        return this.getConfigWithStatus(filePath).config;
      }
      /**
       * Determines whether a file has a config or why it doesn't.
       * @param {string} filePath The path of the file to check.
       * @returns {"ignored"|"external"|"unconfigured"|"matched"} One of the following values:
       * * `"ignored"`: the file is ignored
       * * `"external"`: the file is outside the base path
       * * `"unconfigured"`: the file is not matched by any config
       * * `"matched"`: the file has a matching config
       */
      getConfigStatus(filePath) {
        return this.getConfigWithStatus(filePath).status;
      }
      /**
       * Determines if the given filepath is ignored based on the configs.
       * @param {string} filePath The path of a file to check.
       * @returns {boolean} True if the path is ignored, false if not.
       * @deprecated Use `isFileIgnored` instead.
       */
      isIgnored(filePath) {
        return this.isFileIgnored(filePath);
      }
      /**
       * Determines if the given filepath is ignored based on the configs.
       * @param {string} filePath The path of a file to check.
       * @returns {boolean} True if the path is ignored, false if not.
       */
      isFileIgnored(filePath) {
        return this.getConfigStatus(filePath) === "ignored";
      }
      /**
       * Determines if the given directory is ignored based on the configs.
       * This checks only default `ignores` that don't have `files` in the
       * same config. A pattern such as `/foo` be considered to ignore the directory
       * while a pattern such as `/foo/**` is not considered to ignore the
       * directory because it is matching files.
       * @param {string} directoryPath The path of a directory to check.
       * @returns {boolean} True if the directory is ignored, false if not. Will
       * 		return true for any directory that is not inside of `basePath`.
       * @throws {Error} When the `ConfigArray` is not normalized.
       */
      isDirectoryIgnored(directoryPath) {
        assertNormalized(this);
        const relativeDirectoryPath = toRelativePath(
          directoryPath,
          this.#namespacedBasePath,
          this.#path
        );
        if (relativeDirectoryPath === "") {
          return false;
        }
        if (EXTERNAL_PATH_REGEX.test(relativeDirectoryPath)) {
          return true;
        }
        const cache2 = dataCache.get(this).directoryMatches;
        if (cache2.has(relativeDirectoryPath)) {
          return cache2.get(relativeDirectoryPath);
        }
        const directoryParts = relativeDirectoryPath.split("/");
        let relativeDirectoryToCheck = "";
        let result;
        do {
          relativeDirectoryToCheck += `${directoryParts.shift()}/`;
          result = shouldIgnorePath(
            this.ignores,
            this.#path.join(this.basePath, relativeDirectoryToCheck),
            relativeDirectoryToCheck,
            {
              basePath: this.#namespacedBasePath,
              path: this.#path
            }
          );
          cache2.set(relativeDirectoryToCheck, result);
        } while (!result && directoryParts.length);
        cache2.set(relativeDirectoryPath, result);
        return result;
      }
    }
    Object.defineProperty(exports, "ObjectSchema", {
      enumerable: true,
      get: function() {
        return objectSchema.ObjectSchema;
      }
    });
    exports.ConfigArray = ConfigArray;
    exports.ConfigArraySymbol = ConfigArraySymbol;
  })(cjs$1);
  return cjs$1;
}
var id = "http://json-schema.org/draft-04/schema#";
var $schema = "http://json-schema.org/draft-04/schema#";
var description = "Core schema meta-schema";
var definitions = {
  schemaArray: {
    type: "array",
    minItems: 1,
    items: {
      $ref: "#"
    }
  },
  positiveInteger: {
    type: "integer",
    minimum: 0
  },
  positiveIntegerDefault0: {
    allOf: [
      {
        $ref: "#/definitions/positiveInteger"
      },
      {
        "default": 0
      }
    ]
  },
  simpleTypes: {
    "enum": [
      "array",
      "boolean",
      "integer",
      "null",
      "number",
      "object",
      "string"
    ]
  },
  stringArray: {
    type: "array",
    items: {
      type: "string"
    },
    minItems: 1,
    uniqueItems: true
  }
};
var type = "object";
var properties = {
  id: {
    type: "string"
  },
  $schema: {
    type: "string"
  },
  title: {
    type: "string"
  },
  description: {
    type: "string"
  },
  "default": {},
  multipleOf: {
    type: "number",
    minimum: 0,
    exclusiveMinimum: true
  },
  maximum: {
    type: "number"
  },
  exclusiveMaximum: {
    type: "boolean",
    "default": false
  },
  minimum: {
    type: "number"
  },
  exclusiveMinimum: {
    type: "boolean",
    "default": false
  },
  maxLength: {
    $ref: "#/definitions/positiveInteger"
  },
  minLength: {
    $ref: "#/definitions/positiveIntegerDefault0"
  },
  pattern: {
    type: "string",
    format: "regex"
  },
  additionalItems: {
    anyOf: [
      {
        type: "boolean"
      },
      {
        $ref: "#"
      }
    ],
    "default": {}
  },
  items: {
    anyOf: [
      {
        $ref: "#"
      },
      {
        $ref: "#/definitions/schemaArray"
      }
    ],
    "default": {}
  },
  maxItems: {
    $ref: "#/definitions/positiveInteger"
  },
  minItems: {
    $ref: "#/definitions/positiveIntegerDefault0"
  },
  uniqueItems: {
    type: "boolean",
    "default": false
  },
  maxProperties: {
    $ref: "#/definitions/positiveInteger"
  },
  minProperties: {
    $ref: "#/definitions/positiveIntegerDefault0"
  },
  required: {
    $ref: "#/definitions/stringArray"
  },
  additionalProperties: {
    anyOf: [
      {
        type: "boolean"
      },
      {
        $ref: "#"
      }
    ],
    "default": {}
  },
  definitions: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  properties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  patternProperties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  dependencies: {
    type: "object",
    additionalProperties: {
      anyOf: [
        {
          $ref: "#"
        },
        {
          $ref: "#/definitions/stringArray"
        }
      ]
    }
  },
  "enum": {
    type: "array",
    minItems: 1,
    uniqueItems: true
  },
  type: {
    anyOf: [
      {
        $ref: "#/definitions/simpleTypes"
      },
      {
        type: "array",
        items: {
          $ref: "#/definitions/simpleTypes"
        },
        minItems: 1,
        uniqueItems: true
      }
    ]
  },
  format: {
    type: "string"
  },
  allOf: {
    $ref: "#/definitions/schemaArray"
  },
  anyOf: {
    $ref: "#/definitions/schemaArray"
  },
  oneOf: {
    $ref: "#/definitions/schemaArray"
  },
  not: {
    $ref: "#"
  }
};
var dependencies = {
  exclusiveMaximum: [
    "maximum"
  ],
  exclusiveMinimum: [
    "minimum"
  ]
};
var require$$1 = {
  id,
  $schema,
  description,
  definitions,
  type,
  properties,
  dependencies,
  "default": {}
};
var ajv;
var hasRequiredAjv;
function requireAjv() {
  if (hasRequiredAjv) return ajv;
  hasRequiredAjv = 1;
  const Ajv = requireAjv$1(), metaSchema = require$$1;
  ajv = (additionalOptions = {}) => {
    const ajv2 = new Ajv({
      meta: false,
      useDefaults: true,
      validateSchema: false,
      missingRefs: "ignore",
      verbose: true,
      schemaId: "auto",
      ...additionalOptions
    });
    ajv2.addMetaSchema(metaSchema);
    ajv2._opts.defaultMeta = metaSchema.id;
    return ajv2;
  };
  return ajv;
}
var rules$2 = {
  "generator-star": [
    "generator-star-spacing"
  ],
  "global-strict": [
    "strict"
  ],
  "no-arrow-condition": [
    "no-confusing-arrow",
    "no-constant-condition"
  ],
  "no-comma-dangle": [
    "comma-dangle"
  ],
  "no-empty-class": [
    "no-empty-character-class"
  ],
  "no-empty-label": [
    "no-labels"
  ],
  "no-extra-strict": [
    "strict"
  ],
  "no-reserved-keys": [
    "quote-props"
  ],
  "no-space-before-semi": [
    "semi-spacing"
  ],
  "no-wrap-func": [
    "no-extra-parens"
  ],
  "space-after-function-name": [
    "space-before-function-paren"
  ],
  "space-after-keywords": [
    "keyword-spacing"
  ],
  "space-before-function-parentheses": [
    "space-before-function-paren"
  ],
  "space-before-keywords": [
    "keyword-spacing"
  ],
  "space-in-brackets": [
    "object-curly-spacing",
    "array-bracket-spacing",
    "computed-property-spacing"
  ],
  "space-return-throw-case": [
    "keyword-spacing"
  ],
  "space-unary-word-ops": [
    "space-unary-ops"
  ],
  "spaced-line-comment": [
    "spaced-comment"
  ]
};
var require$$3 = {
  rules: rules$2
};
var config;
var hasRequiredConfig;
function requireConfig() {
  if (hasRequiredConfig) return config;
  hasRequiredConfig = 1;
  const { deepMergeArrays } = requireDeepMergeArrays();
  const { flatConfigSchema, hasMethod } = requireFlatConfigSchema();
  const { ObjectSchema } = requireCjs();
  const ajvImport = requireAjv();
  const ajv2 = ajvImport();
  const ruleReplacements = require$$3;
  const noOptionsSchema = Object.freeze({
    type: "array",
    minItems: 0,
    maxItems: 0
  });
  const severities = /* @__PURE__ */ new Map([
    [0, 0],
    [1, 1],
    [2, 2],
    ["off", 0],
    ["warn", 1],
    ["error", 2]
  ]);
  const validators = /* @__PURE__ */ new WeakMap();
  function throwRuleNotFoundError({ pluginName, ruleName }, config2) {
    const ruleId = pluginName === "@" ? ruleName : `${pluginName}/${ruleName}`;
    const errorMessageHeader = `Key "rules": Key "${ruleId}"`;
    let errorMessage = `${errorMessageHeader}: Could not find plugin "${pluginName}" in configuration.`;
    const missingPluginErrorMessage = errorMessage;
    if (config2.plugins && config2.plugins[pluginName]) {
      const replacementRuleName = ruleReplacements.rules[ruleName];
      if (pluginName === "@" && replacementRuleName) {
        errorMessage = `${errorMessageHeader}: Rule "${ruleName}" was removed and replaced by "${replacementRuleName}".`;
      } else {
        errorMessage = `${errorMessageHeader}: Could not find "${ruleName}" in plugin "${pluginName}".`;
        for (const [otherPluginName, otherPlugin] of Object.entries(
          config2.plugins
        )) {
          if (otherPlugin.rules && otherPlugin.rules[ruleName]) {
            errorMessage += ` Did you mean "${otherPluginName}/${ruleName}"?`;
            break;
          }
        }
      }
    }
    const error = new TypeError(errorMessage);
    if (errorMessage === missingPluginErrorMessage) {
      error.messageTemplate = "config-plugin-missing";
      error.messageData = { pluginName, ruleId };
    }
    throw error;
  }
  class InvalidRuleOptionsSchemaError extends Error {
    /**
     * Creates a new instance.
     * @param {string} ruleId Id of the rule that has an invalid `meta.schema`.
     * @param {Error} processingError Error caught while processing the `meta.schema`.
     */
    constructor(ruleId, processingError) {
      super(
        `Error while processing options validation schema of rule '${ruleId}': ${processingError.message}`,
        { cause: processingError }
      );
      this.code = "ESLINT_INVALID_RULE_OPTIONS_SCHEMA";
    }
  }
  function parseRuleId(ruleId) {
    let pluginName, ruleName;
    if (ruleId.includes("/")) {
      if (ruleId.startsWith("@")) {
        pluginName = ruleId.slice(0, ruleId.lastIndexOf("/"));
      } else {
        pluginName = ruleId.slice(0, ruleId.indexOf("/"));
      }
      ruleName = ruleId.slice(pluginName.length + 1);
    } else {
      pluginName = "@";
      ruleName = ruleId;
    }
    return {
      pluginName,
      ruleName
    };
  }
  function getRuleFromConfig(ruleId, config2) {
    const { pluginName, ruleName } = parseRuleId(ruleId);
    return config2.plugins?.[pluginName]?.rules?.[ruleName];
  }
  function getRuleOptionsSchema(rule) {
    if (!rule.meta) {
      return { ...noOptionsSchema };
    }
    const schema = rule.meta.schema;
    if (typeof schema === "undefined") {
      return { ...noOptionsSchema };
    }
    if (schema === false) {
      return null;
    }
    if (typeof schema !== "object" || schema === null) {
      throw new TypeError("Rule's `meta.schema` must be an array or object");
    }
    if (Array.isArray(schema)) {
      if (schema.length) {
        return {
          type: "array",
          items: schema,
          minItems: 0,
          maxItems: schema.length
        };
      }
      return { ...noOptionsSchema };
    }
    return schema;
  }
  function splitPluginIdentifier(identifier) {
    const parts = identifier.split("/");
    return {
      objectName: parts.pop(),
      pluginName: parts.join("/")
    };
  }
  function getObjectId(object) {
    let name = object.name;
    if (!name) {
      if (!object.meta) {
        return null;
      }
      name = object.meta.name;
      if (!name) {
        return null;
      }
    }
    let version2 = object.version;
    if (!version2) {
      version2 = object.meta && object.meta.version;
    }
    if (version2) {
      return `${name}@${version2}`;
    }
    return name;
  }
  function assertNotFunction(value, key, objectKey) {
    if (typeof value === "function") {
      const error = new TypeError(
        `Cannot serialize key "${key}" in "${objectKey}": Function values are not supported.`
      );
      error.messageTemplate = "config-serialize-function";
      error.messageData = { key, objectKey };
      throw error;
    }
  }
  function languageOptionsToJSON(languageOptions, objectKey = "languageOptions") {
    if (typeof languageOptions.toJSON === "function") {
      const result2 = languageOptions.toJSON();
      assertNotFunction(result2, "toJSON", objectKey);
      return result2;
    }
    const result = {};
    for (const [key, value] of Object.entries(languageOptions)) {
      if (value) {
        if (typeof value === "object") {
          const name = getObjectId(value);
          if (typeof value.toJSON === "function") {
            result[key] = value.toJSON();
            assertNotFunction(result[key], key, objectKey);
          } else if (name && hasMethod(value)) {
            result[key] = name;
          } else {
            result[key] = languageOptionsToJSON(value, key);
          }
          continue;
        }
        assertNotFunction(value, key, objectKey);
      }
      result[key] = value;
    }
    return result;
  }
  function getOrCreateValidator(rule, ruleId) {
    if (!validators.has(rule)) {
      try {
        const schema = getRuleOptionsSchema(rule);
        if (schema) {
          validators.set(rule, ajv2.compile(schema));
        }
      } catch (err) {
        throw new InvalidRuleOptionsSchemaError(ruleId, err);
      }
    }
    return validators.get(rule);
  }
  class Config {
    /**
     * The name to use for the language when serializing to JSON.
     * @type {string|undefined}
     */
    #languageName;
    /**
     * The name to use for the processor when serializing to JSON.
     * @type {string|undefined}
     */
    #processorName;
    /**
     * Creates a new instance.
     * @param {Object} config The configuration object.
     */
    constructor(config2) {
      const { plugins, language, languageOptions, processor, ...otherKeys } = config2;
      const schema = new ObjectSchema(flatConfigSchema);
      schema.validate(config2);
      Object.assign(this, otherKeys);
      if (!language) {
        throw new TypeError("Key 'language' is required.");
      }
      this.plugins = plugins;
      this.language = language;
      const {
        pluginName: languagePluginName,
        objectName: localLanguageName
      } = splitPluginIdentifier(language);
      this.#languageName = language;
      if (!plugins || !plugins[languagePluginName] || !plugins[languagePluginName].languages || !plugins[languagePluginName].languages[localLanguageName]) {
        throw new TypeError(
          `Key "language": Could not find "${localLanguageName}" in plugin "${languagePluginName}".`
        );
      }
      this.language = plugins[languagePluginName].languages[localLanguageName];
      if (this.language.defaultLanguageOptions ?? languageOptions) {
        this.languageOptions = flatConfigSchema.languageOptions.merge(
          this.language.defaultLanguageOptions,
          languageOptions
        );
      } else {
        this.languageOptions = {};
      }
      try {
        this.language.validateLanguageOptions(this.languageOptions);
      } catch (error) {
        throw new TypeError(`Key "languageOptions": ${error.message}`, {
          cause: error
        });
      }
      if (this.language.normalizeLanguageOptions) {
        this.languageOptions = this.language.normalizeLanguageOptions(
          this.languageOptions
        );
      }
      if (processor) {
        this.processor = processor;
        if (typeof processor === "string") {
          const { pluginName, objectName: localProcessorName } = splitPluginIdentifier(processor);
          this.#processorName = processor;
          if (!plugins || !plugins[pluginName] || !plugins[pluginName].processors || !plugins[pluginName].processors[localProcessorName]) {
            throw new TypeError(
              `Key "processor": Could not find "${localProcessorName}" in plugin "${pluginName}".`
            );
          }
          this.processor = plugins[pluginName].processors[localProcessorName];
        } else if (typeof processor === "object") {
          this.#processorName = getObjectId(processor);
          this.processor = processor;
        } else {
          throw new TypeError(
            "Key 'processor' must be a string or an object."
          );
        }
      }
      if (this.rules) {
        this.#normalizeRulesConfig();
        this.validateRulesConfig(this.rules);
      }
    }
    /**
     * Converts the configuration to a JSON representation.
     * @returns {Record<string, any>} The JSON representation of the configuration.
     * @throws {Error} If the configuration cannot be serialized.
     */
    toJSON() {
      if (this.processor && !this.#processorName) {
        throw new Error(
          "Could not serialize processor object (missing 'meta' object)."
        );
      }
      if (!this.#languageName) {
        throw new Error(
          "Could not serialize language object (missing 'meta' object)."
        );
      }
      return {
        ...this,
        plugins: Object.entries(this.plugins).map(([namespace, plugin]) => {
          const pluginId = getObjectId(plugin);
          if (!pluginId) {
            return namespace;
          }
          return `${namespace}:${pluginId}`;
        }),
        language: this.#languageName,
        languageOptions: languageOptionsToJSON(this.languageOptions),
        processor: this.#processorName
      };
    }
    /**
     * Gets a rule configuration by its ID.
     * @param {string} ruleId The ID of the rule to get.
     * @returns {RuleDefinition|undefined} The rule definition from the plugin, or `undefined` if the rule is not found.
     */
    getRuleDefinition(ruleId) {
      return getRuleFromConfig(ruleId, this);
    }
    /**
     * Normalizes the rules configuration. Ensures that each rule config is
     * an array and that the severity is a number. Applies meta.defaultOptions.
     * This function modifies `this.rules`.
     * @returns {void}
     */
    #normalizeRulesConfig() {
      for (const [ruleId, originalConfig] of Object.entries(this.rules)) {
        let ruleConfig = Array.isArray(originalConfig) ? originalConfig : [originalConfig];
        ruleConfig[0] = severities.get(ruleConfig[0]);
        const rule = getRuleFromConfig(ruleId, this);
        const slicedOptions = ruleConfig.slice(1);
        const mergedOptions = deepMergeArrays(
          rule?.meta?.defaultOptions,
          slicedOptions
        );
        if (mergedOptions.length) {
          ruleConfig = [ruleConfig[0], ...mergedOptions];
        }
        this.rules[ruleId] = ruleConfig;
      }
    }
    /**
     * Validates all of the rule configurations in the given rules config
     * against the plugins in this instance. This is used primarily to
     * validate inline configuration rules while inting.
     * @param {Object} rulesConfig The rules config to validate.
     * @returns {void}
     * @throws {Error} If a rule's configuration does not match its schema.
     * @throws {TypeError} If the rulesConfig is not provided or is invalid.
     * @throws {InvalidRuleOptionsSchemaError} If a rule's `meta.schema` is invalid.
     * @throws {TypeError} If a rule is not found in the plugins.
     */
    validateRulesConfig(rulesConfig) {
      if (!rulesConfig) {
        throw new TypeError("Config is required for validation.");
      }
      for (const [ruleId, ruleOptions] of Object.entries(rulesConfig)) {
        if (ruleId === "__proto__") {
          continue;
        }
        if (ruleOptions[0] === 0) {
          continue;
        }
        const rule = getRuleFromConfig(ruleId, this);
        if (!rule) {
          throwRuleNotFoundError(parseRuleId(ruleId), this);
        }
        const validateRule = getOrCreateValidator(rule, ruleId);
        if (validateRule) {
          validateRule(ruleOptions.slice(1));
          if (validateRule.errors) {
            throw new Error(
              `Key "rules": Key "${ruleId}":
${validateRule.errors.map((error) => {
                if (error.keyword === "additionalProperties" && error.schema === false && typeof error.parentSchema?.properties === "object" && typeof error.params?.additionalProperty === "string") {
                  const expectedProperties = Object.keys(
                    error.parentSchema.properties
                  ).map((property) => `"${property}"`);
                  return `	Value ${JSON.stringify(error.data)} ${error.message}.
		Unexpected property "${error.params.additionalProperty}". Expected properties: ${expectedProperties.join(", ")}.
`;
                }
                return `	Value ${JSON.stringify(error.data)} ${error.message}.
`;
              }).join("")}`
            );
          }
        }
      }
    }
    /**
     * Gets a complete options schema for a rule.
     * @param {RuleDefinition} ruleDefinition A rule definition object.
     * @throws {TypeError} If `meta.schema` is specified but is not an array, object or `false`.
     * @returns {Object|null} JSON Schema for the rule's options. `null` if `meta.schema` is `false`.
     */
    static getRuleOptionsSchema(ruleDefinition) {
      return getRuleOptionsSchema(ruleDefinition);
    }
    /**
     * Normalizes the severity value of a rule's configuration to a number
     * @param {(number|string|[number, ...*]|[string, ...*])} ruleConfig A rule's configuration value, generally
     * received from the user. A valid config value is either 0, 1, 2, the string "off" (treated the same as 0),
     * the string "warn" (treated the same as 1), the string "error" (treated the same as 2), or an array
     * whose first element is one of the above values. Strings are matched case-insensitively.
     * @returns {(0|1|2)} The numeric severity value if the config value was valid, otherwise 0.
     */
    static getRuleNumericSeverity(ruleConfig) {
      const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;
      if (severities.has(severityValue)) {
        return severities.get(severityValue);
      }
      if (typeof severityValue === "string") {
        return severities.get(severityValue.toLowerCase()) ?? 0;
      }
      return 0;
    }
  }
  config = { Config };
  return config;
}
var applyDisableDirectives;
var hasRequiredApplyDisableDirectives;
function requireApplyDisableDirectives() {
  if (hasRequiredApplyDisableDirectives) return applyDisableDirectives;
  hasRequiredApplyDisableDirectives = 1;
  const escapeRegExp = requireEscapeStringRegexp();
  const { Config } = requireConfig();
  function compareLocations(itemA, itemB) {
    return itemA.line - itemB.line || itemA.column - itemB.column;
  }
  function groupByParentDirective(directives2) {
    const groups = /* @__PURE__ */ new Map();
    for (const directive of directives2) {
      const {
        unprocessedDirective: { parentDirective }
      } = directive;
      if (groups.has(parentDirective)) {
        groups.get(parentDirective).push(directive);
      } else {
        groups.set(parentDirective, [directive]);
      }
    }
    return [...groups.values()];
  }
  function createIndividualDirectivesRemoval(directives2, parentDirective, sourceCode2) {
    const listText = parentDirective.value.trim();
    const listStart = sourceCode2.text.indexOf(
      listText,
      sourceCode2.getRange(parentDirective.node)[0]
    );
    return directives2.map((directive) => {
      const { ruleId } = directive;
      const regex = new RegExp(
        String.raw`(?:^|\s*,\s*)(?<quote>['"]?)${escapeRegExp(ruleId)}\k<quote>(?:\s*,\s*|$)`,
        "u"
      );
      const match = regex.exec(listText);
      const matchedText = match[0];
      const matchStart = listStart + match.index;
      const matchEnd = matchStart + matchedText.length;
      const firstIndexOfComma = matchedText.indexOf(",");
      const lastIndexOfComma = matchedText.lastIndexOf(",");
      let removalStart, removalEnd;
      if (firstIndexOfComma !== lastIndexOfComma) {
        removalStart = matchStart + firstIndexOfComma;
        removalEnd = matchStart + lastIndexOfComma;
      } else {
        removalStart = matchStart;
        removalEnd = matchEnd;
      }
      return {
        description: `'${ruleId}'`,
        fix: {
          range: [removalStart, removalEnd],
          text: ""
        },
        unprocessedDirective: directive.unprocessedDirective
      };
    });
  }
  function createDirectiveRemoval(directives2, node2, sourceCode2) {
    const range = sourceCode2.getRange(node2);
    const ruleIds = directives2.filter((directive) => directive.ruleId).map((directive) => `'${directive.ruleId}'`);
    return {
      description: ruleIds.length <= 2 ? ruleIds.join(" or ") : `${ruleIds.slice(0, ruleIds.length - 1).join(", ")}, or ${ruleIds.at(-1)}`,
      fix: {
        range,
        text: " "
      },
      unprocessedDirective: directives2[0].unprocessedDirective
    };
  }
  function processUnusedDirectives(allDirectives, sourceCode2) {
    const directiveGroups = groupByParentDirective(allDirectives);
    return directiveGroups.flatMap((directives2) => {
      const { parentDirective } = directives2[0].unprocessedDirective;
      const remainingRuleIds = new Set(parentDirective.ruleIds);
      for (const directive of directives2) {
        remainingRuleIds.delete(directive.ruleId);
      }
      return remainingRuleIds.size ? createIndividualDirectivesRemoval(
        directives2,
        parentDirective,
        sourceCode2
      ) : [
        createDirectiveRemoval(
          directives2,
          parentDirective.node,
          sourceCode2
        )
      ];
    });
  }
  function collectUsedEnableDirectives(directives2) {
    const enabledRules = /* @__PURE__ */ new Map();
    const usedEnableDirectives = /* @__PURE__ */ new Set();
    for (let index = directives2.length - 1; index >= 0; index--) {
      const directive = directives2[index];
      if (directive.type === "disable") {
        if (enabledRules.size === 0) {
          continue;
        }
        if (directive.ruleId === null) {
          for (const enableDirective of enabledRules.values()) {
            usedEnableDirectives.add(enableDirective);
          }
          enabledRules.clear();
        } else {
          const enableDirective = enabledRules.get(directive.ruleId);
          if (enableDirective) {
            usedEnableDirectives.add(enableDirective);
          } else {
            const enabledDirectiveWithoutRuleId = enabledRules.get(null);
            if (enabledDirectiveWithoutRuleId) {
              usedEnableDirectives.add(enabledDirectiveWithoutRuleId);
            }
          }
        }
      } else if (directive.type === "enable") {
        if (directive.ruleId === null) {
          enabledRules.clear();
          enabledRules.set(null, directive);
        } else {
          enabledRules.set(directive.ruleId, directive);
        }
      }
    }
    return usedEnableDirectives;
  }
  function applyDirectives(options) {
    const problems = [];
    const usedDisableDirectives = /* @__PURE__ */ new Set();
    const { sourceCode: sourceCode2 } = options;
    for (const problem of options.problems) {
      let disableDirectivesForProblem = [];
      let nextDirectiveIndex = 0;
      while (nextDirectiveIndex < options.directives.length && compareLocations(options.directives[nextDirectiveIndex], problem) <= 0) {
        const directive = options.directives[nextDirectiveIndex++];
        if (directive.ruleId === null || directive.ruleId === problem.ruleId) {
          switch (directive.type) {
            case "disable":
              disableDirectivesForProblem.push(directive);
              break;
            case "enable":
              disableDirectivesForProblem = [];
              break;
          }
        }
      }
      if (disableDirectivesForProblem.length > 0) {
        const suppressions = disableDirectivesForProblem.map((directive) => ({
          kind: "directive",
          justification: directive.unprocessedDirective.justification
        }));
        if (problem.suppressions) {
          problem.suppressions = problem.suppressions.concat(suppressions);
        } else {
          problem.suppressions = suppressions;
          usedDisableDirectives.add(disableDirectivesForProblem.at(-1));
        }
      }
      problems.push(problem);
    }
    const unusedDisableDirectivesToReport = options.directives.filter(
      (directive) => directive.type === "disable" && !usedDisableDirectives.has(directive) && !options.rulesToIgnore.has(directive.ruleId)
    );
    const unusedEnableDirectivesToReport = new Set(
      options.directives.filter(
        (directive) => directive.unprocessedDirective.type === "enable" && !options.rulesToIgnore.has(directive.ruleId)
      )
    );
    if (unusedEnableDirectivesToReport.size > 0) {
      for (const directive of collectUsedEnableDirectives(
        options.directives
      )) {
        unusedEnableDirectivesToReport.delete(directive);
      }
    }
    const processed = processUnusedDirectives(
      unusedDisableDirectivesToReport,
      sourceCode2
    ).concat(
      processUnusedDirectives(unusedEnableDirectivesToReport, sourceCode2)
    );
    const columnOffset = options.language.columnStart === 1 ? 0 : 1;
    const lineOffset = options.language.lineStart === 1 ? 0 : 1;
    const unusedDirectives = processed.map(
      ({ description: description2, fix, unprocessedDirective }) => {
        const { parentDirective, type: type2, line, column } = unprocessedDirective;
        let message;
        if (type2 === "enable") {
          message = description2 ? `Unused eslint-enable directive (no matching eslint-disable directives were found for ${description2}).` : "Unused eslint-enable directive (no matching eslint-disable directives were found).";
        } else {
          message = description2 ? `Unused eslint-disable directive (no problems were reported from ${description2}).` : "Unused eslint-disable directive (no problems were reported).";
        }
        const loc = sourceCode2.getLoc(parentDirective.node);
        return {
          ruleId: null,
          message,
          line: type2 === "disable-next-line" ? loc.start.line + lineOffset : line,
          column: type2 === "disable-next-line" ? loc.start.column + columnOffset : column,
          severity: options.reportUnusedDisableDirectives === "warn" ? 1 : 2,
          nodeType: null,
          ...options.disableFixes ? {} : { fix }
        };
      }
    );
    return { problems, unusedDirectives };
  }
  applyDisableDirectives = ({
    language,
    sourceCode: sourceCode2,
    directives: directives2,
    disableFixes,
    problems,
    configuredRules,
    ruleFilter,
    reportUnusedDisableDirectives = "off"
  }) => {
    const blockDirectives = directives2.filter(
      (directive) => directive.type === "disable" || directive.type === "enable"
    ).map(
      (directive) => Object.assign({}, directive, { unprocessedDirective: directive })
    ).sort(compareLocations);
    const lineDirectives = directives2.flatMap((directive) => {
      switch (directive.type) {
        case "disable":
        case "enable":
          return [];
        case "disable-line":
          return [
            {
              type: "disable",
              line: directive.line,
              column: 1,
              ruleId: directive.ruleId,
              unprocessedDirective: directive
            },
            {
              type: "enable",
              line: directive.line + 1,
              column: 0,
              ruleId: directive.ruleId,
              unprocessedDirective: directive
            }
          ];
        case "disable-next-line":
          return [
            {
              type: "disable",
              line: directive.line + 1,
              column: 1,
              ruleId: directive.ruleId,
              unprocessedDirective: directive
            },
            {
              type: "enable",
              line: directive.line + 2,
              column: 0,
              ruleId: directive.ruleId,
              unprocessedDirective: directive
            }
          ];
        default:
          throw new TypeError(
            `Unrecognized directive type '${directive.type}'`
          );
      }
    }).sort(compareLocations);
    const rulesToIgnore = configuredRules && ruleFilter ? new Set(
      Object.keys(configuredRules).filter((ruleId) => {
        const severity2 = Config.getRuleNumericSeverity(
          configuredRules[ruleId]
        );
        if (severity2 === 0) {
          return false;
        }
        return !ruleFilter({ severity: severity2, ruleId });
      })
    ) : /* @__PURE__ */ new Set();
    if (rulesToIgnore.size > 0) {
      rulesToIgnore.add(null);
    }
    const blockDirectivesResult = applyDirectives({
      language,
      sourceCode: sourceCode2,
      problems,
      directives: blockDirectives,
      disableFixes,
      reportUnusedDisableDirectives,
      rulesToIgnore
    });
    const lineDirectivesResult = applyDirectives({
      language,
      sourceCode: sourceCode2,
      problems: blockDirectivesResult.problems,
      directives: lineDirectives,
      disableFixes,
      reportUnusedDisableDirectives,
      rulesToIgnore
    });
    return reportUnusedDisableDirectives !== "off" ? lineDirectivesResult.problems.concat(blockDirectivesResult.unusedDirectives).concat(lineDirectivesResult.unusedDirectives).sort(compareLocations) : lineDirectivesResult.problems;
  };
  return applyDisableDirectives;
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var lazyLoadingRuleMap;
var hasRequiredLazyLoadingRuleMap;
function requireLazyLoadingRuleMap() {
  if (hasRequiredLazyLoadingRuleMap) return lazyLoadingRuleMap;
  hasRequiredLazyLoadingRuleMap = 1;
  const debug = requireSrc()("eslint:rules");
  class LazyLoadingRuleMap extends Map {
    /**
     * Initialize this map.
     * @param {Array<[string, function(): Rule]>} loaders The rule loaders.
     */
    constructor(loaders) {
      let remaining = loaders.length;
      super(
        debug.enabled ? loaders.map(([ruleId, load]) => {
          let cache2 = null;
          return [
            ruleId,
            () => {
              if (!cache2) {
                debug(
                  "Loading rule %o (remaining=%d)",
                  ruleId,
                  --remaining
                );
                cache2 = load();
              }
              return cache2;
            }
          ];
        }) : loaders
      );
      Object.defineProperty(LazyLoadingRuleMap.prototype, "set", {
        configurable: true,
        value: void 0
      });
    }
    /**
     * Get a rule.
     * Each rule will be loaded on the first access.
     * @param {string} ruleId The rule ID to get.
     * @returns {Rule|undefined} The rule.
     */
    get(ruleId) {
      const load = super.get(ruleId);
      return load && load();
    }
    /**
     * Iterate rules.
     * @returns {IterableIterator<Rule>} Rules.
     */
    *values() {
      for (const load of super.values()) {
        yield load();
      }
    }
    /**
     * Iterate rules.
     * @returns {IterableIterator<[string, Rule]>} Rules.
     */
    *entries() {
      for (const [ruleId, load] of super.entries()) {
        yield [ruleId, load()];
      }
    }
    /**
     * Call a function with each rule.
     * @param {Function} callbackFn The callback function.
     * @param {any} [thisArg] The object to pass to `this` of the callback function.
     * @returns {void}
     */
    forEach(callbackFn, thisArg) {
      for (const [ruleId, load] of super.entries()) {
        callbackFn.call(thisArg, load(), ruleId, this);
      }
    }
  }
  Object.defineProperties(LazyLoadingRuleMap.prototype, {
    clear: { configurable: true, value: void 0 },
    delete: { configurable: true, value: void 0 },
    [Symbol.iterator]: {
      configurable: true,
      writable: true,
      value: LazyLoadingRuleMap.prototype.entries
    }
  });
  lazyLoadingRuleMap = { LazyLoadingRuleMap };
  return lazyLoadingRuleMap;
}
var astUtils = { exports: {} };
var utils = {};
var ast = { exports: {} };
var hasRequiredAst;
function requireAst() {
  if (hasRequiredAst) return ast.exports;
  hasRequiredAst = 1;
  (function() {
    function isExpression(node2) {
      if (node2 == null) {
        return false;
      }
      switch (node2.type) {
        case "ArrayExpression":
        case "AssignmentExpression":
        case "BinaryExpression":
        case "CallExpression":
        case "ConditionalExpression":
        case "FunctionExpression":
        case "Identifier":
        case "Literal":
        case "LogicalExpression":
        case "MemberExpression":
        case "NewExpression":
        case "ObjectExpression":
        case "SequenceExpression":
        case "ThisExpression":
        case "UnaryExpression":
        case "UpdateExpression":
          return true;
      }
      return false;
    }
    function isIterationStatement(node2) {
      if (node2 == null) {
        return false;
      }
      switch (node2.type) {
        case "DoWhileStatement":
        case "ForInStatement":
        case "ForStatement":
        case "WhileStatement":
          return true;
      }
      return false;
    }
    function isStatement(node2) {
      if (node2 == null) {
        return false;
      }
      switch (node2.type) {
        case "BlockStatement":
        case "BreakStatement":
        case "ContinueStatement":
        case "DebuggerStatement":
        case "DoWhileStatement":
        case "EmptyStatement":
        case "ExpressionStatement":
        case "ForInStatement":
        case "ForStatement":
        case "IfStatement":
        case "LabeledStatement":
        case "ReturnStatement":
        case "SwitchStatement":
        case "ThrowStatement":
        case "TryStatement":
        case "VariableDeclaration":
        case "WhileStatement":
        case "WithStatement":
          return true;
      }
      return false;
    }
    function isSourceElement(node2) {
      return isStatement(node2) || node2 != null && node2.type === "FunctionDeclaration";
    }
    function trailingStatement(node2) {
      switch (node2.type) {
        case "IfStatement":
          if (node2.alternate != null) {
            return node2.alternate;
          }
          return node2.consequent;
        case "LabeledStatement":
        case "ForStatement":
        case "ForInStatement":
        case "WhileStatement":
        case "WithStatement":
          return node2.body;
      }
      return null;
    }
    function isProblematicIfStatement(node2) {
      var current;
      if (node2.type !== "IfStatement") {
        return false;
      }
      if (node2.alternate == null) {
        return false;
      }
      current = node2.consequent;
      do {
        if (current.type === "IfStatement") {
          if (current.alternate == null) {
            return true;
          }
        }
        current = trailingStatement(current);
      } while (current);
      return false;
    }
    ast.exports = {
      isExpression,
      isStatement,
      isIterationStatement,
      isSourceElement,
      isProblematicIfStatement,
      trailingStatement
    };
  })();
  return ast.exports;
}
var code = { exports: {} };
var hasRequiredCode;
function requireCode() {
  if (hasRequiredCode) return code.exports;
  hasRequiredCode = 1;
  (function() {
    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;
    ES5Regex = {
      // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
      NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
      // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
      NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
    };
    ES6Regex = {
      // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
      NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
      // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
      NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };
    function isDecimalDigit(ch2) {
      return 48 <= ch2 && ch2 <= 57;
    }
    function isHexDigit(ch2) {
      return 48 <= ch2 && ch2 <= 57 || // 0..9
      97 <= ch2 && ch2 <= 102 || // a..f
      65 <= ch2 && ch2 <= 70;
    }
    function isOctalDigit(ch2) {
      return ch2 >= 48 && ch2 <= 55;
    }
    NON_ASCII_WHITESPACES = [
      5760,
      8192,
      8193,
      8194,
      8195,
      8196,
      8197,
      8198,
      8199,
      8200,
      8201,
      8202,
      8239,
      8287,
      12288,
      65279
    ];
    function isWhiteSpace(ch2) {
      return ch2 === 32 || ch2 === 9 || ch2 === 11 || ch2 === 12 || ch2 === 160 || ch2 >= 5760 && NON_ASCII_WHITESPACES.indexOf(ch2) >= 0;
    }
    function isLineTerminator(ch2) {
      return ch2 === 10 || ch2 === 13 || ch2 === 8232 || ch2 === 8233;
    }
    function fromCodePoint(cp) {
      if (cp <= 65535) {
        return String.fromCharCode(cp);
      }
      var cu1 = String.fromCharCode(Math.floor((cp - 65536) / 1024) + 55296);
      var cu2 = String.fromCharCode((cp - 65536) % 1024 + 56320);
      return cu1 + cu2;
    }
    IDENTIFIER_START = new Array(128);
    for (ch = 0; ch < 128; ++ch) {
      IDENTIFIER_START[ch] = ch >= 97 && ch <= 122 || // a..z
      ch >= 65 && ch <= 90 || // A..Z
      ch === 36 || ch === 95;
    }
    IDENTIFIER_PART = new Array(128);
    for (ch = 0; ch < 128; ++ch) {
      IDENTIFIER_PART[ch] = ch >= 97 && ch <= 122 || // a..z
      ch >= 65 && ch <= 90 || // A..Z
      ch >= 48 && ch <= 57 || // 0..9
      ch === 36 || ch === 95;
    }
    function isIdentifierStartES5(ch2) {
      return ch2 < 128 ? IDENTIFIER_START[ch2] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch2));
    }
    function isIdentifierPartES5(ch2) {
      return ch2 < 128 ? IDENTIFIER_PART[ch2] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch2));
    }
    function isIdentifierStartES6(ch2) {
      return ch2 < 128 ? IDENTIFIER_START[ch2] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch2));
    }
    function isIdentifierPartES6(ch2) {
      return ch2 < 128 ? IDENTIFIER_PART[ch2] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch2));
    }
    code.exports = {
      isDecimalDigit,
      isHexDigit,
      isOctalDigit,
      isWhiteSpace,
      isLineTerminator,
      isIdentifierStartES5,
      isIdentifierPartES5,
      isIdentifierStartES6,
      isIdentifierPartES6
    };
  })();
  return code.exports;
}
var keyword = { exports: {} };
var hasRequiredKeyword;
function requireKeyword() {
  if (hasRequiredKeyword) return keyword.exports;
  hasRequiredKeyword = 1;
  (function() {
    var code2 = requireCode();
    function isStrictModeReservedWordES6(id2) {
      switch (id2) {
        case "implements":
        case "interface":
        case "package":
        case "private":
        case "protected":
        case "public":
        case "static":
        case "let":
          return true;
        default:
          return false;
      }
    }
    function isKeywordES5(id2, strict2) {
      if (!strict2 && id2 === "yield") {
        return false;
      }
      return isKeywordES6(id2, strict2);
    }
    function isKeywordES6(id2, strict2) {
      if (strict2 && isStrictModeReservedWordES6(id2)) {
        return true;
      }
      switch (id2.length) {
        case 2:
          return id2 === "if" || id2 === "in" || id2 === "do";
        case 3:
          return id2 === "var" || id2 === "for" || id2 === "new" || id2 === "try";
        case 4:
          return id2 === "this" || id2 === "else" || id2 === "case" || id2 === "void" || id2 === "with" || id2 === "enum";
        case 5:
          return id2 === "while" || id2 === "break" || id2 === "catch" || id2 === "throw" || id2 === "const" || id2 === "yield" || id2 === "class" || id2 === "super";
        case 6:
          return id2 === "return" || id2 === "typeof" || id2 === "delete" || id2 === "switch" || id2 === "export" || id2 === "import";
        case 7:
          return id2 === "default" || id2 === "finally" || id2 === "extends";
        case 8:
          return id2 === "function" || id2 === "continue" || id2 === "debugger";
        case 10:
          return id2 === "instanceof";
        default:
          return false;
      }
    }
    function isReservedWordES5(id2, strict2) {
      return id2 === "null" || id2 === "true" || id2 === "false" || isKeywordES5(id2, strict2);
    }
    function isReservedWordES6(id2, strict2) {
      return id2 === "null" || id2 === "true" || id2 === "false" || isKeywordES6(id2, strict2);
    }
    function isRestrictedWord(id2) {
      return id2 === "eval" || id2 === "arguments";
    }
    function isIdentifierNameES5(id2) {
      var i2, iz, ch;
      if (id2.length === 0) {
        return false;
      }
      ch = id2.charCodeAt(0);
      if (!code2.isIdentifierStartES5(ch)) {
        return false;
      }
      for (i2 = 1, iz = id2.length; i2 < iz; ++i2) {
        ch = id2.charCodeAt(i2);
        if (!code2.isIdentifierPartES5(ch)) {
          return false;
        }
      }
      return true;
    }
    function decodeUtf16(lead, trail) {
      return (lead - 55296) * 1024 + (trail - 56320) + 65536;
    }
    function isIdentifierNameES6(id2) {
      var i2, iz, ch, lowCh, check2;
      if (id2.length === 0) {
        return false;
      }
      check2 = code2.isIdentifierStartES6;
      for (i2 = 0, iz = id2.length; i2 < iz; ++i2) {
        ch = id2.charCodeAt(i2);
        if (55296 <= ch && ch <= 56319) {
          ++i2;
          if (i2 >= iz) {
            return false;
          }
          lowCh = id2.charCodeAt(i2);
          if (!(56320 <= lowCh && lowCh <= 57343)) {
            return false;
          }
          ch = decodeUtf16(ch, lowCh);
        }
        if (!check2(ch)) {
          return false;
        }
        check2 = code2.isIdentifierPartES6;
      }
      return true;
    }
    function isIdentifierES5(id2, strict2) {
      return isIdentifierNameES5(id2) && !isReservedWordES5(id2, strict2);
    }
    function isIdentifierES6(id2, strict2) {
      return isIdentifierNameES6(id2) && !isReservedWordES6(id2, strict2);
    }
    keyword.exports = {
      isKeywordES5,
      isKeywordES6,
      isReservedWordES5,
      isReservedWordES6,
      isRestrictedWord,
      isIdentifierNameES5,
      isIdentifierNameES6,
      isIdentifierES5,
      isIdentifierES6
    };
  })();
  return keyword.exports;
}
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils;
  hasRequiredUtils = 1;
  (function() {
    utils.ast = requireAst();
    utils.code = requireCode();
    utils.keyword = requireKeyword();
  })();
  return utils;
}
var ecmaVersion;
var hasRequiredEcmaVersion;
function requireEcmaVersion() {
  if (hasRequiredEcmaVersion) return ecmaVersion;
  hasRequiredEcmaVersion = 1;
  const LATEST_ECMA_VERSION = 2026;
  ecmaVersion = {
    LATEST_ECMA_VERSION
  };
  return ecmaVersion;
}
var hasRequiredAstUtils;
function requireAstUtils() {
  if (hasRequiredAstUtils) return astUtils.exports;
  hasRequiredAstUtils = 1;
  (function(module) {
    const { KEYS: eslintVisitorKeys2 } = requireEslintVisitorKeys$2();
    const esutils = requireUtils();
    const espree2 = requireEspree();
    const escapeRegExp = requireEscapeStringRegexp();
    const {
      breakableTypePattern,
      createGlobalLinebreakMatcher,
      lineBreakPattern,
      shebangPattern
    } = requireAstUtils$1();
    const globals2 = requireGlobals();
    const { LATEST_ECMA_VERSION } = requireEcmaVersion();
    const anyFunctionPattern = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/u;
    const anyLoopPattern = /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/u;
    const arrayMethodWithThisArgPattern = /^(?:every|filter|find(?:Last)?(?:Index)?|flatMap|forEach|map|some)$/u;
    const arrayOrTypedArrayPattern = /Array$/u;
    const bindOrCallOrApplyPattern = /^(?:bind|call|apply)$/u;
    const thisTagPattern = /^[\s*]*@this/mu;
    const COMMENTS_IGNORE_PATTERN = /^\s*(?:eslint|jshint\s+|jslint\s+|istanbul\s+|globals?\s+|exported\s+|jscs)/u;
    const ESLINT_DIRECTIVE_PATTERN = /^(?:eslint[- ]|(?:globals?|exported) )/u;
    const LINEBREAKS = /* @__PURE__ */ new Set(["\r\n", "\r", "\n", "\u2028", "\u2029"]);
    const STATEMENT_LIST_PARENTS = /* @__PURE__ */ new Set([
      "Program",
      "BlockStatement",
      "StaticBlock",
      "SwitchCase"
    ]);
    const LEXICAL_DECLARATION_KINDS = /* @__PURE__ */ new Set([
      "let",
      "const",
      "using",
      "await using"
    ]);
    const DECIMAL_INTEGER_PATTERN = /^(?:0|0[0-7]*[89]\d*|[1-9](?:_?\d)*)$/u;
    const OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN = /^(?:[^\\]|\\.)*\\(?:[1-9]|0\d)/su;
    const LOGICAL_ASSIGNMENT_OPERATORS = /* @__PURE__ */ new Set(["&&=", "||=", "??="]);
    const ECMASCRIPT_GLOBALS = globals2[`es${LATEST_ECMA_VERSION}`];
    function isModifyingReference(reference, index, references) {
      const identifier = reference.identifier;
      const modifyingDifferentIdentifier = index === 0 || references[index - 1].identifier !== identifier;
      return identifier && reference.init === false && reference.isWrite() && modifyingDifferentIdentifier;
    }
    function startsWithUpperCase(s2) {
      return s2[0] !== s2[0].toLocaleLowerCase();
    }
    function isES5Constructor(node2) {
      return node2.id && startsWithUpperCase(node2.id.name);
    }
    function getUpperFunction(node2) {
      for (let currentNode = node2; currentNode; currentNode = currentNode.parent) {
        if (anyFunctionPattern.test(currentNode.type)) {
          return currentNode;
        }
      }
      return null;
    }
    function isFunction2(node2) {
      return Boolean(node2 && anyFunctionPattern.test(node2.type));
    }
    function isLoop(node2) {
      return Boolean(node2 && anyLoopPattern.test(node2.type));
    }
    function isInLoop(node2) {
      for (let currentNode = node2; currentNode && !isFunction2(currentNode); currentNode = currentNode.parent) {
        if (isLoop(currentNode)) {
          return true;
        }
      }
      return false;
    }
    function isNullLiteral(node2) {
      return node2.type === "Literal" && node2.value === null && !node2.regex && !node2.bigint;
    }
    function isNullOrUndefined2(node2) {
      return isNullLiteral(node2) || node2.type === "Identifier" && node2.name === "undefined" || node2.type === "UnaryExpression" && node2.operator === "void";
    }
    function isCallee(node2) {
      return node2.parent.type === "CallExpression" && node2.parent.callee === node2;
    }
    function getStaticStringValue(node2) {
      switch (node2.type) {
        case "Literal":
          if (node2.value === null) {
            if (isNullLiteral(node2)) {
              return String(node2.value);
            }
            if (node2.regex) {
              return `/${node2.regex.pattern}/${node2.regex.flags}`;
            }
            if (node2.bigint) {
              return node2.bigint;
            }
          } else {
            return String(node2.value);
          }
          break;
        case "TemplateLiteral":
          if (node2.expressions.length === 0 && node2.quasis.length === 1) {
            return node2.quasis[0].value.cooked;
          }
          break;
      }
      return null;
    }
    function getStaticPropertyName(node2) {
      let prop;
      switch (node2 && node2.type) {
        case "ChainExpression":
          return getStaticPropertyName(node2.expression);
        case "Property":
        case "PropertyDefinition":
        case "MethodDefinition":
        case "TSPropertySignature":
        case "TSMethodSignature":
          prop = node2.key;
          break;
        case "MemberExpression":
          prop = node2.property;
          break;
      }
      if (prop) {
        if (prop.type === "Identifier" && !node2.computed) {
          return prop.name;
        }
        return getStaticStringValue(prop);
      }
      return null;
    }
    function skipChainExpression(node2) {
      return node2 && node2.type === "ChainExpression" ? node2.expression : node2;
    }
    function checkText(actual, expected) {
      return typeof expected === "string" ? actual === expected : expected.test(actual);
    }
    function isSpecificId(node2, name) {
      return node2.type === "Identifier" && checkText(node2.name, name);
    }
    function isSpecificMemberAccess(node2, objectName, propertyName) {
      const checkNode = skipChainExpression(node2);
      if (checkNode.type !== "MemberExpression") {
        return false;
      }
      if (objectName && !isSpecificId(checkNode.object, objectName)) {
        return false;
      }
      if (propertyName) {
        const actualPropertyName = getStaticPropertyName(checkNode);
        if (typeof actualPropertyName !== "string" || !checkText(actualPropertyName, propertyName)) {
          return false;
        }
      }
      return true;
    }
    function equalLiteralValue(left, right) {
      if (left.regex || right.regex) {
        return Boolean(
          left.regex && right.regex && left.regex.pattern === right.regex.pattern && left.regex.flags === right.regex.flags
        );
      }
      if (left.bigint || right.bigint) {
        return left.bigint === right.bigint;
      }
      return left.value === right.value;
    }
    function isSameReference(left, right, disableStaticComputedKey = false) {
      if (left.type !== right.type) {
        if (left.type === "ChainExpression") {
          return isSameReference(
            left.expression,
            right,
            disableStaticComputedKey
          );
        }
        if (right.type === "ChainExpression") {
          return isSameReference(
            left,
            right.expression,
            disableStaticComputedKey
          );
        }
        return false;
      }
      switch (left.type) {
        case "Super":
        case "ThisExpression":
          return true;
        case "Identifier":
        case "PrivateIdentifier":
          return left.name === right.name;
        case "Literal":
          return equalLiteralValue(left, right);
        case "ChainExpression":
          return isSameReference(
            left.expression,
            right.expression,
            disableStaticComputedKey
          );
        case "MemberExpression": {
          if (!disableStaticComputedKey) {
            const nameA = getStaticPropertyName(left);
            if (nameA !== null) {
              return isSameReference(
                left.object,
                right.object,
                disableStaticComputedKey
              ) && nameA === getStaticPropertyName(right);
            }
          }
          return left.computed === right.computed && isSameReference(
            left.object,
            right.object,
            disableStaticComputedKey
          ) && isSameReference(
            left.property,
            right.property,
            disableStaticComputedKey
          );
        }
        default:
          return false;
      }
    }
    function isReflectApply(node2) {
      return isSpecificMemberAccess(node2, "Reflect", "apply");
    }
    function isArrayFromMethod(node2) {
      return isSpecificMemberAccess(node2, arrayOrTypedArrayPattern, "from");
    }
    function isMethodWhichHasThisArg(node2) {
      return isSpecificMemberAccess(node2, null, arrayMethodWithThisArgPattern);
    }
    function negate(f2) {
      return (token) => !f2(token);
    }
    function hasJSDocThisTag(node2, sourceCode2) {
      const jsdocComment = sourceCode2.getJSDocComment(node2);
      if (jsdocComment && thisTagPattern.test(jsdocComment.value)) {
        return true;
      }
      return sourceCode2.getCommentsBefore(node2).some((comment2) => thisTagPattern.test(comment2.value));
    }
    function isParenthesised(sourceCode2, node2) {
      const previousToken = sourceCode2.getTokenBefore(node2), nextToken = sourceCode2.getTokenAfter(node2);
      return Boolean(previousToken && nextToken) && previousToken.value === "(" && previousToken.range[1] <= node2.range[0] && nextToken.value === ")" && nextToken.range[0] >= node2.range[1];
    }
    function isEqToken(token) {
      return token.value === "=" && token.type === "Punctuator";
    }
    function isArrowToken(token) {
      return token.value === "=>" && token.type === "Punctuator";
    }
    function isCommaToken(token) {
      return token.value === "," && token.type === "Punctuator";
    }
    function isDotToken(token) {
      return token.value === "." && token.type === "Punctuator";
    }
    function isQuestionDotToken(token) {
      return token.value === "?." && token.type === "Punctuator";
    }
    function isSemicolonToken(token) {
      return token.value === ";" && token.type === "Punctuator";
    }
    function isColonToken(token) {
      return token.value === ":" && token.type === "Punctuator";
    }
    function isOpeningParenToken(token) {
      return token.value === "(" && token.type === "Punctuator";
    }
    function isClosingParenToken(token) {
      return token.value === ")" && token.type === "Punctuator";
    }
    function isOpeningBracketToken(token) {
      return token.value === "[" && token.type === "Punctuator";
    }
    function isClosingBracketToken(token) {
      return token.value === "]" && token.type === "Punctuator";
    }
    function isOpeningBraceToken(token) {
      return token.value === "{" && token.type === "Punctuator";
    }
    function isClosingBraceToken(token) {
      return token.value === "}" && token.type === "Punctuator";
    }
    function isCommentToken(token) {
      return token.type === "Line" || token.type === "Block" || token.type === "Shebang";
    }
    function isKeywordToken(token) {
      return token.type === "Keyword";
    }
    function getOpeningParenOfParams(node2, sourceCode2) {
      if (node2.type === "ArrowFunctionExpression" && node2.params.length === 1) {
        const argToken = sourceCode2.getFirstToken(node2.params[0]);
        const maybeParenToken = sourceCode2.getTokenBefore(argToken);
        return isOpeningParenToken(maybeParenToken) ? maybeParenToken : argToken;
      }
      return node2.id ? sourceCode2.getTokenAfter(node2.id, isOpeningParenToken) : sourceCode2.getFirstToken(node2, isOpeningParenToken);
    }
    function equalTokens(left, right, sourceCode2) {
      const tokensL = sourceCode2.getTokens(left);
      const tokensR = sourceCode2.getTokens(right);
      if (tokensL.length !== tokensR.length) {
        return false;
      }
      for (let i2 = 0; i2 < tokensL.length; ++i2) {
        if (tokensL[i2].type !== tokensR[i2].type || tokensL[i2].value !== tokensR[i2].value) {
          return false;
        }
      }
      return true;
    }
    function isLogicalExpression(node2) {
      return node2.type === "LogicalExpression" && (node2.operator === "&&" || node2.operator === "||");
    }
    function isCoalesceExpression(node2) {
      return node2.type === "LogicalExpression" && node2.operator === "??";
    }
    function isMixedLogicalAndCoalesceExpressions(left, right) {
      return isLogicalExpression(left) && isCoalesceExpression(right) || isCoalesceExpression(left) && isLogicalExpression(right);
    }
    function isLogicalAssignmentOperator(operator) {
      return LOGICAL_ASSIGNMENT_OPERATORS.has(operator);
    }
    function getSwitchCaseColonToken(node2, sourceCode2) {
      if (node2.test) {
        return sourceCode2.getTokenAfter(node2.test, isColonToken);
      }
      return sourceCode2.getFirstToken(node2, 1);
    }
    function getModuleExportName(node2) {
      if (node2.type === "Identifier") {
        return node2.name;
      }
      return node2.value;
    }
    function getBooleanValue(node2) {
      if (node2.value === null) {
        if (node2.raw === "null") {
          return false;
        }
        if (typeof node2.regex === "object") {
          return true;
        }
        return null;
      }
      return !!node2.value;
    }
    function isLogicalIdentity(node2, operator) {
      switch (node2.type) {
        case "Literal":
          return operator === "||" && getBooleanValue(node2) === true || operator === "&&" && getBooleanValue(node2) === false;
        case "UnaryExpression":
          return operator === "&&" && node2.operator === "void";
        case "LogicalExpression":
          return operator === node2.operator && (isLogicalIdentity(node2.left, operator) || isLogicalIdentity(node2.right, operator));
        case "AssignmentExpression":
          return ["||=", "&&="].includes(node2.operator) && operator === node2.operator.slice(0, -1) && isLogicalIdentity(node2.right, operator);
      }
      return false;
    }
    function isReferenceToGlobalVariable(scope, node2) {
      const reference = scope.references.find((ref2) => ref2.identifier === node2);
      return Boolean(
        reference && reference.resolved && reference.resolved.scope.type === "global" && reference.resolved.defs.length === 0
      );
    }
    function isConstant(scope, node2, inBooleanPosition) {
      if (!node2) {
        return true;
      }
      switch (node2.type) {
        case "Literal":
        case "ArrowFunctionExpression":
        case "FunctionExpression":
          return true;
        case "ClassExpression":
        case "ObjectExpression":
          return true;
        case "TemplateLiteral":
          return inBooleanPosition && node2.quasis.some((quasi) => quasi.value.cooked.length) || node2.expressions.every((exp) => isConstant(scope, exp, false));
        case "ArrayExpression": {
          if (!inBooleanPosition) {
            return node2.elements.every(
              (element) => isConstant(scope, element, false)
            );
          }
          return true;
        }
        case "UnaryExpression":
          if (node2.operator === "void" || node2.operator === "typeof" && inBooleanPosition) {
            return true;
          }
          if (node2.operator === "!") {
            return isConstant(scope, node2.argument, true);
          }
          return isConstant(scope, node2.argument, false);
        case "BinaryExpression":
          return isConstant(scope, node2.left, false) && isConstant(scope, node2.right, false) && node2.operator !== "in";
        case "LogicalExpression": {
          const isLeftConstant = isConstant(
            scope,
            node2.left,
            inBooleanPosition
          );
          const isRightConstant = isConstant(
            scope,
            node2.right,
            inBooleanPosition
          );
          const isLeftShortCircuit = isLeftConstant && isLogicalIdentity(node2.left, node2.operator);
          const isRightShortCircuit = inBooleanPosition && isRightConstant && isLogicalIdentity(node2.right, node2.operator);
          return isLeftConstant && isRightConstant || isLeftShortCircuit || isRightShortCircuit;
        }
        case "NewExpression":
          return inBooleanPosition;
        case "AssignmentExpression":
          if (node2.operator === "=") {
            return isConstant(scope, node2.right, inBooleanPosition);
          }
          if (["||=", "&&="].includes(node2.operator) && inBooleanPosition) {
            return isLogicalIdentity(
              node2.right,
              node2.operator.slice(0, -1)
            );
          }
          return false;
        case "SequenceExpression":
          return isConstant(
            scope,
            node2.expressions.at(-1),
            inBooleanPosition
          );
        case "SpreadElement":
          return isConstant(scope, node2.argument, inBooleanPosition);
        case "CallExpression":
          if (node2.callee.type === "Identifier" && node2.callee.name === "Boolean") {
            if (node2.arguments.length === 0 || isConstant(scope, node2.arguments[0], true)) {
              return isReferenceToGlobalVariable(scope, node2.callee);
            }
          }
          return false;
        case "Identifier":
          return node2.name === "undefined" && isReferenceToGlobalVariable(scope, node2);
      }
      return false;
    }
    function isTopLevelExpressionStatement(node2) {
      if (node2.type !== "ExpressionStatement") {
        return false;
      }
      const parent = node2.parent;
      return parent.type === "Program" || parent.type === "TSModuleBlock" || parent.type === "BlockStatement" && isFunction2(parent.parent);
    }
    function isDirective(node2) {
      return node2.type === "ExpressionStatement" && typeof node2.directive === "string";
    }
    function isStartOfExpressionStatement(node2) {
      const start = node2.range[0];
      let ancestor = node2;
      while ((ancestor = ancestor.parent) && ancestor.range[0] === start) {
        if (ancestor.type === "ExpressionStatement") {
          return true;
        }
      }
      return false;
    }
    let needsPrecedingSemicolon;
    {
      let isInType = function(node2) {
        for (let currNode = node2; ; ) {
          const { parent } = currNode;
          if (!parent) {
            break;
          }
          if (TS_TYPE_NODE_TYPES.has(parent.type) && currNode === parent.typeAnnotation) {
            return true;
          }
          currNode = parent;
        }
        return false;
      };
      const BREAK_OR_CONTINUE = /* @__PURE__ */ new Set(["BreakStatement", "ContinueStatement"]);
      const DECLARATIONS = /* @__PURE__ */ new Set([
        "ExportAllDeclaration",
        "ExportNamedDeclaration",
        "ImportDeclaration"
      ]);
      const IDENTIFIER_OR_KEYWORD = /* @__PURE__ */ new Set(["Identifier", "Keyword"]);
      const NODE_TYPES_BY_KEYWORD = {
        __proto__: null,
        break: "BreakStatement",
        continue: "ContinueStatement",
        debugger: "DebuggerStatement",
        do: "DoWhileStatement",
        else: "IfStatement",
        return: "ReturnStatement",
        yield: "YieldExpression"
      };
      const PUNCTUATORS = /* @__PURE__ */ new Set([":", ";", "{", "=>", "++", "--"]);
      const STATEMENTS = /* @__PURE__ */ new Set([
        "DoWhileStatement",
        "ForInStatement",
        "ForOfStatement",
        "ForStatement",
        "IfStatement",
        "WhileStatement",
        "WithStatement"
      ]);
      const TS_TYPE_NODE_TYPES = /* @__PURE__ */ new Set([
        "TSAsExpression",
        "TSSatisfiesExpression",
        "TSTypeAliasDeclaration",
        "TSTypeAnnotation"
      ]);
      needsPrecedingSemicolon = function(sourceCode2, node2) {
        const prevToken = sourceCode2.getTokenBefore(node2);
        if (!prevToken || prevToken.type === "Punctuator" && PUNCTUATORS.has(prevToken.value)) {
          return false;
        }
        const prevNode = sourceCode2.getNodeByRangeIndex(prevToken.range[0]);
        if (prevNode.type === "TSDeclareFunction" || prevNode.parent.type === "TSImportEqualsDeclaration" || prevNode.parent.parent?.type === "TSImportEqualsDeclaration" || TS_TYPE_NODE_TYPES.has(prevNode.type) || isInType(prevNode)) {
          return false;
        }
        if (isClosingParenToken(prevToken)) {
          return !STATEMENTS.has(prevNode.type);
        }
        if (isClosingBraceToken(prevToken)) {
          return prevNode.type === "BlockStatement" && prevNode.parent.type === "FunctionExpression" && prevNode.parent.parent.type !== "MethodDefinition" || prevNode.type === "ClassBody" && prevNode.parent.type === "ClassExpression" || prevNode.type === "ObjectExpression";
        }
        if (IDENTIFIER_OR_KEYWORD.has(prevToken.type)) {
          if (prevNode.parent.type === "VariableDeclarator" && !prevNode.parent.init) {
            return false;
          }
          if (BREAK_OR_CONTINUE.has(prevNode.parent.type)) {
            return false;
          }
          const keyword2 = prevToken.value;
          const nodeType = NODE_TYPES_BY_KEYWORD[keyword2];
          return prevNode.type !== nodeType;
        }
        if (prevToken.type === "String") {
          return !DECLARATIONS.has(prevNode.parent.type);
        }
        return true;
      };
    }
    function isImportAttributeKey(node2) {
      const { parent } = node2;
      if (parent.type === "ImportAttribute" && parent.key === node2) {
        return true;
      }
      if (parent.type === "Property" && !parent.computed && (parent.key === node2 || parent.value === node2 && parent.shorthand && !parent.method) && parent.parent.type === "ObjectExpression") {
        const objectExpression = parent.parent;
        const objectExpressionParent = objectExpression.parent;
        if (objectExpressionParent.type === "ImportExpression" && objectExpressionParent.options === objectExpression) {
          return true;
        }
        if (objectExpressionParent.type === "Property" && objectExpressionParent.value === objectExpression) {
          return isImportAttributeKey(objectExpressionParent.key);
        }
      }
      return false;
    }
    module.exports = {
      COMMENTS_IGNORE_PATTERN,
      LINEBREAKS,
      LINEBREAK_MATCHER: lineBreakPattern,
      SHEBANG_MATCHER: shebangPattern,
      STATEMENT_LIST_PARENTS,
      ECMASCRIPT_GLOBALS,
      /**
       * Determines whether two adjacent tokens are on the same line.
       * @param {Object} left The left token object.
       * @param {Object} right The right token object.
       * @returns {boolean} Whether or not the tokens are on the same line.
       * @public
       */
      isTokenOnSameLine(left, right) {
        return left.loc.end.line === right.loc.start.line;
      },
      isNullOrUndefined: isNullOrUndefined2,
      isCallee,
      isES5Constructor,
      getUpperFunction,
      isFunction: isFunction2,
      isLoop,
      isInLoop,
      isArrayFromMethod,
      isParenthesised,
      createGlobalLinebreakMatcher,
      equalTokens,
      isArrowToken,
      isClosingBraceToken,
      isClosingBracketToken,
      isClosingParenToken,
      isColonToken,
      isCommaToken,
      isCommentToken,
      isDotToken,
      isQuestionDotToken,
      isKeywordToken,
      isNotClosingBraceToken: negate(isClosingBraceToken),
      isNotClosingBracketToken: negate(isClosingBracketToken),
      isNotClosingParenToken: negate(isClosingParenToken),
      isNotColonToken: negate(isColonToken),
      isNotCommaToken: negate(isCommaToken),
      isNotDotToken: negate(isDotToken),
      isNotQuestionDotToken: negate(isQuestionDotToken),
      isNotOpeningBraceToken: negate(isOpeningBraceToken),
      isNotOpeningBracketToken: negate(isOpeningBracketToken),
      isNotOpeningParenToken: negate(isOpeningParenToken),
      isNotSemicolonToken: negate(isSemicolonToken),
      isOpeningBraceToken,
      isOpeningBracketToken,
      isOpeningParenToken,
      isSemicolonToken,
      isEqToken,
      /**
       * Checks whether or not a given node is a string literal.
       * @param {ASTNode} node A node to check.
       * @returns {boolean} `true` if the node is a string literal.
       */
      isStringLiteral(node2) {
        return node2.type === "Literal" && typeof node2.value === "string" || node2.type === "TemplateLiteral";
      },
      /**
       * Checks whether a given node is a breakable statement or not.
       * The node is breakable if the node is one of the following type:
       *
       * - DoWhileStatement
       * - ForInStatement
       * - ForOfStatement
       * - ForStatement
       * - SwitchStatement
       * - WhileStatement
       * @param {ASTNode} node A node to check.
       * @returns {boolean} `true` if the node is breakable.
       */
      isBreakableStatement(node2) {
        return breakableTypePattern.test(node2.type);
      },
      /**
       * Gets references which are non initializer and writable.
       * @param {Reference[]} references An array of references.
       * @returns {Reference[]} An array of only references which are non initializer and writable.
       * @public
       */
      getModifyingReferences(references) {
        return references.filter(isModifyingReference);
      },
      /**
       * Validate that a string passed in is surrounded by the specified character
       * @param {string} val The text to check.
       * @param {string} character The character to see if it's surrounded by.
       * @returns {boolean} True if the text is surrounded by the character, false if not.
       * @private
       */
      isSurroundedBy(val, character) {
        return val[0] === character && val.at(-1) === character;
      },
      /**
       * Returns whether the provided node is an ESLint directive comment or not
       * @param {Line|Block} node The comment token to be checked
       * @returns {boolean} `true` if the node is an ESLint directive comment
       */
      isDirectiveComment(node2) {
        const comment2 = node2.value.trim();
        return node2.type === "Line" && comment2.startsWith("eslint-") || node2.type === "Block" && ESLINT_DIRECTIVE_PATTERN.test(comment2);
      },
      /**
       * Gets the trailing statement of a given node.
       *
       *     if (code)
       *         consequent;
       *
       * When taking this `IfStatement`, returns `consequent;` statement.
       * @param {ASTNode} A node to get.
       * @returns {ASTNode|null} The trailing statement's node.
       */
      getTrailingStatement: esutils.ast.trailingStatement,
      /**
       * Finds the variable by a given name in a given scope and its upper scopes.
       * @param {eslint-scope.Scope} initScope A scope to start find.
       * @param {string} name A variable name to find.
       * @returns {eslint-scope.Variable|null} A found variable or `null`.
       */
      getVariableByName(initScope, name) {
        let scope = initScope;
        while (scope) {
          const variable = scope.set.get(name);
          if (variable) {
            return variable;
          }
          scope = scope.upper;
        }
        return null;
      },
      /**
       * Checks whether or not a given function node is the default `this` binding.
       *
       * First, this checks the node:
       *
       * - The given node is not in `PropertyDefinition#value` position.
       * - The given node is not `StaticBlock`.
       * - The function name does not start with uppercase. It's a convention to capitalize the names
       *   of constructor functions. This check is not performed if `capIsConstructor` is set to `false`.
       * - The function does not have a JSDoc comment that has a @this tag.
       *
       * Next, this checks the location of the node.
       * If the location is below, this judges `this` is valid.
       *
       * - The location is not on an object literal.
       * - The location is not assigned to a variable which starts with an uppercase letter. Applies to anonymous
       *   functions only, as the name of the variable is considered to be the name of the function in this case.
       *   This check is not performed if `capIsConstructor` is set to `false`.
       * - The location is not on an ES2015 class.
       * - Its `bind`/`call`/`apply` method is not called directly.
       * - The function is not a callback of array methods (such as `.forEach()`) if `thisArg` is given.
       * @param {ASTNode} node A function node to check. It also can be an implicit function, like `StaticBlock`
       * or any expression that is `PropertyDefinition#value` node.
       * @param {SourceCode} sourceCode A SourceCode instance to get comments.
       * @param {boolean} [capIsConstructor = true] `false` disables the assumption that functions which name starts
       * with an uppercase or are assigned to a variable which name starts with an uppercase are constructors.
       * @returns {boolean} The function node is the default `this` binding.
       */
      isDefaultThisBinding(node2, sourceCode2, { capIsConstructor = true } = {}) {
        if (node2.parent.type === "PropertyDefinition" && node2.parent.value === node2) {
          return false;
        }
        if (node2.type === "StaticBlock") {
          return false;
        }
        if ((node2.type === "FunctionDeclaration" || node2.type === "FunctionExpression") && node2.params.some(
          (param) => param.type === "Identifier" && param.name === "this"
        )) {
          return false;
        }
        if (capIsConstructor && isES5Constructor(node2) || hasJSDocThisTag(node2, sourceCode2)) {
          return false;
        }
        const isAnonymous = node2.id === null;
        let currentNode = node2;
        while (currentNode) {
          const parent = currentNode.parent;
          switch (parent.type) {
            /*
             * Looks up the destination.
             * e.g., obj.foo = nativeFoo || function foo() { ... };
             */
            case "LogicalExpression":
            case "ConditionalExpression":
            case "ChainExpression":
              currentNode = parent;
              break;
            /*
             * If the upper function is IIFE, checks the destination of the return value.
             * e.g.
             *   obj.foo = (function() {
             *     // setup...
             *     return function foo() { ... };
             *   })();
             *   obj.foo = (() =>
             *     function foo() { ... }
             *   )();
             */
            case "ReturnStatement": {
              const func = getUpperFunction(parent);
              if (func === null || !isCallee(func)) {
                return true;
              }
              currentNode = func.parent;
              break;
            }
            case "ArrowFunctionExpression":
              if (currentNode !== parent.body || !isCallee(parent)) {
                return true;
              }
              currentNode = parent.parent;
              break;
            /*
             * e.g.
             *   var obj = { foo() { ... } };
             *   var obj = { foo: function() { ... } };
             *   class A { constructor() { ... } }
             *   class A { foo() { ... } }
             *   class A { get foo() { ... } }
             *   class A { set foo() { ... } }
             *   class A { static foo() { ... } }
             *   class A { foo = function() { ... } }
             */
            case "Property":
            case "PropertyDefinition":
            case "MethodDefinition":
              return parent.value !== currentNode;
            /*
             * e.g.
             *   obj.foo = function foo() { ... };
             *   Foo = function() { ... };
             *   [obj.foo = function foo() { ... }] = a;
             *   [Foo = function() { ... }] = a;
             */
            case "AssignmentExpression":
            case "AssignmentPattern":
              if (parent.left.type === "MemberExpression") {
                return false;
              }
              if (capIsConstructor && isAnonymous && parent.left.type === "Identifier" && startsWithUpperCase(parent.left.name)) {
                return false;
              }
              return true;
            /*
             * e.g.
             *   var Foo = function() { ... };
             */
            case "VariableDeclarator":
              return !(capIsConstructor && isAnonymous && parent.init === currentNode && parent.id.type === "Identifier" && startsWithUpperCase(parent.id.name));
            /*
             * e.g.
             *   var foo = function foo() { ... }.bind(obj);
             *   (function foo() { ... }).call(obj);
             *   (function foo() { ... }).apply(obj, []);
             */
            case "MemberExpression":
              if (parent.object === currentNode && isSpecificMemberAccess(
                parent,
                null,
                bindOrCallOrApplyPattern
              )) {
                const maybeCalleeNode = parent.parent.type === "ChainExpression" ? parent.parent : parent;
                return !(isCallee(maybeCalleeNode) && maybeCalleeNode.parent.arguments.length >= 1 && !isNullOrUndefined2(
                  maybeCalleeNode.parent.arguments[0]
                ));
              }
              return true;
            /*
             * e.g.
             *   Reflect.apply(function() {}, obj, []);
             *   Array.from([], function() {}, obj);
             *   list.forEach(function() {}, obj);
             */
            case "CallExpression":
              if (isReflectApply(parent.callee)) {
                return parent.arguments.length !== 3 || parent.arguments[0] !== currentNode || isNullOrUndefined2(parent.arguments[1]);
              }
              if (isArrayFromMethod(parent.callee)) {
                return parent.arguments.length !== 3 || parent.arguments[1] !== currentNode || isNullOrUndefined2(parent.arguments[2]);
              }
              if (isMethodWhichHasThisArg(parent.callee)) {
                return parent.arguments.length !== 2 || parent.arguments[0] !== currentNode || isNullOrUndefined2(parent.arguments[1]);
              }
              return true;
            // Otherwise `this` is default.
            default:
              return true;
          }
        }
        return true;
      },
      /**
       * Get the precedence level based on the node type
       * @param {ASTNode} node node to evaluate
       * @returns {number} precedence level
       * @private
       */
      getPrecedence(node2) {
        switch (node2.type) {
          case "SequenceExpression":
            return 0;
          case "AssignmentExpression":
          case "ArrowFunctionExpression":
          case "YieldExpression":
            return 1;
          case "ConditionalExpression":
            return 3;
          case "LogicalExpression":
            switch (node2.operator) {
              case "||":
              case "??":
                return 4;
              case "&&":
                return 5;
            }
          /* falls through */
          case "BinaryExpression":
            switch (node2.operator) {
              case "|":
                return 6;
              case "^":
                return 7;
              case "&":
                return 8;
              case "==":
              case "!=":
              case "===":
              case "!==":
                return 9;
              case "<":
              case "<=":
              case ">":
              case ">=":
              case "in":
              case "instanceof":
                return 10;
              case "<<":
              case ">>":
              case ">>>":
                return 11;
              case "+":
              case "-":
                return 12;
              case "*":
              case "/":
              case "%":
                return 13;
              case "**":
                return 15;
            }
          /* falls through */
          case "UnaryExpression":
          case "AwaitExpression":
            return 16;
          case "UpdateExpression":
            return 17;
          case "CallExpression":
          case "ChainExpression":
          case "ImportExpression":
            return 18;
          case "NewExpression":
            return 19;
          default:
            if (node2.type in eslintVisitorKeys2) {
              return 20;
            }
            return -1;
        }
      },
      /**
       * Checks whether the given node is an empty block node or not.
       * @param {ASTNode|null} node The node to check.
       * @returns {boolean} `true` if the node is an empty block.
       */
      isEmptyBlock(node2) {
        return Boolean(
          node2 && node2.type === "BlockStatement" && node2.body.length === 0
        );
      },
      /**
       * Checks whether the given node is an empty function node or not.
       * @param {ASTNode|null} node The node to check.
       * @returns {boolean} `true` if the node is an empty function.
       */
      isEmptyFunction(node2) {
        return isFunction2(node2) && module.exports.isEmptyBlock(node2.body);
      },
      /**
       * Get directives from directive prologue of a Program or Function node.
       * @param {ASTNode} node The node to check.
       * @returns {ASTNode[]} The directives found in the directive prologue.
       */
      getDirectivePrologue(node2) {
        const directives2 = [];
        if (node2.type === "Program" || node2.type === "FunctionDeclaration" || node2.type === "FunctionExpression" || /*
        * Do not check arrow functions with implicit return.
        * `() => "use strict";` returns the string `"use strict"`.
        */
        node2.type === "ArrowFunctionExpression" && node2.body.type === "BlockStatement") {
          const statements = node2.type === "Program" ? node2.body : node2.body.body;
          for (const statement of statements) {
            if (statement.type === "ExpressionStatement" && statement.expression.type === "Literal") {
              directives2.push(statement);
            } else {
              break;
            }
          }
        }
        return directives2;
      },
      /**
       * Determines whether this node is a decimal integer literal. If a node is a decimal integer literal, a dot added
       * after the node will be parsed as a decimal point, rather than a property-access dot.
       * @param {ASTNode} node The node to check.
       * @returns {boolean} `true` if this node is a decimal integer.
       * @example
       *
       * 0         // true
       * 5         // true
       * 50        // true
       * 5_000     // true
       * 1_234_56  // true
       * 08        // true
       * 0192      // true
       * 5.        // false
       * .5        // false
       * 5.0       // false
       * 5.00_00   // false
       * 05        // false
       * 0x5       // false
       * 0b101     // false
       * 0b11_01   // false
       * 0o5       // false
       * 5e0       // false
       * 5e1_000   // false
       * 5n        // false
       * 1_000n    // false
       * "5"       // false
       *
       */
      isDecimalInteger(node2) {
        return node2.type === "Literal" && typeof node2.value === "number" && DECIMAL_INTEGER_PATTERN.test(node2.raw);
      },
      /**
       * Determines whether this token is a decimal integer numeric token.
       * This is similar to isDecimalInteger(), but for tokens.
       * @param {Token} token The token to check.
       * @returns {boolean} `true` if this token is a decimal integer.
       */
      isDecimalIntegerNumericToken(token) {
        return token.type === "Numeric" && DECIMAL_INTEGER_PATTERN.test(token.value);
      },
      /**
       * Gets the name and kind of the given function node.
       *
       * - `function foo() {}`  .................... `function 'foo'`
       * - `(function foo() {})`  .................. `function 'foo'`
       * - `(function() {})`  ...................... `function`
       * - `function* foo() {}`  ................... `generator function 'foo'`
       * - `(function* foo() {})`  ................. `generator function 'foo'`
       * - `(function*() {})`  ..................... `generator function`
       * - `() => {}`  ............................. `arrow function`
       * - `async () => {}`  ....................... `async arrow function`
       * - `({ foo: function foo() {} })`  ......... `method 'foo'`
       * - `({ foo: function() {} })`  ............. `method 'foo'`
       * - `({ ['foo']: function() {} })`  ......... `method 'foo'`
       * - `({ [foo]: function() {} })`  ........... `method`
       * - `({ foo() {} })`  ....................... `method 'foo'`
       * - `({ foo: function* foo() {} })`  ........ `generator method 'foo'`
       * - `({ foo: function*() {} })`  ............ `generator method 'foo'`
       * - `({ ['foo']: function*() {} })`  ........ `generator method 'foo'`
       * - `({ [foo]: function*() {} })`  .......... `generator method`
       * - `({ *foo() {} })`  ...................... `generator method 'foo'`
       * - `({ foo: async function foo() {} })`  ... `async method 'foo'`
       * - `({ foo: async function() {} })`  ....... `async method 'foo'`
       * - `({ ['foo']: async function() {} })`  ... `async method 'foo'`
       * - `({ [foo]: async function() {} })`  ..... `async method`
       * - `({ async foo() {} })`  ................. `async method 'foo'`
       * - `({ get foo() {} })`  ................... `getter 'foo'`
       * - `({ set foo(a) {} })`  .................. `setter 'foo'`
       * - `class A { constructor() {} }`  ......... `constructor`
       * - `class A { foo() {} }`  ................. `method 'foo'`
       * - `class A { *foo() {} }`  ................ `generator method 'foo'`
       * - `class A { async foo() {} }`  ........... `async method 'foo'`
       * - `class A { ['foo']() {} }`  ............. `method 'foo'`
       * - `class A { *['foo']() {} }`  ............ `generator method 'foo'`
       * - `class A { async ['foo']() {} }`  ....... `async method 'foo'`
       * - `class A { [foo]() {} }`  ............... `method`
       * - `class A { *[foo]() {} }`  .............. `generator method`
       * - `class A { async [foo]() {} }`  ......... `async method`
       * - `class A { get foo() {} }`  ............. `getter 'foo'`
       * - `class A { set foo(a) {} }`  ............ `setter 'foo'`
       * - `class A { static foo() {} }`  .......... `static method 'foo'`
       * - `class A { static *foo() {} }`  ......... `static generator method 'foo'`
       * - `class A { static async foo() {} }`  .... `static async method 'foo'`
       * - `class A { static get foo() {} }`  ...... `static getter 'foo'`
       * - `class A { static set foo(a) {} }`  ..... `static setter 'foo'`
       * - `class A { foo = () => {}; }`  .......... `method 'foo'`
       * - `class A { foo = function() {}; }`  ..... `method 'foo'`
       * - `class A { foo = function bar() {}; }`  . `method 'foo'`
       * - `class A { static foo = () => {}; }`  ... `static method 'foo'`
       * - `class A { '#foo' = () => {}; }`  ....... `method '#foo'`
       * - `class A { #foo = () => {}; }`  ......... `private method #foo`
       * - `class A { static #foo = () => {}; }`  .. `static private method #foo`
       * - `class A { '#foo'() {} }`  .............. `method '#foo'`
       * - `class A { #foo() {} }`  ................ `private method #foo`
       * - `class A { static #foo() {} }`  ......... `static private method #foo`
       * @param {ASTNode} node The function node to get.
       * @returns {string} The name and kind of the function node.
       */
      getFunctionNameWithKind(node2) {
        const parent = node2.parent;
        const tokens = [];
        if (parent.type === "MethodDefinition" || parent.type === "PropertyDefinition" || node2.type === "TSPropertySignature" || node2.type === "TSMethodSignature") {
          if (parent.static) {
            tokens.push("static");
          }
          if (!parent.computed && parent.key?.type === "PrivateIdentifier") {
            tokens.push("private");
          }
        }
        if (node2.async) {
          tokens.push("async");
        }
        if (node2.generator) {
          tokens.push("generator");
        }
        if (parent.type === "Property" || parent.type === "MethodDefinition") {
          if (parent.kind === "constructor") {
            return "constructor";
          }
          if (parent.kind === "get") {
            tokens.push("getter");
          } else if (parent.kind === "set") {
            tokens.push("setter");
          } else {
            tokens.push("method");
          }
        } else if (node2.type === "TSMethodSignature") {
          if (node2.kind === "get") {
            tokens.push("getter");
          } else if (node2.kind === "set") {
            tokens.push("setter");
          } else {
            tokens.push("method");
          }
        } else if (parent.type === "PropertyDefinition") {
          tokens.push("method");
        } else {
          if (node2.type === "ArrowFunctionExpression") {
            tokens.push("arrow");
          }
          tokens.push("function");
        }
        if (parent.type === "Property" || parent.type === "MethodDefinition" || parent.type === "PropertyDefinition") {
          if (!parent.computed && parent.key.type === "PrivateIdentifier") {
            tokens.push(`#${parent.key.name}`);
          } else {
            const name = getStaticPropertyName(parent);
            if (name !== null) {
              tokens.push(`'${name}'`);
            } else if (node2.id) {
              tokens.push(`'${node2.id.name}'`);
            }
          }
        } else if (node2.type === "TSMethodSignature") {
          tokens.push(`'${getStaticPropertyName(node2)}'`);
        } else if (node2.id) {
          tokens.push(`'${node2.id.name}'`);
        }
        return tokens.join(" ");
      },
      /**
       * Gets the location of the given function node for reporting.
       *
       * - `function foo() {}`
       *    ^^^^^^^^^^^^
       * - `(function foo() {})`
       *     ^^^^^^^^^^^^
       * - `(function() {})`
       *     ^^^^^^^^
       * - `function* foo() {}`
       *    ^^^^^^^^^^^^^
       * - `(function* foo() {})`
       *     ^^^^^^^^^^^^^
       * - `(function*() {})`
       *     ^^^^^^^^^
       * - `() => {}`
       *       ^^
       * - `async () => {}`
       *             ^^
       * - `({ foo: function foo() {} })`
       *       ^^^^^^^^^^^^^^^^^
       * - `({ foo: function() {} })`
       *       ^^^^^^^^^^^^^
       * - `({ ['foo']: function() {} })`
       *       ^^^^^^^^^^^^^^^^^
       * - `({ [foo]: function() {} })`
       *       ^^^^^^^^^^^^^^^
       * - `({ foo() {} })`
       *       ^^^
       * - `({ foo: function* foo() {} })`
       *       ^^^^^^^^^^^^^^^^^^
       * - `({ foo: function*() {} })`
       *       ^^^^^^^^^^^^^^
       * - `({ ['foo']: function*() {} })`
       *       ^^^^^^^^^^^^^^^^^^
       * - `({ [foo]: function*() {} })`
       *       ^^^^^^^^^^^^^^^^
       * - `({ *foo() {} })`
       *       ^^^^
       * - `({ foo: async function foo() {} })`
       *       ^^^^^^^^^^^^^^^^^^^^^^^
       * - `({ foo: async function() {} })`
       *       ^^^^^^^^^^^^^^^^^^^
       * - `({ ['foo']: async function() {} })`
       *       ^^^^^^^^^^^^^^^^^^^^^^^
       * - `({ [foo]: async function() {} })`
       *       ^^^^^^^^^^^^^^^^^^^^^
       * - `({ async foo() {} })`
       *       ^^^^^^^^^
       * - `({ get foo() {} })`
       *       ^^^^^^^
       * - `({ set foo(a) {} })`
       *       ^^^^^^^
       * - `class A { constructor() {} }`
       *              ^^^^^^^^^^^
       * - `class A { foo() {} }`
       *              ^^^
       * - `class A { *foo() {} }`
       *              ^^^^
       * - `class A { async foo() {} }`
       *              ^^^^^^^^^
       * - `class A { ['foo']() {} }`
       *              ^^^^^^^
       * - `class A { *['foo']() {} }`
       *              ^^^^^^^^
       * - `class A { async ['foo']() {} }`
       *              ^^^^^^^^^^^^^
       * - `class A { [foo]() {} }`
       *              ^^^^^
       * - `class A { *[foo]() {} }`
       *              ^^^^^^
       * - `class A { async [foo]() {} }`
       *              ^^^^^^^^^^^
       * - `class A { get foo() {} }`
       *              ^^^^^^^
       * - `class A { set foo(a) {} }`
       *              ^^^^^^^
       * - `class A { static foo() {} }`
       *              ^^^^^^^^^^
       * - `class A { static *foo() {} }`
       *              ^^^^^^^^^^^
       * - `class A { static async foo() {} }`
       *              ^^^^^^^^^^^^^^^^
       * - `class A { static get foo() {} }`
       *              ^^^^^^^^^^^^^^
       * - `class A { static set foo(a) {} }`
       *              ^^^^^^^^^^^^^^
       * - `class A { foo = function() {} }`
       *              ^^^^^^^^^^^^^^
       * - `class A { static foo = function() {} }`
       *              ^^^^^^^^^^^^^^^^^^^^^
       * - `class A { foo = (a, b) => {} }`
       *              ^^^^^^
       * @param {ASTNode} node The function node to get.
       * @param {SourceCode} sourceCode The source code object to get tokens.
       * @returns {string} The location of the function node for reporting.
       */
      getFunctionHeadLoc(node2, sourceCode2) {
        const parent = node2.parent;
        let start;
        let end;
        if (parent.type === "Property" || parent.type === "MethodDefinition" || parent.type === "PropertyDefinition" || parent.type === "TSPropertySignature" || parent.type === "TSMethodSignature") {
          start = parent.loc.start;
          end = getOpeningParenOfParams(node2, sourceCode2).loc.start;
        } else if (node2.type === "ArrowFunctionExpression") {
          const arrowToken = sourceCode2.getTokenBefore(
            node2.body,
            isArrowToken
          );
          start = arrowToken.loc.start;
          end = arrowToken.loc.end;
        } else {
          start = node2.loc.start;
          end = getOpeningParenOfParams(node2, sourceCode2).loc.start;
        }
        return {
          start: Object.assign({}, start),
          end: Object.assign({}, end)
        };
      },
      /**
       * Gets next location when the result is not out of bound, otherwise returns null.
       *
       * Assumptions:
       *
       * - The given location represents a valid location in the given source code.
       * - Columns are 0-based.
       * - Lines are 1-based.
       * - Column immediately after the last character in a line (not incl. linebreaks) is considered to be a valid location.
       * - If the source code ends with a linebreak, `sourceCode.lines` array will have an extra element (empty string) at the end.
       *   The start (column 0) of that extra line is considered to be a valid location.
       *
       * Examples of successive locations (line, column):
       *
       * code: foo
       * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> null
       *
       * code: foo<LF>
       * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> (2, 0) -> null
       *
       * code: foo<CR><LF>
       * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> (2, 0) -> null
       *
       * code: a<LF>b
       * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> null
       *
       * code: a<LF>b<LF>
       * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> (3, 0) -> null
       *
       * code: a<CR><LF>b<CR><LF>
       * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> (3, 0) -> null
       *
       * code: a<LF><LF>
       * locations: (1, 0) -> (1, 1) -> (2, 0) -> (3, 0) -> null
       *
       * code: <LF>
       * locations: (1, 0) -> (2, 0) -> null
       *
       * code:
       * locations: (1, 0) -> null
       * @param {SourceCode} sourceCode The sourceCode
       * @param {{line: number, column: number}} location The location
       * @returns {{line: number, column: number} | null} Next location
       */
      getNextLocation(sourceCode2, { line, column }) {
        if (column < sourceCode2.lines[line - 1].length) {
          return {
            line,
            column: column + 1
          };
        }
        if (line < sourceCode2.lines.length) {
          return {
            line: line + 1,
            column: 0
          };
        }
        return null;
      },
      /**
       * Gets the parenthesized text of a node. This is similar to sourceCode.getText(node), but it also includes any parentheses
       * surrounding the node.
       * @param {SourceCode} sourceCode The source code object
       * @param {ASTNode} node An expression node
       * @returns {string} The text representing the node, with all surrounding parentheses included
       */
      getParenthesisedText(sourceCode2, node2) {
        let leftToken = sourceCode2.getFirstToken(node2);
        let rightToken = sourceCode2.getLastToken(node2);
        while (sourceCode2.getTokenBefore(leftToken) && sourceCode2.getTokenBefore(leftToken).type === "Punctuator" && sourceCode2.getTokenBefore(leftToken).value === "(" && sourceCode2.getTokenAfter(rightToken) && sourceCode2.getTokenAfter(rightToken).type === "Punctuator" && sourceCode2.getTokenAfter(rightToken).value === ")") {
          leftToken = sourceCode2.getTokenBefore(leftToken);
          rightToken = sourceCode2.getTokenAfter(rightToken);
        }
        return sourceCode2.getText().slice(leftToken.range[0], rightToken.range[1]);
      },
      /**
       * Determine if a node has a possibility to be an Error object
       * @param {ASTNode} node ASTNode to check
       * @returns {boolean} True if there is a chance it contains an Error obj
       */
      couldBeError(node2) {
        switch (node2.type) {
          case "Identifier":
          case "CallExpression":
          case "NewExpression":
          case "MemberExpression":
          case "TaggedTemplateExpression":
          case "YieldExpression":
          case "AwaitExpression":
          case "ChainExpression":
            return true;
          // possibly an error object.
          case "AssignmentExpression":
            if (["=", "&&="].includes(node2.operator)) {
              return module.exports.couldBeError(node2.right);
            }
            if (["||=", "??="].includes(node2.operator)) {
              return module.exports.couldBeError(node2.left) || module.exports.couldBeError(node2.right);
            }
            return false;
          case "SequenceExpression": {
            const exprs = node2.expressions;
            return exprs.length !== 0 && module.exports.couldBeError(exprs.at(-1));
          }
          case "LogicalExpression":
            if (node2.operator === "&&") {
              return module.exports.couldBeError(node2.right);
            }
            return module.exports.couldBeError(node2.left) || module.exports.couldBeError(node2.right);
          case "ConditionalExpression":
            return module.exports.couldBeError(node2.consequent) || module.exports.couldBeError(node2.alternate);
          default:
            return false;
        }
      },
      /**
       * Check if a given node is a numeric literal or not.
       * @param {ASTNode} node The node to check.
       * @returns {boolean} `true` if the node is a number or bigint literal.
       */
      isNumericLiteral(node2) {
        return node2.type === "Literal" && (typeof node2.value === "number" || Boolean(node2.bigint));
      },
      /**
       * Determines whether two tokens can safely be placed next to each other without merging into a single token
       * @param {Token|string} leftValue The left token. If this is a string, it will be tokenized and the last token will be used.
       * @param {Token|string} rightValue The right token. If this is a string, it will be tokenized and the first token will be used.
       * @returns {boolean} If the tokens cannot be safely placed next to each other, returns `false`. If the tokens can be placed
       * next to each other, behavior is undefined (although it should return `true` in most cases).
       */
      canTokensBeAdjacent(leftValue, rightValue) {
        const espreeOptions = {
          ecmaVersion: espree2.latestEcmaVersion,
          comment: true,
          range: true
        };
        let leftToken;
        if (typeof leftValue === "string") {
          let tokens;
          try {
            tokens = espree2.tokenize(leftValue, espreeOptions);
          } catch {
            return false;
          }
          const comments = tokens.comments;
          leftToken = tokens.at(-1);
          if (comments.length) {
            const lastComment = comments.at(-1);
            if (!leftToken || lastComment.range[0] > leftToken.range[0]) {
              leftToken = lastComment;
            }
          }
        } else {
          leftToken = leftValue;
        }
        if (leftToken.type === "Shebang" || leftToken.type === "Hashbang") {
          return false;
        }
        let rightToken;
        if (typeof rightValue === "string") {
          let tokens;
          try {
            tokens = espree2.tokenize(rightValue, espreeOptions);
          } catch {
            return false;
          }
          const comments = tokens.comments;
          rightToken = tokens[0];
          if (comments.length) {
            const firstComment = comments[0];
            if (!rightToken || firstComment.range[0] < rightToken.range[0]) {
              rightToken = firstComment;
            }
          }
        } else {
          rightToken = rightValue;
        }
        if (leftToken.type === "Punctuator" || rightToken.type === "Punctuator") {
          if (leftToken.type === "Punctuator" && rightToken.type === "Punctuator") {
            const PLUS_TOKENS = /* @__PURE__ */ new Set(["+", "++"]);
            const MINUS_TOKENS = /* @__PURE__ */ new Set(["-", "--"]);
            return !(PLUS_TOKENS.has(leftToken.value) && PLUS_TOKENS.has(rightToken.value) || MINUS_TOKENS.has(leftToken.value) && MINUS_TOKENS.has(rightToken.value));
          }
          if (leftToken.type === "Punctuator" && leftToken.value === "/") {
            return !["Block", "Line", "RegularExpression"].includes(
              rightToken.type
            );
          }
          return true;
        }
        if (leftToken.type === "String" || rightToken.type === "String" || leftToken.type === "Template" || rightToken.type === "Template") {
          return true;
        }
        if (leftToken.type !== "Numeric" && rightToken.type === "Numeric" && rightToken.value.startsWith(".")) {
          return true;
        }
        if (leftToken.type === "Block" || rightToken.type === "Block" || rightToken.type === "Line") {
          return true;
        }
        if (rightToken.type === "PrivateIdentifier") {
          return true;
        }
        return false;
      },
      /**
       * Get the `loc` object of a given name in a `/*globals` directive comment.
       * @param {SourceCode} sourceCode The source code to convert index to loc.
       * @param {Comment} comment The `/*globals` directive comment which include the name.
       * @param {string} name The name to find.
       * @returns {SourceLocation} The `loc` object.
       */
      getNameLocationInGlobalDirectiveComment(sourceCode2, comment2, name) {
        const namePattern = new RegExp(
          `[\\s,]${escapeRegExp(name)}(?:$|[\\s,:])`,
          "gu"
        );
        namePattern.lastIndex = comment2.value.indexOf("global") + 6;
        const match = namePattern.exec(comment2.value);
        const start = sourceCode2.getLocFromIndex(
          comment2.range[0] + "/*".length + (match ? match.index + 1 : 0)
        );
        const end = {
          line: start.line,
          column: start.column + (match ? name.length : 1)
        };
        return { start, end };
      },
      /**
       * Determines whether the given raw string contains an octal escape sequence
       * or a non-octal decimal escape sequence ("\8", "\9").
       *
       * "\1", "\2" ... "\7", "\8", "\9"
       * "\00", "\01" ... "\07", "\08", "\09"
       *
       * "\0", when not followed by a digit, is not an octal escape sequence.
       * @param {string} rawString A string in its raw representation.
       * @returns {boolean} `true` if the string contains at least one octal escape sequence
       * or at least one non-octal decimal escape sequence.
       */
      hasOctalOrNonOctalDecimalEscapeSequence(rawString) {
        return OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN.test(rawString);
      },
      /**
       * Determines whether the given node is a template literal without expressions.
       * @param {ASTNode} node Node to check.
       * @returns {boolean} True if the node is a template literal without expressions.
       */
      isStaticTemplateLiteral(node2) {
        return node2.type === "TemplateLiteral" && node2.expressions.length === 0;
      },
      /**
       * Determines whether the existing curly braces around the single statement are necessary to preserve the semantics of the code.
       * The braces, which make the given block body, are necessary in either of the following situations:
       *
       * 1. The statement is a lexical declaration.
       * 2. Without the braces, an `if` within the statement would become associated with an `else` after the closing brace:
       *
       *     if (a) {
       *         if (b)
       *             foo();
       *     }
       *     else
       *         bar();
       *
       *     if (a)
       *         while (b)
       *             while (c) {
       *                 while (d)
       *                     if (e)
       *                         while(f)
       *                             foo();
       *            }
       *     else
       *         bar();
       * @param {ASTNode} node `BlockStatement` body with exactly one statement directly inside. The statement can have its own nested statements.
       * @param {SourceCode} sourceCode The source code
       * @returns {boolean} `true` if the braces are necessary - removing them (replacing the given `BlockStatement` body with its single statement content)
       * would change the semantics of the code or produce a syntax error.
       */
      areBracesNecessary(node2, sourceCode2) {
        function isLexicalDeclaration(nodeToCheck) {
          if (nodeToCheck.type === "VariableDeclaration") {
            return LEXICAL_DECLARATION_KINDS.has(nodeToCheck.kind);
          }
          return nodeToCheck.type === "FunctionDeclaration" || nodeToCheck.type === "ClassDeclaration";
        }
        function isElseKeywordToken(token) {
          return token.value === "else" && token.type === "Keyword";
        }
        function isFollowedByElseKeyword(nodeToCheck) {
          const nextToken = sourceCode2.getTokenAfter(nodeToCheck);
          return Boolean(nextToken) && isElseKeywordToken(nextToken);
        }
        function hasUnsafeIf(nodeToCheck) {
          switch (nodeToCheck.type) {
            case "IfStatement":
              if (!nodeToCheck.alternate) {
                return true;
              }
              return hasUnsafeIf(nodeToCheck.alternate);
            case "ForStatement":
            case "ForInStatement":
            case "ForOfStatement":
            case "LabeledStatement":
            case "WithStatement":
            case "WhileStatement":
              return hasUnsafeIf(nodeToCheck.body);
            default:
              return false;
          }
        }
        const statement = node2.body[0];
        return isLexicalDeclaration(statement) || hasUnsafeIf(statement) && isFollowedByElseKeyword(node2);
      },
      isReferenceToGlobalVariable,
      isLogicalExpression,
      isCoalesceExpression,
      isMixedLogicalAndCoalesceExpressions,
      isNullLiteral,
      getStaticStringValue,
      getStaticPropertyName,
      skipChainExpression,
      isSpecificId,
      isSpecificMemberAccess,
      equalLiteralValue,
      isSameReference,
      isLogicalAssignmentOperator,
      getSwitchCaseColonToken,
      getModuleExportName,
      isConstant,
      isTopLevelExpressionStatement,
      isDirective,
      isStartOfExpressionStatement,
      needsPrecedingSemicolon,
      isImportAttributeKey
    };
  })(astUtils);
  return astUtils.exports;
}
var accessorPairs;
var hasRequiredAccessorPairs;
function requireAccessorPairs() {
  if (hasRequiredAccessorPairs) return accessorPairs;
  hasRequiredAccessorPairs = 1;
  const astUtils2 = requireAstUtils();
  function areEqualTokenLists(left, right) {
    if (left.length !== right.length) {
      return false;
    }
    for (let i2 = 0; i2 < left.length; i2++) {
      const leftToken = left[i2], rightToken = right[i2];
      if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {
        return false;
      }
    }
    return true;
  }
  function areEqualKeys(left, right) {
    if (typeof left === "string" && typeof right === "string") {
      return left === right;
    }
    if (Array.isArray(left) && Array.isArray(right)) {
      return areEqualTokenLists(left, right);
    }
    return false;
  }
  function isAccessorKind(node2) {
    return node2.kind === "get" || node2.kind === "set";
  }
  function isArgumentOfMethodCall(node2, index, object, property) {
    const parent = node2.parent;
    return parent.type === "CallExpression" && astUtils2.isSpecificMemberAccess(parent.callee, object, property) && parent.arguments[index] === node2;
  }
  function isPropertyDescriptor(node2) {
    if (isArgumentOfMethodCall(node2, 2, "Object", "defineProperty") || isArgumentOfMethodCall(node2, 2, "Reflect", "defineProperty")) {
      return true;
    }
    const grandparent = node2.parent.parent;
    return grandparent.type === "ObjectExpression" && (isArgumentOfMethodCall(grandparent, 1, "Object", "create") || isArgumentOfMethodCall(
      grandparent,
      1,
      "Object",
      "defineProperties"
    ));
  }
  accessorPairs = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          enforceForTSTypes: false,
          enforceForClassMembers: true,
          getWithoutSet: false,
          setWithoutGet: true
        }
      ],
      docs: {
        description: "Enforce getter and setter pairs in objects and classes",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/accessor-pairs"
      },
      schema: [
        {
          type: "object",
          properties: {
            getWithoutSet: {
              type: "boolean"
            },
            setWithoutGet: {
              type: "boolean"
            },
            enforceForClassMembers: {
              type: "boolean"
            },
            enforceForTSTypes: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        missingGetterInPropertyDescriptor: "Getter is not present in property descriptor.",
        missingSetterInPropertyDescriptor: "Setter is not present in property descriptor.",
        missingGetterInObjectLiteral: "Getter is not present for {{ name }}.",
        missingSetterInObjectLiteral: "Setter is not present for {{ name }}.",
        missingGetterInClass: "Getter is not present for class {{ name }}.",
        missingSetterInClass: "Setter is not present for class {{ name }}.",
        missingGetterInType: "Getter is not present for type {{ name }}.",
        missingSetterInType: "Setter is not present for type {{ name }}."
      }
    },
    create(context) {
      const [
        {
          getWithoutSet: checkGetWithoutSet,
          setWithoutGet: checkSetWithoutGet,
          enforceForClassMembers,
          enforceForTSTypes
        }
      ] = context.options;
      const sourceCode2 = context.sourceCode;
      function report(node2, messageKind) {
        if (node2.type === "Property") {
          context.report({
            node: node2,
            messageId: `${messageKind}InObjectLiteral`,
            loc: astUtils2.getFunctionHeadLoc(node2.value, sourceCode2),
            data: {
              name: astUtils2.getFunctionNameWithKind(node2.value)
            }
          });
        } else if (node2.type === "MethodDefinition") {
          context.report({
            node: node2,
            messageId: `${messageKind}InClass`,
            loc: astUtils2.getFunctionHeadLoc(node2.value, sourceCode2),
            data: {
              name: astUtils2.getFunctionNameWithKind(node2.value)
            }
          });
        } else if (node2.type === "TSMethodSignature") {
          context.report({
            node: node2,
            messageId: `${messageKind}InType`,
            loc: astUtils2.getFunctionHeadLoc(node2, sourceCode2),
            data: {
              name: astUtils2.getFunctionNameWithKind(node2)
            }
          });
        } else {
          context.report({
            node: node2,
            messageId: `${messageKind}InPropertyDescriptor`
          });
        }
      }
      function reportList(nodes, messageKind) {
        for (const node2 of nodes) {
          report(node2, messageKind);
        }
      }
      function checkList(nodes) {
        const accessors = [];
        let found = false;
        for (let i2 = 0; i2 < nodes.length; i2++) {
          const node2 = nodes[i2];
          if (isAccessorKind(node2)) {
            const name = astUtils2.getStaticPropertyName(node2);
            const key = name !== null ? name : sourceCode2.getTokens(node2.key);
            for (let j = 0; j < accessors.length; j++) {
              const accessor = accessors[j];
              if (areEqualKeys(accessor.key, key)) {
                accessor.getters.push(
                  ...node2.kind === "get" ? [node2] : []
                );
                accessor.setters.push(
                  ...node2.kind === "set" ? [node2] : []
                );
                found = true;
                break;
              }
            }
            if (!found) {
              accessors.push({
                key,
                getters: node2.kind === "get" ? [node2] : [],
                setters: node2.kind === "set" ? [node2] : []
              });
            }
            found = false;
          }
        }
        for (const { getters, setters } of accessors) {
          if (checkSetWithoutGet && setters.length && !getters.length) {
            reportList(setters, "missingGetter");
          }
          if (checkGetWithoutSet && getters.length && !setters.length) {
            reportList(getters, "missingSetter");
          }
        }
      }
      function checkObjectLiteral(node2) {
        checkList(node2.properties.filter((p2) => p2.type === "Property"));
      }
      function checkPropertyDescriptor(node2) {
        const namesToCheck = new Set(
          node2.properties.filter(
            (p2) => p2.type === "Property" && p2.kind === "init" && !p2.computed
          ).map(({ key }) => key.name)
        );
        const hasGetter = namesToCheck.has("get");
        const hasSetter = namesToCheck.has("set");
        if (checkSetWithoutGet && hasSetter && !hasGetter) {
          report(node2, "missingGetter");
        }
        if (checkGetWithoutSet && hasGetter && !hasSetter) {
          report(node2, "missingSetter");
        }
      }
      function checkObjectExpression(node2) {
        checkObjectLiteral(node2);
        if (isPropertyDescriptor(node2)) {
          checkPropertyDescriptor(node2);
        }
      }
      function checkClassBody(node2) {
        const methodDefinitions = node2.body.filter(
          (m2) => m2.type === "MethodDefinition"
        );
        checkList(methodDefinitions.filter((m2) => m2.static));
        checkList(methodDefinitions.filter((m2) => !m2.static));
      }
      function checkType(node2) {
        const members = node2.type === "TSTypeLiteral" ? node2.members : node2.body;
        const methodDefinitions = members.filter(
          (m2) => m2.type === "TSMethodSignature"
        );
        checkList(methodDefinitions);
      }
      const listeners = {};
      if (checkSetWithoutGet || checkGetWithoutSet) {
        listeners.ObjectExpression = checkObjectExpression;
        if (enforceForClassMembers) {
          listeners.ClassBody = checkClassBody;
        }
        if (enforceForTSTypes) {
          listeners["TSTypeLiteral, TSInterfaceBody"] = checkType;
        }
      }
      return listeners;
    }
  };
  return accessorPairs;
}
var arrayBracketNewline;
var hasRequiredArrayBracketNewline;
function requireArrayBracketNewline() {
  if (hasRequiredArrayBracketNewline) return arrayBracketNewline;
  hasRequiredArrayBracketNewline = 1;
  const astUtils2 = requireAstUtils();
  arrayBracketNewline = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "array-bracket-newline",
              url: "https://eslint.style/rules/array-bracket-newline"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce linebreaks after opening and before closing array brackets",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/array-bracket-newline"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: ["always", "never", "consistent"]
            },
            {
              type: "object",
              properties: {
                multiline: {
                  type: "boolean"
                },
                minItems: {
                  type: ["integer", "null"],
                  minimum: 0
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        unexpectedOpeningLinebreak: "There should be no linebreak after '['.",
        unexpectedClosingLinebreak: "There should be no linebreak before ']'.",
        missingOpeningLinebreak: "A linebreak is required after '['.",
        missingClosingLinebreak: "A linebreak is required before ']'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function normalizeOptionValue(option) {
        let consistent = false;
        let multiline = false;
        let minItems;
        if (option) {
          if (option === "consistent") {
            consistent = true;
            minItems = Number.POSITIVE_INFINITY;
          } else if (option === "always" || option.minItems === 0) {
            minItems = 0;
          } else if (option === "never") {
            minItems = Number.POSITIVE_INFINITY;
          } else {
            multiline = Boolean(option.multiline);
            minItems = option.minItems || Number.POSITIVE_INFINITY;
          }
        } else {
          consistent = false;
          multiline = true;
          minItems = Number.POSITIVE_INFINITY;
        }
        return { consistent, multiline, minItems };
      }
      function normalizeOptions(options) {
        const value = normalizeOptionValue(options);
        return { ArrayExpression: value, ArrayPattern: value };
      }
      function reportNoBeginningLinebreak(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "unexpectedOpeningLinebreak",
          fix(fixer) {
            const nextToken = sourceCode2.getTokenAfter(token, {
              includeComments: true
            });
            if (astUtils2.isCommentToken(nextToken)) {
              return null;
            }
            return fixer.removeRange([
              token.range[1],
              nextToken.range[0]
            ]);
          }
        });
      }
      function reportNoEndingLinebreak(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "unexpectedClosingLinebreak",
          fix(fixer) {
            const previousToken = sourceCode2.getTokenBefore(token, {
              includeComments: true
            });
            if (astUtils2.isCommentToken(previousToken)) {
              return null;
            }
            return fixer.removeRange([
              previousToken.range[1],
              token.range[0]
            ]);
          }
        });
      }
      function reportRequiredBeginningLinebreak(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "missingOpeningLinebreak",
          fix(fixer) {
            return fixer.insertTextAfter(token, "\n");
          }
        });
      }
      function reportRequiredEndingLinebreak(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "missingClosingLinebreak",
          fix(fixer) {
            return fixer.insertTextBefore(token, "\n");
          }
        });
      }
      function check2(node2) {
        const elements = node2.elements;
        const normalizedOptions = normalizeOptions(context.options[0]);
        const options = normalizedOptions[node2.type];
        const openBracket = sourceCode2.getFirstToken(node2);
        const closeBracket = sourceCode2.getLastToken(node2);
        const firstIncComment = sourceCode2.getTokenAfter(openBracket, {
          includeComments: true
        });
        const lastIncComment = sourceCode2.getTokenBefore(closeBracket, {
          includeComments: true
        });
        const first = sourceCode2.getTokenAfter(openBracket);
        const last = sourceCode2.getTokenBefore(closeBracket);
        const needsLinebreaks = elements.length >= options.minItems || options.multiline && elements.length > 0 && firstIncComment.loc.start.line !== lastIncComment.loc.end.line || elements.length === 0 && firstIncComment.type === "Block" && firstIncComment.loc.start.line !== lastIncComment.loc.end.line && firstIncComment === lastIncComment || options.consistent && openBracket.loc.end.line !== first.loc.start.line;
        if (needsLinebreaks) {
          if (astUtils2.isTokenOnSameLine(openBracket, first)) {
            reportRequiredBeginningLinebreak(node2, openBracket);
          }
          if (astUtils2.isTokenOnSameLine(last, closeBracket)) {
            reportRequiredEndingLinebreak(node2, closeBracket);
          }
        } else {
          if (!astUtils2.isTokenOnSameLine(openBracket, first)) {
            reportNoBeginningLinebreak(node2, openBracket);
          }
          if (!astUtils2.isTokenOnSameLine(last, closeBracket)) {
            reportNoEndingLinebreak(node2, closeBracket);
          }
        }
      }
      return {
        ArrayPattern: check2,
        ArrayExpression: check2
      };
    }
  };
  return arrayBracketNewline;
}
var arrayBracketSpacing;
var hasRequiredArrayBracketSpacing;
function requireArrayBracketSpacing() {
  if (hasRequiredArrayBracketSpacing) return arrayBracketSpacing;
  hasRequiredArrayBracketSpacing = 1;
  const astUtils2 = requireAstUtils();
  arrayBracketSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "array-bracket-spacing",
              url: "https://eslint.style/rules/array-bracket-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing inside array brackets",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/array-bracket-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never"]
        },
        {
          type: "object",
          properties: {
            singleValue: {
              type: "boolean"
            },
            objectsInArrays: {
              type: "boolean"
            },
            arraysInArrays: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",
        unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.",
        missingSpaceAfter: "A space is required after '{{tokenValue}}'.",
        missingSpaceBefore: "A space is required before '{{tokenValue}}'."
      }
    },
    create(context) {
      const spaced = context.options[0] === "always", sourceCode2 = context.sourceCode;
      function isOptionSet(option) {
        return context.options[1] ? context.options[1][option] === !spaced : false;
      }
      const options = {
        spaced,
        singleElementException: isOptionSet("singleValue"),
        objectsInArraysException: isOptionSet("objectsInArrays"),
        arraysInArraysException: isOptionSet("arraysInArrays")
      };
      function reportNoBeginningSpace(node2, token) {
        const nextToken = sourceCode2.getTokenAfter(token);
        context.report({
          node: node2,
          loc: { start: token.loc.end, end: nextToken.loc.start },
          messageId: "unexpectedSpaceAfter",
          data: {
            tokenValue: token.value
          },
          fix(fixer) {
            return fixer.removeRange([
              token.range[1],
              nextToken.range[0]
            ]);
          }
        });
      }
      function reportNoEndingSpace(node2, token) {
        const previousToken = sourceCode2.getTokenBefore(token);
        context.report({
          node: node2,
          loc: { start: previousToken.loc.end, end: token.loc.start },
          messageId: "unexpectedSpaceBefore",
          data: {
            tokenValue: token.value
          },
          fix(fixer) {
            return fixer.removeRange([
              previousToken.range[1],
              token.range[0]
            ]);
          }
        });
      }
      function reportRequiredBeginningSpace(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "missingSpaceAfter",
          data: {
            tokenValue: token.value
          },
          fix(fixer) {
            return fixer.insertTextAfter(token, " ");
          }
        });
      }
      function reportRequiredEndingSpace(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "missingSpaceBefore",
          data: {
            tokenValue: token.value
          },
          fix(fixer) {
            return fixer.insertTextBefore(token, " ");
          }
        });
      }
      function isObjectType(node2) {
        return node2 && (node2.type === "ObjectExpression" || node2.type === "ObjectPattern");
      }
      function isArrayType(node2) {
        return node2 && (node2.type === "ArrayExpression" || node2.type === "ArrayPattern");
      }
      function validateArraySpacing(node2) {
        if (options.spaced && node2.elements.length === 0) {
          return;
        }
        const first = sourceCode2.getFirstToken(node2), second = sourceCode2.getFirstToken(node2, 1), last = node2.typeAnnotation ? sourceCode2.getTokenBefore(node2.typeAnnotation) : sourceCode2.getLastToken(node2), penultimate = sourceCode2.getTokenBefore(last), firstElement = node2.elements[0], lastElement = node2.elements.at(-1);
        const openingBracketMustBeSpaced = options.objectsInArraysException && isObjectType(firstElement) || options.arraysInArraysException && isArrayType(firstElement) || options.singleElementException && node2.elements.length === 1 ? !options.spaced : options.spaced;
        const closingBracketMustBeSpaced = options.objectsInArraysException && isObjectType(lastElement) || options.arraysInArraysException && isArrayType(lastElement) || options.singleElementException && node2.elements.length === 1 ? !options.spaced : options.spaced;
        if (astUtils2.isTokenOnSameLine(first, second)) {
          if (openingBracketMustBeSpaced && !sourceCode2.isSpaceBetweenTokens(first, second)) {
            reportRequiredBeginningSpace(node2, first);
          }
          if (!openingBracketMustBeSpaced && sourceCode2.isSpaceBetweenTokens(first, second)) {
            reportNoBeginningSpace(node2, first);
          }
        }
        if (first !== penultimate && astUtils2.isTokenOnSameLine(penultimate, last)) {
          if (closingBracketMustBeSpaced && !sourceCode2.isSpaceBetweenTokens(penultimate, last)) {
            reportRequiredEndingSpace(node2, last);
          }
          if (!closingBracketMustBeSpaced && sourceCode2.isSpaceBetweenTokens(penultimate, last)) {
            reportNoEndingSpace(node2, last);
          }
        }
      }
      return {
        ArrayPattern: validateArraySpacing,
        ArrayExpression: validateArraySpacing
      };
    }
  };
  return arrayBracketSpacing;
}
var arrayCallbackReturn;
var hasRequiredArrayCallbackReturn;
function requireArrayCallbackReturn() {
  if (hasRequiredArrayCallbackReturn) return arrayCallbackReturn;
  hasRequiredArrayCallbackReturn = 1;
  const astUtils2 = requireAstUtils();
  const TARGET_NODE_TYPE = /^(?:Arrow)?FunctionExpression$/u;
  const TARGET_METHODS = /^(?:every|filter|find(?:Last)?(?:Index)?|flatMap|forEach|map|reduce(?:Right)?|some|sort|toSorted)$/u;
  function isTargetMethod(node2) {
    return astUtils2.isSpecificMemberAccess(node2, null, TARGET_METHODS);
  }
  function isAnySegmentReachable(segments) {
    for (const segment of segments) {
      if (segment.reachable) {
        return true;
      }
    }
    return false;
  }
  function fullMethodName(arrayMethodName) {
    if (["from", "of", "isArray"].includes(arrayMethodName)) {
      return "Array.".concat(arrayMethodName);
    }
    return "Array.prototype.".concat(arrayMethodName);
  }
  function getArrayMethodName(node2) {
    let currentNode = node2;
    while (currentNode) {
      const parent = currentNode.parent;
      switch (parent.type) {
        /*
         * Looks up the destination. e.g.,
         * foo.every(nativeFoo || function foo() { ... });
         */
        case "LogicalExpression":
        case "ConditionalExpression":
        case "ChainExpression":
          currentNode = parent;
          break;
        /*
         * If the upper function is IIFE, checks the destination of the return value.
         * e.g.
         *   foo.every((function() {
         *     // setup...
         *     return function callback() { ... };
         *   })());
         */
        case "ReturnStatement": {
          const func = astUtils2.getUpperFunction(parent);
          if (func === null || !astUtils2.isCallee(func)) {
            return null;
          }
          currentNode = func.parent;
          break;
        }
        /*
         * e.g.
         *   Array.from([], function() {});
         *   list.every(function() {});
         */
        case "CallExpression":
          if (astUtils2.isArrayFromMethod(parent.callee)) {
            if (parent.arguments.length >= 2 && parent.arguments[1] === currentNode) {
              return "from";
            }
          }
          if (isTargetMethod(parent.callee)) {
            if (parent.arguments.length >= 1 && parent.arguments[0] === currentNode) {
              return astUtils2.getStaticPropertyName(parent.callee);
            }
          }
          return null;
        // Otherwise this node is not target.
        default:
          return null;
      }
    }
    return null;
  }
  function isExpressionVoid(node2) {
    return node2.type === "UnaryExpression" && node2.operator === "void";
  }
  function voidPrependFixer(sourceCode2, node2, fixer) {
    const requiresParens = (
      // prepending `void ` will fail if the node has a lower precedence than void
      astUtils2.getPrecedence(node2) < astUtils2.getPrecedence({
        type: "UnaryExpression",
        operator: "void"
      }) && // check if there are parentheses around the node to avoid redundant parentheses
      !astUtils2.isParenthesised(sourceCode2, node2)
    );
    const returnOrArrowToken = sourceCode2.getTokenBefore(
      node2,
      node2.parent.type === "ArrowFunctionExpression" ? astUtils2.isArrowToken : (
        // isReturnToken
        ((token) => token.type === "Keyword" && token.value === "return")
      )
    );
    const firstToken = sourceCode2.getTokenAfter(returnOrArrowToken);
    const prependSpace = (
      // is return token, as => allows void to be adjacent
      returnOrArrowToken.value === "return" && // If two tokens (return and "(") are adjacent
      returnOrArrowToken.range[1] === firstToken.range[0]
    );
    return [
      fixer.insertTextBefore(
        firstToken,
        `${prependSpace ? " " : ""}void ${requiresParens ? "(" : ""}`
      ),
      fixer.insertTextAfter(node2, requiresParens ? ")" : "")
    ];
  }
  function curlyWrapFixer(sourceCode2, node2, fixer) {
    const arrowToken = sourceCode2.getTokenBefore(
      node2.body,
      astUtils2.isArrowToken
    );
    const firstToken = sourceCode2.getTokenAfter(arrowToken);
    const lastToken = sourceCode2.getLastToken(node2);
    return [
      fixer.insertTextBefore(firstToken, "{"),
      fixer.insertTextAfter(lastToken, "}")
    ];
  }
  arrayCallbackReturn = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          allowImplicit: false,
          checkForEach: false,
          allowVoid: false
        }
      ],
      docs: {
        description: "Enforce `return` statements in callbacks of array methods",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/array-callback-return"
      },
      hasSuggestions: true,
      schema: [
        {
          type: "object",
          properties: {
            allowImplicit: {
              type: "boolean"
            },
            checkForEach: {
              type: "boolean"
            },
            allowVoid: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        expectedAtEnd: "{{arrayMethodName}}() expects a value to be returned at the end of {{name}}.",
        expectedInside: "{{arrayMethodName}}() expects a return value from {{name}}.",
        expectedReturnValue: "{{arrayMethodName}}() expects a return value from {{name}}.",
        expectedNoReturnValue: "{{arrayMethodName}}() expects no useless return value from {{name}}.",
        wrapBraces: "Wrap the expression in `{}`.",
        prependVoid: "Prepend `void` to the expression."
      }
    },
    create(context) {
      const [options] = context.options;
      const sourceCode2 = context.sourceCode;
      let funcInfo = {
        arrayMethodName: null,
        upper: null,
        codePath: null,
        hasReturn: false,
        shouldCheck: false,
        node: null
      };
      function checkLastSegment(node2) {
        if (!funcInfo.shouldCheck) {
          return;
        }
        const messageAndSuggestions = { messageId: "", suggest: [] };
        if (funcInfo.arrayMethodName === "forEach") {
          if (options.checkForEach && node2.type === "ArrowFunctionExpression" && node2.expression) {
            if (options.allowVoid) {
              if (isExpressionVoid(node2.body)) {
                return;
              }
              messageAndSuggestions.messageId = "expectedNoReturnValue";
              messageAndSuggestions.suggest = [
                {
                  messageId: "wrapBraces",
                  fix(fixer) {
                    return curlyWrapFixer(
                      sourceCode2,
                      node2,
                      fixer
                    );
                  }
                },
                {
                  messageId: "prependVoid",
                  fix(fixer) {
                    return voidPrependFixer(
                      sourceCode2,
                      node2.body,
                      fixer
                    );
                  }
                }
              ];
            } else {
              messageAndSuggestions.messageId = "expectedNoReturnValue";
              messageAndSuggestions.suggest = [
                {
                  messageId: "wrapBraces",
                  fix(fixer) {
                    return curlyWrapFixer(
                      sourceCode2,
                      node2,
                      fixer
                    );
                  }
                }
              ];
            }
          }
        } else {
          if (node2.body.type === "BlockStatement" && isAnySegmentReachable(funcInfo.currentSegments)) {
            messageAndSuggestions.messageId = funcInfo.hasReturn ? "expectedAtEnd" : "expectedInside";
          }
        }
        if (messageAndSuggestions.messageId) {
          const name = astUtils2.getFunctionNameWithKind(node2);
          context.report({
            node: node2,
            loc: astUtils2.getFunctionHeadLoc(node2, sourceCode2),
            messageId: messageAndSuggestions.messageId,
            data: {
              name,
              arrayMethodName: fullMethodName(
                funcInfo.arrayMethodName
              )
            },
            suggest: messageAndSuggestions.suggest.length !== 0 ? messageAndSuggestions.suggest : null
          });
        }
      }
      return {
        // Stacks this function's information.
        onCodePathStart(codePath2, node2) {
          let methodName = null;
          if (TARGET_NODE_TYPE.test(node2.type)) {
            methodName = getArrayMethodName(node2);
          }
          funcInfo = {
            arrayMethodName: methodName,
            upper: funcInfo,
            codePath: codePath2,
            hasReturn: false,
            shouldCheck: methodName && !node2.async && !node2.generator,
            node: node2,
            currentSegments: /* @__PURE__ */ new Set()
          };
        },
        // Pops this function's information.
        onCodePathEnd() {
          funcInfo = funcInfo.upper;
        },
        onUnreachableCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        onCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
        },
        onCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        // Checks the return statement is valid.
        ReturnStatement(node2) {
          if (!funcInfo.shouldCheck) {
            return;
          }
          funcInfo.hasReturn = true;
          const messageAndSuggestions = { messageId: "", suggest: [] };
          if (funcInfo.arrayMethodName === "forEach") {
            if (options.checkForEach && node2.argument) {
              if (options.allowVoid) {
                if (isExpressionVoid(node2.argument)) {
                  return;
                }
                messageAndSuggestions.messageId = "expectedNoReturnValue";
                messageAndSuggestions.suggest = [
                  {
                    messageId: "prependVoid",
                    fix(fixer) {
                      return voidPrependFixer(
                        sourceCode2,
                        node2.argument,
                        fixer
                      );
                    }
                  }
                ];
              } else {
                messageAndSuggestions.messageId = "expectedNoReturnValue";
              }
            }
          } else {
            if (!options.allowImplicit && !node2.argument) {
              messageAndSuggestions.messageId = "expectedReturnValue";
            }
          }
          if (messageAndSuggestions.messageId) {
            context.report({
              node: node2,
              messageId: messageAndSuggestions.messageId,
              data: {
                name: astUtils2.getFunctionNameWithKind(
                  funcInfo.node
                ),
                arrayMethodName: fullMethodName(
                  funcInfo.arrayMethodName
                )
              },
              suggest: messageAndSuggestions.suggest.length !== 0 ? messageAndSuggestions.suggest : null
            });
          }
        },
        // Reports a given function if the last path is reachable.
        "FunctionExpression:exit": checkLastSegment,
        "ArrowFunctionExpression:exit": checkLastSegment
      };
    }
  };
  return arrayCallbackReturn;
}
var arrayElementNewline;
var hasRequiredArrayElementNewline;
function requireArrayElementNewline() {
  if (hasRequiredArrayElementNewline) return arrayElementNewline;
  hasRequiredArrayElementNewline = 1;
  const astUtils2 = requireAstUtils();
  arrayElementNewline = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "array-element-newline",
              url: "https://eslint.style/rules/array-element-newline"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce line breaks after each array element",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/array-element-newline"
      },
      fixable: "whitespace",
      schema: {
        definitions: {
          basicConfig: {
            oneOf: [
              {
                enum: ["always", "never", "consistent"]
              },
              {
                type: "object",
                properties: {
                  multiline: {
                    type: "boolean"
                  },
                  minItems: {
                    type: ["integer", "null"],
                    minimum: 0
                  }
                },
                additionalProperties: false
              }
            ]
          }
        },
        type: "array",
        items: [
          {
            oneOf: [
              {
                $ref: "#/definitions/basicConfig"
              },
              {
                type: "object",
                properties: {
                  ArrayExpression: {
                    $ref: "#/definitions/basicConfig"
                  },
                  ArrayPattern: {
                    $ref: "#/definitions/basicConfig"
                  }
                },
                additionalProperties: false,
                minProperties: 1
              }
            ]
          }
        ]
      },
      messages: {
        unexpectedLineBreak: "There should be no linebreak here.",
        missingLineBreak: "There should be a linebreak after this element."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function normalizeOptionValue(providedOption) {
        let consistent = false;
        let multiline = false;
        let minItems;
        const option = providedOption || "always";
        if (option === "always" || option.minItems === 0) {
          minItems = 0;
        } else if (option === "never") {
          minItems = Number.POSITIVE_INFINITY;
        } else if (option === "consistent") {
          consistent = true;
          minItems = Number.POSITIVE_INFINITY;
        } else {
          multiline = Boolean(option.multiline);
          minItems = option.minItems || Number.POSITIVE_INFINITY;
        }
        return { consistent, multiline, minItems };
      }
      function normalizeOptions(options) {
        if (options && (options.ArrayExpression || options.ArrayPattern)) {
          let expressionOptions, patternOptions;
          if (options.ArrayExpression) {
            expressionOptions = normalizeOptionValue(
              options.ArrayExpression
            );
          }
          if (options.ArrayPattern) {
            patternOptions = normalizeOptionValue(options.ArrayPattern);
          }
          return {
            ArrayExpression: expressionOptions,
            ArrayPattern: patternOptions
          };
        }
        const value = normalizeOptionValue(options);
        return { ArrayExpression: value, ArrayPattern: value };
      }
      function reportNoLineBreak(token) {
        const tokenBefore = sourceCode2.getTokenBefore(token, {
          includeComments: true
        });
        context.report({
          loc: {
            start: tokenBefore.loc.end,
            end: token.loc.start
          },
          messageId: "unexpectedLineBreak",
          fix(fixer) {
            if (astUtils2.isCommentToken(tokenBefore)) {
              return null;
            }
            if (!astUtils2.isTokenOnSameLine(tokenBefore, token)) {
              return fixer.replaceTextRange(
                [tokenBefore.range[1], token.range[0]],
                " "
              );
            }
            const twoTokensBefore = sourceCode2.getTokenBefore(
              tokenBefore,
              { includeComments: true }
            );
            if (astUtils2.isCommentToken(twoTokensBefore)) {
              return null;
            }
            return fixer.replaceTextRange(
              [twoTokensBefore.range[1], tokenBefore.range[0]],
              ""
            );
          }
        });
      }
      function reportRequiredLineBreak(token) {
        const tokenBefore = sourceCode2.getTokenBefore(token, {
          includeComments: true
        });
        context.report({
          loc: {
            start: tokenBefore.loc.end,
            end: token.loc.start
          },
          messageId: "missingLineBreak",
          fix(fixer) {
            return fixer.replaceTextRange(
              [tokenBefore.range[1], token.range[0]],
              "\n"
            );
          }
        });
      }
      function check2(node2) {
        const elements = node2.elements;
        const normalizedOptions = normalizeOptions(context.options[0]);
        const options = normalizedOptions[node2.type];
        if (!options) {
          return;
        }
        let elementBreak = false;
        if (options.multiline) {
          elementBreak = elements.filter((element) => element !== null).some(
            (element) => element.loc.start.line !== element.loc.end.line
          );
        }
        let linebreaksCount = 0;
        for (let i2 = 0; i2 < node2.elements.length; i2++) {
          const element = node2.elements[i2];
          const previousElement = elements[i2 - 1];
          if (i2 === 0 || element === null || previousElement === null) {
            continue;
          }
          const commaToken = sourceCode2.getFirstTokenBetween(
            previousElement,
            element,
            astUtils2.isCommaToken
          );
          const lastTokenOfPreviousElement = sourceCode2.getTokenBefore(commaToken);
          const firstTokenOfCurrentElement = sourceCode2.getTokenAfter(commaToken);
          if (!astUtils2.isTokenOnSameLine(
            lastTokenOfPreviousElement,
            firstTokenOfCurrentElement
          )) {
            linebreaksCount++;
          }
        }
        const needsLinebreaks = elements.length >= options.minItems || options.multiline && elementBreak || options.consistent && linebreaksCount > 0 && linebreaksCount < node2.elements.length;
        elements.forEach((element, i2) => {
          const previousElement = elements[i2 - 1];
          if (i2 === 0 || element === null || previousElement === null) {
            return;
          }
          const commaToken = sourceCode2.getFirstTokenBetween(
            previousElement,
            element,
            astUtils2.isCommaToken
          );
          const lastTokenOfPreviousElement = sourceCode2.getTokenBefore(commaToken);
          const firstTokenOfCurrentElement = sourceCode2.getTokenAfter(commaToken);
          if (needsLinebreaks) {
            if (astUtils2.isTokenOnSameLine(
              lastTokenOfPreviousElement,
              firstTokenOfCurrentElement
            )) {
              reportRequiredLineBreak(firstTokenOfCurrentElement);
            }
          } else {
            if (!astUtils2.isTokenOnSameLine(
              lastTokenOfPreviousElement,
              firstTokenOfCurrentElement
            )) {
              reportNoLineBreak(firstTokenOfCurrentElement);
            }
          }
        });
      }
      return {
        ArrayPattern: check2,
        ArrayExpression: check2
      };
    }
  };
  return arrayElementNewline;
}
var arrowBodyStyle;
var hasRequiredArrowBodyStyle;
function requireArrowBodyStyle() {
  if (hasRequiredArrowBodyStyle) return arrowBodyStyle;
  hasRequiredArrowBodyStyle = 1;
  const astUtils2 = requireAstUtils();
  arrowBodyStyle = {
    meta: {
      type: "suggestion",
      defaultOptions: ["as-needed"],
      docs: {
        description: "Require braces around arrow function bodies",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/arrow-body-style"
      },
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: ["always", "never"]
              }
            ],
            minItems: 0,
            maxItems: 1
          },
          {
            type: "array",
            items: [
              {
                enum: ["as-needed"]
              },
              {
                type: "object",
                properties: {
                  requireReturnForObjectLiteral: {
                    type: "boolean"
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          }
        ]
      },
      fixable: "code",
      messages: {
        unexpectedOtherBlock: "Unexpected block statement surrounding arrow body.",
        unexpectedEmptyBlock: "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",
        unexpectedObjectBlock: "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",
        unexpectedSingleBlock: "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",
        expectedBlock: "Expected block statement surrounding arrow body."
      }
    },
    create(context) {
      const options = context.options;
      const always = options[0] === "always";
      const asNeeded = options[0] === "as-needed";
      const never = options[0] === "never";
      const requireReturnForObjectLiteral = options[1] && options[1].requireReturnForObjectLiteral;
      const sourceCode2 = context.sourceCode;
      let funcInfo = null;
      function hasASIProblem(token) {
        return token && token.type === "Punctuator" && /^[([/`+-]/u.test(token.value);
      }
      function findClosingParen(node2) {
        let nodeToCheck = node2;
        while (!astUtils2.isParenthesised(sourceCode2, nodeToCheck)) {
          nodeToCheck = nodeToCheck.parent;
        }
        return sourceCode2.getTokenAfter(nodeToCheck);
      }
      function isInsideForLoopInitializer(node2) {
        if (node2 && node2.parent) {
          if (node2.parent.type === "ForStatement" && node2.parent.init === node2) {
            return true;
          }
          return isInsideForLoopInitializer(node2.parent);
        }
        return false;
      }
      function validate2(node2) {
        const arrowBody = node2.body;
        if (arrowBody.type === "BlockStatement") {
          const blockBody = arrowBody.body;
          if (blockBody.length !== 1 && !never) {
            return;
          }
          if (asNeeded && requireReturnForObjectLiteral && blockBody[0].type === "ReturnStatement" && blockBody[0].argument && blockBody[0].argument.type === "ObjectExpression") {
            return;
          }
          if (never || asNeeded && blockBody[0].type === "ReturnStatement") {
            let messageId;
            if (blockBody.length === 0) {
              messageId = "unexpectedEmptyBlock";
            } else if (blockBody.length > 1 || blockBody[0].type !== "ReturnStatement") {
              messageId = "unexpectedOtherBlock";
            } else if (blockBody[0].argument === null) {
              messageId = "unexpectedSingleBlock";
            } else if (astUtils2.isOpeningBraceToken(
              sourceCode2.getFirstToken(blockBody[0], { skip: 1 })
            )) {
              messageId = "unexpectedObjectBlock";
            } else {
              messageId = "unexpectedSingleBlock";
            }
            context.report({
              node: node2,
              loc: arrowBody.loc,
              messageId,
              fix(fixer) {
                const fixes = [];
                if (blockBody.length !== 1 || blockBody[0].type !== "ReturnStatement" || !blockBody[0].argument || hasASIProblem(
                  sourceCode2.getTokenAfter(arrowBody)
                )) {
                  return fixes;
                }
                const openingBrace = sourceCode2.getFirstToken(arrowBody);
                const closingBrace = sourceCode2.getLastToken(arrowBody);
                const firstValueToken = sourceCode2.getFirstToken(
                  blockBody[0],
                  1
                );
                const lastValueToken = sourceCode2.getLastToken(
                  blockBody[0]
                );
                const commentsExist = sourceCode2.commentsExistBetween(
                  openingBrace,
                  firstValueToken
                ) || sourceCode2.commentsExistBetween(
                  lastValueToken,
                  closingBrace
                );
                if (commentsExist) {
                  fixes.push(
                    fixer.remove(openingBrace),
                    fixer.remove(closingBrace),
                    fixer.remove(
                      sourceCode2.getTokenAfter(openingBrace)
                    )
                    // return keyword
                  );
                } else {
                  fixes.push(
                    fixer.removeRange([
                      openingBrace.range[0],
                      firstValueToken.range[0]
                    ]),
                    fixer.removeRange([
                      lastValueToken.range[1],
                      closingBrace.range[1]
                    ])
                  );
                }
                if (astUtils2.isOpeningBraceToken(firstValueToken) || blockBody[0].argument.type === "SequenceExpression" || funcInfo.hasInOperator && isInsideForLoopInitializer(node2)) {
                  if (!astUtils2.isParenthesised(
                    sourceCode2,
                    blockBody[0].argument
                  )) {
                    fixes.push(
                      fixer.insertTextBefore(
                        firstValueToken,
                        "("
                      ),
                      fixer.insertTextAfter(
                        lastValueToken,
                        ")"
                      )
                    );
                  }
                }
                if (astUtils2.isSemicolonToken(lastValueToken)) {
                  fixes.push(fixer.remove(lastValueToken));
                }
                return fixes;
              }
            });
          }
        } else {
          if (always || asNeeded && requireReturnForObjectLiteral && arrowBody.type === "ObjectExpression") {
            context.report({
              node: node2,
              loc: arrowBody.loc,
              messageId: "expectedBlock",
              fix(fixer) {
                const fixes = [];
                const arrowToken = sourceCode2.getTokenBefore(
                  arrowBody,
                  astUtils2.isArrowToken
                );
                const [
                  firstTokenAfterArrow,
                  secondTokenAfterArrow
                ] = sourceCode2.getTokensAfter(arrowToken, {
                  count: 2
                });
                const lastToken = sourceCode2.getLastToken(node2);
                let parenthesisedObjectLiteral = null;
                if (astUtils2.isOpeningParenToken(
                  firstTokenAfterArrow
                ) && astUtils2.isOpeningBraceToken(
                  secondTokenAfterArrow
                )) {
                  const braceNode = sourceCode2.getNodeByRangeIndex(
                    secondTokenAfterArrow.range[0]
                  );
                  if (braceNode.type === "ObjectExpression") {
                    parenthesisedObjectLiteral = braceNode;
                  }
                }
                if (parenthesisedObjectLiteral) {
                  const openingParenToken = firstTokenAfterArrow;
                  const openingBraceToken = secondTokenAfterArrow;
                  if (astUtils2.isTokenOnSameLine(
                    openingParenToken,
                    openingBraceToken
                  )) {
                    fixes.push(
                      fixer.replaceText(
                        openingParenToken,
                        "{return "
                      )
                    );
                  } else {
                    fixes.push(
                      fixer.replaceText(
                        openingParenToken,
                        "{"
                      ),
                      fixer.insertTextBefore(
                        openingBraceToken,
                        "return "
                      )
                    );
                  }
                  fixes.push(
                    fixer.remove(
                      findClosingParen(
                        parenthesisedObjectLiteral
                      )
                    )
                  );
                  fixes.push(
                    fixer.insertTextAfter(lastToken, "}")
                  );
                } else {
                  fixes.push(
                    fixer.insertTextBefore(
                      firstTokenAfterArrow,
                      "{return "
                    )
                  );
                  fixes.push(
                    fixer.insertTextAfter(lastToken, "}")
                  );
                }
                return fixes;
              }
            });
          }
        }
      }
      return {
        "BinaryExpression[operator='in']"() {
          let info = funcInfo;
          while (info) {
            info.hasInOperator = true;
            info = info.upper;
          }
        },
        ArrowFunctionExpression() {
          funcInfo = {
            upper: funcInfo,
            hasInOperator: false
          };
        },
        "ArrowFunctionExpression:exit"(node2) {
          validate2(node2);
          funcInfo = funcInfo.upper;
        }
      };
    }
  };
  return arrowBodyStyle;
}
var arrowParens;
var hasRequiredArrowParens;
function requireArrowParens() {
  if (hasRequiredArrowParens) return arrowParens;
  hasRequiredArrowParens = 1;
  const astUtils2 = requireAstUtils();
  function hasBlockBody(node2) {
    return node2.body.type === "BlockStatement";
  }
  arrowParens = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "arrow-parens",
              url: "https://eslint.style/rules/arrow-parens"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require parentheses around arrow function arguments",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/arrow-parens"
      },
      fixable: "code",
      schema: [
        {
          enum: ["always", "as-needed"]
        },
        {
          type: "object",
          properties: {
            requireForBlockBody: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedParens: "Unexpected parentheses around single function argument.",
        expectedParens: "Expected parentheses around arrow function argument.",
        unexpectedParensInline: "Unexpected parentheses around single function argument having a body with no curly braces.",
        expectedParensBlock: "Expected parentheses around arrow function argument having a body with curly braces."
      }
    },
    create(context) {
      const asNeeded = context.options[0] === "as-needed";
      const requireForBlockBody = asNeeded && context.options[1] && context.options[1].requireForBlockBody === true;
      const sourceCode2 = context.sourceCode;
      function findOpeningParenOfParams(node2) {
        const tokenBeforeParams = sourceCode2.getTokenBefore(node2.params[0]);
        if (tokenBeforeParams && astUtils2.isOpeningParenToken(tokenBeforeParams) && node2.range[0] <= tokenBeforeParams.range[0]) {
          return tokenBeforeParams;
        }
        return null;
      }
      function getClosingParenOfParams(node2) {
        return sourceCode2.getTokenAfter(
          node2.params[0],
          astUtils2.isClosingParenToken
        );
      }
      function hasCommentsInParensOfParams(node2, openingParen) {
        return sourceCode2.commentsExistBetween(
          openingParen,
          getClosingParenOfParams(node2)
        );
      }
      function hasUnexpectedTokensBeforeOpeningParen(node2, openingParen) {
        const expectedCount = node2.async ? 1 : 0;
        return sourceCode2.getFirstToken(node2, { skip: expectedCount }) !== openingParen;
      }
      return {
        "ArrowFunctionExpression[params.length=1]"(node2) {
          const shouldHaveParens = !asNeeded || requireForBlockBody && hasBlockBody(node2);
          const openingParen = findOpeningParenOfParams(node2);
          const hasParens = openingParen !== null;
          const [param] = node2.params;
          if (shouldHaveParens && !hasParens) {
            context.report({
              node: node2,
              messageId: requireForBlockBody ? "expectedParensBlock" : "expectedParens",
              loc: param.loc,
              *fix(fixer) {
                yield fixer.insertTextBefore(param, "(");
                yield fixer.insertTextAfter(param, ")");
              }
            });
          }
          if (!shouldHaveParens && hasParens && param.type === "Identifier" && !param.typeAnnotation && !node2.returnType && !hasCommentsInParensOfParams(node2, openingParen) && !hasUnexpectedTokensBeforeOpeningParen(node2, openingParen)) {
            context.report({
              node: node2,
              messageId: requireForBlockBody ? "unexpectedParensInline" : "unexpectedParens",
              loc: param.loc,
              *fix(fixer) {
                const tokenBeforeOpeningParen = sourceCode2.getTokenBefore(openingParen);
                const closingParen = getClosingParenOfParams(node2);
                if (tokenBeforeOpeningParen && tokenBeforeOpeningParen.range[1] === openingParen.range[0] && !astUtils2.canTokensBeAdjacent(
                  tokenBeforeOpeningParen,
                  sourceCode2.getFirstToken(param)
                )) {
                  yield fixer.insertTextBefore(openingParen, " ");
                }
                yield fixer.removeRange([
                  openingParen.range[0],
                  param.range[0]
                ]);
                yield fixer.removeRange([
                  param.range[1],
                  closingParen.range[1]
                ]);
              }
            });
          }
        }
      };
    }
  };
  return arrowParens;
}
var arrowSpacing;
var hasRequiredArrowSpacing;
function requireArrowSpacing() {
  if (hasRequiredArrowSpacing) return arrowSpacing;
  hasRequiredArrowSpacing = 1;
  const astUtils2 = requireAstUtils();
  arrowSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "arrow-spacing",
              url: "https://eslint.style/rules/arrow-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing before and after the arrow in arrow functions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/arrow-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            before: {
              type: "boolean",
              default: true
            },
            after: {
              type: "boolean",
              default: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        expectedBefore: "Missing space before =>.",
        unexpectedBefore: "Unexpected space before =>.",
        expectedAfter: "Missing space after =>.",
        unexpectedAfter: "Unexpected space after =>."
      }
    },
    create(context) {
      const rule = Object.assign({}, context.options[0]);
      rule.before = rule.before !== false;
      rule.after = rule.after !== false;
      const sourceCode2 = context.sourceCode;
      function getTokens(node2) {
        const arrow = sourceCode2.getTokenBefore(
          node2.body,
          astUtils2.isArrowToken
        );
        return {
          before: sourceCode2.getTokenBefore(arrow),
          arrow,
          after: sourceCode2.getTokenAfter(arrow)
        };
      }
      function countSpaces(tokens) {
        const before = tokens.arrow.range[0] - tokens.before.range[1];
        const after = tokens.after.range[0] - tokens.arrow.range[1];
        return { before, after };
      }
      function spaces(node2) {
        const tokens = getTokens(node2);
        const countSpace = countSpaces(tokens);
        if (rule.before) {
          if (countSpace.before === 0) {
            context.report({
              node: tokens.before,
              messageId: "expectedBefore",
              fix(fixer) {
                return fixer.insertTextBefore(tokens.arrow, " ");
              }
            });
          }
        } else {
          if (countSpace.before > 0) {
            context.report({
              node: tokens.before,
              messageId: "unexpectedBefore",
              fix(fixer) {
                return fixer.removeRange([
                  tokens.before.range[1],
                  tokens.arrow.range[0]
                ]);
              }
            });
          }
        }
        if (rule.after) {
          if (countSpace.after === 0) {
            context.report({
              node: tokens.after,
              messageId: "expectedAfter",
              fix(fixer) {
                return fixer.insertTextAfter(tokens.arrow, " ");
              }
            });
          }
        } else {
          if (countSpace.after > 0) {
            context.report({
              node: tokens.after,
              messageId: "unexpectedAfter",
              fix(fixer) {
                return fixer.removeRange([
                  tokens.arrow.range[1],
                  tokens.after.range[0]
                ]);
              }
            });
          }
        }
      }
      return {
        ArrowFunctionExpression: spaces
      };
    }
  };
  return arrowSpacing;
}
var blockScopedVar;
var hasRequiredBlockScopedVar;
function requireBlockScopedVar() {
  if (hasRequiredBlockScopedVar) return blockScopedVar;
  hasRequiredBlockScopedVar = 1;
  blockScopedVar = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce the use of variables within the scope they are defined",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/block-scoped-var"
      },
      schema: [],
      messages: {
        outOfScope: "'{{name}}' declared on line {{definitionLine}} column {{definitionColumn}} is used outside of binding context."
      }
    },
    create(context) {
      let stack = [];
      const sourceCode2 = context.sourceCode;
      function enterScope(node2) {
        stack.push(node2.range);
      }
      function exitScope() {
        stack.pop();
      }
      function report(reference, definition) {
        const identifier = reference.identifier;
        const definitionPosition = definition.name.loc.start;
        context.report({
          node: identifier,
          messageId: "outOfScope",
          data: {
            name: identifier.name,
            definitionLine: definitionPosition.line,
            definitionColumn: definitionPosition.column + 1
          }
        });
      }
      function checkForVariables(node2) {
        if (node2.kind !== "var") {
          return;
        }
        const scopeRange = stack.at(-1);
        function isOutsideOfScope(reference) {
          const idRange = reference.identifier.range;
          return idRange[0] < scopeRange[0] || idRange[1] > scopeRange[1];
        }
        const variables = sourceCode2.getDeclaredVariables(node2);
        for (let i2 = 0; i2 < variables.length; ++i2) {
          variables[i2].references.filter(isOutsideOfScope).forEach(
            (ref2) => report(
              ref2,
              variables[i2].defs.find((def) => def.parent === node2)
            )
          );
        }
      }
      return {
        Program(node2) {
          stack = [node2.range];
        },
        // Manages scopes.
        BlockStatement: enterScope,
        "BlockStatement:exit": exitScope,
        ForStatement: enterScope,
        "ForStatement:exit": exitScope,
        ForInStatement: enterScope,
        "ForInStatement:exit": exitScope,
        ForOfStatement: enterScope,
        "ForOfStatement:exit": exitScope,
        SwitchStatement: enterScope,
        "SwitchStatement:exit": exitScope,
        CatchClause: enterScope,
        "CatchClause:exit": exitScope,
        StaticBlock: enterScope,
        "StaticBlock:exit": exitScope,
        // Finds and reports references which are outside of valid scope.
        VariableDeclaration: checkForVariables
      };
    }
  };
  return blockScopedVar;
}
var blockSpacing;
var hasRequiredBlockSpacing;
function requireBlockSpacing() {
  if (hasRequiredBlockSpacing) return blockSpacing;
  hasRequiredBlockSpacing = 1;
  const util2 = requireAstUtils();
  blockSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "block-spacing",
              url: "https://eslint.style/rules/block-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Disallow or enforce spaces inside of blocks after opening block and before closing block",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/block-spacing"
      },
      fixable: "whitespace",
      schema: [{ enum: ["always", "never"] }],
      messages: {
        missing: "Requires a space {{location}} '{{token}}'.",
        extra: "Unexpected space(s) {{location}} '{{token}}'."
      }
    },
    create(context) {
      const always = context.options[0] !== "never", messageId = always ? "missing" : "extra", sourceCode2 = context.sourceCode;
      function getOpenBrace(node2) {
        if (node2.type === "SwitchStatement") {
          if (node2.cases.length > 0) {
            return sourceCode2.getTokenBefore(node2.cases[0]);
          }
          return sourceCode2.getLastToken(node2, 1);
        }
        if (node2.type === "StaticBlock") {
          return sourceCode2.getFirstToken(node2, { skip: 1 });
        }
        return sourceCode2.getFirstToken(node2);
      }
      function isValid(left, right) {
        return !util2.isTokenOnSameLine(left, right) || sourceCode2.isSpaceBetweenTokens(left, right) === always;
      }
      function checkSpacingInsideBraces(node2) {
        const openBrace = getOpenBrace(node2);
        const closeBrace = sourceCode2.getLastToken(node2);
        const firstToken = sourceCode2.getTokenAfter(openBrace, {
          includeComments: true
        });
        const lastToken = sourceCode2.getTokenBefore(closeBrace, {
          includeComments: true
        });
        if (openBrace.type !== "Punctuator" || openBrace.value !== "{" || closeBrace.type !== "Punctuator" || closeBrace.value !== "}" || firstToken === closeBrace) {
          return;
        }
        if (!always && firstToken.type === "Line") {
          return;
        }
        if (!isValid(openBrace, firstToken)) {
          let loc = openBrace.loc;
          if (messageId === "extra") {
            loc = {
              start: openBrace.loc.end,
              end: firstToken.loc.start
            };
          }
          context.report({
            node: node2,
            loc,
            messageId,
            data: {
              location: "after",
              token: openBrace.value
            },
            fix(fixer) {
              if (always) {
                return fixer.insertTextBefore(firstToken, " ");
              }
              return fixer.removeRange([
                openBrace.range[1],
                firstToken.range[0]
              ]);
            }
          });
        }
        if (!isValid(lastToken, closeBrace)) {
          let loc = closeBrace.loc;
          if (messageId === "extra") {
            loc = {
              start: lastToken.loc.end,
              end: closeBrace.loc.start
            };
          }
          context.report({
            node: node2,
            loc,
            messageId,
            data: {
              location: "before",
              token: closeBrace.value
            },
            fix(fixer) {
              if (always) {
                return fixer.insertTextAfter(lastToken, " ");
              }
              return fixer.removeRange([
                lastToken.range[1],
                closeBrace.range[0]
              ]);
            }
          });
        }
      }
      return {
        BlockStatement: checkSpacingInsideBraces,
        StaticBlock: checkSpacingInsideBraces,
        SwitchStatement: checkSpacingInsideBraces
      };
    }
  };
  return blockSpacing;
}
var braceStyle;
var hasRequiredBraceStyle;
function requireBraceStyle() {
  if (hasRequiredBraceStyle) return braceStyle;
  hasRequiredBraceStyle = 1;
  const astUtils2 = requireAstUtils();
  braceStyle = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "brace-style",
              url: "https://eslint.style/rules/brace-style"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent brace style for blocks",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/brace-style"
      },
      schema: [
        {
          enum: ["1tbs", "stroustrup", "allman"]
        },
        {
          type: "object",
          properties: {
            allowSingleLine: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "whitespace",
      messages: {
        nextLineOpen: "Opening curly brace does not appear on the same line as controlling statement.",
        sameLineOpen: "Opening curly brace appears on the same line as controlling statement.",
        blockSameLine: "Statement inside of curly braces should be on next line.",
        nextLineClose: "Closing curly brace does not appear on the same line as the subsequent block.",
        singleLineClose: "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
        sameLineClose: "Closing curly brace appears on the same line as the subsequent block."
      }
    },
    create(context) {
      const style = context.options[0] || "1tbs", params = context.options[1] || {}, sourceCode2 = context.sourceCode;
      function removeNewlineBetween(firstToken, secondToken) {
        const textRange = [firstToken.range[1], secondToken.range[0]];
        const textBetween = sourceCode2.text.slice(
          textRange[0],
          textRange[1]
        );
        if (textBetween.trim()) {
          return null;
        }
        return (fixer) => fixer.replaceTextRange(textRange, " ");
      }
      function validateCurlyPair(openingCurly, closingCurly) {
        const tokenBeforeOpeningCurly = sourceCode2.getTokenBefore(openingCurly);
        const tokenAfterOpeningCurly = sourceCode2.getTokenAfter(openingCurly);
        const tokenBeforeClosingCurly = sourceCode2.getTokenBefore(closingCurly);
        const singleLineException = params.allowSingleLine && astUtils2.isTokenOnSameLine(openingCurly, closingCurly);
        if (style !== "allman" && !astUtils2.isTokenOnSameLine(
          tokenBeforeOpeningCurly,
          openingCurly
        )) {
          context.report({
            node: openingCurly,
            messageId: "nextLineOpen",
            fix: removeNewlineBetween(
              tokenBeforeOpeningCurly,
              openingCurly
            )
          });
        }
        if (style === "allman" && astUtils2.isTokenOnSameLine(
          tokenBeforeOpeningCurly,
          openingCurly
        ) && !singleLineException) {
          context.report({
            node: openingCurly,
            messageId: "sameLineOpen",
            fix: (fixer) => fixer.insertTextBefore(openingCurly, "\n")
          });
        }
        if (astUtils2.isTokenOnSameLine(
          openingCurly,
          tokenAfterOpeningCurly
        ) && tokenAfterOpeningCurly !== closingCurly && !singleLineException) {
          context.report({
            node: openingCurly,
            messageId: "blockSameLine",
            fix: (fixer) => fixer.insertTextAfter(openingCurly, "\n")
          });
        }
        if (tokenBeforeClosingCurly !== openingCurly && !singleLineException && astUtils2.isTokenOnSameLine(
          tokenBeforeClosingCurly,
          closingCurly
        )) {
          context.report({
            node: closingCurly,
            messageId: "singleLineClose",
            fix: (fixer) => fixer.insertTextBefore(closingCurly, "\n")
          });
        }
      }
      function validateCurlyBeforeKeyword(curlyToken) {
        const keywordToken = sourceCode2.getTokenAfter(curlyToken);
        if (style === "1tbs" && !astUtils2.isTokenOnSameLine(curlyToken, keywordToken)) {
          context.report({
            node: curlyToken,
            messageId: "nextLineClose",
            fix: removeNewlineBetween(curlyToken, keywordToken)
          });
        }
        if (style !== "1tbs" && astUtils2.isTokenOnSameLine(curlyToken, keywordToken)) {
          context.report({
            node: curlyToken,
            messageId: "sameLineClose",
            fix: (fixer) => fixer.insertTextAfter(curlyToken, "\n")
          });
        }
      }
      return {
        BlockStatement(node2) {
          if (!astUtils2.STATEMENT_LIST_PARENTS.has(node2.parent.type)) {
            validateCurlyPair(
              sourceCode2.getFirstToken(node2),
              sourceCode2.getLastToken(node2)
            );
          }
        },
        StaticBlock(node2) {
          validateCurlyPair(
            sourceCode2.getFirstToken(node2, { skip: 1 }),
            // skip the `static` token
            sourceCode2.getLastToken(node2)
          );
        },
        ClassBody(node2) {
          validateCurlyPair(
            sourceCode2.getFirstToken(node2),
            sourceCode2.getLastToken(node2)
          );
        },
        SwitchStatement(node2) {
          const closingCurly = sourceCode2.getLastToken(node2);
          const openingCurly = sourceCode2.getTokenBefore(
            node2.cases.length ? node2.cases[0] : closingCurly
          );
          validateCurlyPair(openingCurly, closingCurly);
        },
        IfStatement(node2) {
          if (node2.consequent.type === "BlockStatement" && node2.alternate) {
            validateCurlyBeforeKeyword(
              sourceCode2.getLastToken(node2.consequent)
            );
          }
        },
        TryStatement(node2) {
          validateCurlyBeforeKeyword(sourceCode2.getLastToken(node2.block));
          if (node2.handler && node2.finalizer) {
            validateCurlyBeforeKeyword(
              sourceCode2.getLastToken(node2.handler.body)
            );
          }
        }
      };
    }
  };
  return braceStyle;
}
var callbackReturn;
var hasRequiredCallbackReturn;
function requireCallbackReturn() {
  if (hasRequiredCallbackReturn) return callbackReturn;
  hasRequiredCallbackReturn = 1;
  callbackReturn = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "callback-return",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/callback-return.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Require `return` statements after callbacks",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/callback-return"
      },
      schema: [
        {
          type: "array",
          items: { type: "string" }
        }
      ],
      messages: {
        missingReturn: "Expected return with your callback function."
      }
    },
    create(context) {
      const callbacks = context.options[0] || ["callback", "cb", "next"], sourceCode2 = context.sourceCode;
      function findClosestParentOfType(node2, types) {
        if (!node2.parent) {
          return null;
        }
        if (!types.includes(node2.parent.type)) {
          return findClosestParentOfType(node2.parent, types);
        }
        return node2.parent;
      }
      function containsOnlyIdentifiers(node2) {
        if (node2.type === "Identifier") {
          return true;
        }
        if (node2.type === "MemberExpression") {
          if (node2.object.type === "Identifier") {
            return true;
          }
          if (node2.object.type === "MemberExpression") {
            return containsOnlyIdentifiers(node2.object);
          }
        }
        return false;
      }
      function isCallback(node2) {
        return containsOnlyIdentifiers(node2.callee) && callbacks.includes(sourceCode2.getText(node2.callee));
      }
      function isCallbackExpression(node2, parentNode) {
        if (!parentNode || parentNode.type !== "ExpressionStatement") {
          return false;
        }
        if (parentNode.expression === node2) {
          return true;
        }
        if (parentNode.expression.type === "BinaryExpression" || parentNode.expression.type === "LogicalExpression") {
          if (parentNode.expression.right === node2) {
            return true;
          }
        }
        return false;
      }
      return {
        CallExpression(node2) {
          if (!isCallback(node2)) {
            return;
          }
          const closestBlock = findClosestParentOfType(node2, [
            "BlockStatement",
            "ReturnStatement",
            "ArrowFunctionExpression"
          ]) || {};
          if (closestBlock.type === "ReturnStatement") {
            return;
          }
          if (closestBlock.type === "ArrowFunctionExpression") {
            return;
          }
          if (closestBlock.type === "BlockStatement") {
            const lastItem = closestBlock.body.at(-1);
            if (isCallbackExpression(node2, lastItem)) {
              const parentType = closestBlock.parent.type;
              if (parentType === "FunctionExpression" || parentType === "FunctionDeclaration" || parentType === "ArrowFunctionExpression") {
                return;
              }
            }
            if (lastItem.type === "ReturnStatement") {
              if (isCallbackExpression(node2, closestBlock.body.at(-2))) {
                return;
              }
            }
          }
          if (findClosestParentOfType(node2, [
            "FunctionDeclaration",
            "FunctionExpression",
            "ArrowFunctionExpression"
          ])) {
            context.report({ node: node2, messageId: "missingReturn" });
          }
        }
      };
    }
  };
  return callbackReturn;
}
var camelcase;
var hasRequiredCamelcase;
function requireCamelcase() {
  if (hasRequiredCamelcase) return camelcase;
  hasRequiredCamelcase = 1;
  const astUtils2 = requireAstUtils();
  camelcase = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allow: [],
          ignoreDestructuring: false,
          ignoreGlobals: false,
          ignoreImports: false,
          properties: "always"
        }
      ],
      docs: {
        description: "Enforce camelcase naming convention",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/camelcase"
      },
      schema: [
        {
          type: "object",
          properties: {
            ignoreDestructuring: {
              type: "boolean"
            },
            ignoreImports: {
              type: "boolean"
            },
            ignoreGlobals: {
              type: "boolean"
            },
            properties: {
              enum: ["always", "never"]
            },
            allow: {
              type: "array",
              items: {
                type: "string"
              },
              minItems: 0,
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        notCamelCase: "Identifier '{{name}}' is not in camel case.",
        notCamelCasePrivate: "#{{name}} is not in camel case."
      }
    },
    create(context) {
      const [
        {
          allow,
          ignoreDestructuring,
          ignoreGlobals,
          ignoreImports,
          properties: properties2
        }
      ] = context.options;
      const sourceCode2 = context.sourceCode;
      const reported = /* @__PURE__ */ new Set();
      function isUnderscored(name) {
        const nameBody = name.replace(/^_+|_+$/gu, "");
        return nameBody.includes("_") && nameBody !== nameBody.toUpperCase();
      }
      function isAllowed(name) {
        return allow.some(
          (entry) => name === entry || name.match(new RegExp(entry, "u"))
        );
      }
      function isGoodName(name) {
        return !isUnderscored(name) || isAllowed(name);
      }
      function isAssignmentTarget(node2) {
        const parent = node2.parent;
        switch (parent.type) {
          case "AssignmentExpression":
          case "AssignmentPattern":
            return parent.left === node2;
          case "Property":
            return parent.parent.type === "ObjectPattern" && parent.value === node2;
          case "ArrayPattern":
          case "RestElement":
            return true;
          default:
            return false;
        }
      }
      function equalsToOriginalName(node2) {
        const localName = node2.name;
        const valueNode = node2.parent.type === "AssignmentPattern" ? node2.parent : node2;
        const parent = valueNode.parent;
        switch (parent.type) {
          case "Property":
            return (parent.parent.type === "ObjectPattern" || parent.parent.type === "ObjectExpression") && parent.value === valueNode && !parent.computed && parent.key.type === "Identifier" && parent.key.name === localName;
          case "ImportSpecifier":
            return parent.local === node2 && astUtils2.getModuleExportName(parent.imported) === localName;
          default:
            return false;
        }
      }
      function report(node2) {
        if (reported.has(node2.range[0])) {
          return;
        }
        reported.add(node2.range[0]);
        context.report({
          node: node2,
          messageId: node2.type === "PrivateIdentifier" ? "notCamelCasePrivate" : "notCamelCase",
          data: { name: node2.name }
        });
      }
      function reportReferenceId(node2) {
        if (node2.parent.type === "CallExpression" || node2.parent.type === "NewExpression") {
          return;
        }
        if (node2.parent.type === "AssignmentPattern" && node2.parent.right === node2) {
          return;
        }
        if (ignoreDestructuring && equalsToOriginalName(node2)) {
          return;
        }
        if (astUtils2.isImportAttributeKey(node2)) {
          return;
        }
        report(node2);
      }
      return {
        // Report camelcase of global variable references ------------------
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          if (!ignoreGlobals) {
            for (const variable of scope.variables) {
              if (variable.identifiers.length > 0 || isGoodName(variable.name)) {
                continue;
              }
              for (const reference of variable.references) {
                reportReferenceId(reference.identifier);
              }
            }
          }
          for (const reference of scope.through) {
            const id2 = reference.identifier;
            if (isGoodName(id2.name) || astUtils2.isImportAttributeKey(id2)) {
              continue;
            }
            reportReferenceId(id2);
          }
        },
        // Report camelcase of declared variables --------------------------
        [[
          "VariableDeclaration",
          "FunctionDeclaration",
          "FunctionExpression",
          "ArrowFunctionExpression",
          "ClassDeclaration",
          "ClassExpression",
          "CatchClause"
        ]](node2) {
          for (const variable of sourceCode2.getDeclaredVariables(node2)) {
            if (isGoodName(variable.name)) {
              continue;
            }
            const id2 = variable.identifiers[0];
            if (!(ignoreDestructuring && equalsToOriginalName(id2))) {
              report(id2);
            }
            for (const reference of variable.references) {
              if (reference.init) {
                continue;
              }
              reportReferenceId(reference.identifier);
            }
          }
        },
        // Report camelcase in properties ----------------------------------
        [[
          "ObjectExpression > Property[computed!=true] > Identifier.key",
          "MethodDefinition[computed!=true] > Identifier.key",
          "PropertyDefinition[computed!=true] > Identifier.key",
          "MethodDefinition > PrivateIdentifier.key",
          "PropertyDefinition > PrivateIdentifier.key"
        ]](node2) {
          if (properties2 === "never" || astUtils2.isImportAttributeKey(node2) || isGoodName(node2.name)) {
            return;
          }
          report(node2);
        },
        "MemberExpression[computed!=true] > Identifier.property"(node2) {
          if (properties2 === "never" || !isAssignmentTarget(node2.parent) || // ← ignore read-only references.
          isGoodName(node2.name)) {
            return;
          }
          report(node2);
        },
        // Report camelcase in import --------------------------------------
        ImportDeclaration(node2) {
          for (const variable of sourceCode2.getDeclaredVariables(node2)) {
            if (isGoodName(variable.name)) {
              continue;
            }
            const id2 = variable.identifiers[0];
            if (!(ignoreImports && equalsToOriginalName(id2))) {
              report(id2);
            }
            for (const reference of variable.references) {
              reportReferenceId(reference.identifier);
            }
          }
        },
        // Report camelcase in re-export -----------------------------------
        [[
          "ExportAllDeclaration > Identifier.exported",
          "ExportSpecifier > Identifier.exported"
        ]](node2) {
          if (isGoodName(node2.name)) {
            return;
          }
          report(node2);
        },
        // Report camelcase in labels --------------------------------------
        [[
          "LabeledStatement > Identifier.label",
          /*
           * For backward compatibility, report references as well.
           * It looks unnecessary because declarations are reported.
           */
          "BreakStatement > Identifier.label",
          "ContinueStatement > Identifier.label"
        ]](node2) {
          if (isGoodName(node2.name)) {
            return;
          }
          report(node2);
        }
      };
    }
  };
  return camelcase;
}
var capitalizedComments;
var hasRequiredCapitalizedComments;
function requireCapitalizedComments() {
  if (hasRequiredCapitalizedComments) return capitalizedComments;
  hasRequiredCapitalizedComments = 1;
  const astUtils2 = requireAstUtils();
  const DEFAULT_IGNORE_PATTERN = astUtils2.COMMENTS_IGNORE_PATTERN, WHITESPACE = /\s/gu, MAYBE_URL = /^\s*[^:/?#\s]+:\/\/[^?#]/u, LETTER_PATTERN = new RegExp("\\p{L}", "u");
  const SCHEMA_BODY = {
    type: "object",
    properties: {
      ignorePattern: {
        type: "string"
      },
      ignoreInlineComments: {
        type: "boolean"
      },
      ignoreConsecutiveComments: {
        type: "boolean"
      }
    },
    additionalProperties: false
  };
  const DEFAULTS = {
    ignorePattern: "",
    ignoreInlineComments: false,
    ignoreConsecutiveComments: false
  };
  function getNormalizedOptions(rawOptions, which) {
    return Object.assign({}, DEFAULTS, rawOptions[which] || rawOptions);
  }
  function getAllNormalizedOptions(rawOptions = {}) {
    return {
      Line: getNormalizedOptions(rawOptions, "line"),
      Block: getNormalizedOptions(rawOptions, "block")
    };
  }
  function createRegExpForIgnorePatterns(normalizedOptions) {
    Object.keys(normalizedOptions).forEach((key) => {
      const ignorePatternStr = normalizedOptions[key].ignorePattern;
      if (ignorePatternStr) {
        const regExp = RegExp(`^\\s*(?:${ignorePatternStr})`, "u");
        normalizedOptions[key].ignorePatternRegExp = regExp;
      }
    });
  }
  capitalizedComments = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce or disallow capitalization of the first letter of a comment",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/capitalized-comments"
      },
      fixable: "code",
      schema: [
        { enum: ["always", "never"] },
        {
          oneOf: [
            SCHEMA_BODY,
            {
              type: "object",
              properties: {
                line: SCHEMA_BODY,
                block: SCHEMA_BODY
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        unexpectedLowercaseComment: "Comments should not begin with a lowercase character.",
        unexpectedUppercaseComment: "Comments should not begin with an uppercase character."
      }
    },
    create(context) {
      const capitalize = context.options[0] || "always", normalizedOptions = getAllNormalizedOptions(context.options[1]), sourceCode2 = context.sourceCode;
      createRegExpForIgnorePatterns(normalizedOptions);
      function isInlineComment(comment2) {
        const previousToken = sourceCode2.getTokenBefore(comment2, {
          includeComments: true
        }), nextToken = sourceCode2.getTokenAfter(comment2, {
          includeComments: true
        });
        return Boolean(
          previousToken && nextToken && comment2.loc.start.line === previousToken.loc.end.line && comment2.loc.end.line === nextToken.loc.start.line
        );
      }
      function isConsecutiveComment(comment2) {
        const previousTokenOrComment = sourceCode2.getTokenBefore(comment2, {
          includeComments: true
        });
        return Boolean(
          previousTokenOrComment && ["Block", "Line"].includes(previousTokenOrComment.type)
        );
      }
      function isCommentValid(comment2, options) {
        if (DEFAULT_IGNORE_PATTERN.test(comment2.value)) {
          return true;
        }
        const commentWithoutAsterisks = comment2.value.replace(/\*/gu, "");
        if (options.ignorePatternRegExp && options.ignorePatternRegExp.test(commentWithoutAsterisks)) {
          return true;
        }
        if (options.ignoreInlineComments && isInlineComment(comment2)) {
          return true;
        }
        if (options.ignoreConsecutiveComments && isConsecutiveComment(comment2)) {
          return true;
        }
        if (MAYBE_URL.test(commentWithoutAsterisks)) {
          return true;
        }
        const commentWordCharsOnly = commentWithoutAsterisks.replace(
          WHITESPACE,
          ""
        );
        if (commentWordCharsOnly.length === 0) {
          return true;
        }
        const [firstWordChar] = commentWordCharsOnly;
        if (!LETTER_PATTERN.test(firstWordChar)) {
          return true;
        }
        const isUppercase = firstWordChar !== firstWordChar.toLocaleLowerCase(), isLowercase = firstWordChar !== firstWordChar.toLocaleUpperCase();
        if (capitalize === "always" && isLowercase) {
          return false;
        }
        if (capitalize === "never" && isUppercase) {
          return false;
        }
        return true;
      }
      function processComment(comment2) {
        const options = normalizedOptions[comment2.type], commentValid = isCommentValid(comment2, options);
        if (!commentValid) {
          const messageId = capitalize === "always" ? "unexpectedLowercaseComment" : "unexpectedUppercaseComment";
          context.report({
            node: null,
            // Intentionally using loc instead
            loc: comment2.loc,
            messageId,
            fix(fixer) {
              const match = comment2.value.match(LETTER_PATTERN);
              const char = match[0];
              const charIndex = comment2.range[0] + match.index + 2;
              return fixer.replaceTextRange(
                [charIndex, charIndex + char.length],
                capitalize === "always" ? char.toLocaleUpperCase() : char.toLocaleLowerCase()
              );
            }
          });
        }
      }
      return {
        Program() {
          const comments = sourceCode2.getAllComments();
          comments.filter((token) => token.type !== "Shebang").forEach(processComment);
        }
      };
    }
  };
  return capitalizedComments;
}
var classMethodsUseThis;
var hasRequiredClassMethodsUseThis;
function requireClassMethodsUseThis() {
  if (hasRequiredClassMethodsUseThis) return classMethodsUseThis;
  hasRequiredClassMethodsUseThis = 1;
  const astUtils2 = requireAstUtils();
  classMethodsUseThis = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "suggestion",
      defaultOptions: [
        {
          enforceForClassFields: true,
          exceptMethods: [],
          ignoreOverrideMethods: false
        }
      ],
      docs: {
        description: "Enforce that class methods utilize `this`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/class-methods-use-this"
      },
      schema: [
        {
          type: "object",
          properties: {
            exceptMethods: {
              type: "array",
              items: {
                type: "string"
              }
            },
            enforceForClassFields: {
              type: "boolean"
            },
            ignoreOverrideMethods: {
              type: "boolean"
            },
            ignoreClassesWithImplements: {
              enum: ["all", "public-fields"]
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        missingThis: "Expected 'this' to be used by class {{name}}."
      }
    },
    create(context) {
      const [options] = context.options;
      const {
        enforceForClassFields,
        ignoreOverrideMethods,
        ignoreClassesWithImplements
      } = options;
      const exceptMethods = new Set(options.exceptMethods);
      const stack = [];
      function pushContext() {
        stack.push(false);
      }
      function popContext() {
        return stack.pop();
      }
      function enterFunction() {
        pushContext();
      }
      function isInstanceMethod(node2) {
        switch (node2.type) {
          case "MethodDefinition":
            return !node2.static && node2.kind !== "constructor";
          case "AccessorProperty":
          case "PropertyDefinition":
            return !node2.static && enforceForClassFields;
          default:
            return false;
        }
      }
      function hasImplements(node2) {
        const classNode = node2.parent.parent;
        return classNode?.type === "ClassDeclaration" && classNode.implements?.length > 0;
      }
      function isIncludedInstanceMethod(node2) {
        if (isInstanceMethod(node2)) {
          if (node2.computed) {
            return true;
          }
          if (ignoreOverrideMethods && node2.override) {
            return false;
          }
          if (ignoreClassesWithImplements) {
            const implementsInterfaces = hasImplements(node2);
            if (implementsInterfaces) {
              if (ignoreClassesWithImplements === "all" || ignoreClassesWithImplements === "public-fields" && node2.key.type !== "PrivateIdentifier" && (!node2.accessibility || node2.accessibility === "public")) {
                return false;
              }
            }
          }
          const hashIfNeeded = node2.key.type === "PrivateIdentifier" ? "#" : "";
          const name = node2.key.type === "Literal" ? astUtils2.getStaticStringValue(node2.key) : node2.key.name || "";
          return !exceptMethods.has(hashIfNeeded + name);
        }
        return false;
      }
      function exitFunction(node2) {
        const methodUsesThis = popContext();
        if (isIncludedInstanceMethod(node2.parent) && !methodUsesThis) {
          context.report({
            node: node2,
            loc: astUtils2.getFunctionHeadLoc(node2, context.sourceCode),
            messageId: "missingThis",
            data: {
              name: astUtils2.getFunctionNameWithKind(node2)
            }
          });
        }
      }
      function markThisUsed() {
        if (stack.length) {
          stack[stack.length - 1] = true;
        }
      }
      return {
        FunctionDeclaration: enterFunction,
        "FunctionDeclaration:exit": exitFunction,
        FunctionExpression: enterFunction,
        "FunctionExpression:exit": exitFunction,
        /*
         * Class field value are implicit functions.
         */
        "AccessorProperty > *.key:exit": pushContext,
        "AccessorProperty:exit": popContext,
        "PropertyDefinition > *.key:exit": pushContext,
        "PropertyDefinition:exit": popContext,
        /*
         * Class static blocks are implicit functions. They aren't required to use `this`,
         * but we have to push context so that it captures any use of `this` in the static block
         * separately from enclosing contexts, because static blocks have their own `this` and it
         * shouldn't count as used `this` in enclosing contexts.
         */
        StaticBlock: pushContext,
        "StaticBlock:exit": popContext,
        ThisExpression: markThisUsed,
        Super: markThisUsed,
        ...enforceForClassFields && {
          "AccessorProperty > ArrowFunctionExpression.value": enterFunction,
          "AccessorProperty > ArrowFunctionExpression.value:exit": exitFunction,
          "PropertyDefinition > ArrowFunctionExpression.value": enterFunction,
          "PropertyDefinition > ArrowFunctionExpression.value:exit": exitFunction
        }
      };
    }
  };
  return classMethodsUseThis;
}
var commaDangle;
var hasRequiredCommaDangle;
function requireCommaDangle() {
  if (hasRequiredCommaDangle) return commaDangle;
  hasRequiredCommaDangle = 1;
  const astUtils2 = requireAstUtils();
  const DEFAULT_OPTIONS = Object.freeze({
    arrays: "never",
    objects: "never",
    imports: "never",
    exports: "never",
    functions: "never"
  });
  function isTrailingCommaAllowed(lastItem) {
    return !(lastItem.type === "RestElement" || lastItem.type === "RestProperty" || lastItem.type === "ExperimentalRestProperty");
  }
  function normalizeOptions(optionValue, ecmaVersion2) {
    if (typeof optionValue === "string") {
      return {
        arrays: optionValue,
        objects: optionValue,
        imports: optionValue,
        exports: optionValue,
        functions: ecmaVersion2 < 2017 ? "ignore" : optionValue
      };
    }
    if (typeof optionValue === "object" && optionValue !== null) {
      return {
        arrays: optionValue.arrays || DEFAULT_OPTIONS.arrays,
        objects: optionValue.objects || DEFAULT_OPTIONS.objects,
        imports: optionValue.imports || DEFAULT_OPTIONS.imports,
        exports: optionValue.exports || DEFAULT_OPTIONS.exports,
        functions: optionValue.functions || DEFAULT_OPTIONS.functions
      };
    }
    return DEFAULT_OPTIONS;
  }
  commaDangle = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "comma-dangle",
              url: "https://eslint.style/rules/comma-dangle"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow trailing commas",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/comma-dangle"
      },
      fixable: "code",
      schema: {
        definitions: {
          value: {
            enum: [
              "always-multiline",
              "always",
              "never",
              "only-multiline"
            ]
          },
          valueWithIgnore: {
            enum: [
              "always-multiline",
              "always",
              "ignore",
              "never",
              "only-multiline"
            ]
          }
        },
        type: "array",
        items: [
          {
            oneOf: [
              {
                $ref: "#/definitions/value"
              },
              {
                type: "object",
                properties: {
                  arrays: {
                    $ref: "#/definitions/valueWithIgnore"
                  },
                  objects: {
                    $ref: "#/definitions/valueWithIgnore"
                  },
                  imports: {
                    $ref: "#/definitions/valueWithIgnore"
                  },
                  exports: {
                    $ref: "#/definitions/valueWithIgnore"
                  },
                  functions: {
                    $ref: "#/definitions/valueWithIgnore"
                  }
                },
                additionalProperties: false
              }
            ]
          }
        ],
        additionalItems: false
      },
      messages: {
        unexpected: "Unexpected trailing comma.",
        missing: "Missing trailing comma."
      }
    },
    create(context) {
      const options = normalizeOptions(
        context.options[0],
        context.languageOptions.ecmaVersion
      );
      const sourceCode2 = context.sourceCode;
      function getLastItem(node2) {
        function last(array) {
          return array.at(-1);
        }
        switch (node2.type) {
          case "ObjectExpression":
          case "ObjectPattern":
            return last(node2.properties);
          case "ArrayExpression":
          case "ArrayPattern":
            return last(node2.elements);
          case "ImportDeclaration":
          case "ExportNamedDeclaration":
            return last(node2.specifiers);
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "ArrowFunctionExpression":
            return last(node2.params);
          case "CallExpression":
          case "NewExpression":
            return last(node2.arguments);
          default:
            return null;
        }
      }
      function getTrailingToken(node2, lastItem) {
        switch (node2.type) {
          case "ObjectExpression":
          case "ArrayExpression":
          case "CallExpression":
          case "NewExpression":
            return sourceCode2.getLastToken(node2, 1);
          default: {
            const nextToken = sourceCode2.getTokenAfter(lastItem);
            if (astUtils2.isCommaToken(nextToken)) {
              return nextToken;
            }
            return sourceCode2.getLastToken(lastItem);
          }
        }
      }
      function isMultiline(node2) {
        const lastItem = getLastItem(node2);
        if (!lastItem) {
          return false;
        }
        const penultimateToken = getTrailingToken(node2, lastItem);
        const lastToken = sourceCode2.getTokenAfter(penultimateToken);
        return lastToken.loc.end.line !== penultimateToken.loc.end.line;
      }
      function forbidTrailingComma(node2) {
        const lastItem = getLastItem(node2);
        if (!lastItem || node2.type === "ImportDeclaration" && lastItem.type !== "ImportSpecifier") {
          return;
        }
        const trailingToken = getTrailingToken(node2, lastItem);
        if (astUtils2.isCommaToken(trailingToken)) {
          context.report({
            node: lastItem,
            loc: trailingToken.loc,
            messageId: "unexpected",
            *fix(fixer) {
              yield fixer.remove(trailingToken);
              yield fixer.insertTextBefore(
                sourceCode2.getTokenBefore(trailingToken),
                ""
              );
              yield fixer.insertTextAfter(
                sourceCode2.getTokenAfter(trailingToken),
                ""
              );
            }
          });
        }
      }
      function forceTrailingComma(node2) {
        const lastItem = getLastItem(node2);
        if (!lastItem || node2.type === "ImportDeclaration" && lastItem.type !== "ImportSpecifier") {
          return;
        }
        if (!isTrailingCommaAllowed(lastItem)) {
          forbidTrailingComma(node2);
          return;
        }
        const trailingToken = getTrailingToken(node2, lastItem);
        if (trailingToken.value !== ",") {
          context.report({
            node: lastItem,
            loc: {
              start: trailingToken.loc.end,
              end: astUtils2.getNextLocation(
                sourceCode2,
                trailingToken.loc.end
              )
            },
            messageId: "missing",
            *fix(fixer) {
              yield fixer.insertTextAfter(trailingToken, ",");
              yield fixer.insertTextBefore(trailingToken, "");
              yield fixer.insertTextAfter(
                sourceCode2.getTokenAfter(trailingToken),
                ""
              );
            }
          });
        }
      }
      function forceTrailingCommaIfMultiline(node2) {
        if (isMultiline(node2)) {
          forceTrailingComma(node2);
        } else {
          forbidTrailingComma(node2);
        }
      }
      function allowTrailingCommaIfMultiline(node2) {
        if (!isMultiline(node2)) {
          forbidTrailingComma(node2);
        }
      }
      const predicate = {
        always: forceTrailingComma,
        "always-multiline": forceTrailingCommaIfMultiline,
        "only-multiline": allowTrailingCommaIfMultiline,
        never: forbidTrailingComma,
        ignore() {
        }
      };
      return {
        ObjectExpression: predicate[options.objects],
        ObjectPattern: predicate[options.objects],
        ArrayExpression: predicate[options.arrays],
        ArrayPattern: predicate[options.arrays],
        ImportDeclaration: predicate[options.imports],
        ExportNamedDeclaration: predicate[options.exports],
        FunctionDeclaration: predicate[options.functions],
        FunctionExpression: predicate[options.functions],
        ArrowFunctionExpression: predicate[options.functions],
        CallExpression: predicate[options.functions],
        NewExpression: predicate[options.functions]
      };
    }
  };
  return commaDangle;
}
var commaSpacing;
var hasRequiredCommaSpacing;
function requireCommaSpacing() {
  if (hasRequiredCommaSpacing) return commaSpacing;
  hasRequiredCommaSpacing = 1;
  const astUtils2 = requireAstUtils();
  commaSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "comma-spacing",
              url: "https://eslint.style/rules/comma-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing before and after commas",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/comma-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            before: {
              type: "boolean",
              default: false
            },
            after: {
              type: "boolean",
              default: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        missing: "A space is required {{loc}} ','.",
        unexpected: "There should be no space {{loc}} ','."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const tokensAndComments = sourceCode2.tokensAndComments;
      const options = {
        before: context.options[0] ? context.options[0].before : false,
        after: context.options[0] ? context.options[0].after : true
      };
      const commaTokensToIgnore = [];
      function report(node2, loc, otherNode) {
        context.report({
          node: node2,
          fix(fixer) {
            if (options[loc]) {
              if (loc === "before") {
                return fixer.insertTextBefore(node2, " ");
              }
              return fixer.insertTextAfter(node2, " ");
            }
            let start, end;
            const newText = "";
            if (loc === "before") {
              start = otherNode.range[1];
              end = node2.range[0];
            } else {
              start = node2.range[1];
              end = otherNode.range[0];
            }
            return fixer.replaceTextRange([start, end], newText);
          },
          messageId: options[loc] ? "missing" : "unexpected",
          data: {
            loc
          }
        });
      }
      function addNullElementsToIgnoreList(node2) {
        let previousToken = sourceCode2.getFirstToken(node2);
        node2.elements.forEach((element) => {
          let token;
          if (element === null) {
            token = sourceCode2.getTokenAfter(previousToken);
            if (astUtils2.isCommaToken(token)) {
              commaTokensToIgnore.push(token);
            }
          } else {
            token = sourceCode2.getTokenAfter(element);
          }
          previousToken = token;
        });
      }
      return {
        "Program:exit"() {
          tokensAndComments.forEach((token, i2) => {
            if (!astUtils2.isCommaToken(token)) {
              return;
            }
            const previousToken = tokensAndComments[i2 - 1];
            const nextToken = tokensAndComments[i2 + 1];
            if (previousToken && !astUtils2.isCommaToken(previousToken) && // ignore spacing between two commas
            /*
             * `commaTokensToIgnore` are ending commas of `null` elements (array holes/elisions).
             * In addition to spacing between two commas, this can also ignore:
             *
             *   - Spacing after `[` (controlled by array-bracket-spacing)
             *       Example: [ , ]
             *                 ^
             *   - Spacing after a comment (for backwards compatibility, this was possibly unintentional)
             *       Example: [a, /* * / ,]
             *                          ^
             */
            !commaTokensToIgnore.includes(token) && astUtils2.isTokenOnSameLine(previousToken, token) && options.before !== sourceCode2.isSpaceBetweenTokens(
              previousToken,
              token
            )) {
              report(token, "before", previousToken);
            }
            if (nextToken && !astUtils2.isCommaToken(nextToken) && // ignore spacing between two commas
            !astUtils2.isClosingParenToken(nextToken) && // controlled by space-in-parens
            !astUtils2.isClosingBracketToken(nextToken) && // controlled by array-bracket-spacing
            !astUtils2.isClosingBraceToken(nextToken) && // controlled by object-curly-spacing
            !(!options.after && nextToken.type === "Line") && // special case, allow space before line comment
            astUtils2.isTokenOnSameLine(token, nextToken) && options.after !== sourceCode2.isSpaceBetweenTokens(token, nextToken)) {
              report(token, "after", nextToken);
            }
          });
        },
        ArrayExpression: addNullElementsToIgnoreList,
        ArrayPattern: addNullElementsToIgnoreList
      };
    }
  };
  return commaSpacing;
}
var commaStyle;
var hasRequiredCommaStyle;
function requireCommaStyle() {
  if (hasRequiredCommaStyle) return commaStyle;
  hasRequiredCommaStyle = 1;
  const astUtils2 = requireAstUtils();
  commaStyle = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "comma-style",
              url: "https://eslint.style/rules/comma-style"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent comma style",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/comma-style"
      },
      fixable: "code",
      schema: [
        {
          enum: ["first", "last"]
        },
        {
          type: "object",
          properties: {
            exceptions: {
              type: "object",
              additionalProperties: {
                type: "boolean"
              }
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedLineBeforeAndAfterComma: "Bad line breaking before and after ','.",
        expectedCommaFirst: "',' should be placed first.",
        expectedCommaLast: "',' should be placed last."
      }
    },
    create(context) {
      const style = context.options[0] || "last", sourceCode2 = context.sourceCode;
      const exceptions = {
        ArrayPattern: true,
        ArrowFunctionExpression: true,
        CallExpression: true,
        FunctionDeclaration: true,
        FunctionExpression: true,
        ImportDeclaration: true,
        ObjectPattern: true,
        NewExpression: true
      };
      if (context.options.length === 2 && Object.hasOwn(context.options[1], "exceptions")) {
        const keys = Object.keys(context.options[1].exceptions);
        for (let i2 = 0; i2 < keys.length; i2++) {
          exceptions[keys[i2]] = context.options[1].exceptions[keys[i2]];
        }
      }
      function getReplacedText(styleType, text) {
        switch (styleType) {
          case "between":
            return `,${text.replace(astUtils2.LINEBREAK_MATCHER, "")}`;
          case "first":
            return `${text},`;
          case "last":
            return `,${text}`;
          default:
            return "";
        }
      }
      function getFixerFunction(styleType, previousItemToken, commaToken, currentItemToken) {
        const text = sourceCode2.text.slice(
          previousItemToken.range[1],
          commaToken.range[0]
        ) + sourceCode2.text.slice(
          commaToken.range[1],
          currentItemToken.range[0]
        );
        const range = [
          previousItemToken.range[1],
          currentItemToken.range[0]
        ];
        return function(fixer) {
          return fixer.replaceTextRange(
            range,
            getReplacedText(styleType, text)
          );
        };
      }
      function validateCommaItemSpacing(previousItemToken, commaToken, currentItemToken, reportItem) {
        if (astUtils2.isTokenOnSameLine(commaToken, currentItemToken) && astUtils2.isTokenOnSameLine(previousItemToken, commaToken)) ;
        else if (!astUtils2.isTokenOnSameLine(commaToken, currentItemToken) && !astUtils2.isTokenOnSameLine(previousItemToken, commaToken)) {
          const comment2 = sourceCode2.getCommentsAfter(commaToken)[0];
          const styleType = comment2 && comment2.type === "Block" && astUtils2.isTokenOnSameLine(commaToken, comment2) ? style : "between";
          context.report({
            node: reportItem,
            loc: commaToken.loc,
            messageId: "unexpectedLineBeforeAndAfterComma",
            fix: getFixerFunction(
              styleType,
              previousItemToken,
              commaToken,
              currentItemToken
            )
          });
        } else if (style === "first" && !astUtils2.isTokenOnSameLine(commaToken, currentItemToken)) {
          context.report({
            node: reportItem,
            loc: commaToken.loc,
            messageId: "expectedCommaFirst",
            fix: getFixerFunction(
              style,
              previousItemToken,
              commaToken,
              currentItemToken
            )
          });
        } else if (style === "last" && astUtils2.isTokenOnSameLine(commaToken, currentItemToken)) {
          context.report({
            node: reportItem,
            loc: commaToken.loc,
            messageId: "expectedCommaLast",
            fix: getFixerFunction(
              style,
              previousItemToken,
              commaToken,
              currentItemToken
            )
          });
        }
      }
      function validateComma(node2, property) {
        const items2 = node2[property], arrayLiteral = node2.type === "ArrayExpression" || node2.type === "ArrayPattern";
        if (items2.length > 1 || arrayLiteral) {
          let previousItemToken = sourceCode2.getFirstToken(node2);
          items2.forEach((item) => {
            const commaToken = item ? sourceCode2.getTokenBefore(item) : previousItemToken, currentItemToken = item ? sourceCode2.getFirstToken(item) : sourceCode2.getTokenAfter(commaToken), reportItem = item || currentItemToken;
            if (astUtils2.isCommaToken(commaToken)) {
              validateCommaItemSpacing(
                previousItemToken,
                commaToken,
                currentItemToken,
                reportItem
              );
            }
            if (item) {
              const tokenAfterItem = sourceCode2.getTokenAfter(
                item,
                astUtils2.isNotClosingParenToken
              );
              previousItemToken = tokenAfterItem ? sourceCode2.getTokenBefore(tokenAfterItem) : sourceCode2.ast.tokens.at(-1);
            } else {
              previousItemToken = currentItemToken;
            }
          });
          if (arrayLiteral) {
            const lastToken = sourceCode2.getLastToken(node2), nextToLastToken = sourceCode2.getTokenBefore(lastToken);
            if (astUtils2.isCommaToken(nextToLastToken)) {
              validateCommaItemSpacing(
                sourceCode2.getTokenBefore(nextToLastToken),
                nextToLastToken,
                lastToken,
                lastToken
              );
            }
          }
        }
      }
      const nodes = {};
      if (!exceptions.VariableDeclaration) {
        nodes.VariableDeclaration = function(node2) {
          validateComma(node2, "declarations");
        };
      }
      if (!exceptions.ObjectExpression) {
        nodes.ObjectExpression = function(node2) {
          validateComma(node2, "properties");
        };
      }
      if (!exceptions.ObjectPattern) {
        nodes.ObjectPattern = function(node2) {
          validateComma(node2, "properties");
        };
      }
      if (!exceptions.ArrayExpression) {
        nodes.ArrayExpression = function(node2) {
          validateComma(node2, "elements");
        };
      }
      if (!exceptions.ArrayPattern) {
        nodes.ArrayPattern = function(node2) {
          validateComma(node2, "elements");
        };
      }
      if (!exceptions.FunctionDeclaration) {
        nodes.FunctionDeclaration = function(node2) {
          validateComma(node2, "params");
        };
      }
      if (!exceptions.FunctionExpression) {
        nodes.FunctionExpression = function(node2) {
          validateComma(node2, "params");
        };
      }
      if (!exceptions.ArrowFunctionExpression) {
        nodes.ArrowFunctionExpression = function(node2) {
          validateComma(node2, "params");
        };
      }
      if (!exceptions.CallExpression) {
        nodes.CallExpression = function(node2) {
          validateComma(node2, "arguments");
        };
      }
      if (!exceptions.ImportDeclaration) {
        nodes.ImportDeclaration = function(node2) {
          validateComma(node2, "specifiers");
        };
      }
      if (!exceptions.NewExpression) {
        nodes.NewExpression = function(node2) {
          validateComma(node2, "arguments");
        };
      }
      return nodes;
    }
  };
  return commaStyle;
}
var stringUtils;
var hasRequiredStringUtils;
function requireStringUtils() {
  if (hasRequiredStringUtils) return stringUtils;
  hasRequiredStringUtils = 1;
  const ASCII_REGEX = /^[\u0000-\u007f]*$/u;
  let segmenter;
  function upperCaseFirst(string) {
    if (string.length <= 1) {
      return string.toUpperCase();
    }
    return string[0].toUpperCase() + string.slice(1);
  }
  function getGraphemeCount(value) {
    if (ASCII_REGEX.test(value)) {
      return value.length;
    }
    segmenter ??= new Intl.Segmenter("en-US");
    let graphemeCount = 0;
    for (const unused of segmenter.segment(value)) {
      graphemeCount++;
    }
    return graphemeCount;
  }
  stringUtils = {
    upperCaseFirst,
    getGraphemeCount
  };
  return stringUtils;
}
var complexity;
var hasRequiredComplexity;
function requireComplexity() {
  if (hasRequiredComplexity) return complexity;
  hasRequiredComplexity = 1;
  const astUtils2 = requireAstUtils();
  const { upperCaseFirst } = requireStringUtils();
  const THRESHOLD_DEFAULT = 20;
  complexity = {
    meta: {
      type: "suggestion",
      defaultOptions: [THRESHOLD_DEFAULT],
      docs: {
        description: "Enforce a maximum cyclomatic complexity allowed in a program",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/complexity"
      },
      schema: [
        {
          oneOf: [
            {
              type: "integer",
              minimum: 0
            },
            {
              type: "object",
              properties: {
                maximum: {
                  type: "integer",
                  minimum: 0
                },
                max: {
                  type: "integer",
                  minimum: 0
                },
                variant: {
                  enum: ["classic", "modified"]
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        complex: "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}."
      }
    },
    create(context) {
      const option = context.options[0];
      let threshold = THRESHOLD_DEFAULT;
      let VARIANT = "classic";
      if (typeof option === "object") {
        if (Object.hasOwn(option, "maximum") || Object.hasOwn(option, "max")) {
          threshold = option.maximum || option.max;
        }
        if (Object.hasOwn(option, "variant")) {
          VARIANT = option.variant;
        }
      } else if (typeof option === "number") {
        threshold = option;
      }
      const IS_MODIFIED_COMPLEXITY = VARIANT === "modified";
      const complexities = [];
      function increaseComplexity() {
        complexities[complexities.length - 1]++;
      }
      return {
        onCodePathStart() {
          complexities.push(1);
        },
        // Each branching in the code adds 1 to the complexity
        CatchClause: increaseComplexity,
        ConditionalExpression: increaseComplexity,
        LogicalExpression: increaseComplexity,
        ForStatement: increaseComplexity,
        ForInStatement: increaseComplexity,
        ForOfStatement: increaseComplexity,
        IfStatement: increaseComplexity,
        WhileStatement: increaseComplexity,
        DoWhileStatement: increaseComplexity,
        AssignmentPattern: increaseComplexity,
        // Avoid `default`
        "SwitchCase[test]": () => IS_MODIFIED_COMPLEXITY || increaseComplexity(),
        SwitchStatement: () => IS_MODIFIED_COMPLEXITY && increaseComplexity(),
        // Logical assignment operators have short-circuiting behavior
        AssignmentExpression(node2) {
          if (astUtils2.isLogicalAssignmentOperator(node2.operator)) {
            increaseComplexity();
          }
        },
        MemberExpression(node2) {
          if (node2.optional === true) {
            increaseComplexity();
          }
        },
        CallExpression(node2) {
          if (node2.optional === true) {
            increaseComplexity();
          }
        },
        onCodePathEnd(codePath2, node2) {
          const complexity2 = complexities.pop();
          if (codePath2.origin !== "function" && codePath2.origin !== "class-field-initializer" && codePath2.origin !== "class-static-block") {
            return;
          }
          if (complexity2 > threshold) {
            let name;
            if (codePath2.origin === "class-field-initializer") {
              name = "class field initializer";
            } else if (codePath2.origin === "class-static-block") {
              name = "class static block";
            } else {
              name = astUtils2.getFunctionNameWithKind(node2);
            }
            context.report({
              node: node2,
              messageId: "complex",
              data: {
                name: upperCaseFirst(name),
                complexity: complexity2,
                max: threshold
              }
            });
          }
        }
      };
    }
  };
  return complexity;
}
var computedPropertySpacing;
var hasRequiredComputedPropertySpacing;
function requireComputedPropertySpacing() {
  if (hasRequiredComputedPropertySpacing) return computedPropertySpacing;
  hasRequiredComputedPropertySpacing = 1;
  const astUtils2 = requireAstUtils();
  computedPropertySpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "computed-property-spacing",
              url: "https://eslint.style/rules/computed-property-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing inside computed property brackets",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/computed-property-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never"]
        },
        {
          type: "object",
          properties: {
            enforceForClassMembers: {
              type: "boolean",
              default: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.",
        unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",
        missingSpaceBefore: "A space is required before '{{tokenValue}}'.",
        missingSpaceAfter: "A space is required after '{{tokenValue}}'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const propertyNameMustBeSpaced = context.options[0] === "always";
      const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers;
      function reportNoBeginningSpace(node2, token, tokenAfter) {
        context.report({
          node: node2,
          loc: { start: token.loc.end, end: tokenAfter.loc.start },
          messageId: "unexpectedSpaceAfter",
          data: {
            tokenValue: token.value
          },
          fix(fixer) {
            return fixer.removeRange([
              token.range[1],
              tokenAfter.range[0]
            ]);
          }
        });
      }
      function reportNoEndingSpace(node2, token, tokenBefore) {
        context.report({
          node: node2,
          loc: { start: tokenBefore.loc.end, end: token.loc.start },
          messageId: "unexpectedSpaceBefore",
          data: {
            tokenValue: token.value
          },
          fix(fixer) {
            return fixer.removeRange([
              tokenBefore.range[1],
              token.range[0]
            ]);
          }
        });
      }
      function reportRequiredBeginningSpace(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "missingSpaceAfter",
          data: {
            tokenValue: token.value
          },
          fix(fixer) {
            return fixer.insertTextAfter(token, " ");
          }
        });
      }
      function reportRequiredEndingSpace(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "missingSpaceBefore",
          data: {
            tokenValue: token.value
          },
          fix(fixer) {
            return fixer.insertTextBefore(token, " ");
          }
        });
      }
      function checkSpacing(propertyName) {
        return function(node2) {
          if (!node2.computed) {
            return;
          }
          const property = node2[propertyName];
          const before = sourceCode2.getTokenBefore(
            property,
            astUtils2.isOpeningBracketToken
          ), first = sourceCode2.getTokenAfter(before, {
            includeComments: true
          }), after = sourceCode2.getTokenAfter(
            property,
            astUtils2.isClosingBracketToken
          ), last = sourceCode2.getTokenBefore(after, {
            includeComments: true
          });
          if (astUtils2.isTokenOnSameLine(before, first)) {
            if (propertyNameMustBeSpaced) {
              if (!sourceCode2.isSpaceBetweenTokens(before, first) && astUtils2.isTokenOnSameLine(before, first)) {
                reportRequiredBeginningSpace(node2, before);
              }
            } else {
              if (sourceCode2.isSpaceBetweenTokens(before, first)) {
                reportNoBeginningSpace(node2, before, first);
              }
            }
          }
          if (astUtils2.isTokenOnSameLine(last, after)) {
            if (propertyNameMustBeSpaced) {
              if (!sourceCode2.isSpaceBetweenTokens(last, after) && astUtils2.isTokenOnSameLine(last, after)) {
                reportRequiredEndingSpace(node2, after);
              }
            } else {
              if (sourceCode2.isSpaceBetweenTokens(last, after)) {
                reportNoEndingSpace(node2, after, last);
              }
            }
          }
        };
      }
      const listeners = {
        Property: checkSpacing("key"),
        MemberExpression: checkSpacing("property")
      };
      if (enforceForClassMembers) {
        listeners.MethodDefinition = listeners.PropertyDefinition = listeners.Property;
      }
      return listeners;
    }
  };
  return computedPropertySpacing;
}
var consistentReturn;
var hasRequiredConsistentReturn;
function requireConsistentReturn() {
  if (hasRequiredConsistentReturn) return consistentReturn;
  hasRequiredConsistentReturn = 1;
  const astUtils2 = requireAstUtils();
  const { upperCaseFirst } = requireStringUtils();
  function areAllSegmentsUnreachable(segments) {
    for (const segment of segments) {
      if (segment.reachable) {
        return false;
      }
    }
    return true;
  }
  function isClassConstructor(node2) {
    return node2.type === "FunctionExpression" && node2.parent && node2.parent.type === "MethodDefinition" && node2.parent.kind === "constructor";
  }
  consistentReturn = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require `return` statements to either always or never specify values",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/consistent-return"
      },
      schema: [
        {
          type: "object",
          properties: {
            treatUndefinedAsUnspecified: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      defaultOptions: [{ treatUndefinedAsUnspecified: false }],
      messages: {
        missingReturn: "Expected to return a value at the end of {{name}}.",
        missingReturnValue: "{{name}} expected a return value.",
        unexpectedReturnValue: "{{name}} expected no return value."
      }
    },
    create(context) {
      const [{ treatUndefinedAsUnspecified }] = context.options;
      let funcInfo = null;
      function checkLastSegment(node2) {
        let loc, name;
        if (!funcInfo.hasReturnValue || areAllSegmentsUnreachable(funcInfo.currentSegments) || astUtils2.isES5Constructor(node2) || isClassConstructor(node2)) {
          return;
        }
        if (node2.type === "Program") {
          loc = { line: 1, column: 0 };
          name = "program";
        } else if (node2.type === "ArrowFunctionExpression") {
          loc = context.sourceCode.getTokenBefore(
            node2.body,
            astUtils2.isArrowToken
          ).loc;
        } else if (node2.parent.type === "MethodDefinition" || node2.parent.type === "Property" && node2.parent.method) {
          loc = node2.parent.key.loc;
        } else {
          loc = (node2.id || context.sourceCode.getFirstToken(node2)).loc;
        }
        if (!name) {
          name = astUtils2.getFunctionNameWithKind(node2);
        }
        context.report({
          node: node2,
          loc,
          messageId: "missingReturn",
          data: { name }
        });
      }
      return {
        // Initializes/Disposes state of each code path.
        onCodePathStart(codePath2, node2) {
          funcInfo = {
            upper: funcInfo,
            codePath: codePath2,
            hasReturn: false,
            hasReturnValue: false,
            messageId: "",
            node: node2,
            currentSegments: /* @__PURE__ */ new Set()
          };
        },
        onCodePathEnd() {
          funcInfo = funcInfo.upper;
        },
        onUnreachableCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        onCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
        },
        onCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        // Reports a given return statement if it's inconsistent.
        ReturnStatement(node2) {
          const argument = node2.argument;
          let hasReturnValue = Boolean(argument);
          if (treatUndefinedAsUnspecified && hasReturnValue) {
            hasReturnValue = !astUtils2.isSpecificId(argument, "undefined") && argument.operator !== "void";
          }
          if (!funcInfo.hasReturn) {
            funcInfo.hasReturn = true;
            funcInfo.hasReturnValue = hasReturnValue;
            funcInfo.messageId = hasReturnValue ? "missingReturnValue" : "unexpectedReturnValue";
            funcInfo.data = {
              name: funcInfo.node.type === "Program" ? "Program" : upperCaseFirst(
                astUtils2.getFunctionNameWithKind(
                  funcInfo.node
                )
              )
            };
          } else if (funcInfo.hasReturnValue !== hasReturnValue) {
            context.report({
              node: node2,
              messageId: funcInfo.messageId,
              data: funcInfo.data
            });
          }
        },
        // Reports a given program/function if the implicit returning is not consistent.
        "Program:exit": checkLastSegment,
        "FunctionDeclaration:exit": checkLastSegment,
        "FunctionExpression:exit": checkLastSegment,
        "ArrowFunctionExpression:exit": checkLastSegment
      };
    }
  };
  return consistentReturn;
}
var consistentThis;
var hasRequiredConsistentThis;
function requireConsistentThis() {
  if (hasRequiredConsistentThis) return consistentThis;
  hasRequiredConsistentThis = 1;
  consistentThis = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce consistent naming when capturing the current execution context",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/consistent-this"
      },
      schema: {
        type: "array",
        items: {
          type: "string",
          minLength: 1
        },
        uniqueItems: true
      },
      defaultOptions: ["that"],
      messages: {
        aliasNotAssignedToThis: "Designated alias '{{name}}' is not assigned to 'this'.",
        unexpectedAlias: "Unexpected alias '{{name}}' for 'this'."
      }
    },
    create(context) {
      const aliases = context.options;
      const sourceCode2 = context.sourceCode;
      function reportBadAssignment(node2, name) {
        context.report({
          node: node2,
          messageId: "aliasNotAssignedToThis",
          data: { name }
        });
      }
      function checkAssignment(node2, name, value) {
        const isThis = value.type === "ThisExpression";
        if (aliases.includes(name)) {
          if (!isThis || node2.operator && node2.operator !== "=") {
            reportBadAssignment(node2, name);
          }
        } else if (isThis) {
          context.report({
            node: node2,
            messageId: "unexpectedAlias",
            data: { name }
          });
        }
      }
      function checkWasAssigned(alias, scope) {
        const variable = scope.set.get(alias);
        if (!variable) {
          return;
        }
        if (variable.defs.some(
          (def) => def.node.type === "VariableDeclarator" && def.node.init !== null
        )) {
          return;
        }
        if (!variable.references.some((reference) => {
          const write3 = reference.writeExpr;
          return reference.from === scope && write3 && write3.type === "ThisExpression" && write3.parent.operator === "=";
        })) {
          variable.defs.map((def) => def.node).forEach((node2) => {
            reportBadAssignment(node2, alias);
          });
        }
      }
      function ensureWasAssigned(node2) {
        const scope = sourceCode2.getScope(node2);
        const extraScope = node2.type === "Program" && node2.sourceType === "module" ? scope.childScopes[0] : null;
        aliases.forEach((alias) => {
          checkWasAssigned(alias, scope);
          if (extraScope) {
            checkWasAssigned(alias, extraScope);
          }
        });
      }
      return {
        "Program:exit": ensureWasAssigned,
        "FunctionExpression:exit": ensureWasAssigned,
        "FunctionDeclaration:exit": ensureWasAssigned,
        VariableDeclarator(node2) {
          const id2 = node2.id;
          const isDestructuring = id2.type === "ArrayPattern" || id2.type === "ObjectPattern";
          if (node2.init !== null && !isDestructuring) {
            checkAssignment(node2, id2.name, node2.init);
          }
        },
        AssignmentExpression(node2) {
          if (node2.left.type === "Identifier") {
            checkAssignment(node2, node2.left.name, node2.right);
          }
        }
      };
    }
  };
  return consistentThis;
}
var constructorSuper;
var hasRequiredConstructorSuper;
function requireConstructorSuper() {
  if (hasRequiredConstructorSuper) return constructorSuper;
  hasRequiredConstructorSuper = 1;
  function isConstructorFunction(node2) {
    return node2.type === "FunctionExpression" && node2.parent.type === "MethodDefinition" && node2.parent.kind === "constructor";
  }
  function isPossibleConstructor(node2) {
    if (!node2) {
      return false;
    }
    switch (node2.type) {
      case "ClassExpression":
      case "FunctionExpression":
      case "ThisExpression":
      case "MemberExpression":
      case "CallExpression":
      case "NewExpression":
      case "ChainExpression":
      case "YieldExpression":
      case "TaggedTemplateExpression":
      case "MetaProperty":
        return true;
      case "Identifier":
        return node2.name !== "undefined";
      case "AssignmentExpression":
        if (["=", "&&="].includes(node2.operator)) {
          return isPossibleConstructor(node2.right);
        }
        if (["||=", "??="].includes(node2.operator)) {
          return isPossibleConstructor(node2.left) || isPossibleConstructor(node2.right);
        }
        return false;
      case "LogicalExpression":
        if (node2.operator === "&&") {
          return isPossibleConstructor(node2.right);
        }
        return isPossibleConstructor(node2.left) || isPossibleConstructor(node2.right);
      case "ConditionalExpression":
        return isPossibleConstructor(node2.alternate) || isPossibleConstructor(node2.consequent);
      case "SequenceExpression": {
        const lastExpression = node2.expressions.at(-1);
        return isPossibleConstructor(lastExpression);
      }
      default:
        return false;
    }
  }
  class SegmentInfo {
    /**
     * Indicates if super() is called in all code paths.
     * @type {boolean}
     */
    calledInEveryPaths = false;
    /**
     * Indicates if super() is called in any code paths.
     * @type {boolean}
     */
    calledInSomePaths = false;
    /**
     * The nodes which have been validated and don't need to be reconsidered.
     * @type {ASTNode[]}
     */
    validNodes = [];
  }
  constructorSuper = {
    meta: {
      type: "problem",
      docs: {
        description: "Require `super()` calls in constructors",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/constructor-super"
      },
      schema: [],
      messages: {
        missingSome: "Lacked a call of 'super()' in some code paths.",
        missingAll: "Expected to call 'super()'.",
        duplicate: "Unexpected duplicate 'super()'.",
        badSuper: "Unexpected 'super()' because 'super' is not a constructor."
      }
    },
    create(context) {
      let funcInfo = null;
      const segInfoMap = /* @__PURE__ */ Object.create(null);
      function isCalledInSomePath(segment) {
        return segment.reachable && segInfoMap[segment.id].calledInSomePaths;
      }
      function hasSegmentBeenSeen(segment) {
        return !!segInfoMap[segment.id];
      }
      function isCalledInEveryPath(segment) {
        return segment.reachable && segInfoMap[segment.id].calledInEveryPaths;
      }
      return {
        /**
         * Stacks a constructor information.
         * @param {CodePath} codePath A code path which was started.
         * @param {ASTNode} node The current node.
         * @returns {void}
         */
        onCodePathStart(codePath2, node2) {
          if (isConstructorFunction(node2)) {
            const classNode = node2.parent.parent.parent;
            const superClass = classNode.superClass;
            funcInfo = {
              upper: funcInfo,
              isConstructor: true,
              hasExtends: Boolean(superClass),
              superIsConstructor: isPossibleConstructor(superClass),
              codePath: codePath2,
              currentSegments: /* @__PURE__ */ new Set()
            };
          } else {
            funcInfo = {
              upper: funcInfo,
              isConstructor: false,
              hasExtends: false,
              superIsConstructor: false,
              codePath: codePath2,
              currentSegments: /* @__PURE__ */ new Set()
            };
          }
        },
        /**
         * Pops a constructor information.
         * And reports if `super()` lacked.
         * @param {CodePath} codePath A code path which was ended.
         * @param {ASTNode} node The current node.
         * @returns {void}
         */
        onCodePathEnd(codePath2, node2) {
          const hasExtends = funcInfo.hasExtends;
          funcInfo = funcInfo.upper;
          if (!hasExtends) {
            return;
          }
          const returnedSegments = codePath2.returnedSegments;
          const calledInEveryPaths = returnedSegments.every(isCalledInEveryPath);
          const calledInSomePaths = returnedSegments.some(isCalledInSomePath);
          if (!calledInEveryPaths) {
            context.report({
              messageId: calledInSomePaths ? "missingSome" : "missingAll",
              node: node2.parent
            });
          }
        },
        /**
         * Initialize information of a given code path segment.
         * @param {CodePathSegment} segment A code path segment to initialize.
         * @param {CodePathSegment} node Node that starts the segment.
         * @returns {void}
         */
        onCodePathSegmentStart(segment, node2) {
          funcInfo.currentSegments.add(segment);
          if (!(funcInfo.isConstructor && funcInfo.hasExtends)) {
            return;
          }
          const info = segInfoMap[segment.id] = new SegmentInfo();
          const seenPrevSegments = segment.prevSegments.filter(hasSegmentBeenSeen);
          if (seenPrevSegments.length > 0) {
            info.calledInSomePaths = seenPrevSegments.some(isCalledInSomePath);
            info.calledInEveryPaths = seenPrevSegments.every(isCalledInEveryPath);
          }
          if (node2.parent && node2.parent.type === "ForStatement" && node2.parent.update === node2) {
            info.calledInEveryPaths = true;
          }
        },
        onUnreachableCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        onCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        /**
         * Update information of the code path segment when a code path was
         * looped.
         * @param {CodePathSegment} fromSegment The code path segment of the
         *      end of a loop.
         * @param {CodePathSegment} toSegment A code path segment of the head
         *      of a loop.
         * @returns {void}
         */
        onCodePathSegmentLoop(fromSegment, toSegment) {
          if (!(funcInfo.isConstructor && funcInfo.hasExtends)) {
            return;
          }
          funcInfo.codePath.traverseSegments(
            { first: toSegment, last: fromSegment },
            (segment, controller) => {
              const info = segInfoMap[segment.id];
              if (!info) {
                controller.skip();
                return;
              }
              const seenPrevSegments = segment.prevSegments.filter(hasSegmentBeenSeen);
              const calledInSomePreviousPaths = seenPrevSegments.some(isCalledInSomePath);
              const calledInEveryPreviousPaths = seenPrevSegments.every(isCalledInEveryPath);
              info.calledInSomePaths ||= calledInSomePreviousPaths;
              info.calledInEveryPaths ||= calledInEveryPreviousPaths;
              if (calledInSomePreviousPaths) {
                const nodes = info.validNodes;
                info.validNodes = [];
                for (let i2 = 0; i2 < nodes.length; ++i2) {
                  const node2 = nodes[i2];
                  context.report({
                    messageId: "duplicate",
                    node: node2
                  });
                }
              }
            }
          );
        },
        /**
         * Checks for a call of `super()`.
         * @param {ASTNode} node A CallExpression node to check.
         * @returns {void}
         */
        "CallExpression:exit"(node2) {
          if (!(funcInfo.isConstructor && funcInfo.hasExtends)) {
            return;
          }
          if (node2.callee.type !== "Super") {
            return;
          }
          const segments = funcInfo.currentSegments;
          let duplicate = false;
          let info = null;
          for (const segment of segments) {
            if (segment.reachable) {
              info = segInfoMap[segment.id];
              duplicate = duplicate || info.calledInSomePaths;
              info.calledInSomePaths = info.calledInEveryPaths = true;
            }
          }
          if (info) {
            if (duplicate) {
              context.report({
                messageId: "duplicate",
                node: node2
              });
            } else if (!funcInfo.superIsConstructor) {
              context.report({
                messageId: "badSuper",
                node: node2
              });
            } else {
              info.validNodes.push(node2);
            }
          }
        },
        /**
         * Set the mark to the returned path as `super()` was called.
         * @param {ASTNode} node A ReturnStatement node to check.
         * @returns {void}
         */
        ReturnStatement(node2) {
          if (!(funcInfo.isConstructor && funcInfo.hasExtends)) {
            return;
          }
          if (!node2.argument) {
            return;
          }
          const segments = funcInfo.currentSegments;
          for (const segment of segments) {
            if (segment.reachable) {
              const info = segInfoMap[segment.id];
              info.calledInSomePaths = info.calledInEveryPaths = true;
            }
          }
        }
      };
    }
  };
  return constructorSuper;
}
var curly;
var hasRequiredCurly;
function requireCurly() {
  if (hasRequiredCurly) return curly;
  hasRequiredCurly = 1;
  const astUtils2 = requireAstUtils();
  curly = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce consistent brace style for all control statements",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/curly"
      },
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: ["all"]
              }
            ],
            minItems: 0,
            maxItems: 1
          },
          {
            type: "array",
            items: [
              {
                enum: ["multi", "multi-line", "multi-or-nest"]
              },
              {
                enum: ["consistent"]
              }
            ],
            minItems: 0,
            maxItems: 2
          }
        ]
      },
      defaultOptions: ["all"],
      fixable: "code",
      messages: {
        missingCurlyAfter: "Expected { after '{{name}}'.",
        missingCurlyAfterCondition: "Expected { after '{{name}}' condition.",
        unexpectedCurlyAfter: "Unnecessary { after '{{name}}'.",
        unexpectedCurlyAfterCondition: "Unnecessary { after '{{name}}' condition."
      }
    },
    create(context) {
      const multiOnly = context.options[0] === "multi";
      const multiLine = context.options[0] === "multi-line";
      const multiOrNest = context.options[0] === "multi-or-nest";
      const consistent = context.options[1] === "consistent";
      const sourceCode2 = context.sourceCode;
      function isCollapsedOneLiner(node2) {
        const before = sourceCode2.getTokenBefore(node2);
        const last = sourceCode2.getLastToken(node2);
        const lastExcludingSemicolon = astUtils2.isSemicolonToken(last) ? sourceCode2.getTokenBefore(last) : last;
        return before.loc.start.line === lastExcludingSemicolon.loc.end.line;
      }
      function isOneLiner(node2) {
        if (node2.type === "EmptyStatement") {
          return true;
        }
        const first = sourceCode2.getFirstToken(node2);
        const last = sourceCode2.getLastToken(node2);
        const lastExcludingSemicolon = astUtils2.isSemicolonToken(last) ? sourceCode2.getTokenBefore(last) : last;
        return first.loc.start.line === lastExcludingSemicolon.loc.end.line;
      }
      function needsSemicolon(closingBracket) {
        const tokenBefore = sourceCode2.getTokenBefore(closingBracket);
        const tokenAfter = sourceCode2.getTokenAfter(closingBracket);
        const lastBlockNode = sourceCode2.getNodeByRangeIndex(
          tokenBefore.range[0]
        );
        if (astUtils2.isSemicolonToken(tokenBefore)) {
          return false;
        }
        if (!tokenAfter) {
          return false;
        }
        if (lastBlockNode.type === "BlockStatement" && lastBlockNode.parent.type !== "FunctionExpression" && lastBlockNode.parent.type !== "ArrowFunctionExpression") {
          return false;
        }
        if (tokenBefore.loc.end.line === tokenAfter.loc.start.line) {
          return true;
        }
        if (/^[([/`+-]/u.test(tokenAfter.value)) {
          return true;
        }
        if (tokenBefore.type === "Punctuator" && (tokenBefore.value === "++" || tokenBefore.value === "--")) {
          return true;
        }
        return false;
      }
      function prepareCheck(node2, body, name, opts) {
        const hasBlock = body.type === "BlockStatement";
        let expected = null;
        if (hasBlock && (body.body.length !== 1 || astUtils2.areBracesNecessary(body, sourceCode2))) {
          expected = true;
        } else if (multiOnly) {
          expected = false;
        } else if (multiLine) {
          if (!isCollapsedOneLiner(body)) {
            expected = true;
          }
        } else if (multiOrNest) {
          if (hasBlock) {
            const statement = body.body[0];
            const leadingCommentsInBlock = sourceCode2.getCommentsBefore(statement);
            expected = !isOneLiner(statement) || leadingCommentsInBlock.length > 0;
          } else {
            expected = !isOneLiner(body);
          }
        } else {
          expected = true;
        }
        return {
          actual: hasBlock,
          expected,
          check() {
            if (this.expected !== null && this.expected !== this.actual) {
              if (this.expected) {
                context.report({
                  node: node2,
                  loc: body.loc,
                  messageId: opts && opts.condition ? "missingCurlyAfterCondition" : "missingCurlyAfter",
                  data: {
                    name
                  },
                  fix: (fixer) => fixer.replaceText(
                    body,
                    `{${sourceCode2.getText(body)}}`
                  )
                });
              } else {
                context.report({
                  node: node2,
                  loc: body.loc,
                  messageId: opts && opts.condition ? "unexpectedCurlyAfterCondition" : "unexpectedCurlyAfter",
                  data: {
                    name
                  },
                  fix(fixer) {
                    const needsPrecedingSpace = node2.type === "DoWhileStatement" && sourceCode2.getTokenBefore(body).range[1] === body.range[0] && !astUtils2.canTokensBeAdjacent(
                      "do",
                      sourceCode2.getFirstToken(body, {
                        skip: 1
                      })
                    );
                    const openingBracket = sourceCode2.getFirstToken(body);
                    const closingBracket = sourceCode2.getLastToken(body);
                    const lastTokenInBlock = sourceCode2.getTokenBefore(
                      closingBracket
                    );
                    if (needsSemicolon(closingBracket)) {
                      return null;
                    }
                    const resultingBodyText = sourceCode2.getText().slice(
                      openingBracket.range[1],
                      lastTokenInBlock.range[0]
                    ) + sourceCode2.getText(lastTokenInBlock) + sourceCode2.getText().slice(
                      lastTokenInBlock.range[1],
                      closingBracket.range[0]
                    );
                    return fixer.replaceText(
                      body,
                      (needsPrecedingSpace ? " " : "") + resultingBodyText
                    );
                  }
                });
              }
            }
          }
        };
      }
      function prepareIfChecks(node2) {
        const preparedChecks = [];
        for (let currentNode = node2; currentNode; currentNode = currentNode.alternate) {
          preparedChecks.push(
            prepareCheck(currentNode, currentNode.consequent, "if", {
              condition: true
            })
          );
          if (currentNode.alternate && currentNode.alternate.type !== "IfStatement") {
            preparedChecks.push(
              prepareCheck(
                currentNode,
                currentNode.alternate,
                "else"
              )
            );
            break;
          }
        }
        if (consistent) {
          const expected = preparedChecks.some((preparedCheck) => {
            if (preparedCheck.expected !== null) {
              return preparedCheck.expected;
            }
            return preparedCheck.actual;
          });
          preparedChecks.forEach((preparedCheck) => {
            preparedCheck.expected = expected;
          });
        }
        return preparedChecks;
      }
      return {
        IfStatement(node2) {
          const parent = node2.parent;
          const isElseIf = parent.type === "IfStatement" && parent.alternate === node2;
          if (!isElseIf) {
            prepareIfChecks(node2).forEach((preparedCheck) => {
              preparedCheck.check();
            });
          }
        },
        WhileStatement(node2) {
          prepareCheck(node2, node2.body, "while", {
            condition: true
          }).check();
        },
        DoWhileStatement(node2) {
          prepareCheck(node2, node2.body, "do").check();
        },
        ForStatement(node2) {
          prepareCheck(node2, node2.body, "for", {
            condition: true
          }).check();
        },
        ForInStatement(node2) {
          prepareCheck(node2, node2.body, "for-in").check();
        },
        ForOfStatement(node2) {
          prepareCheck(node2, node2.body, "for-of").check();
        }
      };
    }
  };
  return curly;
}
var defaultCase;
var hasRequiredDefaultCase;
function requireDefaultCase() {
  if (hasRequiredDefaultCase) return defaultCase;
  hasRequiredDefaultCase = 1;
  const DEFAULT_COMMENT_PATTERN = /^no default$/iu;
  defaultCase = {
    meta: {
      type: "suggestion",
      defaultOptions: [{}],
      docs: {
        description: "Require `default` cases in `switch` statements",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/default-case"
      },
      schema: [
        {
          type: "object",
          properties: {
            commentPattern: {
              type: "string"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        missingDefaultCase: "Expected a default case."
      }
    },
    create(context) {
      const [options] = context.options;
      const commentPattern = options.commentPattern ? new RegExp(options.commentPattern, "u") : DEFAULT_COMMENT_PATTERN;
      const sourceCode2 = context.sourceCode;
      function last(collection) {
        return collection.at(-1);
      }
      return {
        SwitchStatement(node2) {
          if (!node2.cases.length) {
            return;
          }
          const hasDefault = node2.cases.some((v2) => v2.test === null);
          if (!hasDefault) {
            let comment2;
            const lastCase = last(node2.cases);
            const comments = sourceCode2.getCommentsAfter(lastCase);
            if (comments.length) {
              comment2 = last(comments);
            }
            if (!comment2 || !commentPattern.test(comment2.value.trim())) {
              context.report({
                node: node2,
                messageId: "missingDefaultCase"
              });
            }
          }
        }
      };
    }
  };
  return defaultCase;
}
var defaultCaseLast;
var hasRequiredDefaultCaseLast;
function requireDefaultCaseLast() {
  if (hasRequiredDefaultCaseLast) return defaultCaseLast;
  hasRequiredDefaultCaseLast = 1;
  defaultCaseLast = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce `default` clauses in `switch` statements to be last",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/default-case-last"
      },
      schema: [],
      messages: {
        notLast: "Default clause should be the last clause."
      }
    },
    create(context) {
      return {
        SwitchStatement(node2) {
          const cases = node2.cases, indexOfDefault = cases.findIndex((c2) => c2.test === null);
          if (indexOfDefault !== -1 && indexOfDefault !== cases.length - 1) {
            const defaultClause = cases[indexOfDefault];
            context.report({
              node: defaultClause,
              messageId: "notLast"
            });
          }
        }
      };
    }
  };
  return defaultCaseLast;
}
var defaultParamLast;
var hasRequiredDefaultParamLast;
function requireDefaultParamLast() {
  if (hasRequiredDefaultParamLast) return defaultParamLast;
  hasRequiredDefaultParamLast = 1;
  function isRequiredParameter(node2) {
    return !(node2.type === "AssignmentPattern" || node2.type === "RestElement" || node2.optional);
  }
  defaultParamLast = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "suggestion",
      docs: {
        description: "Enforce default parameters to be last",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/default-param-last"
      },
      schema: [],
      messages: {
        shouldBeLast: "Default parameters should be last."
      }
    },
    create(context) {
      function handleFunction(node2) {
        let hasSeenRequiredParameter = false;
        for (let i2 = node2.params.length - 1; i2 >= 0; i2 -= 1) {
          const current = node2.params[i2];
          const param = current.type === "TSParameterProperty" ? current.parameter : current;
          if (isRequiredParameter(param)) {
            hasSeenRequiredParameter = true;
            continue;
          }
          if (hasSeenRequiredParameter) {
            context.report({
              node: current,
              messageId: "shouldBeLast"
            });
          }
        }
      }
      return {
        FunctionDeclaration: handleFunction,
        FunctionExpression: handleFunction,
        ArrowFunctionExpression: handleFunction
      };
    }
  };
  return defaultParamLast;
}
var dotLocation;
var hasRequiredDotLocation;
function requireDotLocation() {
  if (hasRequiredDotLocation) return dotLocation;
  hasRequiredDotLocation = 1;
  const astUtils2 = requireAstUtils();
  dotLocation = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "dot-location",
              url: "https://eslint.style/rules/dot-location"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent newlines before and after dots",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/dot-location"
      },
      schema: [
        {
          enum: ["object", "property"]
        }
      ],
      fixable: "code",
      messages: {
        expectedDotAfterObject: "Expected dot to be on same line as object.",
        expectedDotBeforeProperty: "Expected dot to be on same line as property."
      }
    },
    create(context) {
      const config2 = context.options[0];
      const onObject = config2 === "object" || !config2;
      const sourceCode2 = context.sourceCode;
      function checkDotLocation(node2) {
        const property = node2.property;
        const dotToken = sourceCode2.getTokenBefore(property);
        if (onObject) {
          const tokenBeforeDot = sourceCode2.getTokenBefore(dotToken);
          if (!astUtils2.isTokenOnSameLine(tokenBeforeDot, dotToken)) {
            context.report({
              node: node2,
              loc: dotToken.loc,
              messageId: "expectedDotAfterObject",
              *fix(fixer) {
                if (dotToken.value.startsWith(".") && astUtils2.isDecimalIntegerNumericToken(
                  tokenBeforeDot
                )) {
                  yield fixer.insertTextAfter(
                    tokenBeforeDot,
                    ` ${dotToken.value}`
                  );
                } else {
                  yield fixer.insertTextAfter(
                    tokenBeforeDot,
                    dotToken.value
                  );
                }
                yield fixer.remove(dotToken);
              }
            });
          }
        } else if (!astUtils2.isTokenOnSameLine(dotToken, property)) {
          context.report({
            node: node2,
            loc: dotToken.loc,
            messageId: "expectedDotBeforeProperty",
            *fix(fixer) {
              yield fixer.remove(dotToken);
              yield fixer.insertTextBefore(property, dotToken.value);
            }
          });
        }
      }
      function checkNode(node2) {
        if (!node2.computed) {
          checkDotLocation(node2);
        }
      }
      return {
        MemberExpression: checkNode
      };
    }
  };
  return dotLocation;
}
var keywords;
var hasRequiredKeywords;
function requireKeywords() {
  if (hasRequiredKeywords) return keywords;
  hasRequiredKeywords = 1;
  keywords = [
    "abstract",
    "boolean",
    "break",
    "byte",
    "case",
    "catch",
    "char",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "double",
    "else",
    "enum",
    "export",
    "extends",
    "false",
    "final",
    "finally",
    "float",
    "for",
    "function",
    "goto",
    "if",
    "implements",
    "import",
    "in",
    "instanceof",
    "int",
    "interface",
    "long",
    "native",
    "new",
    "null",
    "package",
    "private",
    "protected",
    "public",
    "return",
    "short",
    "static",
    "super",
    "switch",
    "synchronized",
    "this",
    "throw",
    "throws",
    "transient",
    "true",
    "try",
    "typeof",
    "var",
    "void",
    "volatile",
    "while",
    "with"
  ];
  return keywords;
}
var dotNotation;
var hasRequiredDotNotation;
function requireDotNotation() {
  if (hasRequiredDotNotation) return dotNotation;
  hasRequiredDotNotation = 1;
  const astUtils2 = requireAstUtils();
  const keywords2 = requireKeywords();
  const validIdentifier = /^[a-zA-Z_$][\w$]*$/u;
  const literalTypesToCheck = /* @__PURE__ */ new Set(["string", "boolean"]);
  dotNotation = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allowKeywords: true,
          allowPattern: ""
        }
      ],
      docs: {
        description: "Enforce dot notation whenever possible",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/dot-notation"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowKeywords: {
              type: "boolean"
            },
            allowPattern: {
              type: "string"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        useDot: "[{{key}}] is better written in dot notation.",
        useBrackets: ".{{key}} is a syntax error."
      }
    },
    create(context) {
      const [options] = context.options;
      const allowKeywords = options.allowKeywords;
      const sourceCode2 = context.sourceCode;
      let allowPattern;
      if (options.allowPattern) {
        allowPattern = new RegExp(options.allowPattern, "u");
      }
      function checkComputedProperty(node2, value) {
        if (validIdentifier.test(value) && (allowKeywords || !keywords2.includes(String(value))) && !(allowPattern && allowPattern.test(value))) {
          const formattedValue = node2.property.type === "Literal" ? JSON.stringify(value) : `\`${value}\``;
          context.report({
            node: node2.property,
            messageId: "useDot",
            data: {
              key: formattedValue
            },
            *fix(fixer) {
              const leftBracket = sourceCode2.getTokenAfter(
                node2.object,
                astUtils2.isOpeningBracketToken
              );
              const rightBracket = sourceCode2.getLastToken(node2);
              const nextToken = sourceCode2.getTokenAfter(node2);
              if (sourceCode2.commentsExistBetween(
                leftBracket,
                rightBracket
              )) {
                return;
              }
              if (!node2.optional) {
                yield fixer.insertTextBefore(
                  leftBracket,
                  astUtils2.isDecimalInteger(node2.object) ? " ." : "."
                );
              }
              yield fixer.replaceTextRange(
                [leftBracket.range[0], rightBracket.range[1]],
                value
              );
              if (nextToken && rightBracket.range[1] === nextToken.range[0] && !astUtils2.canTokensBeAdjacent(
                String(value),
                nextToken
              )) {
                yield fixer.insertTextAfter(node2, " ");
              }
            }
          });
        }
      }
      return {
        MemberExpression(node2) {
          if (node2.computed && node2.property.type === "Literal" && (literalTypesToCheck.has(typeof node2.property.value) || astUtils2.isNullLiteral(node2.property))) {
            checkComputedProperty(node2, node2.property.value);
          }
          if (node2.computed && astUtils2.isStaticTemplateLiteral(node2.property)) {
            checkComputedProperty(
              node2,
              node2.property.quasis[0].value.cooked
            );
          }
          if (!allowKeywords && !node2.computed && node2.property.type === "Identifier" && keywords2.includes(String(node2.property.name))) {
            context.report({
              node: node2.property,
              messageId: "useBrackets",
              data: {
                key: node2.property.name
              },
              *fix(fixer) {
                const dotToken = sourceCode2.getTokenBefore(
                  node2.property
                );
                if (node2.object.type === "Identifier" && node2.object.name === "let" && !node2.optional) {
                  return;
                }
                if (sourceCode2.commentsExistBetween(
                  dotToken,
                  node2.property
                )) {
                  return;
                }
                if (!node2.optional) {
                  yield fixer.remove(dotToken);
                }
                yield fixer.replaceText(
                  node2.property,
                  `["${node2.property.name}"]`
                );
              }
            });
          }
        }
      };
    }
  };
  return dotNotation;
}
var eolLast;
var hasRequiredEolLast;
function requireEolLast() {
  if (hasRequiredEolLast) return eolLast;
  hasRequiredEolLast = 1;
  eolLast = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "eol-last",
              url: "https://eslint.style/rules/eol-last"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow newline at the end of files",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/eol-last"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never", "unix", "windows"]
        }
      ],
      messages: {
        missing: "Newline required at end of file but not found.",
        unexpected: "Newline not allowed at end of file."
      }
    },
    create(context) {
      return {
        Program: function checkBadEOF(node2) {
          const sourceCode2 = context.sourceCode, src2 = sourceCode2.getText(), lastLine = sourceCode2.lines.at(-1), location = {
            column: lastLine.length,
            line: sourceCode2.lines.length
          }, LF = "\n", CRLF = `\r${LF}`, endsWithNewline = src2.endsWith(LF);
          if (!src2.length) {
            return;
          }
          let mode = context.options[0] || "always", appendCRLF = false;
          if (mode === "unix") {
            mode = "always";
          }
          if (mode === "windows") {
            mode = "always";
            appendCRLF = true;
          }
          if (mode === "always" && !endsWithNewline) {
            context.report({
              node: node2,
              loc: location,
              messageId: "missing",
              fix(fixer) {
                return fixer.insertTextAfterRange(
                  [0, src2.length],
                  appendCRLF ? CRLF : LF
                );
              }
            });
          } else if (mode === "never" && endsWithNewline) {
            const secondLastLine = sourceCode2.lines.at(-2);
            context.report({
              node: node2,
              loc: {
                start: {
                  line: sourceCode2.lines.length - 1,
                  column: secondLastLine.length
                },
                end: { line: sourceCode2.lines.length, column: 0 }
              },
              messageId: "unexpected",
              fix(fixer) {
                const finalEOLs = /(?:\r?\n)+$/u, match = finalEOLs.exec(sourceCode2.text), start = match.index, end = sourceCode2.text.length;
                return fixer.replaceTextRange([start, end], "");
              }
            });
          }
        }
      };
    }
  };
  return eolLast;
}
var eqeqeq;
var hasRequiredEqeqeq;
function requireEqeqeq() {
  if (hasRequiredEqeqeq) return eqeqeq;
  hasRequiredEqeqeq = 1;
  const astUtils2 = requireAstUtils();
  eqeqeq = {
    meta: {
      type: "suggestion",
      hasSuggestions: true,
      docs: {
        description: "Require the use of `===` and `!==`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/eqeqeq"
      },
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: ["always"]
              },
              {
                type: "object",
                properties: {
                  null: {
                    enum: ["always", "never", "ignore"]
                  }
                },
                additionalProperties: false
              }
            ],
            additionalItems: false
          },
          {
            type: "array",
            items: [
              {
                enum: ["smart", "allow-null"]
              }
            ],
            additionalItems: false
          }
        ]
      },
      fixable: "code",
      messages: {
        unexpected: "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'.",
        replaceOperator: "Use '{{expectedOperator}}' instead of '{{actualOperator}}'."
      }
    },
    create(context) {
      const config2 = context.options[0] || "always";
      const options = context.options[1] || {};
      const sourceCode2 = context.sourceCode;
      const nullOption = config2 === "always" ? options.null || "always" : "ignore";
      const enforceRuleForNull = nullOption === "always";
      const enforceInverseRuleForNull = nullOption === "never";
      function isTypeOf(node2) {
        return node2.type === "UnaryExpression" && node2.operator === "typeof";
      }
      function isTypeOfBinary(node2) {
        return isTypeOf(node2.left) || isTypeOf(node2.right);
      }
      function areLiteralsAndSameType(node2) {
        return node2.left.type === "Literal" && node2.right.type === "Literal" && typeof node2.left.value === typeof node2.right.value;
      }
      function isNullCheck(node2) {
        return astUtils2.isNullLiteral(node2.right) || astUtils2.isNullLiteral(node2.left);
      }
      function report(node2, expectedOperator) {
        const operatorToken = sourceCode2.getFirstTokenBetween(
          node2.left,
          node2.right,
          (token) => token.value === node2.operator
        );
        const commonReportParams = {
          node: node2,
          loc: operatorToken.loc,
          messageId: "unexpected",
          data: { expectedOperator, actualOperator: node2.operator }
        };
        if (isTypeOfBinary(node2) || areLiteralsAndSameType(node2)) {
          context.report({
            ...commonReportParams,
            fix(fixer) {
              return fixer.replaceText(
                operatorToken,
                expectedOperator
              );
            }
          });
        } else {
          context.report({
            ...commonReportParams,
            suggest: [
              {
                messageId: "replaceOperator",
                data: {
                  expectedOperator,
                  actualOperator: node2.operator
                },
                fix: (fixer) => fixer.replaceText(
                  operatorToken,
                  expectedOperator
                )
              }
            ]
          });
        }
      }
      return {
        BinaryExpression(node2) {
          const isNull2 = isNullCheck(node2);
          if (node2.operator !== "==" && node2.operator !== "!=") {
            if (enforceInverseRuleForNull && isNull2) {
              report(node2, node2.operator.slice(0, -1));
            }
            return;
          }
          if (config2 === "smart" && (isTypeOfBinary(node2) || areLiteralsAndSameType(node2) || isNull2)) {
            return;
          }
          if (!enforceRuleForNull && isNull2) {
            return;
          }
          report(node2, `${node2.operator}=`);
        }
      };
    }
  };
  return eqeqeq;
}
var forDirection;
var hasRequiredForDirection;
function requireForDirection() {
  if (hasRequiredForDirection) return forDirection;
  hasRequiredForDirection = 1;
  const { getStaticValue } = /* @__PURE__ */ requireEslintUtils();
  forDirection = {
    meta: {
      type: "problem",
      docs: {
        description: "Enforce `for` loop update clause moving the counter in the right direction",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/for-direction"
      },
      fixable: null,
      schema: [],
      messages: {
        incorrectDirection: "The update clause in this loop moves the variable in the wrong direction."
      }
    },
    create(context) {
      const { sourceCode: sourceCode2 } = context;
      function report(node2) {
        context.report({
          node: node2,
          messageId: "incorrectDirection"
        });
      }
      function getRightDirection(update, dir) {
        const staticValue = getStaticValue(
          update.right,
          sourceCode2.getScope(update)
        );
        if (staticValue && ["bigint", "boolean", "number"].includes(
          typeof staticValue.value
        )) {
          const sign = Math.sign(Number(staticValue.value)) || 0;
          return dir * sign;
        }
        return 0;
      }
      function getUpdateDirection(update, counter) {
        if (update.argument.type === "Identifier" && update.argument.name === counter) {
          if (update.operator === "++") {
            return 1;
          }
          if (update.operator === "--") {
            return -1;
          }
        }
        return 0;
      }
      function getAssignmentDirection(update, counter) {
        if (update.left.name === counter) {
          if (update.operator === "+=") {
            return getRightDirection(update, 1);
          }
          if (update.operator === "-=") {
            return getRightDirection(update, -1);
          }
        }
        return 0;
      }
      return {
        ForStatement(node2) {
          if (node2.test && node2.test.type === "BinaryExpression" && node2.update) {
            for (const counterPosition of ["left", "right"]) {
              if (node2.test[counterPosition].type !== "Identifier") {
                continue;
              }
              const counter = node2.test[counterPosition].name;
              const operator = node2.test.operator;
              const update = node2.update;
              let wrongDirection;
              if (operator === "<" || operator === "<=") {
                wrongDirection = counterPosition === "left" ? -1 : 1;
              } else if (operator === ">" || operator === ">=") {
                wrongDirection = counterPosition === "left" ? 1 : -1;
              } else {
                return;
              }
              if (update.type === "UpdateExpression") {
                if (getUpdateDirection(update, counter) === wrongDirection) {
                  report(node2);
                }
              } else if (update.type === "AssignmentExpression" && getAssignmentDirection(update, counter) === wrongDirection) {
                report(node2);
              }
            }
          }
        }
      };
    }
  };
  return forDirection;
}
var funcCallSpacing;
var hasRequiredFuncCallSpacing;
function requireFuncCallSpacing() {
  if (hasRequiredFuncCallSpacing) return funcCallSpacing;
  hasRequiredFuncCallSpacing = 1;
  const astUtils2 = requireAstUtils();
  funcCallSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "function-call-spacing",
              url: "https://eslint.style/rules/function-call-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow spacing between function identifiers and their invocations",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/func-call-spacing"
      },
      fixable: "whitespace",
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: ["never"]
              }
            ],
            minItems: 0,
            maxItems: 1
          },
          {
            type: "array",
            items: [
              {
                enum: ["always"]
              },
              {
                type: "object",
                properties: {
                  allowNewlines: {
                    type: "boolean"
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          }
        ]
      },
      messages: {
        unexpectedWhitespace: "Unexpected whitespace between function name and paren.",
        unexpectedNewline: "Unexpected newline between function name and paren.",
        missing: "Missing space between function name and paren."
      }
    },
    create(context) {
      const never = context.options[0] !== "always";
      const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;
      const sourceCode2 = context.sourceCode;
      const text = sourceCode2.getText();
      function checkSpacing(node2, leftToken, rightToken) {
        const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\/\*.*?\*\//gu, "");
        const hasWhitespace = /\s/u.test(textBetweenTokens);
        const hasNewline = hasWhitespace && astUtils2.LINEBREAK_MATCHER.test(textBetweenTokens);
        if (never && hasWhitespace) {
          context.report({
            node: node2,
            loc: {
              start: leftToken.loc.end,
              end: {
                line: rightToken.loc.start.line,
                column: rightToken.loc.start.column - 1
              }
            },
            messageId: "unexpectedWhitespace",
            fix(fixer) {
              if (sourceCode2.commentsExistBetween(
                leftToken,
                rightToken
              )) {
                return null;
              }
              if (node2.optional) {
                return fixer.replaceTextRange(
                  [leftToken.range[1], rightToken.range[0]],
                  "?."
                );
              }
              if (hasNewline) {
                return null;
              }
              return fixer.removeRange([
                leftToken.range[1],
                rightToken.range[0]
              ]);
            }
          });
        } else if (!never && !hasWhitespace) {
          context.report({
            node: node2,
            loc: {
              start: {
                line: leftToken.loc.end.line,
                column: leftToken.loc.end.column - 1
              },
              end: rightToken.loc.start
            },
            messageId: "missing",
            fix(fixer) {
              if (node2.optional) {
                return null;
              }
              return fixer.insertTextBefore(rightToken, " ");
            }
          });
        } else if (!never && !allowNewlines && hasNewline) {
          context.report({
            node: node2,
            loc: {
              start: leftToken.loc.end,
              end: rightToken.loc.start
            },
            messageId: "unexpectedNewline",
            fix(fixer) {
              if (!node2.optional) {
                return null;
              }
              if (sourceCode2.commentsExistBetween(
                leftToken,
                rightToken
              )) {
                return null;
              }
              const range = [leftToken.range[1], rightToken.range[0]];
              const qdToken = sourceCode2.getTokenAfter(leftToken);
              if (qdToken.range[0] === leftToken.range[1]) {
                return fixer.replaceTextRange(range, "?. ");
              }
              if (qdToken.range[1] === rightToken.range[0]) {
                return fixer.replaceTextRange(range, " ?.");
              }
              return fixer.replaceTextRange(range, " ?. ");
            }
          });
        }
      }
      return {
        "CallExpression, NewExpression"(node2) {
          const lastToken = sourceCode2.getLastToken(node2);
          const lastCalleeToken = sourceCode2.getLastToken(node2.callee);
          const parenToken = sourceCode2.getFirstTokenBetween(
            lastCalleeToken,
            lastToken,
            astUtils2.isOpeningParenToken
          );
          const prevToken = parenToken && sourceCode2.getTokenBefore(
            parenToken,
            astUtils2.isNotQuestionDotToken
          );
          if (!(parenToken && parenToken.range[1] < node2.range[1])) {
            return;
          }
          checkSpacing(node2, prevToken, parenToken);
        },
        ImportExpression(node2) {
          const leftToken = sourceCode2.getFirstToken(node2);
          const rightToken = sourceCode2.getTokenAfter(leftToken);
          checkSpacing(node2, leftToken, rightToken);
        }
      };
    }
  };
  return funcCallSpacing;
}
var funcNameMatching;
var hasRequiredFuncNameMatching;
function requireFuncNameMatching() {
  if (hasRequiredFuncNameMatching) return funcNameMatching;
  hasRequiredFuncNameMatching = 1;
  const astUtils2 = requireAstUtils();
  const esutils = requireUtils();
  function isModuleExports(pattern2) {
    if (pattern2.type === "MemberExpression" && pattern2.object.type === "Identifier" && pattern2.object.name === "module") {
      if (pattern2.property.type === "Identifier" && pattern2.property.name === "exports") {
        return true;
      }
      if (pattern2.property.type === "Literal" && pattern2.property.value === "exports") {
        return true;
      }
    }
    return false;
  }
  function isIdentifier(name, ecmaVersion2) {
    if (ecmaVersion2 >= 2015) {
      return esutils.keyword.isIdentifierES6(name);
    }
    return esutils.keyword.isIdentifierES5(name);
  }
  const alwaysOrNever = { enum: ["always", "never"] };
  const optionsObject = {
    type: "object",
    properties: {
      considerPropertyDescriptor: {
        type: "boolean"
      },
      includeCommonJSModuleExports: {
        type: "boolean"
      }
    },
    additionalProperties: false
  };
  funcNameMatching = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require function names to match the name of the variable or property to which they are assigned",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/func-name-matching"
      },
      schema: {
        anyOf: [
          {
            type: "array",
            additionalItems: false,
            items: [alwaysOrNever, optionsObject]
          },
          {
            type: "array",
            additionalItems: false,
            items: [optionsObject]
          }
        ]
      },
      messages: {
        matchProperty: "Function name `{{funcName}}` should match property name `{{name}}`.",
        matchVariable: "Function name `{{funcName}}` should match variable name `{{name}}`.",
        notMatchProperty: "Function name `{{funcName}}` should not match property name `{{name}}`.",
        notMatchVariable: "Function name `{{funcName}}` should not match variable name `{{name}}`."
      }
    },
    create(context) {
      const options = (typeof context.options[0] === "object" ? context.options[0] : context.options[1]) || {};
      const nameMatches = typeof context.options[0] === "string" ? context.options[0] : "always";
      const considerPropertyDescriptor = options.considerPropertyDescriptor;
      const includeModuleExports = options.includeCommonJSModuleExports;
      const ecmaVersion2 = context.languageOptions.ecmaVersion;
      function isPropertyCall(objName, funcName, node2) {
        if (!node2) {
          return false;
        }
        return node2.type === "CallExpression" && astUtils2.isSpecificMemberAccess(node2.callee, objName, funcName);
      }
      function shouldWarn(x2, y2) {
        return nameMatches === "always" && x2 !== y2 || nameMatches === "never" && x2 === y2;
      }
      function report(node2, name, funcName, isProp) {
        let messageId;
        if (nameMatches === "always" && isProp) {
          messageId = "matchProperty";
        } else if (nameMatches === "always") {
          messageId = "matchVariable";
        } else if (isProp) {
          messageId = "notMatchProperty";
        } else {
          messageId = "notMatchVariable";
        }
        context.report({
          node: node2,
          messageId,
          data: {
            name,
            funcName
          }
        });
      }
      function isStringLiteral(node2) {
        return node2.type === "Literal" && typeof node2.value === "string";
      }
      return {
        VariableDeclarator(node2) {
          if (!node2.init || node2.init.type !== "FunctionExpression" || node2.id.type !== "Identifier") {
            return;
          }
          if (node2.init.id && shouldWarn(node2.id.name, node2.init.id.name)) {
            report(node2, node2.id.name, node2.init.id.name, false);
          }
        },
        AssignmentExpression(node2) {
          if (node2.right.type !== "FunctionExpression" || node2.left.computed && node2.left.property.type !== "Literal" || !includeModuleExports && isModuleExports(node2.left) || node2.left.type !== "Identifier" && node2.left.type !== "MemberExpression") {
            return;
          }
          const isProp = node2.left.type === "MemberExpression";
          const name = isProp ? astUtils2.getStaticPropertyName(node2.left) : node2.left.name;
          if (node2.right.id && name && isIdentifier(name) && shouldWarn(name, node2.right.id.name)) {
            report(node2, name, node2.right.id.name, isProp);
          }
        },
        "Property, PropertyDefinition[value]"(node2) {
          if (!(node2.value.type === "FunctionExpression" && node2.value.id)) {
            return;
          }
          if (node2.key.type === "Identifier" && !node2.computed) {
            const functionName = node2.value.id.name;
            let propertyName = node2.key.name;
            if (considerPropertyDescriptor && propertyName === "value" && node2.parent.type === "ObjectExpression") {
              if (isPropertyCall(
                "Object",
                "defineProperty",
                node2.parent.parent
              ) || isPropertyCall(
                "Reflect",
                "defineProperty",
                node2.parent.parent
              )) {
                const property = node2.parent.parent.arguments[1];
                if (isStringLiteral(property) && shouldWarn(property.value, functionName)) {
                  report(
                    node2,
                    property.value,
                    functionName,
                    true
                  );
                }
              } else if (isPropertyCall(
                "Object",
                "defineProperties",
                node2.parent.parent.parent.parent
              )) {
                propertyName = node2.parent.parent.key.name;
                if (!node2.parent.parent.computed && shouldWarn(propertyName, functionName)) {
                  report(node2, propertyName, functionName, true);
                }
              } else if (isPropertyCall(
                "Object",
                "create",
                node2.parent.parent.parent.parent
              )) {
                propertyName = node2.parent.parent.key.name;
                if (!node2.parent.parent.computed && shouldWarn(propertyName, functionName)) {
                  report(node2, propertyName, functionName, true);
                }
              } else if (shouldWarn(propertyName, functionName)) {
                report(node2, propertyName, functionName, true);
              }
            } else if (shouldWarn(propertyName, functionName)) {
              report(node2, propertyName, functionName, true);
            }
            return;
          }
          if (isStringLiteral(node2.key) && isIdentifier(node2.key.value, ecmaVersion2) && shouldWarn(node2.key.value, node2.value.id.name)) {
            report(node2, node2.key.value, node2.value.id.name, true);
          }
        }
      };
    }
  };
  return funcNameMatching;
}
var funcNames;
var hasRequiredFuncNames;
function requireFuncNames() {
  if (hasRequiredFuncNames) return funcNames;
  hasRequiredFuncNames = 1;
  const astUtils2 = requireAstUtils();
  function isFunctionName(variable) {
    return variable && variable.defs[0].type === "FunctionName";
  }
  funcNames = {
    meta: {
      type: "suggestion",
      defaultOptions: ["always", {}],
      docs: {
        description: "Require or disallow named `function` expressions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/func-names"
      },
      schema: {
        definitions: {
          value: {
            enum: ["always", "as-needed", "never"]
          }
        },
        items: [
          {
            $ref: "#/definitions/value"
          },
          {
            type: "object",
            properties: {
              generators: {
                $ref: "#/definitions/value"
              }
            },
            additionalProperties: false
          }
        ]
      },
      messages: {
        unnamed: "Unexpected unnamed {{name}}.",
        named: "Unexpected named {{name}}."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function getConfigForNode(node2) {
        if (node2.generator && context.options[1].generators) {
          return context.options[1].generators;
        }
        return context.options[0];
      }
      function isObjectOrClassMethod(node2) {
        const parent = node2.parent;
        return parent.type === "MethodDefinition" || parent.type === "Property" && (parent.method || parent.kind === "get" || parent.kind === "set");
      }
      function hasInferredName(node2) {
        const parent = node2.parent;
        return isObjectOrClassMethod(node2) || parent.type === "VariableDeclarator" && parent.id.type === "Identifier" && parent.init === node2 || parent.type === "Property" && parent.value === node2 || parent.type === "PropertyDefinition" && parent.value === node2 || parent.type === "AssignmentExpression" && parent.left.type === "Identifier" && parent.right === node2 || parent.type === "AssignmentPattern" && parent.left.type === "Identifier" && parent.right === node2;
      }
      function reportUnexpectedUnnamedFunction(node2) {
        context.report({
          node: node2,
          messageId: "unnamed",
          loc: astUtils2.getFunctionHeadLoc(node2, sourceCode2),
          data: { name: astUtils2.getFunctionNameWithKind(node2) }
        });
      }
      function reportUnexpectedNamedFunction(node2) {
        context.report({
          node: node2,
          messageId: "named",
          loc: astUtils2.getFunctionHeadLoc(node2, sourceCode2),
          data: { name: astUtils2.getFunctionNameWithKind(node2) }
        });
      }
      function handleFunction(node2) {
        const nameVar = sourceCode2.getDeclaredVariables(node2)[0];
        if (isFunctionName(nameVar) && nameVar.references.length > 0) {
          return;
        }
        const hasName = Boolean(node2.id && node2.id.name);
        const config2 = getConfigForNode(node2);
        if (config2 === "never") {
          if (hasName && node2.type !== "FunctionDeclaration") {
            reportUnexpectedNamedFunction(node2);
          }
        } else if (config2 === "as-needed") {
          if (!hasName && !hasInferredName(node2)) {
            reportUnexpectedUnnamedFunction(node2);
          }
        } else {
          if (!hasName && !isObjectOrClassMethod(node2)) {
            reportUnexpectedUnnamedFunction(node2);
          }
        }
      }
      return {
        "FunctionExpression:exit": handleFunction,
        "ExportDefaultDeclaration > FunctionDeclaration": handleFunction
      };
    }
  };
  return funcNames;
}
var funcStyle;
var hasRequiredFuncStyle;
function requireFuncStyle() {
  if (hasRequiredFuncStyle) return funcStyle;
  hasRequiredFuncStyle = 1;
  funcStyle = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "suggestion",
      defaultOptions: [
        "expression",
        {
          allowArrowFunctions: false,
          allowTypeAnnotation: false,
          overrides: {}
        }
      ],
      docs: {
        description: "Enforce the consistent use of either `function` declarations or expressions assigned to variables",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/func-style"
      },
      schema: [
        {
          enum: ["declaration", "expression"]
        },
        {
          type: "object",
          properties: {
            allowArrowFunctions: {
              type: "boolean"
            },
            allowTypeAnnotation: {
              type: "boolean"
            },
            overrides: {
              type: "object",
              properties: {
                namedExports: {
                  enum: ["declaration", "expression", "ignore"]
                }
              },
              additionalProperties: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        expression: "Expected a function expression.",
        declaration: "Expected a function declaration."
      }
    },
    create(context) {
      const [style, { allowArrowFunctions, allowTypeAnnotation, overrides }] = context.options;
      const enforceDeclarations = style === "declaration";
      const { namedExports: exportFunctionStyle } = overrides;
      const stack = [];
      function isOverloadedFunction(node2) {
        const functionName = node2.id.name;
        if (node2.parent.type === "ExportNamedDeclaration") {
          return node2.parent.parent.body.some(
            (member) => member.type === "ExportNamedDeclaration" && member.declaration?.type === "TSDeclareFunction" && member.declaration.id.name === functionName
          );
        }
        if (node2.parent.type === "SwitchCase") {
          return node2.parent.parent.cases.some(
            (switchCase) => switchCase.consequent.some(
              (member) => member.type === "TSDeclareFunction" && member.id.name === functionName
            )
          );
        }
        return Array.isArray(node2.parent.body) && node2.parent.body.some(
          (member) => member.type === "TSDeclareFunction" && member.id.name === functionName
        );
      }
      const nodesToCheck = {
        FunctionDeclaration(node2) {
          stack.push(false);
          if (!enforceDeclarations && node2.parent.type !== "ExportDefaultDeclaration" && (typeof exportFunctionStyle === "undefined" || node2.parent.type !== "ExportNamedDeclaration") && !isOverloadedFunction(node2)) {
            context.report({ node: node2, messageId: "expression" });
          }
          if (node2.parent.type === "ExportNamedDeclaration" && exportFunctionStyle === "expression" && !isOverloadedFunction(node2)) {
            context.report({ node: node2, messageId: "expression" });
          }
        },
        "FunctionDeclaration:exit"() {
          stack.pop();
        },
        FunctionExpression(node2) {
          stack.push(false);
          if (enforceDeclarations && node2.parent.type === "VariableDeclarator" && (typeof exportFunctionStyle === "undefined" || node2.parent.parent.parent.type !== "ExportNamedDeclaration") && !(allowTypeAnnotation && node2.parent.id.typeAnnotation)) {
            context.report({
              node: node2.parent,
              messageId: "declaration"
            });
          }
          if (node2.parent.type === "VariableDeclarator" && node2.parent.parent.parent.type === "ExportNamedDeclaration" && exportFunctionStyle === "declaration" && !(allowTypeAnnotation && node2.parent.id.typeAnnotation)) {
            context.report({
              node: node2.parent,
              messageId: "declaration"
            });
          }
        },
        "FunctionExpression:exit"() {
          stack.pop();
        },
        "ThisExpression, Super"() {
          if (stack.length > 0) {
            stack[stack.length - 1] = true;
          }
        }
      };
      if (!allowArrowFunctions) {
        nodesToCheck.ArrowFunctionExpression = function() {
          stack.push(false);
        };
        nodesToCheck["ArrowFunctionExpression:exit"] = function(node2) {
          const hasThisOrSuperExpr = stack.pop();
          if (!hasThisOrSuperExpr && node2.parent.type === "VariableDeclarator") {
            if (enforceDeclarations && (typeof exportFunctionStyle === "undefined" || node2.parent.parent.parent.type !== "ExportNamedDeclaration") && !(allowTypeAnnotation && node2.parent.id.typeAnnotation)) {
              context.report({
                node: node2.parent,
                messageId: "declaration"
              });
            }
            if (node2.parent.parent.parent.type === "ExportNamedDeclaration" && exportFunctionStyle === "declaration" && !(allowTypeAnnotation && node2.parent.id.typeAnnotation)) {
              context.report({
                node: node2.parent,
                messageId: "declaration"
              });
            }
          }
        };
      }
      return nodesToCheck;
    }
  };
  return funcStyle;
}
var functionCallArgumentNewline;
var hasRequiredFunctionCallArgumentNewline;
function requireFunctionCallArgumentNewline() {
  if (hasRequiredFunctionCallArgumentNewline) return functionCallArgumentNewline;
  hasRequiredFunctionCallArgumentNewline = 1;
  functionCallArgumentNewline = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "function-call-argument-newline",
              url: "https://eslint.style/rules/function-call-argument-newline"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce line breaks between arguments of a function call",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/function-call-argument-newline"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never", "consistent"]
        }
      ],
      messages: {
        unexpectedLineBreak: "There should be no line break here.",
        missingLineBreak: "There should be a line break after this argument."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const checkers = {
        unexpected: {
          messageId: "unexpectedLineBreak",
          check: (prevToken, currentToken) => prevToken.loc.end.line !== currentToken.loc.start.line,
          createFix: (token, tokenBefore) => (fixer) => fixer.replaceTextRange(
            [tokenBefore.range[1], token.range[0]],
            " "
          )
        },
        missing: {
          messageId: "missingLineBreak",
          check: (prevToken, currentToken) => prevToken.loc.end.line === currentToken.loc.start.line,
          createFix: (token, tokenBefore) => (fixer) => fixer.replaceTextRange(
            [tokenBefore.range[1], token.range[0]],
            "\n"
          )
        }
      };
      function checkArguments(node2, checker) {
        for (let i2 = 1; i2 < node2.arguments.length; i2++) {
          const prevArgToken = sourceCode2.getLastToken(
            node2.arguments[i2 - 1]
          );
          const currentArgToken = sourceCode2.getFirstToken(
            node2.arguments[i2]
          );
          if (checker.check(prevArgToken, currentArgToken)) {
            const tokenBefore = sourceCode2.getTokenBefore(
              currentArgToken,
              { includeComments: true }
            );
            const hasLineCommentBefore = tokenBefore.type === "Line";
            context.report({
              node: node2,
              loc: {
                start: tokenBefore.loc.end,
                end: currentArgToken.loc.start
              },
              messageId: checker.messageId,
              fix: hasLineCommentBefore ? null : checker.createFix(currentArgToken, tokenBefore)
            });
          }
        }
      }
      function check2(node2) {
        if (node2.arguments.length < 2) {
          return;
        }
        const option = context.options[0] || "always";
        if (option === "never") {
          checkArguments(node2, checkers.unexpected);
        } else if (option === "always") {
          checkArguments(node2, checkers.missing);
        } else if (option === "consistent") {
          const firstArgToken = sourceCode2.getLastToken(
            node2.arguments[0]
          );
          const secondArgToken = sourceCode2.getFirstToken(
            node2.arguments[1]
          );
          if (firstArgToken.loc.end.line === secondArgToken.loc.start.line) {
            checkArguments(node2, checkers.unexpected);
          } else {
            checkArguments(node2, checkers.missing);
          }
        }
      }
      return {
        CallExpression: check2,
        NewExpression: check2
      };
    }
  };
  return functionCallArgumentNewline;
}
var functionParenNewline;
var hasRequiredFunctionParenNewline;
function requireFunctionParenNewline() {
  if (hasRequiredFunctionParenNewline) return functionParenNewline;
  hasRequiredFunctionParenNewline = 1;
  const astUtils2 = requireAstUtils();
  functionParenNewline = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "function-paren-newline",
              url: "https://eslint.style/rules/function-paren-newline"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent line breaks inside function parentheses",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/function-paren-newline"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: [
                "always",
                "never",
                "consistent",
                "multiline",
                "multiline-arguments"
              ]
            },
            {
              type: "object",
              properties: {
                minItems: {
                  type: "integer",
                  minimum: 0
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        expectedBefore: "Expected newline before ')'.",
        expectedAfter: "Expected newline after '('.",
        expectedBetween: "Expected newline between arguments/params.",
        unexpectedBefore: "Unexpected newline before ')'.",
        unexpectedAfter: "Unexpected newline after '('."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const rawOption = context.options[0] || "multiline";
      const multilineOption = rawOption === "multiline";
      const multilineArgumentsOption = rawOption === "multiline-arguments";
      const consistentOption = rawOption === "consistent";
      let minItems;
      if (typeof rawOption === "object") {
        minItems = rawOption.minItems;
      } else if (rawOption === "always") {
        minItems = 0;
      } else if (rawOption === "never") {
        minItems = Infinity;
      } else {
        minItems = null;
      }
      function shouldHaveNewlines(elements, hasLeftNewline) {
        if (multilineArgumentsOption && elements.length === 1) {
          return hasLeftNewline;
        }
        if (multilineOption || multilineArgumentsOption) {
          return elements.some(
            (element, index) => index !== elements.length - 1 && element.loc.end.line !== elements[index + 1].loc.start.line
          );
        }
        if (consistentOption) {
          return hasLeftNewline;
        }
        return elements.length >= minItems;
      }
      function validateParens(parens, elements) {
        const leftParen = parens.leftParen;
        const rightParen = parens.rightParen;
        const tokenAfterLeftParen = sourceCode2.getTokenAfter(leftParen);
        const tokenBeforeRightParen = sourceCode2.getTokenBefore(rightParen);
        const hasLeftNewline = !astUtils2.isTokenOnSameLine(
          leftParen,
          tokenAfterLeftParen
        );
        const hasRightNewline = !astUtils2.isTokenOnSameLine(
          tokenBeforeRightParen,
          rightParen
        );
        const needsNewlines = shouldHaveNewlines(elements, hasLeftNewline);
        if (hasLeftNewline && !needsNewlines) {
          context.report({
            node: leftParen,
            messageId: "unexpectedAfter",
            fix(fixer) {
              return sourceCode2.getText().slice(
                leftParen.range[1],
                tokenAfterLeftParen.range[0]
              ).trim() ? (
                // If there is a comment between the ( and the first element, don't do a fix.
                null
              ) : fixer.removeRange([
                leftParen.range[1],
                tokenAfterLeftParen.range[0]
              ]);
            }
          });
        } else if (!hasLeftNewline && needsNewlines) {
          context.report({
            node: leftParen,
            messageId: "expectedAfter",
            fix: (fixer) => fixer.insertTextAfter(leftParen, "\n")
          });
        }
        if (hasRightNewline && !needsNewlines) {
          context.report({
            node: rightParen,
            messageId: "unexpectedBefore",
            fix(fixer) {
              return sourceCode2.getText().slice(
                tokenBeforeRightParen.range[1],
                rightParen.range[0]
              ).trim() ? (
                // If there is a comment between the last element and the ), don't do a fix.
                null
              ) : fixer.removeRange([
                tokenBeforeRightParen.range[1],
                rightParen.range[0]
              ]);
            }
          });
        } else if (!hasRightNewline && needsNewlines) {
          context.report({
            node: rightParen,
            messageId: "expectedBefore",
            fix: (fixer) => fixer.insertTextBefore(rightParen, "\n")
          });
        }
      }
      function validateArguments(parens, elements) {
        const leftParen = parens.leftParen;
        const tokenAfterLeftParen = sourceCode2.getTokenAfter(leftParen);
        const hasLeftNewline = !astUtils2.isTokenOnSameLine(
          leftParen,
          tokenAfterLeftParen
        );
        const needsNewlines = shouldHaveNewlines(elements, hasLeftNewline);
        for (let i2 = 0; i2 <= elements.length - 2; i2++) {
          const currentElement = elements[i2];
          const nextElement = elements[i2 + 1];
          const hasNewLine = currentElement.loc.end.line !== nextElement.loc.start.line;
          if (!hasNewLine && needsNewlines) {
            context.report({
              node: currentElement,
              messageId: "expectedBetween",
              fix: (fixer) => fixer.insertTextBefore(nextElement, "\n")
            });
          }
        }
      }
      function getParenTokens(node2) {
        switch (node2.type) {
          case "NewExpression":
            if (!node2.arguments.length && !(astUtils2.isOpeningParenToken(
              sourceCode2.getLastToken(node2, { skip: 1 })
            ) && astUtils2.isClosingParenToken(
              sourceCode2.getLastToken(node2)
            ) && node2.callee.range[1] < node2.range[1])) {
              return null;
            }
          // falls through
          case "CallExpression":
            return {
              leftParen: sourceCode2.getTokenAfter(
                node2.callee,
                astUtils2.isOpeningParenToken
              ),
              rightParen: sourceCode2.getLastToken(node2)
            };
          case "FunctionDeclaration":
          case "FunctionExpression": {
            const leftParen = sourceCode2.getFirstToken(
              node2,
              astUtils2.isOpeningParenToken
            );
            const rightParen = node2.params.length ? sourceCode2.getTokenAfter(
              node2.params.at(-1),
              astUtils2.isClosingParenToken
            ) : sourceCode2.getTokenAfter(leftParen);
            return { leftParen, rightParen };
          }
          case "ArrowFunctionExpression": {
            const firstToken = sourceCode2.getFirstToken(node2, {
              skip: node2.async ? 1 : 0
            });
            if (!astUtils2.isOpeningParenToken(firstToken)) {
              return null;
            }
            const rightParen = node2.params.length ? sourceCode2.getTokenAfter(
              node2.params.at(-1),
              astUtils2.isClosingParenToken
            ) : sourceCode2.getTokenAfter(firstToken);
            return {
              leftParen: firstToken,
              rightParen
            };
          }
          case "ImportExpression": {
            const leftParen = sourceCode2.getFirstToken(node2, 1);
            const rightParen = sourceCode2.getLastToken(node2);
            return { leftParen, rightParen };
          }
          default:
            throw new TypeError(
              `unexpected node with type ${node2.type}`
            );
        }
      }
      return {
        [[
          "ArrowFunctionExpression",
          "CallExpression",
          "FunctionDeclaration",
          "FunctionExpression",
          "ImportExpression",
          "NewExpression"
        ]](node2) {
          const parens = getParenTokens(node2);
          let params;
          if (node2.type === "ImportExpression") {
            params = [node2.source];
          } else if (astUtils2.isFunction(node2)) {
            params = node2.params;
          } else {
            params = node2.arguments;
          }
          if (parens) {
            validateParens(parens, params);
            if (multilineArgumentsOption) {
              validateArguments(parens, params);
            }
          }
        }
      };
    }
  };
  return functionParenNewline;
}
var generatorStarSpacing;
var hasRequiredGeneratorStarSpacing;
function requireGeneratorStarSpacing() {
  if (hasRequiredGeneratorStarSpacing) return generatorStarSpacing;
  hasRequiredGeneratorStarSpacing = 1;
  const OVERRIDE_SCHEMA = {
    oneOf: [
      {
        enum: ["before", "after", "both", "neither"]
      },
      {
        type: "object",
        properties: {
          before: { type: "boolean" },
          after: { type: "boolean" }
        },
        additionalProperties: false
      }
    ]
  };
  generatorStarSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "generator-star-spacing",
              url: "https://eslint.style/rules/generator-star-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing around `*` operators in generator functions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/generator-star-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: ["before", "after", "both", "neither"]
            },
            {
              type: "object",
              properties: {
                before: { type: "boolean" },
                after: { type: "boolean" },
                named: OVERRIDE_SCHEMA,
                anonymous: OVERRIDE_SCHEMA,
                method: OVERRIDE_SCHEMA
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        missingBefore: "Missing space before *.",
        missingAfter: "Missing space after *.",
        unexpectedBefore: "Unexpected space before *.",
        unexpectedAfter: "Unexpected space after *."
      }
    },
    create(context) {
      const optionDefinitions = {
        before: { before: true, after: false },
        after: { before: false, after: true },
        both: { before: true, after: true },
        neither: { before: false, after: false }
      };
      function optionToDefinition(option, defaults) {
        if (!option) {
          return defaults;
        }
        return typeof option === "string" ? optionDefinitions[option] : Object.assign({}, defaults, option);
      }
      const modes = (function(option) {
        const defaults = optionToDefinition(
          option,
          optionDefinitions.before
        );
        return {
          named: optionToDefinition(option.named, defaults),
          anonymous: optionToDefinition(option.anonymous, defaults),
          method: optionToDefinition(option.method, defaults)
        };
      })(context.options[0] || {});
      const sourceCode2 = context.sourceCode;
      function isStarToken(token) {
        return token.value === "*" && token.type === "Punctuator";
      }
      function getStarToken(node2) {
        return sourceCode2.getFirstToken(
          node2.parent.method || node2.parent.type === "MethodDefinition" ? node2.parent : node2,
          isStarToken
        );
      }
      function capitalize(str) {
        return str[0].toUpperCase() + str.slice(1);
      }
      function checkSpacing(kind, side, leftToken, rightToken) {
        if (!!(rightToken.range[0] - leftToken.range[1]) !== modes[kind][side]) {
          const after = leftToken.value === "*";
          const spaceRequired = modes[kind][side];
          const node2 = after ? leftToken : rightToken;
          const messageId = `${spaceRequired ? "missing" : "unexpected"}${capitalize(side)}`;
          context.report({
            node: node2,
            messageId,
            fix(fixer) {
              if (spaceRequired) {
                if (after) {
                  return fixer.insertTextAfter(node2, " ");
                }
                return fixer.insertTextBefore(node2, " ");
              }
              return fixer.removeRange([
                leftToken.range[1],
                rightToken.range[0]
              ]);
            }
          });
        }
      }
      function checkFunction(node2) {
        if (!node2.generator) {
          return;
        }
        const starToken = getStarToken(node2);
        const prevToken = sourceCode2.getTokenBefore(starToken);
        const nextToken = sourceCode2.getTokenAfter(starToken);
        let kind = "named";
        if (node2.parent.type === "MethodDefinition" || node2.parent.type === "Property" && node2.parent.method) {
          kind = "method";
        } else if (!node2.id) {
          kind = "anonymous";
        }
        if (!(kind === "method" && starToken === sourceCode2.getFirstToken(node2.parent))) {
          checkSpacing(kind, "before", prevToken, starToken);
        }
        checkSpacing(kind, "after", starToken, nextToken);
      }
      return {
        FunctionDeclaration: checkFunction,
        FunctionExpression: checkFunction
      };
    }
  };
  return generatorStarSpacing;
}
var getterReturn;
var hasRequiredGetterReturn;
function requireGetterReturn() {
  if (hasRequiredGetterReturn) return getterReturn;
  hasRequiredGetterReturn = 1;
  const astUtils2 = requireAstUtils();
  const TARGET_NODE_TYPE = /^(?:Arrow)?FunctionExpression$/u;
  function isAnySegmentReachable(segments) {
    for (const segment of segments) {
      if (segment.reachable) {
        return true;
      }
    }
    return false;
  }
  getterReturn = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          allowImplicit: false
        }
      ],
      docs: {
        description: "Enforce `return` statements in getters",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/getter-return"
      },
      fixable: null,
      schema: [
        {
          type: "object",
          properties: {
            allowImplicit: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        expected: "Expected to return a value in {{name}}.",
        expectedAlways: "Expected {{name}} to always return a value."
      }
    },
    create(context) {
      const [{ allowImplicit }] = context.options;
      const sourceCode2 = context.sourceCode;
      let funcInfo = {
        upper: null,
        codePath: null,
        hasReturn: false,
        shouldCheck: false,
        node: null,
        currentSegments: []
      };
      function checkLastSegment(node2) {
        if (funcInfo.shouldCheck && isAnySegmentReachable(funcInfo.currentSegments)) {
          context.report({
            node: node2,
            loc: astUtils2.getFunctionHeadLoc(node2, sourceCode2),
            messageId: funcInfo.hasReturn ? "expectedAlways" : "expected",
            data: {
              name: astUtils2.getFunctionNameWithKind(funcInfo.node)
            }
          });
        }
      }
      function isGetter(node2) {
        const parent = node2.parent;
        if (TARGET_NODE_TYPE.test(node2.type) && node2.body.type === "BlockStatement") {
          if (parent.kind === "get") {
            return true;
          }
          if (parent.type === "Property" && astUtils2.getStaticPropertyName(parent) === "get" && parent.parent.type === "ObjectExpression") {
            if (parent.parent.parent.type === "CallExpression") {
              const callNode = parent.parent.parent.callee;
              if (astUtils2.isSpecificMemberAccess(
                callNode,
                "Object",
                "defineProperty"
              ) || astUtils2.isSpecificMemberAccess(
                callNode,
                "Reflect",
                "defineProperty"
              )) {
                return true;
              }
            }
            if (parent.parent.parent.type === "Property" && parent.parent.parent.parent.type === "ObjectExpression" && parent.parent.parent.parent.parent.type === "CallExpression") {
              const callNode = parent.parent.parent.parent.parent.callee;
              return astUtils2.isSpecificMemberAccess(
                callNode,
                "Object",
                "defineProperties"
              ) || astUtils2.isSpecificMemberAccess(
                callNode,
                "Object",
                "create"
              );
            }
          }
        }
        return false;
      }
      return {
        // Stacks this function's information.
        onCodePathStart(codePath2, node2) {
          funcInfo = {
            upper: funcInfo,
            codePath: codePath2,
            hasReturn: false,
            shouldCheck: isGetter(node2),
            node: node2,
            currentSegments: /* @__PURE__ */ new Set()
          };
        },
        // Pops this function's information.
        onCodePathEnd() {
          funcInfo = funcInfo.upper;
        },
        onUnreachableCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        onCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
        },
        onCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        // Checks the return statement is valid.
        ReturnStatement(node2) {
          if (funcInfo.shouldCheck) {
            funcInfo.hasReturn = true;
            if (!allowImplicit && !node2.argument) {
              context.report({
                node: node2,
                messageId: "expected",
                data: {
                  name: astUtils2.getFunctionNameWithKind(
                    funcInfo.node
                  )
                }
              });
            }
          }
        },
        // Reports a given function if the last path is reachable.
        "FunctionExpression:exit": checkLastSegment,
        "ArrowFunctionExpression:exit": checkLastSegment
      };
    }
  };
  return getterReturn;
}
var globalRequire;
var hasRequiredGlobalRequire;
function requireGlobalRequire() {
  if (hasRequiredGlobalRequire) return globalRequire;
  hasRequiredGlobalRequire = 1;
  const ACCEPTABLE_PARENTS = /* @__PURE__ */ new Set([
    "AssignmentExpression",
    "VariableDeclarator",
    "MemberExpression",
    "ExpressionStatement",
    "CallExpression",
    "ConditionalExpression",
    "Program",
    "VariableDeclaration",
    "ChainExpression"
  ]);
  function findReference(scope, node2) {
    const references = scope.references.filter(
      (reference) => reference.identifier.range[0] === node2.range[0] && reference.identifier.range[1] === node2.range[1]
    );
    if (references.length === 1) {
      return references[0];
    }
    return null;
  }
  function isShadowed(scope, node2) {
    const reference = findReference(scope, node2);
    return reference && reference.resolved && reference.resolved.defs.length > 0;
  }
  globalRequire = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "global-require",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/global-require.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Require `require()` calls to be placed at top-level module scope",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/global-require"
      },
      schema: [],
      messages: {
        unexpected: "Unexpected require()."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        CallExpression(node2) {
          const currentScope = sourceCode2.getScope(node2);
          if (node2.callee.name === "require" && !isShadowed(currentScope, node2.callee)) {
            const isGoodRequire = sourceCode2.getAncestors(node2).every((parent) => ACCEPTABLE_PARENTS.has(parent.type));
            if (!isGoodRequire) {
              context.report({ node: node2, messageId: "unexpected" });
            }
          }
        }
      };
    }
  };
  return globalRequire;
}
var groupedAccessorPairs;
var hasRequiredGroupedAccessorPairs;
function requireGroupedAccessorPairs() {
  if (hasRequiredGroupedAccessorPairs) return groupedAccessorPairs;
  hasRequiredGroupedAccessorPairs = 1;
  const astUtils2 = requireAstUtils();
  function areEqualTokenLists(left, right) {
    if (left.length !== right.length) {
      return false;
    }
    for (let i2 = 0; i2 < left.length; i2++) {
      const leftToken = left[i2], rightToken = right[i2];
      if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {
        return false;
      }
    }
    return true;
  }
  function areEqualKeys(left, right) {
    if (typeof left === "string" && typeof right === "string") {
      return left === right;
    }
    if (Array.isArray(left) && Array.isArray(right)) {
      return areEqualTokenLists(left, right);
    }
    return false;
  }
  function isAccessorKind(node2) {
    return node2.kind === "get" || node2.kind === "set";
  }
  groupedAccessorPairs = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        "anyOrder",
        {
          enforceForTSTypes: false
        }
      ],
      docs: {
        description: "Require grouped accessor pairs in object literals and classes",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/grouped-accessor-pairs"
      },
      schema: [
        { enum: ["anyOrder", "getBeforeSet", "setBeforeGet"] },
        {
          type: "object",
          properties: {
            enforceForTSTypes: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        notGrouped: "Accessor pair {{ formerName }} and {{ latterName }} should be grouped.",
        invalidOrder: "Expected {{ latterName }} to be before {{ formerName }}."
      }
    },
    create(context) {
      const [order, { enforceForTSTypes }] = context.options;
      const { sourceCode: sourceCode2 } = context;
      function report(messageId, formerNode, latterNode) {
        context.report({
          node: latterNode,
          messageId,
          loc: astUtils2.getFunctionHeadLoc(
            latterNode.type !== "TSMethodSignature" ? latterNode.value : latterNode,
            sourceCode2
          ),
          data: {
            formerName: astUtils2.getFunctionNameWithKind(
              formerNode.type !== "TSMethodSignature" ? formerNode.value : formerNode
            ),
            latterName: astUtils2.getFunctionNameWithKind(
              latterNode.type !== "TSMethodSignature" ? latterNode.value : latterNode
            )
          }
        });
      }
      function checkList(nodes, shouldCheck) {
        const accessors = [];
        let found = false;
        for (let i2 = 0; i2 < nodes.length; i2++) {
          const node2 = nodes[i2];
          if (shouldCheck(node2) && isAccessorKind(node2)) {
            const name = astUtils2.getStaticPropertyName(node2);
            const key = name !== null ? name : sourceCode2.getTokens(node2.key);
            for (let j = 0; j < accessors.length; j++) {
              const accessor = accessors[j];
              if (areEqualKeys(accessor.key, key)) {
                accessor.getters.push(
                  ...node2.kind === "get" ? [node2] : []
                );
                accessor.setters.push(
                  ...node2.kind === "set" ? [node2] : []
                );
                found = true;
                break;
              }
            }
            if (!found) {
              accessors.push({
                key,
                getters: node2.kind === "get" ? [node2] : [],
                setters: node2.kind === "set" ? [node2] : []
              });
            }
            found = false;
          }
        }
        for (const { getters, setters } of accessors) {
          if (getters.length === 1 && setters.length === 1) {
            const [getter] = getters, [setter] = setters, getterIndex = nodes.indexOf(getter), setterIndex = nodes.indexOf(setter), formerNode = getterIndex < setterIndex ? getter : setter, latterNode = getterIndex < setterIndex ? setter : getter;
            if (Math.abs(getterIndex - setterIndex) > 1) {
              report("notGrouped", formerNode, latterNode);
            } else if (order === "getBeforeSet" && getterIndex > setterIndex || order === "setBeforeGet" && getterIndex < setterIndex) {
              report("invalidOrder", formerNode, latterNode);
            }
          }
        }
      }
      return {
        ObjectExpression(node2) {
          checkList(node2.properties, (n2) => n2.type === "Property");
        },
        ClassBody(node2) {
          checkList(
            node2.body,
            (n2) => n2.type === "MethodDefinition" && !n2.static
          );
          checkList(
            node2.body,
            (n2) => n2.type === "MethodDefinition" && n2.static
          );
        },
        "TSTypeLiteral, TSInterfaceBody"(node2) {
          if (enforceForTSTypes) {
            checkList(
              node2.type === "TSTypeLiteral" ? node2.members : node2.body,
              (n2) => n2.type === "TSMethodSignature"
            );
          }
        }
      };
    }
  };
  return groupedAccessorPairs;
}
var guardForIn;
var hasRequiredGuardForIn;
function requireGuardForIn() {
  if (hasRequiredGuardForIn) return guardForIn;
  hasRequiredGuardForIn = 1;
  guardForIn = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require `for-in` loops to include an `if` statement",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/guard-for-in"
      },
      schema: [],
      messages: {
        wrap: "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."
      }
    },
    create(context) {
      return {
        ForInStatement(node2) {
          const body = node2.body;
          if (body.type === "EmptyStatement") {
            return;
          }
          if (body.type === "IfStatement") {
            return;
          }
          if (body.type === "BlockStatement" && body.body.length === 0) {
            return;
          }
          if (body.type === "BlockStatement" && body.body.length === 1 && body.body[0].type === "IfStatement") {
            return;
          }
          if (body.type === "BlockStatement" && body.body.length >= 1 && body.body[0].type === "IfStatement") {
            const i2 = body.body[0];
            if (i2.consequent.type === "ContinueStatement") {
              return;
            }
            if (i2.consequent.type === "BlockStatement" && i2.consequent.body.length === 1 && i2.consequent.body[0].type === "ContinueStatement") {
              return;
            }
          }
          context.report({ node: node2, messageId: "wrap" });
        }
      };
    }
  };
  return guardForIn;
}
var handleCallbackErr;
var hasRequiredHandleCallbackErr;
function requireHandleCallbackErr() {
  if (hasRequiredHandleCallbackErr) return handleCallbackErr;
  hasRequiredHandleCallbackErr = 1;
  handleCallbackErr = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "handle-callback-err",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Require error handling in callbacks",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/handle-callback-err"
      },
      schema: [
        {
          type: "string"
        }
      ],
      messages: {
        expected: "Expected error to be handled."
      }
    },
    create(context) {
      const errorArgument = context.options[0] || "err";
      const sourceCode2 = context.sourceCode;
      function isPattern(stringToCheck) {
        const firstChar = stringToCheck[0];
        return firstChar === "^";
      }
      function matchesConfiguredErrorName(name) {
        if (isPattern(errorArgument)) {
          const regexp = new RegExp(errorArgument, "u");
          return regexp.test(name);
        }
        return name === errorArgument;
      }
      function getParameters(scope) {
        return scope.variables.filter(
          (variable) => variable.defs[0] && variable.defs[0].type === "Parameter"
        );
      }
      function checkForError(node2) {
        const scope = sourceCode2.getScope(node2), parameters = getParameters(scope), firstParameter = parameters[0];
        if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {
          if (firstParameter.references.length === 0) {
            context.report({ node: node2, messageId: "expected" });
          }
        }
      }
      return {
        FunctionDeclaration: checkForError,
        FunctionExpression: checkForError,
        ArrowFunctionExpression: checkForError
      };
    }
  };
  return handleCallbackErr;
}
var idBlacklist;
var hasRequiredIdBlacklist;
function requireIdBlacklist() {
  if (hasRequiredIdBlacklist) return idBlacklist;
  hasRequiredIdBlacklist = 1;
  function isAssignmentTarget(node2) {
    const parent = node2.parent;
    return (
      // normal assignment
      parent.type === "AssignmentExpression" && parent.left === node2 || // destructuring
      parent.type === "ArrayPattern" || parent.type === "RestElement" || parent.type === "Property" && parent.value === node2 && parent.parent.type === "ObjectPattern" || parent.type === "AssignmentPattern" && parent.left === node2
    );
  }
  function isRenamedImport(node2) {
    const parent = node2.parent;
    return parent.type === "ImportSpecifier" && parent.imported !== parent.local && parent.imported === node2 || parent.type === "ExportSpecifier" && parent.parent.source && // re-export
    parent.local !== parent.exported && parent.local === node2;
  }
  function isRenamedInDestructuring(node2) {
    const parent = node2.parent;
    return !parent.computed && parent.type === "Property" && parent.parent.type === "ObjectPattern" && parent.value !== node2 && parent.key === node2;
  }
  function isShorthandPropertyDefinition(node2) {
    const parent = node2.parent;
    return parent.type === "Property" && parent.parent.type === "ObjectExpression" && parent.shorthand;
  }
  idBlacklist = {
    meta: {
      deprecated: {
        message: "The rule was renamed.",
        url: "https://eslint.org/blog/2020/07/eslint-v7.5.0-released/#deprecating-id-blacklist",
        deprecatedSince: "7.5.0",
        availableUntil: null,
        replacedBy: [
          {
            rule: {
              name: "id-denylist",
              url: "https://eslint.org/docs/rules/id-denylist"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow specified identifiers",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/id-blacklist"
      },
      schema: {
        type: "array",
        items: {
          type: "string"
        },
        uniqueItems: true
      },
      messages: {
        restricted: "Identifier '{{name}}' is restricted."
      }
    },
    create(context) {
      const denyList = new Set(context.options);
      const reportedNodes = /* @__PURE__ */ new Set();
      const sourceCode2 = context.sourceCode;
      let globalScope;
      function isRestricted(name) {
        return denyList.has(name);
      }
      function isReferenceToGlobalVariable(node2) {
        const variable = globalScope.set.get(node2.name);
        return variable && variable.defs.length === 0 && variable.references.some((ref2) => ref2.identifier === node2);
      }
      function shouldCheck(node2) {
        const parent = node2.parent;
        if (parent.type === "MemberExpression" && parent.property === node2 && !parent.computed) {
          return isAssignmentTarget(parent);
        }
        return parent.type !== "CallExpression" && parent.type !== "NewExpression" && !isRenamedImport(node2) && !isRenamedInDestructuring(node2) && !(isReferenceToGlobalVariable(node2) && !isShorthandPropertyDefinition(node2));
      }
      function report(node2) {
        if (!reportedNodes.has(node2.range.toString())) {
          context.report({
            node: node2,
            messageId: "restricted",
            data: {
              name: node2.name
            }
          });
          reportedNodes.add(node2.range.toString());
        }
      }
      return {
        Program(node2) {
          globalScope = sourceCode2.getScope(node2);
        },
        Identifier(node2) {
          if (isRestricted(node2.name) && shouldCheck(node2)) {
            report(node2);
          }
        }
      };
    }
  };
  return idBlacklist;
}
var idDenylist;
var hasRequiredIdDenylist;
function requireIdDenylist() {
  if (hasRequiredIdDenylist) return idDenylist;
  hasRequiredIdDenylist = 1;
  const astUtils2 = requireAstUtils();
  function isAssignmentTarget(node2) {
    const parent = node2.parent;
    return (
      // normal assignment
      parent.type === "AssignmentExpression" && parent.left === node2 || // destructuring
      parent.type === "ArrayPattern" || parent.type === "RestElement" || parent.type === "Property" && parent.value === node2 && parent.parent.type === "ObjectPattern" || parent.type === "AssignmentPattern" && parent.left === node2
    );
  }
  function isRenamedImport(node2) {
    const parent = node2.parent;
    return parent.type === "ImportSpecifier" && parent.imported !== parent.local && parent.imported === node2 || parent.type === "ExportSpecifier" && parent.parent.source && // re-export
    parent.local !== parent.exported && parent.local === node2;
  }
  function isPropertyNameInDestructuring(node2) {
    const parent = node2.parent;
    return !parent.computed && parent.type === "Property" && parent.parent.type === "ObjectPattern" && parent.key === node2;
  }
  idDenylist = {
    meta: {
      type: "suggestion",
      defaultOptions: [],
      docs: {
        description: "Disallow specified identifiers",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/id-denylist"
      },
      schema: {
        type: "array",
        items: {
          type: "string"
        },
        uniqueItems: true
      },
      messages: {
        restricted: "Identifier '{{name}}' is restricted.",
        restrictedPrivate: "Identifier '#{{name}}' is restricted."
      }
    },
    create(context) {
      const denyList = new Set(context.options);
      const reportedNodes = /* @__PURE__ */ new Set();
      const sourceCode2 = context.sourceCode;
      let globalScope;
      function isRestricted(name) {
        return denyList.has(name);
      }
      function isReferenceToGlobalVariable(node2) {
        const variable = globalScope.set.get(node2.name);
        return variable && variable.defs.length === 0 && variable.references.some((ref2) => ref2.identifier === node2);
      }
      function shouldCheck(node2) {
        if (astUtils2.isImportAttributeKey(node2)) {
          return false;
        }
        const parent = node2.parent;
        if (parent.type === "MemberExpression" && parent.property === node2 && !parent.computed) {
          return isAssignmentTarget(parent);
        }
        return parent.type !== "CallExpression" && parent.type !== "NewExpression" && !isRenamedImport(node2) && !isPropertyNameInDestructuring(node2) && !isReferenceToGlobalVariable(node2);
      }
      function report(node2) {
        if (!reportedNodes.has(node2.range.toString())) {
          const isPrivate = node2.type === "PrivateIdentifier";
          context.report({
            node: node2,
            messageId: isPrivate ? "restrictedPrivate" : "restricted",
            data: {
              name: node2.name
            }
          });
          reportedNodes.add(node2.range.toString());
        }
      }
      return {
        Program(node2) {
          globalScope = sourceCode2.getScope(node2);
        },
        [["Identifier", "PrivateIdentifier"]](node2) {
          if (isRestricted(node2.name) && shouldCheck(node2)) {
            report(node2);
          }
        }
      };
    }
  };
  return idDenylist;
}
var idLength;
var hasRequiredIdLength;
function requireIdLength() {
  if (hasRequiredIdLength) return idLength;
  hasRequiredIdLength = 1;
  const { getGraphemeCount } = requireStringUtils();
  const {
    getModuleExportName,
    isImportAttributeKey
  } = requireAstUtils();
  idLength = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          exceptionPatterns: [],
          exceptions: [],
          min: 2,
          properties: "always"
        }
      ],
      docs: {
        description: "Enforce minimum and maximum identifier lengths",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/id-length"
      },
      schema: [
        {
          type: "object",
          properties: {
            min: {
              type: "integer"
            },
            max: {
              type: "integer"
            },
            exceptions: {
              type: "array",
              uniqueItems: true,
              items: {
                type: "string"
              }
            },
            exceptionPatterns: {
              type: "array",
              uniqueItems: true,
              items: {
                type: "string"
              }
            },
            properties: {
              enum: ["always", "never"]
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        tooShort: "Identifier name '{{name}}' is too short (< {{min}}).",
        tooShortPrivate: "Identifier name '#{{name}}' is too short (< {{min}}).",
        tooLong: "Identifier name '{{name}}' is too long (> {{max}}).",
        tooLongPrivate: "Identifier name #'{{name}}' is too long (> {{max}})."
      }
    },
    create(context) {
      const [options] = context.options;
      const { max: maxLength = Infinity, min: minLength } = options;
      const properties2 = options.properties !== "never";
      const exceptions = new Set(options.exceptions);
      const exceptionPatterns = options.exceptionPatterns.map(
        (pattern2) => new RegExp(pattern2, "u")
      );
      const reportedNodes = /* @__PURE__ */ new Set();
      function matchesExceptionPattern(name) {
        return exceptionPatterns.some((pattern2) => pattern2.test(name));
      }
      const SUPPORTED_EXPRESSIONS = {
        MemberExpression: properties2 && function(parent) {
          return !parent.computed && // regular property assignment
          (parent.parent.left === parent && parent.parent.type === "AssignmentExpression" || // or the last identifier in an ObjectPattern destructuring
          parent.parent.type === "Property" && parent.parent.value === parent && parent.parent.parent.type === "ObjectPattern" && parent.parent.parent.parent.left === parent.parent.parent);
        },
        AssignmentPattern(parent, node2) {
          return parent.left === node2;
        },
        VariableDeclarator(parent, node2) {
          return parent.id === node2;
        },
        Property(parent, node2) {
          if (parent.parent.type === "ObjectPattern") {
            const isKeyAndValueSame = parent.value.name === parent.key.name;
            return !isKeyAndValueSame && parent.value === node2 || isKeyAndValueSame && parent.key === node2 && properties2;
          }
          return properties2 && !isImportAttributeKey(node2) && !parent.computed && parent.key.name === node2.name;
        },
        ImportSpecifier(parent, node2) {
          return parent.local === node2 && getModuleExportName(parent.imported) !== getModuleExportName(parent.local);
        },
        ImportDefaultSpecifier: true,
        ImportNamespaceSpecifier: true,
        RestElement: true,
        FunctionExpression: true,
        ArrowFunctionExpression: true,
        ClassDeclaration: true,
        FunctionDeclaration: true,
        MethodDefinition: true,
        PropertyDefinition: true,
        CatchClause: true,
        ArrayPattern: true
      };
      return {
        [["Identifier", "PrivateIdentifier"]](node2) {
          const name = node2.name;
          const parent = node2.parent;
          const nameLength = getGraphemeCount(name);
          const isShort = nameLength < minLength;
          const isLong = nameLength > maxLength;
          if (!(isShort || isLong) || exceptions.has(name) || matchesExceptionPattern(name)) {
            return;
          }
          const isValidExpression = SUPPORTED_EXPRESSIONS[parent.type];
          if (isValidExpression && !reportedNodes.has(node2.range.toString()) && (isValidExpression === true || isValidExpression(parent, node2))) {
            reportedNodes.add(node2.range.toString());
            let messageId = isShort ? "tooShort" : "tooLong";
            if (node2.type === "PrivateIdentifier") {
              messageId += "Private";
            }
            context.report({
              node: node2,
              messageId,
              data: { name, min: minLength, max: maxLength }
            });
          }
        }
      };
    }
  };
  return idLength;
}
var idMatch;
var hasRequiredIdMatch;
function requireIdMatch() {
  if (hasRequiredIdMatch) return idMatch;
  hasRequiredIdMatch = 1;
  const astUtils2 = requireAstUtils();
  idMatch = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        "^.+$",
        {
          classFields: false,
          ignoreDestructuring: false,
          onlyDeclarations: false,
          properties: false
        }
      ],
      docs: {
        description: "Require identifiers to match a specified regular expression",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/id-match"
      },
      schema: [
        {
          type: "string"
        },
        {
          type: "object",
          properties: {
            properties: {
              type: "boolean"
            },
            classFields: {
              type: "boolean"
            },
            onlyDeclarations: {
              type: "boolean"
            },
            ignoreDestructuring: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        notMatch: "Identifier '{{name}}' does not match the pattern '{{pattern}}'.",
        notMatchPrivate: "Identifier '#{{name}}' does not match the pattern '{{pattern}}'."
      }
    },
    create(context) {
      const [
        pattern2,
        {
          classFields: checkClassFields,
          ignoreDestructuring,
          onlyDeclarations,
          properties: checkProperties
        }
      ] = context.options;
      const regexp = new RegExp(pattern2, "u");
      const sourceCode2 = context.sourceCode;
      let globalScope;
      const reportedNodes = /* @__PURE__ */ new Set();
      const ALLOWED_PARENT_TYPES = /* @__PURE__ */ new Set([
        "CallExpression",
        "NewExpression"
      ]);
      const DECLARATION_TYPES = /* @__PURE__ */ new Set([
        "FunctionDeclaration",
        "VariableDeclarator"
      ]);
      const IMPORT_TYPES = /* @__PURE__ */ new Set([
        "ImportSpecifier",
        "ImportNamespaceSpecifier",
        "ImportDefaultSpecifier"
      ]);
      function isReferenceToGlobalVariable(node2) {
        const variable = globalScope.set.get(node2.name);
        return variable && variable.defs.length === 0 && variable.references.some((ref2) => ref2.identifier === node2);
      }
      function isInvalid(name) {
        return !regexp.test(name);
      }
      function isInsideObjectPattern(node2) {
        let { parent } = node2;
        while (parent) {
          if (parent.type === "ObjectPattern") {
            return true;
          }
          parent = parent.parent;
        }
        return false;
      }
      function shouldReport(effectiveParent, name) {
        return (!onlyDeclarations || DECLARATION_TYPES.has(effectiveParent.type)) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && isInvalid(name);
      }
      function report(node2) {
        if (!reportedNodes.has(node2.range.toString())) {
          const messageId = node2.type === "PrivateIdentifier" ? "notMatchPrivate" : "notMatch";
          context.report({
            node: node2,
            messageId,
            data: {
              name: node2.name,
              pattern: pattern2
            }
          });
          reportedNodes.add(node2.range.toString());
        }
      }
      return {
        Program(node2) {
          globalScope = sourceCode2.getScope(node2);
        },
        Identifier(node2) {
          const name = node2.name, parent = node2.parent, effectiveParent = parent.type === "MemberExpression" ? parent.parent : parent;
          if (isReferenceToGlobalVariable(node2) || astUtils2.isImportAttributeKey(node2)) {
            return;
          }
          if (parent.type === "MemberExpression") {
            if (!checkProperties) {
              return;
            }
            if (parent.object.type === "Identifier" && parent.object.name === name) {
              if (isInvalid(name)) {
                report(node2);
              }
            } else if (effectiveParent.type === "AssignmentExpression" && effectiveParent.left.type === "MemberExpression" && effectiveParent.left.property.name === node2.name) {
              if (isInvalid(name)) {
                report(node2);
              }
            } else if (effectiveParent.type === "AssignmentExpression" && effectiveParent.right.type !== "MemberExpression") {
              if (isInvalid(name)) {
                report(node2);
              }
            }
          } else if (parent.type === "Property" && parent.parent.type === "ObjectExpression" && parent.key === node2 && !parent.computed) {
            if (checkProperties && isInvalid(name)) {
              report(node2);
            }
          } else if (parent.type === "Property" || parent.type === "AssignmentPattern") {
            if (parent.parent && parent.parent.type === "ObjectPattern") {
              if (!ignoreDestructuring && parent.shorthand && parent.value.left && isInvalid(name)) {
                report(node2);
              }
              const assignmentKeyEqualsValue = parent.key.name === parent.value.name;
              if (!assignmentKeyEqualsValue && parent.key === node2) {
                return;
              }
              const valueIsInvalid = parent.value.name && isInvalid(name);
              if (valueIsInvalid && !(assignmentKeyEqualsValue && ignoreDestructuring)) {
                report(node2);
              }
            }
            if (!checkProperties && !parent.computed || ignoreDestructuring && isInsideObjectPattern(node2)) {
              return;
            }
            if (parent.right !== node2 && shouldReport(effectiveParent, name)) {
              report(node2);
            }
          } else if (IMPORT_TYPES.has(parent.type)) {
            if (parent.local && parent.local.name === node2.name && isInvalid(name)) {
              report(node2);
            }
          } else if (parent.type === "PropertyDefinition") {
            if (checkClassFields && isInvalid(name)) {
              report(node2);
            }
          } else if (shouldReport(effectiveParent, name)) {
            report(node2);
          }
        },
        PrivateIdentifier(node2) {
          const isClassField = node2.parent.type === "PropertyDefinition";
          if (isClassField && !checkClassFields) {
            return;
          }
          if (isInvalid(node2.name)) {
            report(node2);
          }
        }
      };
    }
  };
  return idMatch;
}
var implicitArrowLinebreak;
var hasRequiredImplicitArrowLinebreak;
function requireImplicitArrowLinebreak() {
  if (hasRequiredImplicitArrowLinebreak) return implicitArrowLinebreak;
  hasRequiredImplicitArrowLinebreak = 1;
  const { isCommentToken, isNotOpeningParenToken } = requireAstUtils();
  implicitArrowLinebreak = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "implicit-arrow-linebreak",
              url: "https://eslint.style/rules/implicit-arrow-linebreak"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce the location of arrow function bodies",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/implicit-arrow-linebreak"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["beside", "below"]
        }
      ],
      messages: {
        expected: "Expected a linebreak before this expression.",
        unexpected: "Expected no linebreak before this expression."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const option = context.options[0] || "beside";
      function validateExpression(node2) {
        if (node2.body.type === "BlockStatement") {
          return;
        }
        const arrowToken = sourceCode2.getTokenBefore(
          node2.body,
          isNotOpeningParenToken
        );
        const firstTokenOfBody = sourceCode2.getTokenAfter(arrowToken);
        if (arrowToken.loc.end.line === firstTokenOfBody.loc.start.line && option === "below") {
          context.report({
            node: firstTokenOfBody,
            messageId: "expected",
            fix: (fixer) => fixer.insertTextBefore(firstTokenOfBody, "\n")
          });
        } else if (arrowToken.loc.end.line !== firstTokenOfBody.loc.start.line && option === "beside") {
          context.report({
            node: firstTokenOfBody,
            messageId: "unexpected",
            fix(fixer) {
              if (sourceCode2.getFirstTokenBetween(
                arrowToken,
                firstTokenOfBody,
                {
                  includeComments: true,
                  filter: isCommentToken
                }
              )) {
                return null;
              }
              return fixer.replaceTextRange(
                [arrowToken.range[1], firstTokenOfBody.range[0]],
                " "
              );
            }
          });
        }
      }
      return {
        ArrowFunctionExpression: (node2) => validateExpression(node2)
      };
    }
  };
  return implicitArrowLinebreak;
}
var indent;
var hasRequiredIndent;
function requireIndent() {
  if (hasRequiredIndent) return indent;
  hasRequiredIndent = 1;
  const astUtils2 = requireAstUtils();
  const KNOWN_NODES = /* @__PURE__ */ new Set([
    "AssignmentExpression",
    "AssignmentPattern",
    "ArrayExpression",
    "ArrayPattern",
    "ArrowFunctionExpression",
    "AwaitExpression",
    "BlockStatement",
    "BinaryExpression",
    "BreakStatement",
    "CallExpression",
    "CatchClause",
    "ChainExpression",
    "ClassBody",
    "ClassDeclaration",
    "ClassExpression",
    "ConditionalExpression",
    "ContinueStatement",
    "DoWhileStatement",
    "DebuggerStatement",
    "EmptyStatement",
    "ExperimentalRestProperty",
    "ExperimentalSpreadProperty",
    "ExpressionStatement",
    "ForStatement",
    "ForInStatement",
    "ForOfStatement",
    "FunctionDeclaration",
    "FunctionExpression",
    "Identifier",
    "IfStatement",
    "Literal",
    "LabeledStatement",
    "LogicalExpression",
    "MemberExpression",
    "MetaProperty",
    "MethodDefinition",
    "NewExpression",
    "ObjectExpression",
    "ObjectPattern",
    "PrivateIdentifier",
    "Program",
    "Property",
    "PropertyDefinition",
    "RestElement",
    "ReturnStatement",
    "SequenceExpression",
    "SpreadElement",
    "StaticBlock",
    "Super",
    "SwitchCase",
    "SwitchStatement",
    "TaggedTemplateExpression",
    "TemplateElement",
    "TemplateLiteral",
    "ThisExpression",
    "ThrowStatement",
    "TryStatement",
    "UnaryExpression",
    "UpdateExpression",
    "VariableDeclaration",
    "VariableDeclarator",
    "WhileStatement",
    "WithStatement",
    "YieldExpression",
    "JSXFragment",
    "JSXOpeningFragment",
    "JSXClosingFragment",
    "JSXIdentifier",
    "JSXNamespacedName",
    "JSXMemberExpression",
    "JSXEmptyExpression",
    "JSXExpressionContainer",
    "JSXElement",
    "JSXClosingElement",
    "JSXOpeningElement",
    "JSXAttribute",
    "JSXSpreadAttribute",
    "JSXText",
    "ExportDefaultDeclaration",
    "ExportNamedDeclaration",
    "ExportAllDeclaration",
    "ExportSpecifier",
    "ImportDeclaration",
    "ImportSpecifier",
    "ImportDefaultSpecifier",
    "ImportNamespaceSpecifier",
    "ImportExpression"
  ]);
  class IndexMap {
    /**
     * Creates an empty map
     * @param {number} maxKey The maximum key
     */
    constructor(maxKey) {
      this._values = Array(maxKey + 1);
    }
    /**
     * Inserts an entry into the map.
     * @param {number} key The entry's key
     * @param {any} value The entry's value
     * @returns {void}
     */
    insert(key, value) {
      this._values[key] = value;
    }
    /**
     * Finds the value of the entry with the largest key less than or equal to the provided key
     * @param {number} key The provided key
     * @returns {*|undefined} The value of the found entry, or undefined if no such entry exists.
     */
    findLastNotAfter(key) {
      const values = this._values;
      for (let index = key; index >= 0; index--) {
        const value = values[index];
        if (value) {
          return value;
        }
      }
      return void 0;
    }
    /**
     * Deletes all of the keys in the interval [start, end)
     * @param {number} start The start of the range
     * @param {number} end The end of the range
     * @returns {void}
     */
    deleteRange(start, end) {
      this._values.fill(void 0, start, end);
    }
  }
  class TokenInfo {
    /**
     * @param {SourceCode} sourceCode A SourceCode object
     */
    constructor(sourceCode2) {
      this.sourceCode = sourceCode2;
      this.firstTokensByLineNumber = /* @__PURE__ */ new Map();
      const tokens = sourceCode2.tokensAndComments;
      for (let i2 = 0; i2 < tokens.length; i2++) {
        const token = tokens[i2];
        if (!this.firstTokensByLineNumber.has(token.loc.start.line)) {
          this.firstTokensByLineNumber.set(token.loc.start.line, token);
        }
        if (!this.firstTokensByLineNumber.has(token.loc.end.line) && sourceCode2.text.slice(
          token.range[1] - token.loc.end.column,
          token.range[1]
        ).trim()) {
          this.firstTokensByLineNumber.set(token.loc.end.line, token);
        }
      }
    }
    /**
     * Gets the first token on a given token's line
     * @param {Token|ASTNode} token a node or token
     * @returns {Token} The first token on the given line
     */
    getFirstTokenOfLine(token) {
      return this.firstTokensByLineNumber.get(token.loc.start.line);
    }
    /**
     * Determines whether a token is the first token in its line
     * @param {Token} token The token
     * @returns {boolean} `true` if the token is the first on its line
     */
    isFirstTokenOfLine(token) {
      return this.getFirstTokenOfLine(token) === token;
    }
    /**
     * Get the actual indent of a token
     * @param {Token} token Token to examine. This should be the first token on its line.
     * @returns {string} The indentation characters that precede the token
     */
    getTokenIndent(token) {
      return this.sourceCode.text.slice(
        token.range[0] - token.loc.start.column,
        token.range[0]
      );
    }
  }
  class OffsetStorage {
    /**
     * @param {TokenInfo} tokenInfo a TokenInfo instance
     * @param {number} indentSize The desired size of each indentation level
     * @param {string} indentType The indentation character
     * @param {number} maxIndex The maximum end index of any token
     */
    constructor(tokenInfo, indentSize, indentType, maxIndex) {
      this._tokenInfo = tokenInfo;
      this._indentSize = indentSize;
      this._indentType = indentType;
      this._indexMap = new IndexMap(maxIndex);
      this._indexMap.insert(0, { offset: 0, from: null, force: false });
      this._lockedFirstTokens = /* @__PURE__ */ new WeakMap();
      this._desiredIndentCache = /* @__PURE__ */ new WeakMap();
      this._ignoredTokens = /* @__PURE__ */ new WeakSet();
    }
    _getOffsetDescriptor(token) {
      return this._indexMap.findLastNotAfter(token.range[0]);
    }
    /**
     * Sets the offset column of token B to match the offset column of token A.
     * - **WARNING**: This matches a *column*, even if baseToken is not the first token on its line. In
     * most cases, `setDesiredOffset` should be used instead.
     * @param {Token} baseToken The first token
     * @param {Token} offsetToken The second token, whose offset should be matched to the first token
     * @returns {void}
     */
    matchOffsetOf(baseToken, offsetToken) {
      this._lockedFirstTokens.set(offsetToken, baseToken);
    }
    /**
     * Sets the desired offset of a token.
     *
     * This uses a line-based offset collapsing behavior to handle tokens on the same line.
     * For example, consider the following two cases:
     *
     * (
     *     [
     *         bar
     *     ]
     * )
     *
     * ([
     *     bar
     * ])
     *
     * Based on the first case, it's clear that the `bar` token needs to have an offset of 1 indent level (4 spaces) from
     * the `[` token, and the `[` token has to have an offset of 1 indent level from the `(` token. Since the `(` token is
     * the first on its line (with an indent of 0 spaces), the `bar` token needs to be offset by 2 indent levels (8 spaces)
     * from the start of its line.
     *
     * However, in the second case `bar` should only be indented by 4 spaces. This is because the offset of 1 indent level
     * between the `(` and the `[` tokens gets "collapsed" because the two tokens are on the same line. As a result, the
     * `(` token is mapped to the `[` token with an offset of 0, and the rule correctly decides that `bar` should be indented
     * by 1 indent level from the start of the line.
     *
     * This is useful because rule listeners can usually just call `setDesiredOffset` for all the tokens in the node,
     * without needing to check which lines those tokens are on.
     *
     * Note that since collapsing only occurs when two tokens are on the same line, there are a few cases where non-intuitive
     * behavior can occur. For example, consider the following cases:
     *
     * foo(
     * ).
     *     bar(
     *         baz
     *     )
     *
     * foo(
     * ).bar(
     *     baz
     * )
     *
     * Based on the first example, it would seem that `bar` should be offset by 1 indent level from `foo`, and `baz`
     * should be offset by 1 indent level from `bar`. However, this is not correct, because it would result in `baz`
     * being indented by 2 indent levels in the second case (since `foo`, `bar`, and `baz` are all on separate lines, no
     * collapsing would occur).
     *
     * Instead, the correct way would be to offset `baz` by 1 level from `bar`, offset `bar` by 1 level from the `)`, and
     * offset the `)` by 0 levels from `foo`. This ensures that the offset between `bar` and the `)` are correctly collapsed
     * in the second case.
     * @param {Token} token The token
     * @param {Token} fromToken The token that `token` should be offset from
     * @param {number} offset The desired indent level
     * @returns {void}
     */
    setDesiredOffset(token, fromToken, offset) {
      return this.setDesiredOffsets(token.range, fromToken, offset);
    }
    /**
     * Sets the desired offset of all tokens in a range
     * It's common for node listeners in this file to need to apply the same offset to a large, contiguous range of tokens.
     * Moreover, the offset of any given token is usually updated multiple times (roughly once for each node that contains
     * it). This means that the offset of each token is updated O(AST depth) times.
     * It would not be performant to store and update the offsets for each token independently, because the rule would end
     * up having a time complexity of O(number of tokens * AST depth), which is quite slow for large files.
     *
     * Instead, the offset tree is represented as a collection of contiguous offset ranges in a file. For example, the following
     * list could represent the state of the offset tree at a given point:
     *
     * - Tokens starting in the interval [0, 15) are aligned with the beginning of the file
     * - Tokens starting in the interval [15, 30) are offset by 1 indent level from the `bar` token
     * - Tokens starting in the interval [30, 43) are offset by 1 indent level from the `foo` token
     * - Tokens starting in the interval [43, 820) are offset by 2 indent levels from the `bar` token
     * - Tokens starting in the interval [820, ∞) are offset by 1 indent level from the `baz` token
     *
     * The `setDesiredOffsets` methods inserts ranges like the ones above. The third line above would be inserted by using:
     * `setDesiredOffsets([30, 43], fooToken, 1);`
     * @param {[number, number]} range A [start, end] pair. All tokens with range[0] <= token.start < range[1] will have the offset applied.
     * @param {Token} fromToken The token that this is offset from
     * @param {number} offset The desired indent level
     * @param {boolean} force `true` if this offset should not use the normal collapsing behavior. This should almost always be false.
     * @returns {void}
     */
    setDesiredOffsets(range, fromToken, offset, force) {
      const descriptorToInsert = { offset, from: fromToken, force };
      const descriptorAfterRange = this._indexMap.findLastNotAfter(range[1]);
      const fromTokenIsInRange = fromToken && fromToken.range[0] >= range[0] && fromToken.range[1] <= range[1];
      const fromTokenDescriptor = fromTokenIsInRange && this._getOffsetDescriptor(fromToken);
      this._indexMap.deleteRange(range[0] + 1, range[1]);
      this._indexMap.insert(range[0], descriptorToInsert);
      if (fromTokenIsInRange) {
        this._indexMap.insert(fromToken.range[0], fromTokenDescriptor);
        this._indexMap.insert(fromToken.range[1], descriptorToInsert);
      }
      this._indexMap.insert(range[1], descriptorAfterRange);
    }
    /**
     * Gets the desired indent of a token
     * @param {Token} token The token
     * @returns {string} The desired indent of the token
     */
    getDesiredIndent(token) {
      if (!this._desiredIndentCache.has(token)) {
        if (this._ignoredTokens.has(token)) {
          this._desiredIndentCache.set(
            token,
            this._tokenInfo.getTokenIndent(token)
          );
        } else if (this._lockedFirstTokens.has(token)) {
          const firstToken = this._lockedFirstTokens.get(token);
          this._desiredIndentCache.set(
            token,
            // (indentation for the first element's line)
            this.getDesiredIndent(
              this._tokenInfo.getFirstTokenOfLine(firstToken)
            ) + // (space between the start of the first element's line and the first element)
            this._indentType.repeat(
              firstToken.loc.start.column - this._tokenInfo.getFirstTokenOfLine(firstToken).loc.start.column
            )
          );
        } else {
          const offsetInfo = this._getOffsetDescriptor(token);
          const offset = offsetInfo.from && offsetInfo.from.loc.start.line === token.loc.start.line && !/^\s*?\n/u.test(token.value) && !offsetInfo.force ? 0 : offsetInfo.offset * this._indentSize;
          this._desiredIndentCache.set(
            token,
            (offsetInfo.from ? this.getDesiredIndent(offsetInfo.from) : "") + this._indentType.repeat(offset)
          );
        }
      }
      return this._desiredIndentCache.get(token);
    }
    /**
     * Ignores a token, preventing it from being reported.
     * @param {Token} token The token
     * @returns {void}
     */
    ignoreToken(token) {
      if (this._tokenInfo.isFirstTokenOfLine(token)) {
        this._ignoredTokens.add(token);
      }
    }
    /**
     * Gets the first token that the given token's indentation is dependent on
     * @param {Token} token The token
     * @returns {Token} The token that the given token depends on, or `null` if the given token is at the top level
     */
    getFirstDependency(token) {
      return this._getOffsetDescriptor(token).from;
    }
  }
  const ELEMENT_LIST_SCHEMA = {
    oneOf: [
      {
        type: "integer",
        minimum: 0
      },
      {
        enum: ["first", "off"]
      }
    ]
  };
  indent = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "indent",
              url: "https://eslint.style/rules/indent"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent indentation",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/indent"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: ["tab"]
            },
            {
              type: "integer",
              minimum: 0
            }
          ]
        },
        {
          type: "object",
          properties: {
            SwitchCase: {
              type: "integer",
              minimum: 0,
              default: 0
            },
            VariableDeclarator: {
              oneOf: [
                ELEMENT_LIST_SCHEMA,
                {
                  type: "object",
                  properties: {
                    var: ELEMENT_LIST_SCHEMA,
                    let: ELEMENT_LIST_SCHEMA,
                    const: ELEMENT_LIST_SCHEMA
                  },
                  additionalProperties: false
                }
              ]
            },
            outerIIFEBody: {
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  enum: ["off"]
                }
              ]
            },
            MemberExpression: {
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  enum: ["off"]
                }
              ]
            },
            FunctionDeclaration: {
              type: "object",
              properties: {
                parameters: ELEMENT_LIST_SCHEMA,
                body: {
                  type: "integer",
                  minimum: 0
                }
              },
              additionalProperties: false
            },
            FunctionExpression: {
              type: "object",
              properties: {
                parameters: ELEMENT_LIST_SCHEMA,
                body: {
                  type: "integer",
                  minimum: 0
                }
              },
              additionalProperties: false
            },
            StaticBlock: {
              type: "object",
              properties: {
                body: {
                  type: "integer",
                  minimum: 0
                }
              },
              additionalProperties: false
            },
            CallExpression: {
              type: "object",
              properties: {
                arguments: ELEMENT_LIST_SCHEMA
              },
              additionalProperties: false
            },
            ArrayExpression: ELEMENT_LIST_SCHEMA,
            ObjectExpression: ELEMENT_LIST_SCHEMA,
            ImportDeclaration: ELEMENT_LIST_SCHEMA,
            flatTernaryExpressions: {
              type: "boolean",
              default: false
            },
            offsetTernaryExpressions: {
              type: "boolean",
              default: false
            },
            ignoredNodes: {
              type: "array",
              items: {
                type: "string",
                not: {
                  pattern: ":exit$"
                }
              }
            },
            ignoreComments: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        wrongIndentation: "Expected indentation of {{expected}} but found {{actual}}."
      }
    },
    create(context) {
      const DEFAULT_VARIABLE_INDENT = 1;
      const DEFAULT_PARAMETER_INDENT = 1;
      const DEFAULT_FUNCTION_BODY_INDENT = 1;
      let indentType = "space";
      let indentSize = 4;
      const options = {
        SwitchCase: 0,
        VariableDeclarator: {
          var: DEFAULT_VARIABLE_INDENT,
          let: DEFAULT_VARIABLE_INDENT,
          const: DEFAULT_VARIABLE_INDENT
        },
        outerIIFEBody: 1,
        FunctionDeclaration: {
          parameters: DEFAULT_PARAMETER_INDENT,
          body: DEFAULT_FUNCTION_BODY_INDENT
        },
        FunctionExpression: {
          parameters: DEFAULT_PARAMETER_INDENT,
          body: DEFAULT_FUNCTION_BODY_INDENT
        },
        StaticBlock: {
          body: DEFAULT_FUNCTION_BODY_INDENT
        },
        CallExpression: {
          arguments: DEFAULT_PARAMETER_INDENT
        },
        MemberExpression: 1,
        ArrayExpression: 1,
        ObjectExpression: 1,
        ImportDeclaration: 1,
        flatTernaryExpressions: false,
        ignoredNodes: [],
        ignoreComments: false
      };
      if (context.options.length) {
        if (context.options[0] === "tab") {
          indentSize = 1;
          indentType = "tab";
        } else {
          indentSize = context.options[0];
          indentType = "space";
        }
        if (context.options[1]) {
          Object.assign(options, context.options[1]);
          if (typeof options.VariableDeclarator === "number" || options.VariableDeclarator === "first") {
            options.VariableDeclarator = {
              var: options.VariableDeclarator,
              let: options.VariableDeclarator,
              const: options.VariableDeclarator
            };
          }
        }
      }
      const sourceCode2 = context.sourceCode;
      const tokenInfo = new TokenInfo(sourceCode2);
      const offsets = new OffsetStorage(
        tokenInfo,
        indentSize,
        indentType === "space" ? " " : "	",
        sourceCode2.text.length
      );
      const parameterParens = /* @__PURE__ */ new WeakSet();
      function createErrorMessageData(expectedAmount, actualSpaces, actualTabs) {
        const expectedStatement = `${expectedAmount} ${indentType}${expectedAmount === 1 ? "" : "s"}`;
        const foundSpacesWord = `space${actualSpaces === 1 ? "" : "s"}`;
        const foundTabsWord = `tab${actualTabs === 1 ? "" : "s"}`;
        let foundStatement;
        if (actualSpaces > 0) {
          foundStatement = indentType === "space" ? actualSpaces : `${actualSpaces} ${foundSpacesWord}`;
        } else if (actualTabs > 0) {
          foundStatement = indentType === "tab" ? actualTabs : `${actualTabs} ${foundTabsWord}`;
        } else {
          foundStatement = "0";
        }
        return {
          expected: expectedStatement,
          actual: foundStatement
        };
      }
      function report(token, neededIndent) {
        const actualIndent = Array.from(tokenInfo.getTokenIndent(token));
        const numSpaces = actualIndent.filter((char) => char === " ").length;
        const numTabs = actualIndent.filter((char) => char === "	").length;
        context.report({
          node: token,
          messageId: "wrongIndentation",
          data: createErrorMessageData(
            neededIndent.length,
            numSpaces,
            numTabs
          ),
          loc: {
            start: { line: token.loc.start.line, column: 0 },
            end: {
              line: token.loc.start.line,
              column: token.loc.start.column
            }
          },
          fix(fixer) {
            const range = [
              token.range[0] - token.loc.start.column,
              token.range[0]
            ];
            const newText = neededIndent;
            return fixer.replaceTextRange(range, newText);
          }
        });
      }
      function validateTokenIndent(token, desiredIndent) {
        const indentation = tokenInfo.getTokenIndent(token);
        return indentation === desiredIndent || // To avoid conflicts with no-mixed-spaces-and-tabs, don't report mixed spaces and tabs.
        indentation.includes(" ") && indentation.includes("	");
      }
      function isOuterIIFE(node2) {
        if (!node2.parent || node2.parent.type !== "CallExpression" || node2.parent.callee !== node2) {
          return false;
        }
        let statement = node2.parent && node2.parent.parent;
        while (statement.type === "UnaryExpression" && ["!", "~", "+", "-"].includes(statement.operator) || statement.type === "AssignmentExpression" || statement.type === "LogicalExpression" || statement.type === "SequenceExpression" || statement.type === "VariableDeclarator") {
          statement = statement.parent;
        }
        return (statement.type === "ExpressionStatement" || statement.type === "VariableDeclaration") && statement.parent.type === "Program";
      }
      function countTrailingLinebreaks(string) {
        const trailingWhitespace = string.match(/\s*$/u)[0];
        const linebreakMatches = trailingWhitespace.match(
          astUtils2.createGlobalLinebreakMatcher()
        );
        return linebreakMatches === null ? 0 : linebreakMatches.length;
      }
      function addElementListIndent(elements, startToken, endToken, offset) {
        function getFirstToken(element) {
          let token = sourceCode2.getTokenBefore(element);
          while (astUtils2.isOpeningParenToken(token) && token !== startToken) {
            token = sourceCode2.getTokenBefore(token);
          }
          return sourceCode2.getTokenAfter(token);
        }
        offsets.setDesiredOffsets(
          [startToken.range[1], endToken.range[0]],
          startToken,
          typeof offset === "number" ? offset : 1
        );
        offsets.setDesiredOffset(endToken, startToken, 0);
        if (offset === "first" && elements.length && !elements[0]) {
          return;
        }
        elements.forEach((element, index) => {
          if (!element) {
            return;
          }
          if (offset === "off") {
            offsets.ignoreToken(getFirstToken(element));
          }
          if (index === 0) {
            return;
          }
          if (offset === "first" && tokenInfo.isFirstTokenOfLine(getFirstToken(element))) {
            offsets.matchOffsetOf(
              getFirstToken(elements[0]),
              getFirstToken(element)
            );
          } else {
            const previousElement = elements[index - 1];
            const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);
            const previousElementLastToken = previousElement && sourceCode2.getLastToken(previousElement);
            if (previousElement && previousElementLastToken.loc.end.line - countTrailingLinebreaks(
              previousElementLastToken.value
            ) > startToken.loc.end.line) {
              offsets.setDesiredOffsets(
                [previousElement.range[1], element.range[1]],
                firstTokenOfPreviousElement,
                0
              );
            }
          }
        });
      }
      function addBlocklessNodeIndent(node2) {
        if (node2.type !== "BlockStatement") {
          const lastParentToken = sourceCode2.getTokenBefore(
            node2,
            astUtils2.isNotOpeningParenToken
          );
          let firstBodyToken = sourceCode2.getFirstToken(node2);
          let lastBodyToken = sourceCode2.getLastToken(node2);
          while (astUtils2.isOpeningParenToken(
            sourceCode2.getTokenBefore(firstBodyToken)
          ) && astUtils2.isClosingParenToken(
            sourceCode2.getTokenAfter(lastBodyToken)
          )) {
            firstBodyToken = sourceCode2.getTokenBefore(firstBodyToken);
            lastBodyToken = sourceCode2.getTokenAfter(lastBodyToken);
          }
          offsets.setDesiredOffsets(
            [firstBodyToken.range[0], lastBodyToken.range[1]],
            lastParentToken,
            1
          );
        }
      }
      function addFunctionCallIndent(node2) {
        let openingParen;
        if (node2.arguments.length) {
          openingParen = sourceCode2.getFirstTokenBetween(
            node2.callee,
            node2.arguments[0],
            astUtils2.isOpeningParenToken
          );
        } else {
          openingParen = sourceCode2.getLastToken(node2, 1);
        }
        const closingParen = sourceCode2.getLastToken(node2);
        parameterParens.add(openingParen);
        parameterParens.add(closingParen);
        if (node2.optional) {
          const dotToken = sourceCode2.getTokenAfter(
            node2.callee,
            astUtils2.isQuestionDotToken
          );
          const calleeParenCount = sourceCode2.getTokensBetween(
            node2.callee,
            dotToken,
            { filter: astUtils2.isClosingParenToken }
          ).length;
          const firstTokenOfCallee = calleeParenCount ? sourceCode2.getTokenBefore(node2.callee, {
            skip: calleeParenCount - 1
          }) : sourceCode2.getFirstToken(node2.callee);
          const lastTokenOfCallee = sourceCode2.getTokenBefore(dotToken);
          const offsetBase = lastTokenOfCallee.loc.end.line === openingParen.loc.start.line ? lastTokenOfCallee : firstTokenOfCallee;
          offsets.setDesiredOffset(dotToken, offsetBase, 1);
        }
        const offsetAfterToken = node2.callee.type === "TaggedTemplateExpression" ? sourceCode2.getFirstToken(node2.callee.quasi) : openingParen;
        const offsetToken = sourceCode2.getTokenBefore(offsetAfterToken);
        offsets.setDesiredOffset(openingParen, offsetToken, 0);
        addElementListIndent(
          node2.arguments,
          openingParen,
          closingParen,
          options.CallExpression.arguments
        );
      }
      function addParensIndent(tokens) {
        const parenStack = [];
        const parenPairs = [];
        for (let i2 = 0; i2 < tokens.length; i2++) {
          const nextToken = tokens[i2];
          if (astUtils2.isOpeningParenToken(nextToken)) {
            parenStack.push(nextToken);
          } else if (astUtils2.isClosingParenToken(nextToken)) {
            parenPairs.push({
              left: parenStack.pop(),
              right: nextToken
            });
          }
        }
        for (let i2 = parenPairs.length - 1; i2 >= 0; i2--) {
          const leftParen = parenPairs[i2].left;
          const rightParen = parenPairs[i2].right;
          if (!parameterParens.has(leftParen) && !parameterParens.has(rightParen)) {
            const parenthesizedTokens = new Set(
              sourceCode2.getTokensBetween(leftParen, rightParen)
            );
            parenthesizedTokens.forEach((token) => {
              if (!parenthesizedTokens.has(
                offsets.getFirstDependency(token)
              )) {
                offsets.setDesiredOffset(token, leftParen, 1);
              }
            });
          }
          offsets.setDesiredOffset(rightParen, leftParen, 0);
        }
      }
      function ignoreNode(node2) {
        const unknownNodeTokens = new Set(
          sourceCode2.getTokens(node2, { includeComments: true })
        );
        unknownNodeTokens.forEach((token) => {
          if (!unknownNodeTokens.has(offsets.getFirstDependency(token))) {
            const firstTokenOfLine = tokenInfo.getFirstTokenOfLine(token);
            if (token === firstTokenOfLine) {
              offsets.ignoreToken(token);
            } else {
              offsets.setDesiredOffset(token, firstTokenOfLine, 0);
            }
          }
        });
      }
      function isOnFirstLineOfStatement(token, leafNode) {
        let node2 = leafNode;
        while (node2.parent && !node2.parent.type.endsWith("Statement") && !node2.parent.type.endsWith("Declaration")) {
          node2 = node2.parent;
        }
        node2 = node2.parent;
        return !node2 || node2.loc.start.line === token.loc.start.line;
      }
      function hasBlankLinesBetween(firstToken, secondToken) {
        const firstTokenLine = firstToken.loc.end.line;
        const secondTokenLine = secondToken.loc.start.line;
        if (firstTokenLine === secondTokenLine || firstTokenLine === secondTokenLine - 1) {
          return false;
        }
        for (let line = firstTokenLine + 1; line < secondTokenLine; ++line) {
          if (!tokenInfo.firstTokensByLineNumber.has(line)) {
            return true;
          }
        }
        return false;
      }
      const ignoredNodeFirstTokens = /* @__PURE__ */ new Set();
      const baseOffsetListeners = {
        "ArrayExpression, ArrayPattern"(node2) {
          const openingBracket = sourceCode2.getFirstToken(node2);
          const closingBracket = sourceCode2.getTokenAfter(
            [...node2.elements].reverse().find((_) => _) || openingBracket,
            astUtils2.isClosingBracketToken
          );
          addElementListIndent(
            node2.elements,
            openingBracket,
            closingBracket,
            options.ArrayExpression
          );
        },
        "ObjectExpression, ObjectPattern"(node2) {
          const openingCurly = sourceCode2.getFirstToken(node2);
          const closingCurly = sourceCode2.getTokenAfter(
            node2.properties.length ? node2.properties.at(-1) : openingCurly,
            astUtils2.isClosingBraceToken
          );
          addElementListIndent(
            node2.properties,
            openingCurly,
            closingCurly,
            options.ObjectExpression
          );
        },
        ArrowFunctionExpression(node2) {
          const maybeOpeningParen = sourceCode2.getFirstToken(node2, {
            skip: node2.async ? 1 : 0
          });
          if (astUtils2.isOpeningParenToken(maybeOpeningParen)) {
            const openingParen = maybeOpeningParen;
            const closingParen = sourceCode2.getTokenBefore(
              node2.body,
              astUtils2.isClosingParenToken
            );
            parameterParens.add(openingParen);
            parameterParens.add(closingParen);
            addElementListIndent(
              node2.params,
              openingParen,
              closingParen,
              options.FunctionExpression.parameters
            );
          }
          addBlocklessNodeIndent(node2.body);
        },
        AssignmentExpression(node2) {
          const operator = sourceCode2.getFirstTokenBetween(
            node2.left,
            node2.right,
            (token) => token.value === node2.operator
          );
          offsets.setDesiredOffsets(
            [operator.range[0], node2.range[1]],
            sourceCode2.getLastToken(node2.left),
            1
          );
          offsets.ignoreToken(operator);
          offsets.ignoreToken(sourceCode2.getTokenAfter(operator));
        },
        "BinaryExpression, LogicalExpression"(node2) {
          const operator = sourceCode2.getFirstTokenBetween(
            node2.left,
            node2.right,
            (token) => token.value === node2.operator
          );
          const tokenAfterOperator = sourceCode2.getTokenAfter(operator);
          offsets.ignoreToken(operator);
          offsets.ignoreToken(tokenAfterOperator);
          offsets.setDesiredOffset(tokenAfterOperator, operator, 0);
        },
        "BlockStatement, ClassBody"(node2) {
          let blockIndentLevel;
          if (node2.parent && isOuterIIFE(node2.parent)) {
            blockIndentLevel = options.outerIIFEBody;
          } else if (node2.parent && (node2.parent.type === "FunctionExpression" || node2.parent.type === "ArrowFunctionExpression")) {
            blockIndentLevel = options.FunctionExpression.body;
          } else if (node2.parent && node2.parent.type === "FunctionDeclaration") {
            blockIndentLevel = options.FunctionDeclaration.body;
          } else {
            blockIndentLevel = 1;
          }
          if (!astUtils2.STATEMENT_LIST_PARENTS.has(node2.parent.type)) {
            offsets.setDesiredOffset(
              sourceCode2.getFirstToken(node2),
              sourceCode2.getFirstToken(node2.parent),
              0
            );
          }
          addElementListIndent(
            node2.body,
            sourceCode2.getFirstToken(node2),
            sourceCode2.getLastToken(node2),
            blockIndentLevel
          );
        },
        CallExpression: addFunctionCallIndent,
        "ClassDeclaration[superClass], ClassExpression[superClass]"(node2) {
          const classToken = sourceCode2.getFirstToken(node2);
          const extendsToken = sourceCode2.getTokenBefore(
            node2.superClass,
            astUtils2.isNotOpeningParenToken
          );
          offsets.setDesiredOffsets(
            [extendsToken.range[0], node2.body.range[0]],
            classToken,
            1
          );
        },
        ConditionalExpression(node2) {
          const firstToken = sourceCode2.getFirstToken(node2);
          if (!options.flatTernaryExpressions || !astUtils2.isTokenOnSameLine(node2.test, node2.consequent) || isOnFirstLineOfStatement(firstToken, node2)) {
            const questionMarkToken = sourceCode2.getFirstTokenBetween(
              node2.test,
              node2.consequent,
              (token) => token.type === "Punctuator" && token.value === "?"
            );
            const colonToken = sourceCode2.getFirstTokenBetween(
              node2.consequent,
              node2.alternate,
              (token) => token.type === "Punctuator" && token.value === ":"
            );
            const firstConsequentToken = sourceCode2.getTokenAfter(questionMarkToken);
            const lastConsequentToken = sourceCode2.getTokenBefore(colonToken);
            const firstAlternateToken = sourceCode2.getTokenAfter(colonToken);
            offsets.setDesiredOffset(questionMarkToken, firstToken, 1);
            offsets.setDesiredOffset(colonToken, firstToken, 1);
            offsets.setDesiredOffset(
              firstConsequentToken,
              firstToken,
              firstConsequentToken.type === "Punctuator" && options.offsetTernaryExpressions ? 2 : 1
            );
            if (lastConsequentToken.loc.end.line === firstAlternateToken.loc.start.line) {
              offsets.setDesiredOffset(
                firstAlternateToken,
                firstConsequentToken,
                0
              );
            } else {
              offsets.setDesiredOffset(
                firstAlternateToken,
                firstToken,
                firstAlternateToken.type === "Punctuator" && options.offsetTernaryExpressions ? 2 : 1
              );
            }
          }
        },
        "DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement, WithStatement": (node2) => addBlocklessNodeIndent(node2.body),
        ExportNamedDeclaration(node2) {
          if (node2.declaration === null) {
            const closingCurly = sourceCode2.getLastToken(
              node2,
              astUtils2.isClosingBraceToken
            );
            addElementListIndent(
              node2.specifiers,
              sourceCode2.getFirstToken(node2, { skip: 1 }),
              closingCurly,
              1
            );
            if (node2.source) {
              offsets.setDesiredOffsets(
                [closingCurly.range[1], node2.range[1]],
                sourceCode2.getFirstToken(node2),
                1
              );
            }
          }
        },
        ForStatement(node2) {
          const forOpeningParen = sourceCode2.getFirstToken(node2, 1);
          if (node2.init) {
            offsets.setDesiredOffsets(
              node2.init.range,
              forOpeningParen,
              1
            );
          }
          if (node2.test) {
            offsets.setDesiredOffsets(
              node2.test.range,
              forOpeningParen,
              1
            );
          }
          if (node2.update) {
            offsets.setDesiredOffsets(
              node2.update.range,
              forOpeningParen,
              1
            );
          }
          addBlocklessNodeIndent(node2.body);
        },
        "FunctionDeclaration, FunctionExpression"(node2) {
          const closingParen = sourceCode2.getTokenBefore(node2.body);
          const openingParen = sourceCode2.getTokenBefore(
            node2.params.length ? node2.params[0] : closingParen
          );
          parameterParens.add(openingParen);
          parameterParens.add(closingParen);
          addElementListIndent(
            node2.params,
            openingParen,
            closingParen,
            options[node2.type].parameters
          );
        },
        IfStatement(node2) {
          addBlocklessNodeIndent(node2.consequent);
          if (node2.alternate) {
            addBlocklessNodeIndent(node2.alternate);
          }
        },
        /*
         * For blockless nodes with semicolon-first style, don't indent the semicolon.
         * e.g.
         * if (foo)
         *     bar()
         * ; [1, 2, 3].map(foo)
         *
         * Traversal into the node sets indentation of the semicolon, so we need to override it on exit.
         */
        ":matches(DoWhileStatement, ForStatement, ForInStatement, ForOfStatement, IfStatement, WhileStatement, WithStatement):exit"(node2) {
          let nodesToCheck;
          if (node2.type === "IfStatement") {
            nodesToCheck = [node2.consequent];
            if (node2.alternate) {
              nodesToCheck.push(node2.alternate);
            }
          } else {
            nodesToCheck = [node2.body];
          }
          for (const nodeToCheck of nodesToCheck) {
            const lastToken = sourceCode2.getLastToken(nodeToCheck);
            if (astUtils2.isSemicolonToken(lastToken)) {
              const tokenBeforeLast = sourceCode2.getTokenBefore(lastToken);
              const tokenAfterLast = sourceCode2.getTokenAfter(lastToken);
              if (!astUtils2.isTokenOnSameLine(
                tokenBeforeLast,
                lastToken
              ) && tokenAfterLast && astUtils2.isTokenOnSameLine(
                lastToken,
                tokenAfterLast
              )) {
                offsets.setDesiredOffset(
                  lastToken,
                  sourceCode2.getFirstToken(node2),
                  0
                );
              }
            }
          }
        },
        ImportDeclaration(node2) {
          if (node2.specifiers.some(
            (specifier) => specifier.type === "ImportSpecifier"
          )) {
            const openingCurly = sourceCode2.getFirstToken(
              node2,
              astUtils2.isOpeningBraceToken
            );
            const closingCurly = sourceCode2.getLastToken(
              node2,
              astUtils2.isClosingBraceToken
            );
            addElementListIndent(
              node2.specifiers.filter(
                (specifier) => specifier.type === "ImportSpecifier"
              ),
              openingCurly,
              closingCurly,
              options.ImportDeclaration
            );
          }
          const fromToken = sourceCode2.getLastToken(
            node2,
            (token) => token.type === "Identifier" && token.value === "from"
          );
          const sourceToken = sourceCode2.getLastToken(
            node2,
            (token) => token.type === "String"
          );
          const semiToken = sourceCode2.getLastToken(
            node2,
            (token) => token.type === "Punctuator" && token.value === ";"
          );
          if (fromToken) {
            const end = semiToken && semiToken.range[1] === sourceToken.range[1] ? node2.range[1] : sourceToken.range[1];
            offsets.setDesiredOffsets(
              [fromToken.range[0], end],
              sourceCode2.getFirstToken(node2),
              1
            );
          }
        },
        ImportExpression(node2) {
          const openingParen = sourceCode2.getFirstToken(node2, 1);
          const closingParen = sourceCode2.getLastToken(node2);
          parameterParens.add(openingParen);
          parameterParens.add(closingParen);
          offsets.setDesiredOffset(
            openingParen,
            sourceCode2.getTokenBefore(openingParen),
            0
          );
          addElementListIndent(
            [node2.source],
            openingParen,
            closingParen,
            options.CallExpression.arguments
          );
        },
        "MemberExpression, JSXMemberExpression, MetaProperty"(node2) {
          const object = node2.type === "MetaProperty" ? node2.meta : node2.object;
          const firstNonObjectToken = sourceCode2.getFirstTokenBetween(
            object,
            node2.property,
            astUtils2.isNotClosingParenToken
          );
          const secondNonObjectToken = sourceCode2.getTokenAfter(firstNonObjectToken);
          const objectParenCount = sourceCode2.getTokensBetween(
            object,
            node2.property,
            { filter: astUtils2.isClosingParenToken }
          ).length;
          const firstObjectToken = objectParenCount ? sourceCode2.getTokenBefore(object, {
            skip: objectParenCount - 1
          }) : sourceCode2.getFirstToken(object);
          const lastObjectToken = sourceCode2.getTokenBefore(firstNonObjectToken);
          const firstPropertyToken = node2.computed ? firstNonObjectToken : secondNonObjectToken;
          if (node2.computed) {
            offsets.setDesiredOffset(
              sourceCode2.getLastToken(node2),
              firstNonObjectToken,
              0
            );
            offsets.setDesiredOffsets(
              node2.property.range,
              firstNonObjectToken,
              1
            );
          }
          const offsetBase = lastObjectToken.loc.end.line === firstPropertyToken.loc.start.line ? lastObjectToken : firstObjectToken;
          if (typeof options.MemberExpression === "number") {
            offsets.setDesiredOffset(
              firstNonObjectToken,
              offsetBase,
              options.MemberExpression
            );
            offsets.setDesiredOffset(
              secondNonObjectToken,
              node2.computed ? firstNonObjectToken : offsetBase,
              options.MemberExpression
            );
          } else {
            offsets.ignoreToken(firstNonObjectToken);
            offsets.ignoreToken(secondNonObjectToken);
            offsets.setDesiredOffset(
              firstNonObjectToken,
              offsetBase,
              0
            );
            offsets.setDesiredOffset(
              secondNonObjectToken,
              firstNonObjectToken,
              0
            );
          }
        },
        NewExpression(node2) {
          if (node2.arguments.length > 0 || astUtils2.isClosingParenToken(
            sourceCode2.getLastToken(node2)
          ) && astUtils2.isOpeningParenToken(
            sourceCode2.getLastToken(node2, 1)
          )) {
            addFunctionCallIndent(node2);
          }
        },
        Property(node2) {
          if (!node2.shorthand && !node2.method && node2.kind === "init") {
            const colon = sourceCode2.getFirstTokenBetween(
              node2.key,
              node2.value,
              astUtils2.isColonToken
            );
            offsets.ignoreToken(sourceCode2.getTokenAfter(colon));
          }
        },
        PropertyDefinition(node2) {
          const firstToken = sourceCode2.getFirstToken(node2);
          const maybeSemicolonToken = sourceCode2.getLastToken(node2);
          let keyLastToken;
          if (node2.computed) {
            const bracketTokenL = sourceCode2.getTokenBefore(
              node2.key,
              astUtils2.isOpeningBracketToken
            );
            const bracketTokenR = keyLastToken = sourceCode2.getTokenAfter(
              node2.key,
              astUtils2.isClosingBracketToken
            );
            const keyRange = [
              bracketTokenL.range[1],
              bracketTokenR.range[0]
            ];
            if (bracketTokenL !== firstToken) {
              offsets.setDesiredOffset(bracketTokenL, firstToken, 0);
            }
            offsets.setDesiredOffsets(keyRange, bracketTokenL, 1);
            offsets.setDesiredOffset(bracketTokenR, bracketTokenL, 0);
          } else {
            const idToken = keyLastToken = sourceCode2.getFirstToken(
              node2.key
            );
            if (idToken !== firstToken) {
              offsets.setDesiredOffset(idToken, firstToken, 1);
            }
          }
          if (node2.value) {
            const eqToken = sourceCode2.getTokenBefore(
              node2.value,
              astUtils2.isEqToken
            );
            const valueToken = sourceCode2.getTokenAfter(eqToken);
            offsets.setDesiredOffset(eqToken, keyLastToken, 1);
            offsets.setDesiredOffset(valueToken, eqToken, 1);
            if (astUtils2.isSemicolonToken(maybeSemicolonToken)) {
              offsets.setDesiredOffset(
                maybeSemicolonToken,
                eqToken,
                1
              );
            }
          } else if (astUtils2.isSemicolonToken(maybeSemicolonToken)) {
            offsets.setDesiredOffset(
              maybeSemicolonToken,
              keyLastToken,
              1
            );
          }
        },
        StaticBlock(node2) {
          const openingCurly = sourceCode2.getFirstToken(node2, {
            skip: 1
          });
          const closingCurly = sourceCode2.getLastToken(node2);
          addElementListIndent(
            node2.body,
            openingCurly,
            closingCurly,
            options.StaticBlock.body
          );
        },
        SwitchStatement(node2) {
          const openingCurly = sourceCode2.getTokenAfter(
            node2.discriminant,
            astUtils2.isOpeningBraceToken
          );
          const closingCurly = sourceCode2.getLastToken(node2);
          offsets.setDesiredOffsets(
            [openingCurly.range[1], closingCurly.range[0]],
            openingCurly,
            options.SwitchCase
          );
          if (node2.cases.length) {
            sourceCode2.getTokensBetween(node2.cases.at(-1), closingCurly, {
              includeComments: true,
              filter: astUtils2.isCommentToken
            }).forEach((token) => offsets.ignoreToken(token));
          }
        },
        SwitchCase(node2) {
          if (!(node2.consequent.length === 1 && node2.consequent[0].type === "BlockStatement")) {
            const caseKeyword = sourceCode2.getFirstToken(node2);
            const tokenAfterCurrentCase = sourceCode2.getTokenAfter(node2);
            offsets.setDesiredOffsets(
              [caseKeyword.range[1], tokenAfterCurrentCase.range[0]],
              caseKeyword,
              1
            );
          }
        },
        TemplateLiteral(node2) {
          node2.expressions.forEach((expression, index) => {
            const previousQuasi = node2.quasis[index];
            const nextQuasi = node2.quasis[index + 1];
            const tokenToAlignFrom = previousQuasi.loc.start.line === previousQuasi.loc.end.line ? sourceCode2.getFirstToken(previousQuasi) : null;
            offsets.setDesiredOffsets(
              [previousQuasi.range[1], nextQuasi.range[0]],
              tokenToAlignFrom,
              1
            );
            offsets.setDesiredOffset(
              sourceCode2.getFirstToken(nextQuasi),
              tokenToAlignFrom,
              0
            );
          });
        },
        VariableDeclaration(node2) {
          let variableIndent = Object.hasOwn(
            options.VariableDeclarator,
            node2.kind
          ) ? options.VariableDeclarator[node2.kind] : DEFAULT_VARIABLE_INDENT;
          const firstToken = sourceCode2.getFirstToken(node2), lastToken = sourceCode2.getLastToken(node2);
          if (options.VariableDeclarator[node2.kind] === "first") {
            if (node2.declarations.length > 1) {
              addElementListIndent(
                node2.declarations,
                firstToken,
                lastToken,
                "first"
              );
              return;
            }
            variableIndent = DEFAULT_VARIABLE_INDENT;
          }
          if (node2.declarations.at(-1).loc.start.line > node2.loc.start.line) {
            offsets.setDesiredOffsets(
              node2.range,
              firstToken,
              variableIndent,
              true
            );
          } else {
            offsets.setDesiredOffsets(
              node2.range,
              firstToken,
              variableIndent
            );
          }
          if (astUtils2.isSemicolonToken(lastToken)) {
            offsets.ignoreToken(lastToken);
          }
        },
        VariableDeclarator(node2) {
          if (node2.init) {
            const equalOperator = sourceCode2.getTokenBefore(
              node2.init,
              astUtils2.isNotOpeningParenToken
            );
            const tokenAfterOperator = sourceCode2.getTokenAfter(equalOperator);
            offsets.ignoreToken(equalOperator);
            offsets.ignoreToken(tokenAfterOperator);
            offsets.setDesiredOffsets(
              [tokenAfterOperator.range[0], node2.range[1]],
              equalOperator,
              1
            );
            offsets.setDesiredOffset(
              equalOperator,
              sourceCode2.getLastToken(node2.id),
              0
            );
          }
        },
        "JSXAttribute[value]"(node2) {
          const equalsToken = sourceCode2.getFirstTokenBetween(
            node2.name,
            node2.value,
            (token) => token.type === "Punctuator" && token.value === "="
          );
          offsets.setDesiredOffsets(
            [equalsToken.range[0], node2.value.range[1]],
            sourceCode2.getFirstToken(node2.name),
            1
          );
        },
        JSXElement(node2) {
          if (node2.closingElement) {
            addElementListIndent(
              node2.children,
              sourceCode2.getFirstToken(node2.openingElement),
              sourceCode2.getFirstToken(node2.closingElement),
              1
            );
          }
        },
        JSXOpeningElement(node2) {
          const firstToken = sourceCode2.getFirstToken(node2);
          let closingToken;
          if (node2.selfClosing) {
            closingToken = sourceCode2.getLastToken(node2, { skip: 1 });
            offsets.setDesiredOffset(
              sourceCode2.getLastToken(node2),
              closingToken,
              0
            );
          } else {
            closingToken = sourceCode2.getLastToken(node2);
          }
          offsets.setDesiredOffsets(
            node2.name.range,
            sourceCode2.getFirstToken(node2)
          );
          addElementListIndent(
            node2.attributes,
            firstToken,
            closingToken,
            1
          );
        },
        JSXClosingElement(node2) {
          const firstToken = sourceCode2.getFirstToken(node2);
          offsets.setDesiredOffsets(node2.name.range, firstToken, 1);
        },
        JSXFragment(node2) {
          const firstOpeningToken = sourceCode2.getFirstToken(
            node2.openingFragment
          );
          const firstClosingToken = sourceCode2.getFirstToken(
            node2.closingFragment
          );
          addElementListIndent(
            node2.children,
            firstOpeningToken,
            firstClosingToken,
            1
          );
        },
        JSXOpeningFragment(node2) {
          const firstToken = sourceCode2.getFirstToken(node2);
          const closingToken = sourceCode2.getLastToken(node2);
          offsets.setDesiredOffsets(node2.range, firstToken, 1);
          offsets.matchOffsetOf(firstToken, closingToken);
        },
        JSXClosingFragment(node2) {
          const firstToken = sourceCode2.getFirstToken(node2);
          const slashToken = sourceCode2.getLastToken(node2, { skip: 1 });
          const closingToken = sourceCode2.getLastToken(node2);
          const tokenToMatch = astUtils2.isTokenOnSameLine(
            slashToken,
            closingToken
          ) ? slashToken : closingToken;
          offsets.setDesiredOffsets(node2.range, firstToken, 1);
          offsets.matchOffsetOf(firstToken, tokenToMatch);
        },
        JSXExpressionContainer(node2) {
          const openingCurly = sourceCode2.getFirstToken(node2);
          const closingCurly = sourceCode2.getLastToken(node2);
          offsets.setDesiredOffsets(
            [openingCurly.range[1], closingCurly.range[0]],
            openingCurly,
            1
          );
        },
        JSXSpreadAttribute(node2) {
          const openingCurly = sourceCode2.getFirstToken(node2);
          const closingCurly = sourceCode2.getLastToken(node2);
          offsets.setDesiredOffsets(
            [openingCurly.range[1], closingCurly.range[0]],
            openingCurly,
            1
          );
        },
        "*"(node2) {
          const firstToken = sourceCode2.getFirstToken(node2);
          if (firstToken && !ignoredNodeFirstTokens.has(firstToken)) {
            offsets.setDesiredOffsets(node2.range, firstToken, 0);
          }
        }
      };
      const listenerCallQueue = [];
      const offsetListeners = {};
      for (const [selector, listener] of Object.entries(
        baseOffsetListeners
      )) {
        offsetListeners[selector] = (node2) => listenerCallQueue.push({ listener, node: node2 });
      }
      const ignoredNodes = /* @__PURE__ */ new Set();
      function addToIgnoredNodes(node2) {
        ignoredNodes.add(node2);
        ignoredNodeFirstTokens.add(sourceCode2.getFirstToken(node2));
      }
      const ignoredNodeListeners = options.ignoredNodes.reduce(
        (listeners, ignoredSelector) => Object.assign(listeners, {
          [ignoredSelector]: addToIgnoredNodes
        }),
        {}
      );
      return Object.assign(offsetListeners, ignoredNodeListeners, {
        "*:exit"(node2) {
          if (!KNOWN_NODES.has(node2.type)) {
            addToIgnoredNodes(node2);
          }
        },
        "Program:exit"() {
          if (options.ignoreComments) {
            sourceCode2.getAllComments().forEach((comment2) => offsets.ignoreToken(comment2));
          }
          for (let i2 = 0; i2 < listenerCallQueue.length; i2++) {
            const nodeInfo = listenerCallQueue[i2];
            if (!ignoredNodes.has(nodeInfo.node)) {
              nodeInfo.listener(nodeInfo.node);
            }
          }
          ignoredNodes.forEach(ignoreNode);
          addParensIndent(sourceCode2.ast.tokens);
          const precedingTokens = /* @__PURE__ */ new WeakMap();
          for (let i2 = 0; i2 < sourceCode2.ast.comments.length; i2++) {
            const comment2 = sourceCode2.ast.comments[i2];
            const tokenOrCommentBefore = sourceCode2.getTokenBefore(
              comment2,
              { includeComments: true }
            );
            const hasToken = precedingTokens.has(tokenOrCommentBefore) ? precedingTokens.get(tokenOrCommentBefore) : tokenOrCommentBefore;
            precedingTokens.set(comment2, hasToken);
          }
          for (let i2 = 1; i2 < sourceCode2.lines.length + 1; i2++) {
            if (!tokenInfo.firstTokensByLineNumber.has(i2)) {
              continue;
            }
            const firstTokenOfLine = tokenInfo.firstTokensByLineNumber.get(i2);
            if (firstTokenOfLine.loc.start.line !== i2) {
              continue;
            }
            if (astUtils2.isCommentToken(firstTokenOfLine)) {
              const tokenBefore = precedingTokens.get(firstTokenOfLine);
              const tokenAfter = tokenBefore ? sourceCode2.getTokenAfter(tokenBefore) : sourceCode2.ast.tokens[0];
              const mayAlignWithBefore = tokenBefore && !hasBlankLinesBetween(
                tokenBefore,
                firstTokenOfLine
              );
              const mayAlignWithAfter = tokenAfter && !hasBlankLinesBetween(firstTokenOfLine, tokenAfter);
              if (tokenAfter && astUtils2.isSemicolonToken(tokenAfter) && !astUtils2.isTokenOnSameLine(
                firstTokenOfLine,
                tokenAfter
              )) {
                offsets.setDesiredOffset(
                  firstTokenOfLine,
                  tokenAfter,
                  0
                );
              }
              if (mayAlignWithBefore && validateTokenIndent(
                firstTokenOfLine,
                offsets.getDesiredIndent(tokenBefore)
              ) || mayAlignWithAfter && validateTokenIndent(
                firstTokenOfLine,
                offsets.getDesiredIndent(tokenAfter)
              )) {
                continue;
              }
            }
            if (validateTokenIndent(
              firstTokenOfLine,
              offsets.getDesiredIndent(firstTokenOfLine)
            )) {
              continue;
            }
            report(
              firstTokenOfLine,
              offsets.getDesiredIndent(firstTokenOfLine)
            );
          }
        }
      });
    }
  };
  return indent;
}
var indentLegacy;
var hasRequiredIndentLegacy;
function requireIndentLegacy() {
  if (hasRequiredIndentLegacy) return indentLegacy;
  hasRequiredIndentLegacy = 1;
  const astUtils2 = requireAstUtils();
  indentLegacy = {
    meta: {
      type: "layout",
      docs: {
        description: "Enforce consistent indentation",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/indent-legacy"
      },
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "4.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "indent",
              url: "https://eslint.style/rules/indent"
            }
          }
        ]
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: ["tab"]
            },
            {
              type: "integer",
              minimum: 0
            }
          ]
        },
        {
          type: "object",
          properties: {
            SwitchCase: {
              type: "integer",
              minimum: 0
            },
            VariableDeclarator: {
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  type: "object",
                  properties: {
                    var: {
                      type: "integer",
                      minimum: 0
                    },
                    let: {
                      type: "integer",
                      minimum: 0
                    },
                    const: {
                      type: "integer",
                      minimum: 0
                    }
                  }
                }
              ]
            },
            outerIIFEBody: {
              type: "integer",
              minimum: 0
            },
            MemberExpression: {
              type: "integer",
              minimum: 0
            },
            FunctionDeclaration: {
              type: "object",
              properties: {
                parameters: {
                  oneOf: [
                    {
                      type: "integer",
                      minimum: 0
                    },
                    {
                      enum: ["first"]
                    }
                  ]
                },
                body: {
                  type: "integer",
                  minimum: 0
                }
              }
            },
            FunctionExpression: {
              type: "object",
              properties: {
                parameters: {
                  oneOf: [
                    {
                      type: "integer",
                      minimum: 0
                    },
                    {
                      enum: ["first"]
                    }
                  ]
                },
                body: {
                  type: "integer",
                  minimum: 0
                }
              }
            },
            CallExpression: {
              type: "object",
              properties: {
                parameters: {
                  oneOf: [
                    {
                      type: "integer",
                      minimum: 0
                    },
                    {
                      enum: ["first"]
                    }
                  ]
                }
              }
            },
            ArrayExpression: {
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  enum: ["first"]
                }
              ]
            },
            ObjectExpression: {
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  enum: ["first"]
                }
              ]
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        expected: "Expected indentation of {{expected}} but found {{actual}}."
      }
    },
    create(context) {
      const DEFAULT_VARIABLE_INDENT = 1;
      const DEFAULT_PARAMETER_INDENT = null;
      const DEFAULT_FUNCTION_BODY_INDENT = 1;
      let indentType = "space";
      let indentSize = 4;
      const options = {
        SwitchCase: 0,
        VariableDeclarator: {
          var: DEFAULT_VARIABLE_INDENT,
          let: DEFAULT_VARIABLE_INDENT,
          const: DEFAULT_VARIABLE_INDENT
        },
        outerIIFEBody: null,
        FunctionDeclaration: {
          parameters: DEFAULT_PARAMETER_INDENT,
          body: DEFAULT_FUNCTION_BODY_INDENT
        },
        FunctionExpression: {
          parameters: DEFAULT_PARAMETER_INDENT,
          body: DEFAULT_FUNCTION_BODY_INDENT
        },
        CallExpression: {
          arguments: DEFAULT_PARAMETER_INDENT
        },
        ArrayExpression: 1,
        ObjectExpression: 1
      };
      const sourceCode2 = context.sourceCode;
      if (context.options.length) {
        if (context.options[0] === "tab") {
          indentSize = 1;
          indentType = "tab";
        } else if (typeof context.options[0] === "number") {
          indentSize = context.options[0];
          indentType = "space";
        }
        if (context.options[1]) {
          const opts = context.options[1];
          options.SwitchCase = opts.SwitchCase || 0;
          const variableDeclaratorRules = opts.VariableDeclarator;
          if (typeof variableDeclaratorRules === "number") {
            options.VariableDeclarator = {
              var: variableDeclaratorRules,
              let: variableDeclaratorRules,
              const: variableDeclaratorRules
            };
          } else if (typeof variableDeclaratorRules === "object") {
            Object.assign(
              options.VariableDeclarator,
              variableDeclaratorRules
            );
          }
          if (typeof opts.outerIIFEBody === "number") {
            options.outerIIFEBody = opts.outerIIFEBody;
          }
          if (typeof opts.MemberExpression === "number") {
            options.MemberExpression = opts.MemberExpression;
          }
          if (typeof opts.FunctionDeclaration === "object") {
            Object.assign(
              options.FunctionDeclaration,
              opts.FunctionDeclaration
            );
          }
          if (typeof opts.FunctionExpression === "object") {
            Object.assign(
              options.FunctionExpression,
              opts.FunctionExpression
            );
          }
          if (typeof opts.CallExpression === "object") {
            Object.assign(options.CallExpression, opts.CallExpression);
          }
          if (typeof opts.ArrayExpression === "number" || typeof opts.ArrayExpression === "string") {
            options.ArrayExpression = opts.ArrayExpression;
          }
          if (typeof opts.ObjectExpression === "number" || typeof opts.ObjectExpression === "string") {
            options.ObjectExpression = opts.ObjectExpression;
          }
        }
      }
      const caseIndentStore = {};
      function createErrorMessageData(expectedAmount, actualSpaces, actualTabs) {
        const expectedStatement = `${expectedAmount} ${indentType}${expectedAmount === 1 ? "" : "s"}`;
        const foundSpacesWord = `space${actualSpaces === 1 ? "" : "s"}`;
        const foundTabsWord = `tab${actualTabs === 1 ? "" : "s"}`;
        let foundStatement;
        if (actualSpaces > 0 && actualTabs > 0) {
          foundStatement = `${actualSpaces} ${foundSpacesWord} and ${actualTabs} ${foundTabsWord}`;
        } else if (actualSpaces > 0) {
          foundStatement = indentType === "space" ? actualSpaces : `${actualSpaces} ${foundSpacesWord}`;
        } else if (actualTabs > 0) {
          foundStatement = indentType === "tab" ? actualTabs : `${actualTabs} ${foundTabsWord}`;
        } else {
          foundStatement = "0";
        }
        return {
          expected: expectedStatement,
          actual: foundStatement
        };
      }
      function report(node2, needed, gottenSpaces, gottenTabs, loc, isLastNodeCheck) {
        if (gottenSpaces && gottenTabs) {
          return;
        }
        const desiredIndent = (indentType === "space" ? " " : "	").repeat(
          needed
        );
        const textRange = isLastNodeCheck ? [
          node2.range[1] - node2.loc.end.column,
          node2.range[1] - node2.loc.end.column + gottenSpaces + gottenTabs
        ] : [
          node2.range[0] - node2.loc.start.column,
          node2.range[0] - node2.loc.start.column + gottenSpaces + gottenTabs
        ];
        context.report({
          node: node2,
          loc,
          messageId: "expected",
          data: createErrorMessageData(needed, gottenSpaces, gottenTabs),
          fix: (fixer) => fixer.replaceTextRange(textRange, desiredIndent)
        });
      }
      function getNodeIndent(node2, byLastLine) {
        const token = byLastLine ? sourceCode2.getLastToken(node2) : sourceCode2.getFirstToken(node2);
        const srcCharsBeforeNode = sourceCode2.getText(token, token.loc.start.column).split("");
        const indentChars = srcCharsBeforeNode.slice(
          0,
          srcCharsBeforeNode.findIndex(
            (char) => char !== " " && char !== "	"
          )
        );
        const spaces = indentChars.filter((char) => char === " ").length;
        const tabs = indentChars.filter((char) => char === "	").length;
        return {
          space: spaces,
          tab: tabs,
          goodChar: indentType === "space" ? spaces : tabs,
          badChar: indentType === "space" ? tabs : spaces
        };
      }
      function isNodeFirstInLine(node2, byEndLocation) {
        const firstToken = byEndLocation === true ? sourceCode2.getLastToken(node2, 1) : sourceCode2.getTokenBefore(node2), startLine = byEndLocation === true ? node2.loc.end.line : node2.loc.start.line, endLine = firstToken ? firstToken.loc.end.line : -1;
        return startLine !== endLine;
      }
      function checkNodeIndent(node2, neededIndent) {
        const actualIndent = getNodeIndent(node2, false);
        if (node2.type !== "ArrayExpression" && node2.type !== "ObjectExpression" && (actualIndent.goodChar !== neededIndent || actualIndent.badChar !== 0) && isNodeFirstInLine(node2)) {
          report(
            node2,
            neededIndent,
            actualIndent.space,
            actualIndent.tab
          );
        }
        if (node2.type === "IfStatement" && node2.alternate) {
          const elseToken = sourceCode2.getTokenBefore(node2.alternate);
          checkNodeIndent(elseToken, neededIndent);
          if (!isNodeFirstInLine(node2.alternate)) {
            checkNodeIndent(node2.alternate, neededIndent);
          }
        }
        if (node2.type === "TryStatement" && node2.handler) {
          const catchToken = sourceCode2.getFirstToken(node2.handler);
          checkNodeIndent(catchToken, neededIndent);
        }
        if (node2.type === "TryStatement" && node2.finalizer) {
          const finallyToken = sourceCode2.getTokenBefore(node2.finalizer);
          checkNodeIndent(finallyToken, neededIndent);
        }
        if (node2.type === "DoWhileStatement") {
          const whileToken = sourceCode2.getTokenAfter(node2.body);
          checkNodeIndent(whileToken, neededIndent);
        }
      }
      function checkNodesIndent(nodes, indent2) {
        nodes.forEach((node2) => checkNodeIndent(node2, indent2));
      }
      function checkLastNodeLineIndent(node2, lastLineIndent) {
        const lastToken = sourceCode2.getLastToken(node2);
        const endIndent = getNodeIndent(lastToken, true);
        if ((endIndent.goodChar !== lastLineIndent || endIndent.badChar !== 0) && isNodeFirstInLine(node2, true)) {
          report(
            node2,
            lastLineIndent,
            endIndent.space,
            endIndent.tab,
            {
              line: lastToken.loc.start.line,
              column: lastToken.loc.start.column
            },
            true
          );
        }
      }
      function checkLastReturnStatementLineIndent(node2, firstLineIndent) {
        const lastToken = sourceCode2.getLastToken(
          node2,
          astUtils2.isClosingParenToken
        );
        const textBeforeClosingParenthesis = sourceCode2.getText(lastToken, lastToken.loc.start.column).slice(0, -1);
        if (textBeforeClosingParenthesis.trim()) {
          return;
        }
        const endIndent = getNodeIndent(lastToken, true);
        if (endIndent.goodChar !== firstLineIndent) {
          report(
            node2,
            firstLineIndent,
            endIndent.space,
            endIndent.tab,
            {
              line: lastToken.loc.start.line,
              column: lastToken.loc.start.column
            },
            true
          );
        }
      }
      function checkFirstNodeLineIndent(node2, firstLineIndent) {
        const startIndent = getNodeIndent(node2, false);
        if ((startIndent.goodChar !== firstLineIndent || startIndent.badChar !== 0) && isNodeFirstInLine(node2)) {
          report(
            node2,
            firstLineIndent,
            startIndent.space,
            startIndent.tab,
            {
              line: node2.loc.start.line,
              column: node2.loc.start.column
            }
          );
        }
      }
      function getParentNodeByType(node2, type2, stopAtList) {
        let parent = node2.parent;
        const stopAtSet = new Set(stopAtList || ["Program"]);
        while (parent.type !== type2 && !stopAtSet.has(parent.type) && parent.type !== "Program") {
          parent = parent.parent;
        }
        return parent.type === type2 ? parent : null;
      }
      function getVariableDeclaratorNode(node2) {
        return getParentNodeByType(node2, "VariableDeclarator");
      }
      function isNodeInVarOnTop(node2, varNode) {
        return varNode && varNode.parent.loc.start.line === node2.loc.start.line && varNode.parent.declarations.length > 1;
      }
      function isArgBeforeCalleeNodeMultiline(node2) {
        const parent = node2.parent;
        if (parent.arguments.length >= 2 && parent.arguments[1] === node2) {
          return parent.arguments[0].loc.end.line > parent.arguments[0].loc.start.line;
        }
        return false;
      }
      function isOuterIIFE(node2) {
        const parent = node2.parent;
        let stmt = parent.parent;
        if (parent.type !== "CallExpression" || parent.callee !== node2) {
          return false;
        }
        while (stmt.type === "UnaryExpression" && (stmt.operator === "!" || stmt.operator === "~" || stmt.operator === "+" || stmt.operator === "-") || stmt.type === "AssignmentExpression" || stmt.type === "LogicalExpression" || stmt.type === "SequenceExpression" || stmt.type === "VariableDeclarator") {
          stmt = stmt.parent;
        }
        return (stmt.type === "ExpressionStatement" || stmt.type === "VariableDeclaration") && stmt.parent && stmt.parent.type === "Program";
      }
      function checkIndentInFunctionBlock(node2) {
        const calleeNode = node2.parent;
        let indent2;
        if (calleeNode.parent && (calleeNode.parent.type === "Property" || calleeNode.parent.type === "ArrayExpression")) {
          indent2 = getNodeIndent(calleeNode, false).goodChar;
        } else {
          indent2 = getNodeIndent(calleeNode).goodChar;
        }
        if (calleeNode.parent.type === "CallExpression") {
          const calleeParent = calleeNode.parent;
          if (calleeNode.type !== "FunctionExpression" && calleeNode.type !== "ArrowFunctionExpression") {
            if (calleeParent && calleeParent.loc.start.line < node2.loc.start.line) {
              indent2 = getNodeIndent(calleeParent).goodChar;
            }
          } else {
            if (isArgBeforeCalleeNodeMultiline(calleeNode) && calleeParent.callee.loc.start.line === calleeParent.callee.loc.end.line && !isNodeFirstInLine(calleeNode)) {
              indent2 = getNodeIndent(calleeParent).goodChar;
            }
          }
        }
        let functionOffset = indentSize;
        if (options.outerIIFEBody !== null && isOuterIIFE(calleeNode)) {
          functionOffset = options.outerIIFEBody * indentSize;
        } else if (calleeNode.type === "FunctionExpression") {
          functionOffset = options.FunctionExpression.body * indentSize;
        } else if (calleeNode.type === "FunctionDeclaration") {
          functionOffset = options.FunctionDeclaration.body * indentSize;
        }
        indent2 += functionOffset;
        const parentVarNode = getVariableDeclaratorNode(node2);
        if (parentVarNode && isNodeInVarOnTop(node2, parentVarNode)) {
          indent2 += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];
        }
        if (node2.body.length > 0) {
          checkNodesIndent(node2.body, indent2);
        }
        checkLastNodeLineIndent(node2, indent2 - functionOffset);
      }
      function isSingleLineNode(node2) {
        const lastToken = sourceCode2.getLastToken(node2), startLine = node2.loc.start.line, endLine = lastToken.loc.end.line;
        return startLine === endLine;
      }
      function checkIndentInArrayOrObjectBlock(node2) {
        if (isSingleLineNode(node2)) {
          return;
        }
        let elements = node2.type === "ArrayExpression" ? node2.elements : node2.properties;
        elements = elements.filter((elem) => elem !== null);
        let nodeIndent;
        let elementsIndent;
        const parentVarNode = getVariableDeclaratorNode(node2);
        if (isNodeFirstInLine(node2)) {
          const parent = node2.parent;
          nodeIndent = getNodeIndent(parent).goodChar;
          if (!parentVarNode || parentVarNode.loc.start.line !== node2.loc.start.line) {
            if (parent.type !== "VariableDeclarator" || parentVarNode === parentVarNode.parent.declarations[0]) {
              if (parent.type === "VariableDeclarator" && parentVarNode.loc.start.line === parent.loc.start.line) {
                nodeIndent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];
              } else if (parent.type === "ObjectExpression" || parent.type === "ArrayExpression") {
                const parentElements = node2.parent.type === "ObjectExpression" ? node2.parent.properties : node2.parent.elements;
                if (parentElements[0] && parentElements[0].loc.start.line === parent.loc.start.line && parentElements[0].loc.end.line !== parent.loc.start.line) ;
                else if (typeof options[parent.type] === "number") {
                  nodeIndent += options[parent.type] * indentSize;
                } else {
                  nodeIndent = parentElements[0].loc.start.column;
                }
              } else if (parent.type === "CallExpression" || parent.type === "NewExpression") {
                if (typeof options.CallExpression.arguments === "number") {
                  nodeIndent += options.CallExpression.arguments * indentSize;
                } else if (options.CallExpression.arguments === "first") {
                  if (parent.arguments.includes(node2)) {
                    nodeIndent = parent.arguments[0].loc.start.column;
                  }
                } else {
                  nodeIndent += indentSize;
                }
              } else if (parent.type === "LogicalExpression" || parent.type === "ArrowFunctionExpression") {
                nodeIndent += indentSize;
              }
            }
          }
          checkFirstNodeLineIndent(node2, nodeIndent);
        } else {
          nodeIndent = getNodeIndent(node2).goodChar;
        }
        if (options[node2.type] === "first") {
          elementsIndent = elements.length ? elements[0].loc.start.column : 0;
        } else {
          elementsIndent = nodeIndent + indentSize * options[node2.type];
        }
        if (isNodeInVarOnTop(node2, parentVarNode)) {
          elementsIndent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];
        }
        checkNodesIndent(elements, elementsIndent);
        if (elements.length > 0) {
          if (elements.at(-1).loc.end.line === node2.loc.end.line) {
            return;
          }
        }
        checkLastNodeLineIndent(
          node2,
          nodeIndent + (isNodeInVarOnTop(node2, parentVarNode) ? options.VariableDeclarator[parentVarNode.parent.kind] * indentSize : 0)
        );
      }
      function isNodeBodyBlock(node2) {
        return node2.type === "BlockStatement" || node2.type === "ClassBody" || node2.body && node2.body.type === "BlockStatement" || node2.consequent && node2.consequent.type === "BlockStatement";
      }
      function blockIndentationCheck(node2) {
        if (isSingleLineNode(node2)) {
          return;
        }
        if (node2.parent && (node2.parent.type === "FunctionExpression" || node2.parent.type === "FunctionDeclaration" || node2.parent.type === "ArrowFunctionExpression")) {
          checkIndentInFunctionBlock(node2);
          return;
        }
        let indent2;
        let nodesToCheck;
        const statementsWithProperties = [
          "IfStatement",
          "WhileStatement",
          "ForStatement",
          "ForInStatement",
          "ForOfStatement",
          "DoWhileStatement",
          "ClassDeclaration",
          "TryStatement"
        ];
        if (node2.parent && statementsWithProperties.includes(node2.parent.type) && isNodeBodyBlock(node2)) {
          indent2 = getNodeIndent(node2.parent).goodChar;
        } else if (node2.parent && node2.parent.type === "CatchClause") {
          indent2 = getNodeIndent(node2.parent.parent).goodChar;
        } else {
          indent2 = getNodeIndent(node2).goodChar;
        }
        if (node2.type === "IfStatement" && node2.consequent.type !== "BlockStatement") {
          nodesToCheck = [node2.consequent];
        } else if (Array.isArray(node2.body)) {
          nodesToCheck = node2.body;
        } else {
          nodesToCheck = [node2.body];
        }
        if (nodesToCheck.length > 0) {
          checkNodesIndent(nodesToCheck, indent2 + indentSize);
        }
        if (node2.type === "BlockStatement") {
          checkLastNodeLineIndent(node2, indent2);
        }
      }
      function filterOutSameLineVars(node2) {
        return node2.declarations.reduce((finalCollection, elem) => {
          const lastElem = finalCollection.at(-1);
          if (elem.loc.start.line !== node2.loc.start.line && !lastElem || lastElem && lastElem.loc.start.line !== elem.loc.start.line) {
            finalCollection.push(elem);
          }
          return finalCollection;
        }, []);
      }
      function checkIndentInVariableDeclarations(node2) {
        const elements = filterOutSameLineVars(node2);
        const nodeIndent = getNodeIndent(node2).goodChar;
        const lastElement = elements.at(-1);
        const elementsIndent = nodeIndent + indentSize * options.VariableDeclarator[node2.kind];
        checkNodesIndent(elements, elementsIndent);
        if (sourceCode2.getLastToken(node2).loc.end.line <= lastElement.loc.end.line) {
          return;
        }
        const tokenBeforeLastElement = sourceCode2.getTokenBefore(lastElement);
        if (tokenBeforeLastElement.value === ",") {
          checkLastNodeLineIndent(
            node2,
            getNodeIndent(tokenBeforeLastElement).goodChar
          );
        } else {
          checkLastNodeLineIndent(node2, elementsIndent - indentSize);
        }
      }
      function blockLessNodes(node2) {
        if (node2.body.type !== "BlockStatement") {
          blockIndentationCheck(node2);
        }
      }
      function expectedCaseIndent(node2, providedSwitchIndent) {
        const switchNode = node2.type === "SwitchStatement" ? node2 : node2.parent;
        const switchIndent = typeof providedSwitchIndent === "undefined" ? getNodeIndent(switchNode).goodChar : providedSwitchIndent;
        let caseIndent;
        if (caseIndentStore[switchNode.loc.start.line]) {
          return caseIndentStore[switchNode.loc.start.line];
        }
        if (switchNode.cases.length > 0 && options.SwitchCase === 0) {
          caseIndent = switchIndent;
        } else {
          caseIndent = switchIndent + indentSize * options.SwitchCase;
        }
        caseIndentStore[switchNode.loc.start.line] = caseIndent;
        return caseIndent;
      }
      function isWrappedInParenthesis(node2) {
        const regex = /^return\s*\(\s*\)/u;
        const statementWithoutArgument = sourceCode2.getText(node2).replace(sourceCode2.getText(node2.argument), "");
        return regex.test(statementWithoutArgument);
      }
      return {
        Program(node2) {
          if (node2.body.length > 0) {
            checkNodesIndent(node2.body, getNodeIndent(node2).goodChar);
          }
        },
        ClassBody: blockIndentationCheck,
        BlockStatement: blockIndentationCheck,
        WhileStatement: blockLessNodes,
        ForStatement: blockLessNodes,
        ForInStatement: blockLessNodes,
        ForOfStatement: blockLessNodes,
        DoWhileStatement: blockLessNodes,
        IfStatement(node2) {
          if (node2.consequent.type !== "BlockStatement" && node2.consequent.loc.start.line > node2.loc.start.line) {
            blockIndentationCheck(node2);
          }
        },
        VariableDeclaration(node2) {
          if (node2.declarations.at(-1).loc.start.line > node2.declarations[0].loc.start.line) {
            checkIndentInVariableDeclarations(node2);
          }
        },
        ObjectExpression(node2) {
          checkIndentInArrayOrObjectBlock(node2);
        },
        ArrayExpression(node2) {
          checkIndentInArrayOrObjectBlock(node2);
        },
        MemberExpression(node2) {
          if (typeof options.MemberExpression === "undefined") {
            return;
          }
          if (isSingleLineNode(node2)) {
            return;
          }
          if (getParentNodeByType(node2, "VariableDeclarator", [
            "FunctionExpression",
            "ArrowFunctionExpression"
          ])) {
            return;
          }
          if (getParentNodeByType(node2, "AssignmentExpression", [
            "FunctionExpression"
          ])) {
            return;
          }
          const propertyIndent = getNodeIndent(node2).goodChar + indentSize * options.MemberExpression;
          const checkNodes = [node2.property];
          const dot = sourceCode2.getTokenBefore(node2.property);
          if (dot.type === "Punctuator" && dot.value === ".") {
            checkNodes.push(dot);
          }
          checkNodesIndent(checkNodes, propertyIndent);
        },
        SwitchStatement(node2) {
          const switchIndent = getNodeIndent(node2).goodChar;
          const caseIndent = expectedCaseIndent(node2, switchIndent);
          checkNodesIndent(node2.cases, caseIndent);
          checkLastNodeLineIndent(node2, switchIndent);
        },
        SwitchCase(node2) {
          if (isSingleLineNode(node2)) {
            return;
          }
          const caseIndent = expectedCaseIndent(node2);
          checkNodesIndent(node2.consequent, caseIndent + indentSize);
        },
        FunctionDeclaration(node2) {
          if (isSingleLineNode(node2)) {
            return;
          }
          if (options.FunctionDeclaration.parameters === "first" && node2.params.length) {
            checkNodesIndent(
              node2.params.slice(1),
              node2.params[0].loc.start.column
            );
          } else if (options.FunctionDeclaration.parameters !== null) {
            checkNodesIndent(
              node2.params,
              getNodeIndent(node2).goodChar + indentSize * options.FunctionDeclaration.parameters
            );
          }
        },
        FunctionExpression(node2) {
          if (isSingleLineNode(node2)) {
            return;
          }
          if (options.FunctionExpression.parameters === "first" && node2.params.length) {
            checkNodesIndent(
              node2.params.slice(1),
              node2.params[0].loc.start.column
            );
          } else if (options.FunctionExpression.parameters !== null) {
            checkNodesIndent(
              node2.params,
              getNodeIndent(node2).goodChar + indentSize * options.FunctionExpression.parameters
            );
          }
        },
        ReturnStatement(node2) {
          if (isSingleLineNode(node2)) {
            return;
          }
          const firstLineIndent = getNodeIndent(node2).goodChar;
          if (isWrappedInParenthesis(node2)) {
            checkLastReturnStatementLineIndent(node2, firstLineIndent);
          } else {
            checkNodeIndent(node2, firstLineIndent);
          }
        },
        CallExpression(node2) {
          if (isSingleLineNode(node2)) {
            return;
          }
          if (options.CallExpression.arguments === "first" && node2.arguments.length) {
            checkNodesIndent(
              node2.arguments.slice(1),
              node2.arguments[0].loc.start.column
            );
          } else if (options.CallExpression.arguments !== null) {
            checkNodesIndent(
              node2.arguments,
              getNodeIndent(node2).goodChar + indentSize * options.CallExpression.arguments
            );
          }
        }
      };
    }
  };
  return indentLegacy;
}
var initDeclarations;
var hasRequiredInitDeclarations;
function requireInitDeclarations() {
  if (hasRequiredInitDeclarations) return initDeclarations;
  hasRequiredInitDeclarations = 1;
  const CONSTANT_BINDINGS = /* @__PURE__ */ new Set(["const", "using", "await using"]);
  function isForLoop(block) {
    return block.type === "ForInStatement" || block.type === "ForOfStatement" || block.type === "ForStatement";
  }
  function isInitialized(node2) {
    const declaration = node2.parent;
    const block = declaration.parent;
    if (isForLoop(block)) {
      if (block.type === "ForStatement") {
        return block.init === declaration;
      }
      return block.left === declaration;
    }
    return Boolean(node2.init);
  }
  initDeclarations = {
    meta: {
      type: "suggestion",
      dialects: ["typescript", "javascript"],
      language: "javascript",
      docs: {
        description: "Require or disallow initialization in variable declarations",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/init-declarations"
      },
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: ["always"]
              }
            ],
            minItems: 0,
            maxItems: 1
          },
          {
            type: "array",
            items: [
              {
                enum: ["never"]
              },
              {
                type: "object",
                properties: {
                  ignoreForLoopInit: {
                    type: "boolean"
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          }
        ]
      },
      messages: {
        initialized: "Variable '{{idName}}' should be initialized on declaration.",
        notInitialized: "Variable '{{idName}}' should not be initialized on declaration."
      }
    },
    create(context) {
      const MODE_ALWAYS = "always", MODE_NEVER = "never";
      const mode = context.options[0] || MODE_ALWAYS;
      const params = context.options[1] || {};
      let insideDeclaredNamespace = false;
      return {
        TSModuleDeclaration(node2) {
          if (node2.declare) {
            insideDeclaredNamespace = true;
          }
        },
        "TSModuleDeclaration:exit"(node2) {
          if (node2.declare) {
            insideDeclaredNamespace = false;
          }
        },
        "VariableDeclaration:exit"(node2) {
          const kind = node2.kind, declarations = node2.declarations;
          if (node2.declare || insideDeclaredNamespace) {
            return;
          }
          for (let i2 = 0; i2 < declarations.length; ++i2) {
            const declaration = declarations[i2], id2 = declaration.id, initialized = isInitialized(declaration), isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node2.parent);
            let messageId = "";
            if (mode === MODE_ALWAYS && !initialized) {
              messageId = "initialized";
            } else if (mode === MODE_NEVER && !CONSTANT_BINDINGS.has(kind) && initialized && !isIgnoredForLoop) {
              messageId = "notInitialized";
            }
            if (id2.type === "Identifier" && messageId) {
              context.report({
                node: declaration,
                messageId,
                data: {
                  idName: id2.name
                }
              });
            }
          }
        }
      };
    }
  };
  return initDeclarations;
}
var jsxQuotes;
var hasRequiredJsxQuotes;
function requireJsxQuotes() {
  if (hasRequiredJsxQuotes) return jsxQuotes;
  hasRequiredJsxQuotes = 1;
  const astUtils2 = requireAstUtils();
  const QUOTE_SETTINGS = {
    "prefer-double": {
      quote: '"',
      description: "singlequote",
      convert(str) {
        return str.replace(/'/gu, '"');
      }
    },
    "prefer-single": {
      quote: "'",
      description: "doublequote",
      convert(str) {
        return str.replace(/"/gu, "'");
      }
    }
  };
  jsxQuotes = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "jsx-quotes",
              url: "https://eslint.style/rules/jsx-quotes"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce the consistent use of either double or single quotes in JSX attributes",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/jsx-quotes"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["prefer-single", "prefer-double"]
        }
      ],
      messages: {
        unexpected: "Unexpected usage of {{description}}."
      }
    },
    create(context) {
      const quoteOption = context.options[0] || "prefer-double", setting = QUOTE_SETTINGS[quoteOption];
      function usesExpectedQuotes(node2) {
        return node2.value.includes(setting.quote) || astUtils2.isSurroundedBy(node2.raw, setting.quote);
      }
      return {
        JSXAttribute(node2) {
          const attributeValue = node2.value;
          if (attributeValue && astUtils2.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {
            context.report({
              node: attributeValue,
              messageId: "unexpected",
              data: {
                description: setting.description
              },
              fix(fixer) {
                return fixer.replaceText(
                  attributeValue,
                  setting.convert(attributeValue.raw)
                );
              }
            });
          }
        }
      };
    }
  };
  return jsxQuotes;
}
var keySpacing;
var hasRequiredKeySpacing;
function requireKeySpacing() {
  if (hasRequiredKeySpacing) return keySpacing;
  hasRequiredKeySpacing = 1;
  const astUtils2 = requireAstUtils();
  const { getGraphemeCount } = requireStringUtils();
  function containsLineTerminator(str) {
    return astUtils2.LINEBREAK_MATCHER.test(str);
  }
  function last(arr) {
    return arr.at(-1);
  }
  function isSingleLine(node2) {
    return node2.loc.end.line === node2.loc.start.line;
  }
  function isSingleLineProperties(properties2) {
    const [firstProp] = properties2, lastProp = last(properties2);
    return firstProp.loc.start.line === lastProp.loc.end.line;
  }
  function initOptionProperty(toOptions, fromOptions) {
    toOptions.mode = fromOptions.mode || "strict";
    if (typeof fromOptions.beforeColon !== "undefined") {
      toOptions.beforeColon = +fromOptions.beforeColon;
    } else {
      toOptions.beforeColon = 0;
    }
    if (typeof fromOptions.afterColon !== "undefined") {
      toOptions.afterColon = +fromOptions.afterColon;
    } else {
      toOptions.afterColon = 1;
    }
    if (typeof fromOptions.align !== "undefined") {
      if (typeof fromOptions.align === "object") {
        toOptions.align = fromOptions.align;
      } else {
        toOptions.align = {
          on: fromOptions.align,
          mode: toOptions.mode,
          beforeColon: toOptions.beforeColon,
          afterColon: toOptions.afterColon
        };
      }
    }
    return toOptions;
  }
  function initOptions(toOptions, fromOptions) {
    if (typeof fromOptions.align === "object") {
      toOptions.align = initOptionProperty({}, fromOptions.align);
      toOptions.align.on = fromOptions.align.on || "colon";
      toOptions.align.mode = fromOptions.align.mode || "strict";
      toOptions.multiLine = initOptionProperty(
        {},
        fromOptions.multiLine || fromOptions
      );
      toOptions.singleLine = initOptionProperty(
        {},
        fromOptions.singleLine || fromOptions
      );
    } else {
      toOptions.multiLine = initOptionProperty(
        {},
        fromOptions.multiLine || fromOptions
      );
      toOptions.singleLine = initOptionProperty(
        {},
        fromOptions.singleLine || fromOptions
      );
      if (toOptions.multiLine.align) {
        toOptions.align = {
          on: toOptions.multiLine.align.on,
          mode: toOptions.multiLine.align.mode || toOptions.multiLine.mode,
          beforeColon: toOptions.multiLine.align.beforeColon,
          afterColon: toOptions.multiLine.align.afterColon
        };
      }
    }
    return toOptions;
  }
  keySpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "key-spacing",
              url: "https://eslint.style/rules/key-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing between keys and values in object literal properties",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/key-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          anyOf: [
            {
              type: "object",
              properties: {
                align: {
                  anyOf: [
                    {
                      enum: ["colon", "value"]
                    },
                    {
                      type: "object",
                      properties: {
                        mode: {
                          enum: ["strict", "minimum"]
                        },
                        on: {
                          enum: ["colon", "value"]
                        },
                        beforeColon: {
                          type: "boolean"
                        },
                        afterColon: {
                          type: "boolean"
                        }
                      },
                      additionalProperties: false
                    }
                  ]
                },
                mode: {
                  enum: ["strict", "minimum"]
                },
                beforeColon: {
                  type: "boolean"
                },
                afterColon: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            },
            {
              type: "object",
              properties: {
                singleLine: {
                  type: "object",
                  properties: {
                    mode: {
                      enum: ["strict", "minimum"]
                    },
                    beforeColon: {
                      type: "boolean"
                    },
                    afterColon: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                },
                multiLine: {
                  type: "object",
                  properties: {
                    align: {
                      anyOf: [
                        {
                          enum: ["colon", "value"]
                        },
                        {
                          type: "object",
                          properties: {
                            mode: {
                              enum: [
                                "strict",
                                "minimum"
                              ]
                            },
                            on: {
                              enum: [
                                "colon",
                                "value"
                              ]
                            },
                            beforeColon: {
                              type: "boolean"
                            },
                            afterColon: {
                              type: "boolean"
                            }
                          },
                          additionalProperties: false
                        }
                      ]
                    },
                    mode: {
                      enum: ["strict", "minimum"]
                    },
                    beforeColon: {
                      type: "boolean"
                    },
                    afterColon: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                }
              },
              additionalProperties: false
            },
            {
              type: "object",
              properties: {
                singleLine: {
                  type: "object",
                  properties: {
                    mode: {
                      enum: ["strict", "minimum"]
                    },
                    beforeColon: {
                      type: "boolean"
                    },
                    afterColon: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                },
                multiLine: {
                  type: "object",
                  properties: {
                    mode: {
                      enum: ["strict", "minimum"]
                    },
                    beforeColon: {
                      type: "boolean"
                    },
                    afterColon: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                },
                align: {
                  type: "object",
                  properties: {
                    mode: {
                      enum: ["strict", "minimum"]
                    },
                    on: {
                      enum: ["colon", "value"]
                    },
                    beforeColon: {
                      type: "boolean"
                    },
                    afterColon: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        extraKey: "Extra space after {{computed}}key '{{key}}'.",
        extraValue: "Extra space before value for {{computed}}key '{{key}}'.",
        missingKey: "Missing space after {{computed}}key '{{key}}'.",
        missingValue: "Missing space before value for {{computed}}key '{{key}}'."
      }
    },
    create(context) {
      const options = context.options[0] || {}, ruleOptions = initOptions({}, options), multiLineOptions = ruleOptions.multiLine, singleLineOptions = ruleOptions.singleLine, alignmentOptions = ruleOptions.align || null;
      const sourceCode2 = context.sourceCode;
      function isKeyValueProperty(property) {
        return !(property.method || property.shorthand || property.kind !== "init" || property.type !== "Property");
      }
      function getNextColon(node2) {
        return sourceCode2.getTokenAfter(node2, astUtils2.isColonToken);
      }
      function getLastTokenBeforeColon(node2) {
        const colonToken = getNextColon(node2);
        return sourceCode2.getTokenBefore(colonToken);
      }
      function getFirstTokenAfterColon(node2) {
        const colonToken = getNextColon(node2);
        return sourceCode2.getTokenAfter(colonToken);
      }
      function continuesPropertyGroup(lastMember, candidate) {
        const groupEndLine = lastMember.loc.start.line, candidateValueStartLine = (isKeyValueProperty(candidate) ? getFirstTokenAfterColon(candidate.key) : candidate).loc.start.line;
        if (candidateValueStartLine - groupEndLine <= 1) {
          return true;
        }
        const leadingComments = sourceCode2.getCommentsBefore(candidate);
        if (leadingComments.length && leadingComments[0].loc.start.line - groupEndLine <= 1 && candidateValueStartLine - last(leadingComments).loc.end.line <= 1) {
          for (let i2 = 1; i2 < leadingComments.length; i2++) {
            if (leadingComments[i2].loc.start.line - leadingComments[i2 - 1].loc.end.line > 1) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      function getKey(property) {
        const key = property.key;
        if (property.computed) {
          return sourceCode2.getText().slice(key.range[0], key.range[1]);
        }
        return astUtils2.getStaticPropertyName(property);
      }
      function report(property, side, whitespace, expected, mode) {
        const diff = whitespace.length - expected;
        if ((diff && mode === "strict" || diff < 0 && mode === "minimum" || diff > 0 && !expected && mode === "minimum") && !(expected && containsLineTerminator(whitespace))) {
          const nextColon = getNextColon(property.key), tokenBeforeColon = sourceCode2.getTokenBefore(nextColon, {
            includeComments: true
          }), tokenAfterColon = sourceCode2.getTokenAfter(nextColon, {
            includeComments: true
          }), isKeySide = side === "key", isExtra = diff > 0, diffAbs = Math.abs(diff), spaces = Array(diffAbs + 1).join(" ");
          const locStart = isKeySide ? tokenBeforeColon.loc.end : nextColon.loc.start;
          const locEnd = isKeySide ? nextColon.loc.start : tokenAfterColon.loc.start;
          const missingLoc = isKeySide ? tokenBeforeColon.loc : tokenAfterColon.loc;
          const loc = isExtra ? { start: locStart, end: locEnd } : missingLoc;
          let fix;
          if (isExtra) {
            let range;
            if (isKeySide) {
              range = [
                tokenBeforeColon.range[1],
                tokenBeforeColon.range[1] + diffAbs
              ];
            } else {
              range = [
                tokenAfterColon.range[0] - diffAbs,
                tokenAfterColon.range[0]
              ];
            }
            fix = function(fixer) {
              return fixer.removeRange(range);
            };
          } else {
            if (isKeySide) {
              fix = function(fixer) {
                return fixer.insertTextAfter(
                  tokenBeforeColon,
                  spaces
                );
              };
            } else {
              fix = function(fixer) {
                return fixer.insertTextBefore(
                  tokenAfterColon,
                  spaces
                );
              };
            }
          }
          let messageId;
          if (isExtra) {
            messageId = side === "key" ? "extraKey" : "extraValue";
          } else {
            messageId = side === "key" ? "missingKey" : "missingValue";
          }
          context.report({
            node: property[side],
            loc,
            messageId,
            data: {
              computed: property.computed ? "computed " : "",
              key: getKey(property)
            },
            fix
          });
        }
      }
      function getKeyWidth(property) {
        const startToken = sourceCode2.getFirstToken(property);
        const endToken = getLastTokenBeforeColon(property.key);
        return getGraphemeCount(
          sourceCode2.getText().slice(startToken.range[0], endToken.range[1])
        );
      }
      function getPropertyWhitespace(property) {
        const whitespace = /(\s*):(\s*)/u.exec(
          sourceCode2.getText().slice(property.key.range[1], property.value.range[0])
        );
        if (whitespace) {
          return {
            beforeColon: whitespace[1],
            afterColon: whitespace[2]
          };
        }
        return null;
      }
      function createGroups(node2) {
        if (node2.properties.length === 1) {
          return [node2.properties];
        }
        return node2.properties.reduce(
          (groups, property) => {
            const currentGroup = last(groups), prev = last(currentGroup);
            if (!prev || continuesPropertyGroup(prev, property)) {
              currentGroup.push(property);
            } else {
              groups.push([property]);
            }
            return groups;
          },
          [[]]
        );
      }
      function verifyGroupAlignment(properties2) {
        const length = properties2.length, widths = properties2.map(getKeyWidth), align = alignmentOptions.on;
        let targetWidth = Math.max(...widths), beforeColon, afterColon, mode;
        if (alignmentOptions && length > 1) {
          beforeColon = alignmentOptions.beforeColon;
          afterColon = alignmentOptions.afterColon;
          mode = alignmentOptions.mode;
        } else {
          beforeColon = multiLineOptions.beforeColon;
          afterColon = multiLineOptions.afterColon;
          mode = alignmentOptions.mode;
        }
        targetWidth += align === "colon" ? beforeColon : afterColon;
        for (let i2 = 0; i2 < length; i2++) {
          const property = properties2[i2];
          const whitespace = getPropertyWhitespace(property);
          if (whitespace) {
            const width = widths[i2];
            if (align === "value") {
              report(
                property,
                "key",
                whitespace.beforeColon,
                beforeColon,
                mode
              );
              report(
                property,
                "value",
                whitespace.afterColon,
                targetWidth - width,
                mode
              );
            } else {
              report(
                property,
                "key",
                whitespace.beforeColon,
                targetWidth - width,
                mode
              );
              report(
                property,
                "value",
                whitespace.afterColon,
                afterColon,
                mode
              );
            }
          }
        }
      }
      function verifySpacing(node2, lineOptions) {
        const actual = getPropertyWhitespace(node2);
        if (actual) {
          report(
            node2,
            "key",
            actual.beforeColon,
            lineOptions.beforeColon,
            lineOptions.mode
          );
          report(
            node2,
            "value",
            actual.afterColon,
            lineOptions.afterColon,
            lineOptions.mode
          );
        }
      }
      function verifyListSpacing(properties2, lineOptions) {
        const length = properties2.length;
        for (let i2 = 0; i2 < length; i2++) {
          verifySpacing(properties2[i2], lineOptions);
        }
      }
      function verifyAlignment(node2) {
        createGroups(node2).forEach((group) => {
          const properties2 = group.filter(isKeyValueProperty);
          if (properties2.length > 0 && isSingleLineProperties(properties2)) {
            verifyListSpacing(properties2, multiLineOptions);
          } else {
            verifyGroupAlignment(properties2);
          }
        });
      }
      if (alignmentOptions) {
        return {
          ObjectExpression(node2) {
            if (isSingleLine(node2)) {
              verifyListSpacing(
                node2.properties.filter(isKeyValueProperty),
                singleLineOptions
              );
            } else {
              verifyAlignment(node2);
            }
          }
        };
      }
      return {
        Property(node2) {
          verifySpacing(
            node2,
            isSingleLine(node2.parent) ? singleLineOptions : multiLineOptions
          );
        }
      };
    }
  };
  return keySpacing;
}
var keywordSpacing;
var hasRequiredKeywordSpacing;
function requireKeywordSpacing() {
  if (hasRequiredKeywordSpacing) return keywordSpacing;
  hasRequiredKeywordSpacing = 1;
  const astUtils2 = requireAstUtils(), keywords2 = requireKeywords();
  const PREV_TOKEN = /^[)\]}>]$/u;
  const NEXT_TOKEN = /^(?:[([{<~!]|\+\+?|--?)$/u;
  const PREV_TOKEN_M = /^[)\]}>*]$/u;
  const NEXT_TOKEN_M = /^[{*]$/u;
  const TEMPLATE_OPEN_PAREN = /\$\{$/u;
  const TEMPLATE_CLOSE_PAREN = /^\}/u;
  const CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template|PrivateIdentifier)$/u;
  const KEYS = keywords2.concat([
    "as",
    "async",
    "await",
    "from",
    "get",
    "let",
    "of",
    "set",
    "yield"
  ]);
  (function() {
    KEYS.sort();
    for (let i2 = 1; i2 < KEYS.length; ++i2) {
      if (KEYS[i2] === KEYS[i2 - 1]) {
        throw new Error(
          `Duplication was found in the keyword list: ${KEYS[i2]}`
        );
      }
    }
  })();
  function isOpenParenOfTemplate(token) {
    return token.type === "Template" && TEMPLATE_OPEN_PAREN.test(token.value);
  }
  function isCloseParenOfTemplate(token) {
    return token.type === "Template" && TEMPLATE_CLOSE_PAREN.test(token.value);
  }
  keywordSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "keyword-spacing",
              url: "https://eslint.style/rules/keyword-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing before and after keywords",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/keyword-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            before: { type: "boolean", default: true },
            after: { type: "boolean", default: true },
            overrides: {
              type: "object",
              properties: KEYS.reduce((retv, key) => {
                retv[key] = {
                  type: "object",
                  properties: {
                    before: { type: "boolean" },
                    after: { type: "boolean" }
                  },
                  additionalProperties: false
                };
                return retv;
              }, {}),
              additionalProperties: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        expectedBefore: 'Expected space(s) before "{{value}}".',
        expectedAfter: 'Expected space(s) after "{{value}}".',
        unexpectedBefore: 'Unexpected space(s) before "{{value}}".',
        unexpectedAfter: 'Unexpected space(s) after "{{value}}".'
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const tokensToIgnore = /* @__PURE__ */ new WeakSet();
      function expectSpaceBefore(token, pattern2) {
        const prevToken = sourceCode2.getTokenBefore(token);
        if (prevToken && (CHECK_TYPE.test(prevToken.type) || pattern2.test(prevToken.value)) && !isOpenParenOfTemplate(prevToken) && !tokensToIgnore.has(prevToken) && astUtils2.isTokenOnSameLine(prevToken, token) && !sourceCode2.isSpaceBetweenTokens(prevToken, token)) {
          context.report({
            loc: token.loc,
            messageId: "expectedBefore",
            data: token,
            fix(fixer) {
              return fixer.insertTextBefore(token, " ");
            }
          });
        }
      }
      function unexpectSpaceBefore(token, pattern2) {
        const prevToken = sourceCode2.getTokenBefore(token);
        if (prevToken && (CHECK_TYPE.test(prevToken.type) || pattern2.test(prevToken.value)) && !isOpenParenOfTemplate(prevToken) && !tokensToIgnore.has(prevToken) && astUtils2.isTokenOnSameLine(prevToken, token) && sourceCode2.isSpaceBetweenTokens(prevToken, token)) {
          context.report({
            loc: { start: prevToken.loc.end, end: token.loc.start },
            messageId: "unexpectedBefore",
            data: token,
            fix(fixer) {
              return fixer.removeRange([
                prevToken.range[1],
                token.range[0]
              ]);
            }
          });
        }
      }
      function expectSpaceAfter(token, pattern2) {
        const nextToken = sourceCode2.getTokenAfter(token);
        if (nextToken && (CHECK_TYPE.test(nextToken.type) || pattern2.test(nextToken.value)) && !isCloseParenOfTemplate(nextToken) && !tokensToIgnore.has(nextToken) && astUtils2.isTokenOnSameLine(token, nextToken) && !sourceCode2.isSpaceBetweenTokens(token, nextToken)) {
          context.report({
            loc: token.loc,
            messageId: "expectedAfter",
            data: token,
            fix(fixer) {
              return fixer.insertTextAfter(token, " ");
            }
          });
        }
      }
      function unexpectSpaceAfter(token, pattern2) {
        const nextToken = sourceCode2.getTokenAfter(token);
        if (nextToken && (CHECK_TYPE.test(nextToken.type) || pattern2.test(nextToken.value)) && !isCloseParenOfTemplate(nextToken) && !tokensToIgnore.has(nextToken) && astUtils2.isTokenOnSameLine(token, nextToken) && sourceCode2.isSpaceBetweenTokens(token, nextToken)) {
          context.report({
            loc: { start: token.loc.end, end: nextToken.loc.start },
            messageId: "unexpectedAfter",
            data: token,
            fix(fixer) {
              return fixer.removeRange([
                token.range[1],
                nextToken.range[0]
              ]);
            }
          });
        }
      }
      function parseOptions(options = {}) {
        const before = options.before !== false;
        const after = options.after !== false;
        const defaultValue = {
          before: before ? expectSpaceBefore : unexpectSpaceBefore,
          after: after ? expectSpaceAfter : unexpectSpaceAfter
        };
        const overrides = options && options.overrides || {};
        const retv = /* @__PURE__ */ Object.create(null);
        for (let i2 = 0; i2 < KEYS.length; ++i2) {
          const key = KEYS[i2];
          const override = overrides[key];
          if (override) {
            const thisBefore = "before" in override ? override.before : before;
            const thisAfter = "after" in override ? override.after : after;
            retv[key] = {
              before: thisBefore ? expectSpaceBefore : unexpectSpaceBefore,
              after: thisAfter ? expectSpaceAfter : unexpectSpaceAfter
            };
          } else {
            retv[key] = defaultValue;
          }
        }
        return retv;
      }
      const checkMethodMap = parseOptions(context.options[0]);
      function checkSpacingBefore(token, pattern2) {
        checkMethodMap[token.value].before(token, pattern2 || PREV_TOKEN);
      }
      function checkSpacingAfter(token, pattern2) {
        checkMethodMap[token.value].after(token, pattern2 || NEXT_TOKEN);
      }
      function checkSpacingAround(token) {
        checkSpacingBefore(token);
        checkSpacingAfter(token);
      }
      function checkSpacingAroundFirstToken(node2) {
        const firstToken = node2 && sourceCode2.getFirstToken(node2);
        if (firstToken && firstToken.type === "Keyword") {
          checkSpacingAround(firstToken);
        }
      }
      function checkSpacingBeforeFirstToken(node2) {
        const firstToken = node2 && sourceCode2.getFirstToken(node2);
        if (firstToken && firstToken.type === "Keyword") {
          checkSpacingBefore(firstToken);
        }
      }
      function checkSpacingAroundTokenBefore(node2) {
        if (node2) {
          const token = sourceCode2.getTokenBefore(
            node2,
            astUtils2.isKeywordToken
          );
          checkSpacingAround(token);
        }
      }
      function checkSpacingForFunction(node2) {
        const firstToken = node2 && sourceCode2.getFirstToken(node2);
        if (firstToken && (firstToken.type === "Keyword" && firstToken.value === "function" || firstToken.value === "async")) {
          checkSpacingBefore(firstToken);
        }
      }
      function checkSpacingForClass(node2) {
        checkSpacingAroundFirstToken(node2);
        checkSpacingAroundTokenBefore(node2.superClass);
      }
      function checkSpacingForIfStatement(node2) {
        checkSpacingAroundFirstToken(node2);
        checkSpacingAroundTokenBefore(node2.alternate);
      }
      function checkSpacingForTryStatement(node2) {
        checkSpacingAroundFirstToken(node2);
        checkSpacingAroundFirstToken(node2.handler);
        checkSpacingAroundTokenBefore(node2.finalizer);
      }
      function checkSpacingForDoWhileStatement(node2) {
        checkSpacingAroundFirstToken(node2);
        checkSpacingAroundTokenBefore(node2.test);
      }
      function checkSpacingForForInStatement(node2) {
        checkSpacingAroundFirstToken(node2);
        const inToken = sourceCode2.getTokenBefore(
          node2.right,
          astUtils2.isNotOpeningParenToken
        );
        const previousToken = sourceCode2.getTokenBefore(inToken);
        if (previousToken.type !== "PrivateIdentifier") {
          checkSpacingBefore(inToken);
        }
        checkSpacingAfter(inToken);
      }
      function checkSpacingForForOfStatement(node2) {
        if (node2.await) {
          checkSpacingBefore(sourceCode2.getFirstToken(node2, 0));
          checkSpacingAfter(sourceCode2.getFirstToken(node2, 1));
        } else {
          checkSpacingAroundFirstToken(node2);
        }
        const ofToken = sourceCode2.getTokenBefore(
          node2.right,
          astUtils2.isNotOpeningParenToken
        );
        const previousToken = sourceCode2.getTokenBefore(ofToken);
        if (previousToken.type !== "PrivateIdentifier") {
          checkSpacingBefore(ofToken);
        }
        checkSpacingAfter(ofToken);
      }
      function checkSpacingForModuleDeclaration(node2) {
        const firstToken = sourceCode2.getFirstToken(node2);
        checkSpacingBefore(firstToken, PREV_TOKEN_M);
        checkSpacingAfter(firstToken, NEXT_TOKEN_M);
        if (node2.type === "ExportDefaultDeclaration") {
          checkSpacingAround(sourceCode2.getTokenAfter(firstToken));
        }
        if (node2.type === "ExportAllDeclaration" && node2.exported) {
          const asToken = sourceCode2.getTokenBefore(node2.exported);
          checkSpacingBefore(asToken, PREV_TOKEN_M);
          checkSpacingAfter(asToken, NEXT_TOKEN_M);
        }
        if (node2.source) {
          const fromToken = sourceCode2.getTokenBefore(node2.source);
          checkSpacingBefore(fromToken, PREV_TOKEN_M);
          checkSpacingAfter(fromToken, NEXT_TOKEN_M);
        }
      }
      function checkSpacingForImportSpecifier(node2) {
        if (node2.imported.range[0] !== node2.local.range[0]) {
          const asToken = sourceCode2.getTokenBefore(node2.local);
          checkSpacingBefore(asToken, PREV_TOKEN_M);
        }
      }
      function checkSpacingForExportSpecifier(node2) {
        if (node2.local.range[0] !== node2.exported.range[0]) {
          const asToken = sourceCode2.getTokenBefore(node2.exported);
          checkSpacingBefore(asToken, PREV_TOKEN_M);
          checkSpacingAfter(asToken, NEXT_TOKEN_M);
        }
      }
      function checkSpacingForImportNamespaceSpecifier(node2) {
        const asToken = sourceCode2.getFirstToken(node2, 1);
        checkSpacingBefore(asToken, PREV_TOKEN_M);
      }
      function checkSpacingForProperty(node2) {
        if (node2.static) {
          checkSpacingAroundFirstToken(node2);
        }
        if (node2.kind === "get" || node2.kind === "set" || (node2.method || node2.type === "MethodDefinition") && node2.value.async) {
          const token = sourceCode2.getTokenBefore(node2.key, (tok) => {
            switch (tok.value) {
              case "get":
              case "set":
              case "async":
                return true;
              default:
                return false;
            }
          });
          if (!token) {
            throw new Error(
              "Failed to find token get, set, or async beside method name"
            );
          }
          checkSpacingAround(token);
        }
      }
      function checkSpacingForAwaitExpression(node2) {
        checkSpacingBefore(sourceCode2.getFirstToken(node2));
      }
      return {
        // Statements
        DebuggerStatement: checkSpacingAroundFirstToken,
        WithStatement: checkSpacingAroundFirstToken,
        // Statements - Control flow
        BreakStatement: checkSpacingAroundFirstToken,
        ContinueStatement: checkSpacingAroundFirstToken,
        ReturnStatement: checkSpacingAroundFirstToken,
        ThrowStatement: checkSpacingAroundFirstToken,
        TryStatement: checkSpacingForTryStatement,
        // Statements - Choice
        IfStatement: checkSpacingForIfStatement,
        SwitchStatement: checkSpacingAroundFirstToken,
        SwitchCase: checkSpacingAroundFirstToken,
        // Statements - Loops
        DoWhileStatement: checkSpacingForDoWhileStatement,
        ForInStatement: checkSpacingForForInStatement,
        ForOfStatement: checkSpacingForForOfStatement,
        ForStatement: checkSpacingAroundFirstToken,
        WhileStatement: checkSpacingAroundFirstToken,
        // Statements - Declarations
        ClassDeclaration: checkSpacingForClass,
        ExportNamedDeclaration: checkSpacingForModuleDeclaration,
        ExportDefaultDeclaration: checkSpacingForModuleDeclaration,
        ExportAllDeclaration: checkSpacingForModuleDeclaration,
        FunctionDeclaration: checkSpacingForFunction,
        ImportDeclaration: checkSpacingForModuleDeclaration,
        VariableDeclaration: checkSpacingAroundFirstToken,
        // Expressions
        ArrowFunctionExpression: checkSpacingForFunction,
        AwaitExpression: checkSpacingForAwaitExpression,
        ClassExpression: checkSpacingForClass,
        FunctionExpression: checkSpacingForFunction,
        NewExpression: checkSpacingBeforeFirstToken,
        Super: checkSpacingBeforeFirstToken,
        ThisExpression: checkSpacingBeforeFirstToken,
        UnaryExpression: checkSpacingBeforeFirstToken,
        YieldExpression: checkSpacingBeforeFirstToken,
        // Others
        ImportSpecifier: checkSpacingForImportSpecifier,
        ExportSpecifier: checkSpacingForExportSpecifier,
        ImportNamespaceSpecifier: checkSpacingForImportNamespaceSpecifier,
        MethodDefinition: checkSpacingForProperty,
        PropertyDefinition: checkSpacingForProperty,
        StaticBlock: checkSpacingAroundFirstToken,
        Property: checkSpacingForProperty,
        // To avoid conflicts with `space-infix-ops`, e.g. `a > this.b`
        "BinaryExpression[operator='>']"(node2) {
          const operatorToken = sourceCode2.getTokenBefore(
            node2.right,
            astUtils2.isNotOpeningParenToken
          );
          tokensToIgnore.add(operatorToken);
        }
      };
    }
  };
  return keywordSpacing;
}
var lineCommentPosition;
var hasRequiredLineCommentPosition;
function requireLineCommentPosition() {
  if (hasRequiredLineCommentPosition) return lineCommentPosition;
  hasRequiredLineCommentPosition = 1;
  const astUtils2 = requireAstUtils();
  lineCommentPosition = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "9.3.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "line-comment-position",
              url: "https://eslint.style/rules/line-comment-position"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce position of line comments",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/line-comment-position"
      },
      schema: [
        {
          oneOf: [
            {
              enum: ["above", "beside"]
            },
            {
              type: "object",
              properties: {
                position: {
                  enum: ["above", "beside"]
                },
                ignorePattern: {
                  type: "string"
                },
                applyDefaultPatterns: {
                  type: "boolean"
                },
                applyDefaultIgnorePatterns: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        above: "Expected comment to be above code.",
        beside: "Expected comment to be beside code."
      }
    },
    create(context) {
      const options = context.options[0];
      let above, ignorePattern, applyDefaultIgnorePatterns = true;
      if (!options || typeof options === "string") {
        above = !options || options === "above";
      } else {
        above = !options.position || options.position === "above";
        ignorePattern = options.ignorePattern;
        if (Object.hasOwn(options, "applyDefaultIgnorePatterns")) {
          applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;
        } else {
          applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;
        }
      }
      const defaultIgnoreRegExp = astUtils2.COMMENTS_IGNORE_PATTERN;
      const fallThroughRegExp = /^\s*falls?\s?through/u;
      const customIgnoreRegExp = new RegExp(ignorePattern, "u");
      const sourceCode2 = context.sourceCode;
      return {
        Program() {
          const comments = sourceCode2.getAllComments();
          comments.filter((token) => token.type === "Line").forEach((node2) => {
            if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node2.value) || fallThroughRegExp.test(node2.value))) {
              return;
            }
            if (ignorePattern && customIgnoreRegExp.test(node2.value)) {
              return;
            }
            const previous = sourceCode2.getTokenBefore(node2, {
              includeComments: true
            });
            const isOnSameLine = previous && previous.loc.end.line === node2.loc.start.line;
            if (above) {
              if (isOnSameLine) {
                context.report({
                  node: node2,
                  messageId: "above"
                });
              }
            } else {
              if (!isOnSameLine) {
                context.report({
                  node: node2,
                  messageId: "beside"
                });
              }
            }
          });
        }
      };
    }
  };
  return lineCommentPosition;
}
var linebreakStyle;
var hasRequiredLinebreakStyle;
function requireLinebreakStyle() {
  if (hasRequiredLinebreakStyle) return linebreakStyle;
  hasRequiredLinebreakStyle = 1;
  const astUtils2 = requireAstUtils();
  linebreakStyle = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "linebreak-style",
              url: "https://eslint.style/rules/linebreak-style"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent linebreak style",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/linebreak-style"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["unix", "windows"]
        }
      ],
      messages: {
        expectedLF: "Expected linebreaks to be 'LF' but found 'CRLF'.",
        expectedCRLF: "Expected linebreaks to be 'CRLF' but found 'LF'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function createFix(range, text) {
        return function(fixer) {
          return fixer.replaceTextRange(range, text);
        };
      }
      return {
        Program: function checkForLinebreakStyle(node2) {
          const linebreakStyle2 = context.options[0] || "unix", expectedLF = linebreakStyle2 === "unix", expectedLFChars = expectedLF ? "\n" : "\r\n", source = sourceCode2.getText(), pattern2 = astUtils2.createGlobalLinebreakMatcher();
          let match;
          let i2 = 0;
          while ((match = pattern2.exec(source)) !== null) {
            i2++;
            if (match[0] === expectedLFChars) {
              continue;
            }
            const index = match.index;
            const range = [index, index + match[0].length];
            context.report({
              node: node2,
              loc: {
                start: {
                  line: i2,
                  column: sourceCode2.lines[i2 - 1].length
                },
                end: {
                  line: i2 + 1,
                  column: 0
                }
              },
              messageId: expectedLF ? "expectedLF" : "expectedCRLF",
              fix: createFix(range, expectedLFChars)
            });
          }
        }
      };
    }
  };
  return linebreakStyle;
}
var linesAroundComment;
var hasRequiredLinesAroundComment;
function requireLinesAroundComment() {
  if (hasRequiredLinesAroundComment) return linesAroundComment;
  hasRequiredLinesAroundComment = 1;
  const astUtils2 = requireAstUtils();
  function getEmptyLineNums(lines) {
    const emptyLines = lines.map((line, i2) => ({
      code: line.trim(),
      num: i2 + 1
    })).filter((line) => !line.code).map((line) => line.num);
    return emptyLines;
  }
  function getCommentLineNums(comments) {
    const lines = [];
    comments.forEach((token) => {
      const start = token.loc.start.line;
      const end = token.loc.end.line;
      lines.push(start, end);
    });
    return lines;
  }
  linesAroundComment = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "lines-around-comment",
              url: "https://eslint.style/rules/lines-around-comment"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require empty lines around comments",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/lines-around-comment"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            beforeBlockComment: {
              type: "boolean",
              default: true
            },
            afterBlockComment: {
              type: "boolean",
              default: false
            },
            beforeLineComment: {
              type: "boolean",
              default: false
            },
            afterLineComment: {
              type: "boolean",
              default: false
            },
            allowBlockStart: {
              type: "boolean",
              default: false
            },
            allowBlockEnd: {
              type: "boolean",
              default: false
            },
            allowClassStart: {
              type: "boolean"
            },
            allowClassEnd: {
              type: "boolean"
            },
            allowObjectStart: {
              type: "boolean"
            },
            allowObjectEnd: {
              type: "boolean"
            },
            allowArrayStart: {
              type: "boolean"
            },
            allowArrayEnd: {
              type: "boolean"
            },
            ignorePattern: {
              type: "string"
            },
            applyDefaultIgnorePatterns: {
              type: "boolean"
            },
            afterHashbangComment: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        after: "Expected line after comment.",
        before: "Expected line before comment."
      }
    },
    create(context) {
      const options = Object.assign({}, context.options[0]);
      const ignorePattern = options.ignorePattern;
      const defaultIgnoreRegExp = astUtils2.COMMENTS_IGNORE_PATTERN;
      const customIgnoreRegExp = new RegExp(ignorePattern, "u");
      const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;
      options.beforeBlockComment = typeof options.beforeBlockComment !== "undefined" ? options.beforeBlockComment : true;
      const sourceCode2 = context.sourceCode;
      const lines = sourceCode2.lines, numLines = lines.length + 1, comments = sourceCode2.getAllComments(), commentLines = getCommentLineNums(comments), emptyLines = getEmptyLineNums(lines), commentAndEmptyLines = new Set(commentLines.concat(emptyLines));
      function codeAroundComment(token) {
        let currentToken = token;
        do {
          currentToken = sourceCode2.getTokenBefore(currentToken, {
            includeComments: true
          });
        } while (currentToken && astUtils2.isCommentToken(currentToken));
        if (currentToken && astUtils2.isTokenOnSameLine(currentToken, token)) {
          return true;
        }
        currentToken = token;
        do {
          currentToken = sourceCode2.getTokenAfter(currentToken, {
            includeComments: true
          });
        } while (currentToken && astUtils2.isCommentToken(currentToken));
        if (currentToken && astUtils2.isTokenOnSameLine(token, currentToken)) {
          return true;
        }
        return false;
      }
      function isParentNodeType(parent, nodeType) {
        return parent.type === nodeType || parent.body && parent.body.type === nodeType || parent.consequent && parent.consequent.type === nodeType;
      }
      function getParentNodeOfToken(token) {
        const node2 = sourceCode2.getNodeByRangeIndex(token.range[0]);
        if (node2 && node2.type === "StaticBlock") {
          const openingBrace = sourceCode2.getFirstToken(node2, {
            skip: 1
          });
          return token.range[0] >= openingBrace.range[0] ? node2 : null;
        }
        return node2;
      }
      function isCommentAtParentStart(token, nodeType) {
        const parent = getParentNodeOfToken(token);
        if (parent && isParentNodeType(parent, nodeType)) {
          let parentStartNodeOrToken = parent;
          if (parent.type === "StaticBlock") {
            parentStartNodeOrToken = sourceCode2.getFirstToken(parent, {
              skip: 1
            });
          } else if (parent.type === "SwitchStatement") {
            parentStartNodeOrToken = sourceCode2.getTokenAfter(
              parent.discriminant,
              {
                filter: astUtils2.isOpeningBraceToken
              }
            );
          }
          return token.loc.start.line - parentStartNodeOrToken.loc.start.line === 1;
        }
        return false;
      }
      function isCommentAtParentEnd(token, nodeType) {
        const parent = getParentNodeOfToken(token);
        return !!parent && isParentNodeType(parent, nodeType) && parent.loc.end.line - token.loc.end.line === 1;
      }
      function isCommentAtBlockStart(token) {
        return isCommentAtParentStart(token, "ClassBody") || isCommentAtParentStart(token, "BlockStatement") || isCommentAtParentStart(token, "StaticBlock") || isCommentAtParentStart(token, "SwitchCase") || isCommentAtParentStart(token, "SwitchStatement");
      }
      function isCommentAtBlockEnd(token) {
        return isCommentAtParentEnd(token, "ClassBody") || isCommentAtParentEnd(token, "BlockStatement") || isCommentAtParentEnd(token, "StaticBlock") || isCommentAtParentEnd(token, "SwitchCase") || isCommentAtParentEnd(token, "SwitchStatement");
      }
      function isCommentAtClassStart(token) {
        return isCommentAtParentStart(token, "ClassBody");
      }
      function isCommentAtClassEnd(token) {
        return isCommentAtParentEnd(token, "ClassBody");
      }
      function isCommentAtObjectStart(token) {
        return isCommentAtParentStart(token, "ObjectExpression") || isCommentAtParentStart(token, "ObjectPattern");
      }
      function isCommentAtObjectEnd(token) {
        return isCommentAtParentEnd(token, "ObjectExpression") || isCommentAtParentEnd(token, "ObjectPattern");
      }
      function isCommentAtArrayStart(token) {
        return isCommentAtParentStart(token, "ArrayExpression") || isCommentAtParentStart(token, "ArrayPattern");
      }
      function isCommentAtArrayEnd(token) {
        return isCommentAtParentEnd(token, "ArrayExpression") || isCommentAtParentEnd(token, "ArrayPattern");
      }
      function checkForEmptyLine(token, opts) {
        if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(token.value)) {
          return;
        }
        if (ignorePattern && customIgnoreRegExp.test(token.value)) {
          return;
        }
        let after = opts.after, before = opts.before;
        const prevLineNum = token.loc.start.line - 1, nextLineNum = token.loc.end.line + 1, commentIsNotAlone = codeAroundComment(token);
        const blockStartAllowed = options.allowBlockStart && isCommentAtBlockStart(token) && !(options.allowClassStart === false && isCommentAtClassStart(token)), blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(token) && !(options.allowClassEnd === false && isCommentAtClassEnd(token)), classStartAllowed = options.allowClassStart && isCommentAtClassStart(token), classEndAllowed = options.allowClassEnd && isCommentAtClassEnd(token), objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(token), objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(token), arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(token), arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(token);
        const exceptionStartAllowed = blockStartAllowed || classStartAllowed || objectStartAllowed || arrayStartAllowed;
        const exceptionEndAllowed = blockEndAllowed || classEndAllowed || objectEndAllowed || arrayEndAllowed;
        if (prevLineNum < 1) {
          before = false;
        }
        if (nextLineNum >= numLines) {
          after = false;
        }
        if (commentIsNotAlone) {
          return;
        }
        const previousTokenOrComment = sourceCode2.getTokenBefore(token, {
          includeComments: true
        });
        const nextTokenOrComment = sourceCode2.getTokenAfter(token, {
          includeComments: true
        });
        if (!exceptionStartAllowed && before && !commentAndEmptyLines.has(prevLineNum) && !(astUtils2.isCommentToken(previousTokenOrComment) && astUtils2.isTokenOnSameLine(previousTokenOrComment, token))) {
          const lineStart = token.range[0] - token.loc.start.column;
          const range = [lineStart, lineStart];
          context.report({
            node: token,
            messageId: "before",
            fix(fixer) {
              return fixer.insertTextBeforeRange(range, "\n");
            }
          });
        }
        if (!exceptionEndAllowed && after && !commentAndEmptyLines.has(nextLineNum) && !(astUtils2.isCommentToken(nextTokenOrComment) && astUtils2.isTokenOnSameLine(token, nextTokenOrComment))) {
          context.report({
            node: token,
            messageId: "after",
            fix(fixer) {
              return fixer.insertTextAfter(token, "\n");
            }
          });
        }
      }
      return {
        Program() {
          comments.forEach((token) => {
            if (token.type === "Line") {
              if (options.beforeLineComment || options.afterLineComment) {
                checkForEmptyLine(token, {
                  after: options.afterLineComment,
                  before: options.beforeLineComment
                });
              }
            } else if (token.type === "Block") {
              if (options.beforeBlockComment || options.afterBlockComment) {
                checkForEmptyLine(token, {
                  after: options.afterBlockComment,
                  before: options.beforeBlockComment
                });
              }
            } else if (token.type === "Shebang") {
              if (options.afterHashbangComment) {
                checkForEmptyLine(token, {
                  after: options.afterHashbangComment,
                  before: false
                });
              }
            }
          });
        }
      };
    }
  };
  return linesAroundComment;
}
var linesAroundDirective;
var hasRequiredLinesAroundDirective;
function requireLinesAroundDirective() {
  if (hasRequiredLinesAroundDirective) return linesAroundDirective;
  hasRequiredLinesAroundDirective = 1;
  const astUtils2 = requireAstUtils();
  linesAroundDirective = {
    meta: {
      type: "layout",
      docs: {
        description: "Require or disallow newlines around directives",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/lines-around-directive"
      },
      schema: [
        {
          oneOf: [
            {
              enum: ["always", "never"]
            },
            {
              type: "object",
              properties: {
                before: {
                  enum: ["always", "never"]
                },
                after: {
                  enum: ["always", "never"]
                }
              },
              additionalProperties: false,
              minProperties: 2
            }
          ]
        }
      ],
      fixable: "whitespace",
      messages: {
        expected: 'Expected newline {{location}} "{{value}}" directive.',
        unexpected: 'Unexpected newline {{location}} "{{value}}" directive.'
      },
      deprecated: {
        message: "The rule was replaced with a more general rule.",
        url: "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        deprecatedSince: "4.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "The new rule moved to a plugin.",
            url: "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "padding-line-between-statements",
              url: "https://eslint.style/rules/padding-line-between-statements"
            }
          }
        ]
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const config2 = context.options[0] || "always";
      const expectLineBefore = typeof config2 === "string" ? config2 : config2.before;
      const expectLineAfter = typeof config2 === "string" ? config2 : config2.after;
      function hasNewlineBefore(node2) {
        const tokenBefore = sourceCode2.getTokenBefore(node2, {
          includeComments: true
        });
        const tokenLineBefore = tokenBefore ? tokenBefore.loc.end.line : 0;
        return node2.loc.start.line - tokenLineBefore >= 2;
      }
      function getLastTokenOnLine(node2) {
        const lastToken = sourceCode2.getLastToken(node2);
        const secondToLastToken = sourceCode2.getTokenBefore(lastToken);
        return astUtils2.isSemicolonToken(lastToken) && lastToken.loc.start.line > secondToLastToken.loc.end.line ? secondToLastToken : lastToken;
      }
      function hasNewlineAfter(node2) {
        const lastToken = getLastTokenOnLine(node2);
        const tokenAfter = sourceCode2.getTokenAfter(lastToken, {
          includeComments: true
        });
        return tokenAfter.loc.start.line - lastToken.loc.end.line >= 2;
      }
      function reportError(node2, location, expected) {
        context.report({
          node: node2,
          messageId: expected ? "expected" : "unexpected",
          data: {
            value: node2.expression.value,
            location
          },
          fix(fixer) {
            const lastToken = getLastTokenOnLine(node2);
            if (expected) {
              return location === "before" ? fixer.insertTextBefore(node2, "\n") : fixer.insertTextAfter(lastToken, "\n");
            }
            return fixer.removeRange(
              location === "before" ? [node2.range[0] - 1, node2.range[0]] : [lastToken.range[1], lastToken.range[1] + 1]
            );
          }
        });
      }
      function checkDirectives(node2) {
        const directives2 = astUtils2.getDirectivePrologue(node2);
        if (!directives2.length) {
          return;
        }
        const firstDirective = directives2[0];
        const leadingComments = sourceCode2.getCommentsBefore(firstDirective);
        if (leadingComments.length) {
          if (expectLineBefore === "always" && !hasNewlineBefore(firstDirective)) {
            reportError(firstDirective, "before", true);
          }
          if (expectLineBefore === "never" && hasNewlineBefore(firstDirective)) {
            reportError(firstDirective, "before", false);
          }
        } else if (node2.type === "Program" && expectLineBefore === "never" && !leadingComments.length && hasNewlineBefore(firstDirective)) {
          reportError(firstDirective, "before", false);
        }
        const lastDirective = directives2.at(-1);
        const statements = node2.type === "Program" ? node2.body : node2.body.body;
        if (lastDirective === statements.at(-1) && !lastDirective.trailingComments) {
          return;
        }
        if (expectLineAfter === "always" && !hasNewlineAfter(lastDirective)) {
          reportError(lastDirective, "after", true);
        }
        if (expectLineAfter === "never" && hasNewlineAfter(lastDirective)) {
          reportError(lastDirective, "after", false);
        }
      }
      return {
        Program: checkDirectives,
        FunctionDeclaration: checkDirectives,
        FunctionExpression: checkDirectives,
        ArrowFunctionExpression: checkDirectives
      };
    }
  };
  return linesAroundDirective;
}
var linesBetweenClassMembers;
var hasRequiredLinesBetweenClassMembers;
function requireLinesBetweenClassMembers() {
  if (hasRequiredLinesBetweenClassMembers) return linesBetweenClassMembers;
  hasRequiredLinesBetweenClassMembers = 1;
  const astUtils2 = requireAstUtils();
  const ClassMemberTypes = {
    "*": { test: () => true },
    field: { test: (node2) => node2.type === "PropertyDefinition" },
    method: { test: (node2) => node2.type === "MethodDefinition" }
  };
  linesBetweenClassMembers = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "lines-between-class-members",
              url: "https://eslint.style/rules/lines-between-class-members"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow an empty line between class members",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/lines-between-class-members"
      },
      fixable: "whitespace",
      schema: [
        {
          anyOf: [
            {
              type: "object",
              properties: {
                enforce: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      blankLine: {
                        enum: ["always", "never"]
                      },
                      prev: {
                        enum: ["method", "field", "*"]
                      },
                      next: {
                        enum: ["method", "field", "*"]
                      }
                    },
                    additionalProperties: false,
                    required: ["blankLine", "prev", "next"]
                  },
                  minItems: 1
                }
              },
              additionalProperties: false,
              required: ["enforce"]
            },
            {
              enum: ["always", "never"]
            }
          ]
        },
        {
          type: "object",
          properties: {
            exceptAfterSingleLine: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        never: "Unexpected blank line between class members.",
        always: "Expected blank line between class members."
      }
    },
    create(context) {
      const options = [];
      options[0] = context.options[0] || "always";
      options[1] = context.options[1] || { exceptAfterSingleLine: false };
      const configureList = typeof options[0] === "object" ? options[0].enforce : [{ blankLine: options[0], prev: "*", next: "*" }];
      const sourceCode2 = context.sourceCode;
      function getBoundaryTokens(curNode, nextNode) {
        const lastToken = sourceCode2.getLastToken(curNode);
        const prevToken = sourceCode2.getTokenBefore(lastToken);
        const nextToken = sourceCode2.getFirstToken(nextNode);
        const isSemicolonLessStyle = astUtils2.isSemicolonToken(lastToken) && !astUtils2.isTokenOnSameLine(prevToken, lastToken) && astUtils2.isTokenOnSameLine(lastToken, nextToken);
        return isSemicolonLessStyle ? { curLast: prevToken, nextFirst: lastToken } : { curLast: lastToken, nextFirst: nextToken };
      }
      function findLastConsecutiveTokenAfter(prevLastToken, nextFirstToken, maxLine) {
        const after = sourceCode2.getTokenAfter(prevLastToken, {
          includeComments: true
        });
        if (after !== nextFirstToken && after.loc.start.line - prevLastToken.loc.end.line <= maxLine) {
          return findLastConsecutiveTokenAfter(
            after,
            nextFirstToken,
            maxLine
          );
        }
        return prevLastToken;
      }
      function findFirstConsecutiveTokenBefore(nextFirstToken, prevLastToken, maxLine) {
        const before = sourceCode2.getTokenBefore(nextFirstToken, {
          includeComments: true
        });
        if (before !== prevLastToken && nextFirstToken.loc.start.line - before.loc.end.line <= maxLine) {
          return findFirstConsecutiveTokenBefore(
            before,
            prevLastToken,
            maxLine
          );
        }
        return nextFirstToken;
      }
      function hasTokenOrCommentBetween(before, after) {
        return sourceCode2.getTokensBetween(before, after, {
          includeComments: true
        }).length !== 0;
      }
      function match(node2, type2) {
        return ClassMemberTypes[type2].test(node2);
      }
      function getPaddingType(prevNode, nextNode) {
        for (let i2 = configureList.length - 1; i2 >= 0; --i2) {
          const configure = configureList[i2];
          const matched = match(prevNode, configure.prev) && match(nextNode, configure.next);
          if (matched) {
            return configure.blankLine;
          }
        }
        return null;
      }
      return {
        ClassBody(node2) {
          const body = node2.body;
          for (let i2 = 0; i2 < body.length - 1; i2++) {
            const curFirst = sourceCode2.getFirstToken(body[i2]);
            const { curLast, nextFirst } = getBoundaryTokens(
              body[i2],
              body[i2 + 1]
            );
            const isMulti = !astUtils2.isTokenOnSameLine(
              curFirst,
              curLast
            );
            const skip = !isMulti && options[1].exceptAfterSingleLine;
            const beforePadding = findLastConsecutiveTokenAfter(
              curLast,
              nextFirst,
              1
            );
            const afterPadding = findFirstConsecutiveTokenBefore(
              nextFirst,
              curLast,
              1
            );
            const isPadded = afterPadding.loc.start.line - beforePadding.loc.end.line > 1;
            const hasTokenInPadding = hasTokenOrCommentBetween(
              beforePadding,
              afterPadding
            );
            const curLineLastToken = findLastConsecutiveTokenAfter(
              curLast,
              nextFirst,
              0
            );
            const paddingType = getPaddingType(body[i2], body[i2 + 1]);
            if (paddingType === "never" && isPadded) {
              context.report({
                node: body[i2 + 1],
                messageId: "never",
                fix(fixer) {
                  if (hasTokenInPadding) {
                    return null;
                  }
                  return fixer.replaceTextRange(
                    [
                      beforePadding.range[1],
                      afterPadding.range[0]
                    ],
                    "\n"
                  );
                }
              });
            } else if (paddingType === "always" && !skip && !isPadded) {
              context.report({
                node: body[i2 + 1],
                messageId: "always",
                fix(fixer) {
                  if (hasTokenInPadding) {
                    return null;
                  }
                  return fixer.insertTextAfter(
                    curLineLastToken,
                    "\n"
                  );
                }
              });
            }
          }
        }
      };
    }
  };
  return linesBetweenClassMembers;
}
var logicalAssignmentOperators;
var hasRequiredLogicalAssignmentOperators;
function requireLogicalAssignmentOperators() {
  if (hasRequiredLogicalAssignmentOperators) return logicalAssignmentOperators;
  hasRequiredLogicalAssignmentOperators = 1;
  const astUtils2 = requireAstUtils();
  const baseTypes = /* @__PURE__ */ new Set(["Identifier", "Super", "ThisExpression"]);
  function isUndefined2(expression, scope) {
    if (expression.type === "Identifier" && expression.name === "undefined") {
      return astUtils2.isReferenceToGlobalVariable(scope, expression);
    }
    return expression.type === "UnaryExpression" && expression.operator === "void" && expression.argument.type === "Literal" && expression.argument.value === 0;
  }
  function isReference(expression) {
    return expression.type === "Identifier" && expression.name !== "undefined" || expression.type === "MemberExpression";
  }
  function isImplicitNullishComparison(expression, scope) {
    if (expression.type !== "BinaryExpression" || expression.operator !== "==") {
      return false;
    }
    const reference = isReference(expression.left) ? "left" : "right";
    const nullish = reference === "left" ? "right" : "left";
    return isReference(expression[reference]) && (astUtils2.isNullLiteral(expression[nullish]) || isUndefined2(expression[nullish], scope));
  }
  function isDoubleComparison(expression) {
    return expression.type === "LogicalExpression" && expression.operator === "||" && expression.left.type === "BinaryExpression" && expression.left.operator === "===" && expression.right.type === "BinaryExpression" && expression.right.operator === "===";
  }
  function isExplicitNullishComparison(expression, scope) {
    if (!isDoubleComparison(expression)) {
      return false;
    }
    const leftReference = isReference(expression.left.left) ? "left" : "right";
    const leftNullish = leftReference === "left" ? "right" : "left";
    const rightReference = isReference(expression.right.left) ? "left" : "right";
    const rightNullish = rightReference === "left" ? "right" : "left";
    return astUtils2.isSameReference(
      expression.left[leftReference],
      expression.right[rightReference]
    ) && (astUtils2.isNullLiteral(expression.left[leftNullish]) && isUndefined2(expression.right[rightNullish], scope) || isUndefined2(expression.left[leftNullish], scope) && astUtils2.isNullLiteral(expression.right[rightNullish]));
  }
  function isBooleanCast(expression, scope) {
    return expression.type === "CallExpression" && expression.callee.name === "Boolean" && expression.arguments.length === 1 && astUtils2.isReferenceToGlobalVariable(scope, expression.callee);
  }
  function getExistence(expression, scope) {
    const isNegated = expression.type === "UnaryExpression" && expression.operator === "!";
    const base = isNegated ? expression.argument : expression;
    switch (true) {
      case isReference(base):
        return { reference: base, operator: isNegated ? "||" : "&&" };
      case (base.type === "UnaryExpression" && base.operator === "!" && isReference(base.argument)):
        return { reference: base.argument, operator: "&&" };
      case (isBooleanCast(base, scope) && isReference(base.arguments[0])):
        return {
          reference: base.arguments[0],
          operator: isNegated ? "||" : "&&"
        };
      case isImplicitNullishComparison(expression, scope):
        return {
          reference: isReference(expression.left) ? expression.left : expression.right,
          operator: "??"
        };
      case isExplicitNullishComparison(expression, scope):
        return {
          reference: isReference(expression.left.left) ? expression.left.left : expression.left.right,
          operator: "??"
        };
      default:
        return null;
    }
  }
  function isInsideWithBlock(node2) {
    if (node2.type === "Program") {
      return false;
    }
    return node2.parent.type === "WithStatement" && node2.parent.body === node2 ? true : isInsideWithBlock(node2.parent);
  }
  function getLeftmostOperand(sourceCode2, node2) {
    let left = node2.left;
    while (left.type === "LogicalExpression" && left.operator === node2.operator) {
      if (astUtils2.isParenthesised(sourceCode2, left)) {
        return left;
      }
      left = left.left;
    }
    return left;
  }
  logicalAssignmentOperators = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require or disallow logical assignment operator shorthand",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/logical-assignment-operators"
      },
      schema: {
        type: "array",
        oneOf: [
          {
            items: [
              { const: "always" },
              {
                type: "object",
                properties: {
                  enforceForIfStatements: {
                    type: "boolean"
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            // 0 for allowing passing no options
            maxItems: 2
          },
          {
            items: [{ const: "never" }],
            minItems: 1,
            maxItems: 1
          }
        ]
      },
      fixable: "code",
      hasSuggestions: true,
      messages: {
        assignment: "Assignment (=) can be replaced with operator assignment ({{operator}}).",
        useLogicalOperator: "Convert this assignment to use the operator {{ operator }}.",
        logical: "Logical expression can be replaced with an assignment ({{ operator }}).",
        convertLogical: "Replace this logical expression with an assignment with the operator {{ operator }}.",
        if: "'if' statement can be replaced with a logical operator assignment with operator {{ operator }}.",
        convertIf: "Replace this 'if' statement with a logical assignment with operator {{ operator }}.",
        unexpected: "Unexpected logical operator assignment ({{operator}}) shorthand.",
        separate: "Separate the logical assignment into an assignment with a logical operator."
      }
    },
    create(context) {
      const mode = context.options[0] === "never" ? "never" : "always";
      const checkIf = mode === "always" && context.options.length > 1 && context.options[1].enforceForIfStatements;
      const sourceCode2 = context.sourceCode;
      const isStrict = sourceCode2.getScope(sourceCode2.ast).isStrict;
      function cannotBeGetter(node2) {
        return node2.type === "Identifier" && (isStrict || !isInsideWithBlock(node2));
      }
      function accessesSingleProperty(node2) {
        if (!isStrict && isInsideWithBlock(node2)) {
          return node2.type === "Identifier";
        }
        return node2.type === "MemberExpression" && baseTypes.has(node2.object.type) && (!node2.computed || node2.property.type !== "MemberExpression" && node2.property.type !== "ChainExpression");
      }
      function createConditionalFixer(descriptor, suggestion, shouldBeFixed) {
        if (shouldBeFixed) {
          return {
            ...descriptor,
            fix: suggestion.fix
          };
        }
        return {
          ...descriptor,
          suggest: [suggestion]
        };
      }
      function getOperatorToken(node2) {
        return sourceCode2.getFirstTokenBetween(
          node2.left,
          node2.right,
          (token) => token.value === node2.operator
        );
      }
      if (mode === "never") {
        return {
          // foo ||= bar
          AssignmentExpression(assignment) {
            if (!astUtils2.isLogicalAssignmentOperator(
              assignment.operator
            )) {
              return;
            }
            const descriptor = {
              messageId: "unexpected",
              node: assignment,
              data: { operator: assignment.operator }
            };
            const suggestion = {
              messageId: "separate",
              *fix(ruleFixer2) {
                if (sourceCode2.getCommentsInside(assignment).length > 0) {
                  return;
                }
                const operatorToken = getOperatorToken(assignment);
                yield ruleFixer2.replaceText(operatorToken, "=");
                const assignmentText = sourceCode2.getText(
                  assignment.left
                );
                const operator = assignment.operator.slice(0, -1);
                yield ruleFixer2.insertTextAfter(
                  operatorToken,
                  ` ${assignmentText} ${operator}`
                );
                const precedence = astUtils2.getPrecedence(assignment.right) <= astUtils2.getPrecedence({
                  type: "LogicalExpression",
                  operator
                });
                const mixed = assignment.operator === "??=" && astUtils2.isLogicalExpression(assignment.right);
                if (!astUtils2.isParenthesised(
                  sourceCode2,
                  assignment.right
                ) && (precedence || mixed)) {
                  yield ruleFixer2.insertTextBefore(
                    assignment.right,
                    "("
                  );
                  yield ruleFixer2.insertTextAfter(
                    assignment.right,
                    ")"
                  );
                }
              }
            };
            context.report(
              createConditionalFixer(
                descriptor,
                suggestion,
                cannotBeGetter(assignment.left)
              )
            );
          }
        };
      }
      return {
        // foo = foo || bar
        "AssignmentExpression[operator='='][right.type='LogicalExpression']"(assignment) {
          const leftOperand = getLeftmostOperand(
            sourceCode2,
            assignment.right
          );
          if (!astUtils2.isSameReference(assignment.left, leftOperand)) {
            return;
          }
          const descriptor = {
            messageId: "assignment",
            node: assignment,
            data: { operator: `${assignment.right.operator}=` }
          };
          const suggestion = {
            messageId: "useLogicalOperator",
            data: { operator: `${assignment.right.operator}=` },
            *fix(ruleFixer2) {
              if (sourceCode2.getCommentsInside(assignment).length > 0) {
                return;
              }
              const assignmentOperatorToken = getOperatorToken(assignment);
              yield ruleFixer2.insertTextBefore(
                assignmentOperatorToken,
                assignment.right.operator
              );
              const logicalOperatorToken = getOperatorToken(
                leftOperand.parent
              );
              const firstRightOperandToken = sourceCode2.getTokenAfter(logicalOperatorToken);
              yield ruleFixer2.removeRange([
                leftOperand.parent.range[0],
                firstRightOperandToken.range[0]
              ]);
            }
          };
          context.report(
            createConditionalFixer(
              descriptor,
              suggestion,
              cannotBeGetter(assignment.left)
            )
          );
        },
        // foo || (foo = bar)
        'LogicalExpression[right.type="AssignmentExpression"][right.operator="="]'(logical) {
          if (isReference(logical.left) && astUtils2.isSameReference(logical.left, logical.right.left)) {
            const descriptor = {
              messageId: "logical",
              node: logical,
              data: { operator: `${logical.operator}=` }
            };
            const suggestion = {
              messageId: "convertLogical",
              data: { operator: `${logical.operator}=` },
              *fix(ruleFixer2) {
                if (sourceCode2.getCommentsInside(logical).length > 0) {
                  return;
                }
                const parentPrecedence = astUtils2.getPrecedence(
                  logical.parent
                );
                const requiresOuterParenthesis = logical.parent.type !== "ExpressionStatement" && (parentPrecedence === -1 || astUtils2.getPrecedence({
                  type: "AssignmentExpression"
                }) < parentPrecedence);
                if (!astUtils2.isParenthesised(
                  sourceCode2,
                  logical
                ) && requiresOuterParenthesis) {
                  yield ruleFixer2.insertTextBefore(logical, "(");
                  yield ruleFixer2.insertTextAfter(logical, ")");
                }
                yield ruleFixer2.removeRange([
                  logical.range[0],
                  logical.right.range[0]
                ]);
                yield ruleFixer2.removeRange([
                  logical.right.range[1],
                  logical.range[1]
                ]);
                const operatorToken = getOperatorToken(
                  logical.right
                );
                yield ruleFixer2.insertTextBefore(
                  operatorToken,
                  logical.operator
                );
              }
            };
            const fix = cannotBeGetter(logical.left) || accessesSingleProperty(logical.left);
            context.report(
              createConditionalFixer(descriptor, suggestion, fix)
            );
          }
        },
        // if (foo) foo = bar
        "IfStatement[alternate=null]"(ifNode) {
          if (!checkIf) {
            return;
          }
          const hasBody = ifNode.consequent.type === "BlockStatement";
          if (hasBody && ifNode.consequent.body.length !== 1) {
            return;
          }
          const body = hasBody ? ifNode.consequent.body[0] : ifNode.consequent;
          const scope = sourceCode2.getScope(ifNode);
          const existence = getExistence(ifNode.test, scope);
          if (body.type === "ExpressionStatement" && body.expression.type === "AssignmentExpression" && body.expression.operator === "=" && existence !== null && astUtils2.isSameReference(
            existence.reference,
            body.expression.left
          )) {
            const descriptor = {
              messageId: "if",
              node: ifNode,
              data: { operator: `${existence.operator}=` }
            };
            const suggestion = {
              messageId: "convertIf",
              data: { operator: `${existence.operator}=` },
              *fix(ruleFixer2) {
                if (sourceCode2.getCommentsInside(ifNode).length > 0) {
                  return;
                }
                const firstBodyToken = sourceCode2.getFirstToken(body);
                const prevToken = sourceCode2.getTokenBefore(ifNode);
                if (prevToken !== null && prevToken.value !== ";" && prevToken.value !== "{" && firstBodyToken.type !== "Identifier" && firstBodyToken.type !== "Keyword") {
                  return;
                }
                const operatorToken = getOperatorToken(
                  body.expression
                );
                yield ruleFixer2.insertTextBefore(
                  operatorToken,
                  existence.operator
                );
                yield ruleFixer2.removeRange([
                  ifNode.range[0],
                  body.range[0]
                ]);
                yield ruleFixer2.removeRange([
                  body.range[1],
                  ifNode.range[1]
                ]);
                const nextToken = sourceCode2.getTokenAfter(
                  body.expression
                );
                if (hasBody && nextToken !== null && nextToken.value !== ";") {
                  yield ruleFixer2.insertTextAfter(ifNode, ";");
                }
              }
            };
            const shouldBeFixed = cannotBeGetter(existence.reference) || ifNode.test.type !== "LogicalExpression" && accessesSingleProperty(existence.reference);
            context.report(
              createConditionalFixer(
                descriptor,
                suggestion,
                shouldBeFixed
              )
            );
          }
        }
      };
    }
  };
  return logicalAssignmentOperators;
}
var maxClassesPerFile;
var hasRequiredMaxClassesPerFile;
function requireMaxClassesPerFile() {
  if (hasRequiredMaxClassesPerFile) return maxClassesPerFile;
  hasRequiredMaxClassesPerFile = 1;
  maxClassesPerFile = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce a maximum number of classes per file",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-classes-per-file"
      },
      schema: [
        {
          oneOf: [
            {
              type: "integer",
              minimum: 1
            },
            {
              type: "object",
              properties: {
                ignoreExpressions: {
                  type: "boolean"
                },
                max: {
                  type: "integer",
                  minimum: 1
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        maximumExceeded: "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}."
      }
    },
    create(context) {
      const [option = {}] = context.options;
      const [ignoreExpressions, max] = typeof option === "number" ? [false, option || 1] : [option.ignoreExpressions, option.max || 1];
      let classCount = 0;
      return {
        Program() {
          classCount = 0;
        },
        "Program:exit"(node2) {
          if (classCount > max) {
            context.report({
              node: node2,
              messageId: "maximumExceeded",
              data: {
                classCount,
                max
              }
            });
          }
        },
        ClassDeclaration() {
          classCount++;
        },
        ClassExpression() {
          if (!ignoreExpressions) {
            classCount++;
          }
        }
      };
    }
  };
  return maxClassesPerFile;
}
var maxDepth;
var hasRequiredMaxDepth;
function requireMaxDepth() {
  if (hasRequiredMaxDepth) return maxDepth;
  hasRequiredMaxDepth = 1;
  maxDepth = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce a maximum depth that blocks can be nested",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-depth"
      },
      schema: [
        {
          oneOf: [
            {
              type: "integer",
              minimum: 0
            },
            {
              type: "object",
              properties: {
                maximum: {
                  type: "integer",
                  minimum: 0
                },
                max: {
                  type: "integer",
                  minimum: 0
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        tooDeeply: "Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}."
      }
    },
    create(context) {
      const functionStack = [], option = context.options[0];
      let maxDepth2 = 4;
      if (typeof option === "object" && (Object.hasOwn(option, "maximum") || Object.hasOwn(option, "max"))) {
        maxDepth2 = option.maximum || option.max;
      }
      if (typeof option === "number") {
        maxDepth2 = option;
      }
      function startFunction() {
        functionStack.push(0);
      }
      function endFunction() {
        functionStack.pop();
      }
      function pushBlock(node2) {
        const len = ++functionStack[functionStack.length - 1];
        if (len > maxDepth2) {
          context.report({
            node: node2,
            messageId: "tooDeeply",
            data: { depth: len, maxDepth: maxDepth2 }
          });
        }
      }
      function popBlock() {
        functionStack[functionStack.length - 1]--;
      }
      return {
        Program: startFunction,
        FunctionDeclaration: startFunction,
        FunctionExpression: startFunction,
        ArrowFunctionExpression: startFunction,
        StaticBlock: startFunction,
        IfStatement(node2) {
          if (node2.parent.type !== "IfStatement") {
            pushBlock(node2);
          }
        },
        SwitchStatement: pushBlock,
        TryStatement: pushBlock,
        DoWhileStatement: pushBlock,
        WhileStatement: pushBlock,
        WithStatement: pushBlock,
        ForStatement: pushBlock,
        ForInStatement: pushBlock,
        ForOfStatement: pushBlock,
        "IfStatement:exit": popBlock,
        "SwitchStatement:exit": popBlock,
        "TryStatement:exit": popBlock,
        "DoWhileStatement:exit": popBlock,
        "WhileStatement:exit": popBlock,
        "WithStatement:exit": popBlock,
        "ForStatement:exit": popBlock,
        "ForInStatement:exit": popBlock,
        "ForOfStatement:exit": popBlock,
        "FunctionDeclaration:exit": endFunction,
        "FunctionExpression:exit": endFunction,
        "ArrowFunctionExpression:exit": endFunction,
        "StaticBlock:exit": endFunction,
        "Program:exit": endFunction
      };
    }
  };
  return maxDepth;
}
var maxLen;
var hasRequiredMaxLen;
function requireMaxLen() {
  if (hasRequiredMaxLen) return maxLen;
  hasRequiredMaxLen = 1;
  const OPTIONS_SCHEMA = {
    type: "object",
    properties: {
      code: {
        type: "integer",
        minimum: 0
      },
      comments: {
        type: "integer",
        minimum: 0
      },
      tabWidth: {
        type: "integer",
        minimum: 0
      },
      ignorePattern: {
        type: "string"
      },
      ignoreComments: {
        type: "boolean"
      },
      ignoreStrings: {
        type: "boolean"
      },
      ignoreUrls: {
        type: "boolean"
      },
      ignoreTemplateLiterals: {
        type: "boolean"
      },
      ignoreRegExpLiterals: {
        type: "boolean"
      },
      ignoreTrailingComments: {
        type: "boolean"
      }
    },
    additionalProperties: false
  };
  const OPTIONS_OR_INTEGER_SCHEMA = {
    anyOf: [
      OPTIONS_SCHEMA,
      {
        type: "integer",
        minimum: 0
      }
    ]
  };
  maxLen = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "max-len",
              url: "https://eslint.style/rules/max-len"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce a maximum line length",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-len"
      },
      schema: [
        OPTIONS_OR_INTEGER_SCHEMA,
        OPTIONS_OR_INTEGER_SCHEMA,
        OPTIONS_SCHEMA
      ],
      messages: {
        max: "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
        maxComment: "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
      }
    },
    create(context) {
      const URL_REGEXP = /[^:/?#]:\/\/[^?#]/u;
      const sourceCode2 = context.sourceCode;
      function computeLineLength(line, tabWidth2) {
        let extraCharacterCount = 0;
        line.replace(/\t/gu, (match, offset) => {
          const totalOffset = offset + extraCharacterCount, previousTabStopOffset = tabWidth2 ? totalOffset % tabWidth2 : 0, spaceCount = tabWidth2 - previousTabStopOffset;
          extraCharacterCount += spaceCount - 1;
        });
        return Array.from(line).length + extraCharacterCount;
      }
      const options = Object.assign({}, context.options.at(-1));
      if (typeof context.options[0] === "number") {
        options.code = context.options[0];
      }
      if (typeof context.options[1] === "number") {
        options.tabWidth = context.options[1];
      }
      const maxLength = typeof options.code === "number" ? options.code : 80, tabWidth = typeof options.tabWidth === "number" ? options.tabWidth : 4, ignoreComments = !!options.ignoreComments, ignoreStrings = !!options.ignoreStrings, ignoreTemplateLiterals = !!options.ignoreTemplateLiterals, ignoreRegExpLiterals = !!options.ignoreRegExpLiterals, ignoreTrailingComments = !!options.ignoreTrailingComments || !!options.ignoreComments, ignoreUrls = !!options.ignoreUrls, maxCommentLength = options.comments;
      let ignorePattern = options.ignorePattern || null;
      if (ignorePattern) {
        ignorePattern = new RegExp(ignorePattern, "u");
      }
      function isTrailingComment(line, lineNumber, comment2) {
        return comment2 && comment2.loc.start.line === lineNumber && lineNumber <= comment2.loc.end.line && (comment2.loc.end.line > lineNumber || comment2.loc.end.column === line.length);
      }
      function isFullLineComment(line, lineNumber, comment2) {
        const start = comment2.loc.start, end = comment2.loc.end, isFirstTokenOnLine = !line.slice(0, comment2.loc.start.column).trim();
        return comment2 && (start.line < lineNumber || start.line === lineNumber && isFirstTokenOnLine) && (end.line > lineNumber || end.line === lineNumber && end.column === line.length);
      }
      function isJSXEmptyExpressionInSingleLineContainer(node2) {
        if (!node2 || !node2.parent || node2.type !== "JSXEmptyExpression" || node2.parent.type !== "JSXExpressionContainer") {
          return false;
        }
        const parent = node2.parent;
        return parent.loc.start.line === parent.loc.end.line;
      }
      function stripTrailingComment(line, comment2) {
        return line.slice(0, comment2.loc.start.column).replace(/\s+$/u, "");
      }
      function ensureArrayAndPush(object, key, value) {
        if (!Array.isArray(object[key])) {
          object[key] = [];
        }
        object[key].push(value);
      }
      function getAllStrings() {
        return sourceCode2.ast.tokens.filter(
          (token) => token.type === "String" || token.type === "JSXText" && sourceCode2.getNodeByRangeIndex(token.range[0] - 1).type === "JSXAttribute"
        );
      }
      function getAllTemplateLiterals() {
        return sourceCode2.ast.tokens.filter(
          (token) => token.type === "Template"
        );
      }
      function getAllRegExpLiterals() {
        return sourceCode2.ast.tokens.filter(
          (token) => token.type === "RegularExpression"
        );
      }
      function groupArrayByLineNumber(arr) {
        const obj = {};
        for (let i2 = 0; i2 < arr.length; i2++) {
          const node2 = arr[i2];
          for (let j = node2.loc.start.line; j <= node2.loc.end.line; ++j) {
            ensureArrayAndPush(obj, j, node2);
          }
        }
        return obj;
      }
      function getAllComments() {
        const comments = [];
        sourceCode2.getAllComments().forEach((commentNode) => {
          const containingNode = sourceCode2.getNodeByRangeIndex(
            commentNode.range[0]
          );
          if (isJSXEmptyExpressionInSingleLineContainer(containingNode)) {
            if (comments.at(-1) !== containingNode.parent) {
              comments.push(containingNode.parent);
            }
          } else {
            comments.push(commentNode);
          }
        });
        return comments;
      }
      function checkProgramForMaxLength(node2) {
        const lines = sourceCode2.lines, comments = ignoreComments || maxCommentLength || ignoreTrailingComments ? getAllComments() : [];
        let commentsIndex = 0;
        const strings = getAllStrings();
        const stringsByLine = groupArrayByLineNumber(strings);
        const templateLiterals = getAllTemplateLiterals();
        const templateLiteralsByLine = groupArrayByLineNumber(templateLiterals);
        const regExpLiterals = getAllRegExpLiterals();
        const regExpLiteralsByLine = groupArrayByLineNumber(regExpLiterals);
        lines.forEach((line, i2) => {
          const lineNumber = i2 + 1;
          let lineIsComment = false;
          let textToMeasure;
          if (commentsIndex < comments.length) {
            let comment2;
            do {
              comment2 = comments[++commentsIndex];
            } while (comment2 && comment2.loc.start.line <= lineNumber);
            comment2 = comments[--commentsIndex];
            if (isFullLineComment(line, lineNumber, comment2)) {
              lineIsComment = true;
              textToMeasure = line;
            } else if (ignoreTrailingComments && isTrailingComment(line, lineNumber, comment2)) {
              textToMeasure = stripTrailingComment(line, comment2);
              let lastIndex = commentsIndex;
              while (isTrailingComment(
                textToMeasure,
                lineNumber,
                comments[--lastIndex]
              )) {
                textToMeasure = stripTrailingComment(
                  textToMeasure,
                  comments[lastIndex]
                );
              }
            } else {
              textToMeasure = line;
            }
          } else {
            textToMeasure = line;
          }
          if (ignorePattern && ignorePattern.test(textToMeasure) || ignoreUrls && URL_REGEXP.test(textToMeasure) || ignoreStrings && stringsByLine[lineNumber] || ignoreTemplateLiterals && templateLiteralsByLine[lineNumber] || ignoreRegExpLiterals && regExpLiteralsByLine[lineNumber]) {
            return;
          }
          const lineLength = computeLineLength(textToMeasure, tabWidth);
          const commentLengthApplies = lineIsComment && maxCommentLength;
          if (lineIsComment && ignoreComments) {
            return;
          }
          const loc = {
            start: {
              line: lineNumber,
              column: 0
            },
            end: {
              line: lineNumber,
              column: textToMeasure.length
            }
          };
          if (commentLengthApplies) {
            if (lineLength > maxCommentLength) {
              context.report({
                node: node2,
                loc,
                messageId: "maxComment",
                data: {
                  lineLength,
                  maxCommentLength
                }
              });
            }
          } else if (lineLength > maxLength) {
            context.report({
              node: node2,
              loc,
              messageId: "max",
              data: {
                lineLength,
                maxLength
              }
            });
          }
        });
      }
      return {
        Program: checkProgramForMaxLength
      };
    }
  };
  return maxLen;
}
var maxLines;
var hasRequiredMaxLines;
function requireMaxLines() {
  if (hasRequiredMaxLines) return maxLines;
  hasRequiredMaxLines = 1;
  const astUtils2 = requireAstUtils();
  function range(start, end) {
    return [...Array(end - start).keys()].map((x2) => x2 + start);
  }
  maxLines = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce a maximum number of lines per file",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-lines"
      },
      schema: [
        {
          oneOf: [
            {
              type: "integer",
              minimum: 0
            },
            {
              type: "object",
              properties: {
                max: {
                  type: "integer",
                  minimum: 0
                },
                skipComments: {
                  type: "boolean"
                },
                skipBlankLines: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        exceed: "File has too many lines ({{actual}}). Maximum allowed is {{max}}."
      }
    },
    create(context) {
      const option = context.options[0];
      let max = 300;
      if (typeof option === "object" && Object.hasOwn(option, "max")) {
        max = option.max;
      } else if (typeof option === "number") {
        max = option;
      }
      const skipComments = option && option.skipComments;
      const skipBlankLines = option && option.skipBlankLines;
      const sourceCode2 = context.sourceCode;
      function isCommentNodeType(token) {
        return token && (token.type === "Block" || token.type === "Line");
      }
      function getLinesWithoutCode(comment2) {
        let start = comment2.loc.start.line;
        let end = comment2.loc.end.line;
        let token;
        token = comment2;
        do {
          token = sourceCode2.getTokenBefore(token, {
            includeComments: true
          });
        } while (isCommentNodeType(token));
        if (token && astUtils2.isTokenOnSameLine(token, comment2)) {
          start += 1;
        }
        token = comment2;
        do {
          token = sourceCode2.getTokenAfter(token, {
            includeComments: true
          });
        } while (isCommentNodeType(token));
        if (token && astUtils2.isTokenOnSameLine(comment2, token)) {
          end -= 1;
        }
        if (start <= end) {
          return range(start, end + 1);
        }
        return [];
      }
      return {
        "Program:exit"() {
          let lines = sourceCode2.lines.map((text, i2) => ({
            lineNumber: i2 + 1,
            text
          }));
          if (lines.length > 1 && lines.at(-1).text === "") {
            lines.pop();
          }
          if (skipBlankLines) {
            lines = lines.filter((l2) => l2.text.trim() !== "");
          }
          if (skipComments) {
            const comments = sourceCode2.getAllComments();
            const commentLines = new Set(
              comments.flatMap(getLinesWithoutCode)
            );
            lines = lines.filter((l2) => !commentLines.has(l2.lineNumber));
          }
          if (lines.length > max) {
            const loc = {
              start: {
                line: lines[max].lineNumber,
                column: 0
              },
              end: {
                line: sourceCode2.lines.length,
                column: sourceCode2.lines.at(-1).length
              }
            };
            context.report({
              loc,
              messageId: "exceed",
              data: {
                max,
                actual: lines.length
              }
            });
          }
        }
      };
    }
  };
  return maxLines;
}
var maxLinesPerFunction;
var hasRequiredMaxLinesPerFunction;
function requireMaxLinesPerFunction() {
  if (hasRequiredMaxLinesPerFunction) return maxLinesPerFunction;
  hasRequiredMaxLinesPerFunction = 1;
  const astUtils2 = requireAstUtils();
  const { upperCaseFirst } = requireStringUtils();
  const OPTIONS_SCHEMA = {
    type: "object",
    properties: {
      max: {
        type: "integer",
        minimum: 0
      },
      skipComments: {
        type: "boolean"
      },
      skipBlankLines: {
        type: "boolean"
      },
      IIFEs: {
        type: "boolean"
      }
    },
    additionalProperties: false
  };
  const OPTIONS_OR_INTEGER_SCHEMA = {
    oneOf: [
      OPTIONS_SCHEMA,
      {
        type: "integer",
        minimum: 1
      }
    ]
  };
  function getCommentLineNumbers(comments) {
    const map = /* @__PURE__ */ new Map();
    comments.forEach((comment2) => {
      for (let i2 = comment2.loc.start.line; i2 <= comment2.loc.end.line; i2++) {
        map.set(i2, comment2);
      }
    });
    return map;
  }
  maxLinesPerFunction = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce a maximum number of lines of code in a function",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-lines-per-function"
      },
      schema: [OPTIONS_OR_INTEGER_SCHEMA],
      messages: {
        exceed: "{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const lines = sourceCode2.lines;
      const option = context.options[0];
      let maxLines2 = 50;
      let skipComments = false;
      let skipBlankLines = false;
      let IIFEs = false;
      if (typeof option === "object") {
        maxLines2 = typeof option.max === "number" ? option.max : 50;
        skipComments = !!option.skipComments;
        skipBlankLines = !!option.skipBlankLines;
        IIFEs = !!option.IIFEs;
      } else if (typeof option === "number") {
        maxLines2 = option;
      }
      const commentLineNumbers = getCommentLineNumbers(
        sourceCode2.getAllComments()
      );
      function isFullLineComment(line, lineNumber, comment2) {
        const start = comment2.loc.start, end = comment2.loc.end, isFirstTokenOnLine = start.line === lineNumber && !line.slice(0, start.column).trim(), isLastTokenOnLine = end.line === lineNumber && !line.slice(end.column).trim();
        return comment2 && (start.line < lineNumber || isFirstTokenOnLine) && (end.line > lineNumber || isLastTokenOnLine);
      }
      function isIIFE(node2) {
        return (node2.type === "FunctionExpression" || node2.type === "ArrowFunctionExpression") && node2.parent && node2.parent.type === "CallExpression" && node2.parent.callee === node2;
      }
      function isEmbedded(node2) {
        if (!node2.parent) {
          return false;
        }
        if (node2 !== node2.parent.value) {
          return false;
        }
        if (node2.parent.type === "MethodDefinition") {
          return true;
        }
        if (node2.parent.type === "Property") {
          return node2.parent.method === true || node2.parent.kind === "get" || node2.parent.kind === "set";
        }
        return false;
      }
      function processFunction(funcNode) {
        const node2 = isEmbedded(funcNode) ? funcNode.parent : funcNode;
        if (!IIFEs && isIIFE(node2)) {
          return;
        }
        let lineCount = 0;
        for (let i2 = node2.loc.start.line - 1; i2 < node2.loc.end.line; ++i2) {
          const line = lines[i2];
          if (skipComments) {
            if (commentLineNumbers.has(i2 + 1) && isFullLineComment(
              line,
              i2 + 1,
              commentLineNumbers.get(i2 + 1)
            )) {
              continue;
            }
          }
          if (skipBlankLines) {
            if (line.match(/^\s*$/u)) {
              continue;
            }
          }
          lineCount++;
        }
        if (lineCount > maxLines2) {
          const name = upperCaseFirst(
            astUtils2.getFunctionNameWithKind(funcNode)
          );
          context.report({
            node: node2,
            messageId: "exceed",
            data: { name, lineCount, maxLines: maxLines2 }
          });
        }
      }
      return {
        FunctionDeclaration: processFunction,
        FunctionExpression: processFunction,
        ArrowFunctionExpression: processFunction
      };
    }
  };
  return maxLinesPerFunction;
}
var maxNestedCallbacks;
var hasRequiredMaxNestedCallbacks;
function requireMaxNestedCallbacks() {
  if (hasRequiredMaxNestedCallbacks) return maxNestedCallbacks;
  hasRequiredMaxNestedCallbacks = 1;
  maxNestedCallbacks = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce a maximum depth that callbacks can be nested",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-nested-callbacks"
      },
      schema: [
        {
          oneOf: [
            {
              type: "integer",
              minimum: 0
            },
            {
              type: "object",
              properties: {
                maximum: {
                  type: "integer",
                  minimum: 0
                },
                max: {
                  type: "integer",
                  minimum: 0
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        exceed: "Too many nested callbacks ({{num}}). Maximum allowed is {{max}}."
      }
    },
    create(context) {
      const option = context.options[0];
      let THRESHOLD = 10;
      if (typeof option === "object" && (Object.hasOwn(option, "maximum") || Object.hasOwn(option, "max"))) {
        THRESHOLD = option.maximum || option.max;
      } else if (typeof option === "number") {
        THRESHOLD = option;
      }
      const callbackStack = [];
      function checkFunction(node2) {
        const parent = node2.parent;
        if (parent.type === "CallExpression") {
          callbackStack.push(node2);
        }
        if (callbackStack.length > THRESHOLD) {
          const opts = { num: callbackStack.length, max: THRESHOLD };
          context.report({ node: node2, messageId: "exceed", data: opts });
        }
      }
      function popStack() {
        callbackStack.pop();
      }
      return {
        ArrowFunctionExpression: checkFunction,
        "ArrowFunctionExpression:exit": popStack,
        FunctionExpression: checkFunction,
        "FunctionExpression:exit": popStack
      };
    }
  };
  return maxNestedCallbacks;
}
var maxParams;
var hasRequiredMaxParams;
function requireMaxParams() {
  if (hasRequiredMaxParams) return maxParams;
  hasRequiredMaxParams = 1;
  const astUtils2 = requireAstUtils();
  const { upperCaseFirst } = requireStringUtils();
  maxParams = {
    meta: {
      type: "suggestion",
      dialects: ["typescript", "javascript"],
      language: "javascript",
      docs: {
        description: "Enforce a maximum number of parameters in function definitions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-params"
      },
      schema: [
        {
          oneOf: [
            {
              type: "integer",
              minimum: 0
            },
            {
              type: "object",
              properties: {
                maximum: {
                  type: "integer",
                  minimum: 0
                },
                max: {
                  type: "integer",
                  minimum: 0
                },
                countVoidThis: {
                  type: "boolean",
                  description: "Whether to count a `this` declaration when the type is `void`."
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        exceed: "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const option = context.options[0];
      let numParams = 3;
      let countVoidThis = false;
      if (typeof option === "object") {
        if (Object.hasOwn(option, "maximum") || Object.hasOwn(option, "max")) {
          numParams = option.maximum || option.max;
        }
        countVoidThis = option.countVoidThis;
      }
      if (typeof option === "number") {
        numParams = option;
      }
      function checkFunction(node2) {
        const hasVoidThisParam = node2.params.length > 0 && node2.params[0].type === "Identifier" && node2.params[0].name === "this" && node2.params[0].typeAnnotation?.typeAnnotation.type === "TSVoidKeyword";
        const effectiveParamCount = hasVoidThisParam && !countVoidThis ? node2.params.length - 1 : node2.params.length;
        if (effectiveParamCount > numParams) {
          context.report({
            loc: astUtils2.getFunctionHeadLoc(node2, sourceCode2),
            node: node2,
            messageId: "exceed",
            data: {
              name: upperCaseFirst(
                astUtils2.getFunctionNameWithKind(node2)
              ),
              count: effectiveParamCount,
              max: numParams
            }
          });
        }
      }
      return {
        FunctionDeclaration: checkFunction,
        ArrowFunctionExpression: checkFunction,
        FunctionExpression: checkFunction,
        TSDeclareFunction: checkFunction,
        TSFunctionType: checkFunction
      };
    }
  };
  return maxParams;
}
var maxStatements;
var hasRequiredMaxStatements;
function requireMaxStatements() {
  if (hasRequiredMaxStatements) return maxStatements;
  hasRequiredMaxStatements = 1;
  const astUtils2 = requireAstUtils();
  const { upperCaseFirst } = requireStringUtils();
  maxStatements = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce a maximum number of statements allowed in function blocks",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-statements"
      },
      schema: [
        {
          oneOf: [
            {
              type: "integer",
              minimum: 0
            },
            {
              type: "object",
              properties: {
                maximum: {
                  type: "integer",
                  minimum: 0
                },
                max: {
                  type: "integer",
                  minimum: 0
                }
              },
              additionalProperties: false
            }
          ]
        },
        {
          type: "object",
          properties: {
            ignoreTopLevelFunctions: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        exceed: "{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}."
      }
    },
    create(context) {
      const functionStack = [], option = context.options[0], ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false, topLevelFunctions = [];
      let maxStatements2 = 10;
      if (typeof option === "object" && (Object.hasOwn(option, "maximum") || Object.hasOwn(option, "max"))) {
        maxStatements2 = option.maximum || option.max;
      } else if (typeof option === "number") {
        maxStatements2 = option;
      }
      function reportIfTooManyStatements(node2, count, max) {
        if (count > max) {
          const name = upperCaseFirst(
            astUtils2.getFunctionNameWithKind(node2)
          );
          context.report({
            node: node2,
            messageId: "exceed",
            data: { name, count, max }
          });
        }
      }
      function startFunction() {
        functionStack.push(0);
      }
      function endFunction(node2) {
        const count = functionStack.pop();
        if (node2.type === "StaticBlock") {
          return;
        }
        if (ignoreTopLevelFunctions && functionStack.length === 0) {
          topLevelFunctions.push({ node: node2, count });
        } else {
          reportIfTooManyStatements(node2, count, maxStatements2);
        }
      }
      function countStatements(node2) {
        functionStack[functionStack.length - 1] += node2.body.length;
      }
      return {
        FunctionDeclaration: startFunction,
        FunctionExpression: startFunction,
        ArrowFunctionExpression: startFunction,
        StaticBlock: startFunction,
        BlockStatement: countStatements,
        "FunctionDeclaration:exit": endFunction,
        "FunctionExpression:exit": endFunction,
        "ArrowFunctionExpression:exit": endFunction,
        "StaticBlock:exit": endFunction,
        "Program:exit"() {
          if (topLevelFunctions.length === 1) {
            return;
          }
          topLevelFunctions.forEach((element) => {
            const count = element.count;
            const node2 = element.node;
            reportIfTooManyStatements(node2, count, maxStatements2);
          });
        }
      };
    }
  };
  return maxStatements;
}
var maxStatementsPerLine;
var hasRequiredMaxStatementsPerLine;
function requireMaxStatementsPerLine() {
  if (hasRequiredMaxStatementsPerLine) return maxStatementsPerLine;
  hasRequiredMaxStatementsPerLine = 1;
  const astUtils2 = requireAstUtils();
  maxStatementsPerLine = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "max-statements-per-line",
              url: "https://eslint.style/rules/max-statements-per-line"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce a maximum number of statements allowed per line",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/max-statements-per-line"
      },
      schema: [
        {
          type: "object",
          properties: {
            max: {
              type: "integer",
              minimum: 1,
              default: 1
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        exceed: "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode, options = context.options[0] || {}, maxStatementsPerLine2 = typeof options.max !== "undefined" ? options.max : 1;
      let lastStatementLine = 0, numberOfStatementsOnThisLine = 0, firstExtraStatement;
      const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u;
      function reportFirstExtraStatementAndClear() {
        if (firstExtraStatement) {
          context.report({
            node: firstExtraStatement,
            messageId: "exceed",
            data: {
              numberOfStatementsOnThisLine,
              maxStatementsPerLine: maxStatementsPerLine2,
              statements: numberOfStatementsOnThisLine === 1 ? "statement" : "statements"
            }
          });
        }
        firstExtraStatement = null;
      }
      function getActualLastToken(node2) {
        return sourceCode2.getLastToken(node2, astUtils2.isNotSemicolonToken);
      }
      function enterStatement(node2) {
        const line = node2.loc.start.line;
        if (SINGLE_CHILD_ALLOWED.test(node2.parent.type) && node2.parent.alternate !== node2) {
          return;
        }
        if (line === lastStatementLine) {
          numberOfStatementsOnThisLine += 1;
        } else {
          reportFirstExtraStatementAndClear();
          numberOfStatementsOnThisLine = 1;
          lastStatementLine = line;
        }
        if (numberOfStatementsOnThisLine === maxStatementsPerLine2 + 1) {
          firstExtraStatement = firstExtraStatement || node2;
        }
      }
      function leaveStatement(node2) {
        const line = getActualLastToken(node2).loc.end.line;
        if (line !== lastStatementLine) {
          reportFirstExtraStatementAndClear();
          numberOfStatementsOnThisLine = 1;
          lastStatementLine = line;
        }
      }
      return {
        BreakStatement: enterStatement,
        ClassDeclaration: enterStatement,
        ContinueStatement: enterStatement,
        DebuggerStatement: enterStatement,
        DoWhileStatement: enterStatement,
        ExpressionStatement: enterStatement,
        ForInStatement: enterStatement,
        ForOfStatement: enterStatement,
        ForStatement: enterStatement,
        FunctionDeclaration: enterStatement,
        IfStatement: enterStatement,
        ImportDeclaration: enterStatement,
        LabeledStatement: enterStatement,
        ReturnStatement: enterStatement,
        SwitchStatement: enterStatement,
        ThrowStatement: enterStatement,
        TryStatement: enterStatement,
        VariableDeclaration: enterStatement,
        WhileStatement: enterStatement,
        WithStatement: enterStatement,
        ExportNamedDeclaration: enterStatement,
        ExportDefaultDeclaration: enterStatement,
        ExportAllDeclaration: enterStatement,
        "BreakStatement:exit": leaveStatement,
        "ClassDeclaration:exit": leaveStatement,
        "ContinueStatement:exit": leaveStatement,
        "DebuggerStatement:exit": leaveStatement,
        "DoWhileStatement:exit": leaveStatement,
        "ExpressionStatement:exit": leaveStatement,
        "ForInStatement:exit": leaveStatement,
        "ForOfStatement:exit": leaveStatement,
        "ForStatement:exit": leaveStatement,
        "FunctionDeclaration:exit": leaveStatement,
        "IfStatement:exit": leaveStatement,
        "ImportDeclaration:exit": leaveStatement,
        "LabeledStatement:exit": leaveStatement,
        "ReturnStatement:exit": leaveStatement,
        "SwitchStatement:exit": leaveStatement,
        "ThrowStatement:exit": leaveStatement,
        "TryStatement:exit": leaveStatement,
        "VariableDeclaration:exit": leaveStatement,
        "WhileStatement:exit": leaveStatement,
        "WithStatement:exit": leaveStatement,
        "ExportNamedDeclaration:exit": leaveStatement,
        "ExportDefaultDeclaration:exit": leaveStatement,
        "ExportAllDeclaration:exit": leaveStatement,
        "Program:exit": reportFirstExtraStatementAndClear
      };
    }
  };
  return maxStatementsPerLine;
}
var multilineCommentStyle;
var hasRequiredMultilineCommentStyle;
function requireMultilineCommentStyle() {
  if (hasRequiredMultilineCommentStyle) return multilineCommentStyle;
  hasRequiredMultilineCommentStyle = 1;
  const astUtils2 = requireAstUtils();
  multilineCommentStyle = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "9.3.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "multiline-comment-style",
              url: "https://eslint.style/rules/multiline-comment-style"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Enforce a particular style for multiline comments",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/multiline-comment-style"
      },
      fixable: "whitespace",
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: ["starred-block", "bare-block"]
              }
            ],
            additionalItems: false
          },
          {
            type: "array",
            items: [
              {
                enum: ["separate-lines"]
              },
              {
                type: "object",
                properties: {
                  checkJSDoc: {
                    type: "boolean"
                  }
                },
                additionalProperties: false
              }
            ],
            additionalItems: false
          }
        ]
      },
      messages: {
        expectedBlock: "Expected a block comment instead of consecutive line comments.",
        expectedBareBlock: "Expected a block comment without padding stars.",
        startNewline: "Expected a linebreak after '/*'.",
        endNewline: "Expected a linebreak before '*/'.",
        missingStar: "Expected a '*' at the start of this line.",
        alignment: "Expected this line to be aligned with the start of the comment.",
        expectedLines: "Expected multiple line comments instead of a block comment."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const option = context.options[0] || "starred-block";
      const params = context.options[1] || {};
      const checkJSDoc = !!params.checkJSDoc;
      function isStarredCommentLine(line) {
        return /^\s*\*/u.test(line);
      }
      function isStarredBlockComment([firstComment]) {
        if (firstComment.type !== "Block") {
          return false;
        }
        const lines = firstComment.value.split(astUtils2.LINEBREAK_MATCHER);
        return lines.length > 0 && lines.every(
          (line, i2) => (i2 === 0 || i2 === lines.length - 1 ? /^\s*$/u : /^\s*\*/u).test(line)
        );
      }
      function isJSDocComment([firstComment]) {
        if (firstComment.type !== "Block") {
          return false;
        }
        const lines = firstComment.value.split(astUtils2.LINEBREAK_MATCHER);
        return /^\*\s*$/u.test(lines[0]) && lines.slice(1, -1).every((line) => /^\s* /u.test(line)) && /^\s*$/u.test(lines.at(-1));
      }
      function processSeparateLineComments(commentGroup) {
        const allLinesHaveLeadingSpace = commentGroup.map(({ value }) => value).filter((line) => line.trim().length).every((line) => line.startsWith(" "));
        return commentGroup.map(
          ({ value }) => allLinesHaveLeadingSpace ? value.replace(/^ /u, "") : value
        );
      }
      function processStarredBlockComment(comment2) {
        const lines = comment2.value.split(astUtils2.LINEBREAK_MATCHER).filter(
          (line, i2, linesArr) => !(i2 === 0 || i2 === linesArr.length - 1)
        ).map((line) => line.replace(/^\s*$/u, ""));
        const allLinesHaveLeadingSpace = lines.map((line) => line.replace(/\s*\*/u, "")).filter((line) => line.trim().length).every((line) => line.startsWith(" "));
        return lines.map(
          (line) => line.replace(
            allLinesHaveLeadingSpace ? /\s*\* ?/u : /\s*\*/u,
            ""
          )
        );
      }
      function processBareBlockComment(comment2) {
        const lines = comment2.value.split(astUtils2.LINEBREAK_MATCHER).map((line) => line.replace(/^\s*$/u, ""));
        const leadingWhitespace = `${sourceCode2.text.slice(comment2.range[0] - comment2.loc.start.column, comment2.range[0])}   `;
        let offset = "";
        for (const [i2, line] of lines.entries()) {
          if (!line.trim().length || i2 === 0) {
            continue;
          }
          const [, lineOffset] = line.match(/^(\s*\*?\s*)/u);
          if (lineOffset.length < leadingWhitespace.length) {
            const newOffset = leadingWhitespace.slice(
              lineOffset.length - leadingWhitespace.length
            );
            if (newOffset.length > offset.length) {
              offset = newOffset;
            }
          }
        }
        return lines.map((line) => {
          const match = line.match(/^(\s*\*?\s*)(.*)/u);
          const [, lineOffset, lineContents] = match;
          if (lineOffset.length > leadingWhitespace.length) {
            return `${lineOffset.slice(leadingWhitespace.length - (offset.length + lineOffset.length))}${lineContents}`;
          }
          if (lineOffset.length < leadingWhitespace.length) {
            return `${lineOffset.slice(leadingWhitespace.length)}${lineContents}`;
          }
          return lineContents;
        });
      }
      function getCommentLines(commentGroup) {
        const [firstComment] = commentGroup;
        if (firstComment.type === "Line") {
          return processSeparateLineComments(commentGroup);
        }
        if (isStarredBlockComment(commentGroup)) {
          return processStarredBlockComment(firstComment);
        }
        return processBareBlockComment(firstComment);
      }
      function getInitialOffset(comment2) {
        return sourceCode2.text.slice(
          comment2.range[0] - comment2.loc.start.column,
          comment2.range[0]
        );
      }
      function convertToStarredBlock(firstComment, commentLinesList) {
        const initialOffset = getInitialOffset(firstComment);
        return `/*
${commentLinesList.map((line) => `${initialOffset} * ${line}`).join("\n")}
${initialOffset} */`;
      }
      function convertToSeparateLines(firstComment, commentLinesList) {
        return commentLinesList.map((line) => `// ${line}`).join(`
${getInitialOffset(firstComment)}`);
      }
      function convertToBlock(firstComment, commentLinesList) {
        return `/* ${commentLinesList.join(`
${getInitialOffset(firstComment)}   `)} */`;
      }
      const commentGroupCheckers = {
        "starred-block"(commentGroup) {
          const [firstComment] = commentGroup;
          const commentLines = getCommentLines(commentGroup);
          if (commentLines.some((value) => value.includes("*/"))) {
            return;
          }
          if (commentGroup.length > 1) {
            context.report({
              loc: {
                start: firstComment.loc.start,
                end: commentGroup.at(-1).loc.end
              },
              messageId: "expectedBlock",
              fix(fixer) {
                const range = [
                  firstComment.range[0],
                  commentGroup.at(-1).range[1]
                ];
                return commentLines.some(
                  (value) => value.startsWith("/")
                ) ? null : fixer.replaceTextRange(
                  range,
                  convertToStarredBlock(
                    firstComment,
                    commentLines
                  )
                );
              }
            });
          } else {
            const lines = firstComment.value.split(
              astUtils2.LINEBREAK_MATCHER
            );
            const expectedLeadingWhitespace = getInitialOffset(firstComment);
            const expectedLinePrefix = `${expectedLeadingWhitespace} *`;
            if (!/^\*?\s*$/u.test(lines[0])) {
              const start = firstComment.value.startsWith("*") ? firstComment.range[0] + 1 : firstComment.range[0];
              context.report({
                loc: {
                  start: firstComment.loc.start,
                  end: {
                    line: firstComment.loc.start.line,
                    column: firstComment.loc.start.column + 2
                  }
                },
                messageId: "startNewline",
                fix: (fixer) => fixer.insertTextAfterRange(
                  [start, start + 2],
                  `
${expectedLinePrefix}`
                )
              });
            }
            if (!/^\s*$/u.test(lines.at(-1))) {
              context.report({
                loc: {
                  start: {
                    line: firstComment.loc.end.line,
                    column: firstComment.loc.end.column - 2
                  },
                  end: firstComment.loc.end
                },
                messageId: "endNewline",
                fix: (fixer) => fixer.replaceTextRange(
                  [
                    firstComment.range[1] - 2,
                    firstComment.range[1]
                  ],
                  `
${expectedLinePrefix}/`
                )
              });
            }
            for (let lineNumber = firstComment.loc.start.line + 1; lineNumber <= firstComment.loc.end.line; lineNumber++) {
              const lineText = sourceCode2.lines[lineNumber - 1];
              const errorType = isStarredCommentLine(lineText) ? "alignment" : "missingStar";
              if (!lineText.startsWith(expectedLinePrefix)) {
                context.report({
                  loc: {
                    start: { line: lineNumber, column: 0 },
                    end: {
                      line: lineNumber,
                      column: lineText.length
                    }
                  },
                  messageId: errorType,
                  fix(fixer) {
                    const lineStartIndex = sourceCode2.getIndexFromLoc({
                      line: lineNumber,
                      column: 0
                    });
                    if (errorType === "alignment") {
                      const [, commentTextPrefix2 = ""] = lineText.match(/^(\s*\*)/u) || [];
                      const commentTextStartIndex2 = lineStartIndex + commentTextPrefix2.length;
                      return fixer.replaceTextRange(
                        [
                          lineStartIndex,
                          commentTextStartIndex2
                        ],
                        expectedLinePrefix
                      );
                    }
                    const [, commentTextPrefix = ""] = lineText.match(/^(\s*)/u) || [];
                    const commentTextStartIndex = lineStartIndex + commentTextPrefix.length;
                    let offset;
                    for (const [idx, line] of lines.entries()) {
                      if (!/\S+/u.test(line)) {
                        continue;
                      }
                      const lineTextToAlignWith = sourceCode2.lines[firstComment.loc.start.line - 1 + idx];
                      const [
                        ,
                        prefix = "",
                        initialOffset = ""
                      ] = lineTextToAlignWith.match(
                        /^(\s*(?:\/?\*)?(\s*))/u
                      ) || [];
                      offset = `${commentTextPrefix.slice(prefix.length)}${initialOffset}`;
                      if (/^\s*\//u.test(lineText) && offset.length === 0) {
                        offset += " ";
                      }
                      break;
                    }
                    return fixer.replaceTextRange(
                      [lineStartIndex, commentTextStartIndex],
                      `${expectedLinePrefix}${offset}`
                    );
                  }
                });
              }
            }
          }
        },
        "separate-lines"(commentGroup) {
          const [firstComment] = commentGroup;
          const isJSDoc = isJSDocComment(commentGroup);
          if (firstComment.type !== "Block" || !checkJSDoc && isJSDoc) {
            return;
          }
          let commentLines = getCommentLines(commentGroup);
          if (isJSDoc) {
            commentLines = commentLines.slice(
              1,
              commentLines.length - 1
            );
          }
          const tokenAfter = sourceCode2.getTokenAfter(firstComment, {
            includeComments: true
          });
          if (tokenAfter && firstComment.loc.end.line === tokenAfter.loc.start.line) {
            return;
          }
          context.report({
            loc: {
              start: firstComment.loc.start,
              end: {
                line: firstComment.loc.start.line,
                column: firstComment.loc.start.column + 2
              }
            },
            messageId: "expectedLines",
            fix(fixer) {
              return fixer.replaceText(
                firstComment,
                convertToSeparateLines(firstComment, commentLines)
              );
            }
          });
        },
        "bare-block"(commentGroup) {
          if (isJSDocComment(commentGroup)) {
            return;
          }
          const [firstComment] = commentGroup;
          const commentLines = getCommentLines(commentGroup);
          if (firstComment.type === "Line" && commentLines.length > 1 && !commentLines.some((value) => value.includes("*/"))) {
            context.report({
              loc: {
                start: firstComment.loc.start,
                end: commentGroup.at(-1).loc.end
              },
              messageId: "expectedBlock",
              fix(fixer) {
                return fixer.replaceTextRange(
                  [
                    firstComment.range[0],
                    commentGroup.at(-1).range[1]
                  ],
                  convertToBlock(firstComment, commentLines)
                );
              }
            });
          }
          if (isStarredBlockComment(commentGroup)) {
            context.report({
              loc: {
                start: firstComment.loc.start,
                end: {
                  line: firstComment.loc.start.line,
                  column: firstComment.loc.start.column + 2
                }
              },
              messageId: "expectedBareBlock",
              fix(fixer) {
                return fixer.replaceText(
                  firstComment,
                  convertToBlock(firstComment, commentLines)
                );
              }
            });
          }
        }
      };
      return {
        Program() {
          return sourceCode2.getAllComments().filter((comment2) => comment2.type !== "Shebang").filter(
            (comment2) => !astUtils2.COMMENTS_IGNORE_PATTERN.test(
              comment2.value
            )
          ).filter((comment2) => {
            const tokenBefore = sourceCode2.getTokenBefore(comment2, {
              includeComments: true
            });
            return !tokenBefore || tokenBefore.loc.end.line < comment2.loc.start.line;
          }).reduce((commentGroups, comment2, index, commentList) => {
            const tokenBefore = sourceCode2.getTokenBefore(comment2, {
              includeComments: true
            });
            if (comment2.type === "Line" && index && commentList[index - 1].type === "Line" && tokenBefore && tokenBefore.loc.end.line === comment2.loc.start.line - 1 && tokenBefore === commentList[index - 1]) {
              commentGroups.at(-1).push(comment2);
            } else {
              commentGroups.push([comment2]);
            }
            return commentGroups;
          }, []).filter(
            (commentGroup) => !(commentGroup.length === 1 && commentGroup[0].loc.start.line === commentGroup[0].loc.end.line)
          ).forEach(commentGroupCheckers[option]);
        }
      };
    }
  };
  return multilineCommentStyle;
}
var multilineTernary;
var hasRequiredMultilineTernary;
function requireMultilineTernary() {
  if (hasRequiredMultilineTernary) return multilineTernary;
  hasRequiredMultilineTernary = 1;
  const astUtils2 = requireAstUtils();
  multilineTernary = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "multiline-ternary",
              url: "https://eslint.style/rules/multiline-ternary"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce newlines between operands of ternary expressions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/multiline-ternary"
      },
      schema: [
        {
          enum: ["always", "always-multiline", "never"]
        }
      ],
      messages: {
        expectedTestCons: "Expected newline between test and consequent of ternary expression.",
        expectedConsAlt: "Expected newline between consequent and alternate of ternary expression.",
        unexpectedTestCons: "Unexpected newline between test and consequent of ternary expression.",
        unexpectedConsAlt: "Unexpected newline between consequent and alternate of ternary expression."
      },
      fixable: "whitespace"
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const option = context.options[0];
      const multiline = option !== "never";
      const allowSingleLine = option === "always-multiline";
      return {
        ConditionalExpression(node2) {
          const questionToken = sourceCode2.getTokenAfter(
            node2.test,
            astUtils2.isNotClosingParenToken
          );
          const colonToken = sourceCode2.getTokenAfter(
            node2.consequent,
            astUtils2.isNotClosingParenToken
          );
          const firstTokenOfTest = sourceCode2.getFirstToken(node2);
          const lastTokenOfTest = sourceCode2.getTokenBefore(questionToken);
          const firstTokenOfConsequent = sourceCode2.getTokenAfter(questionToken);
          const lastTokenOfConsequent = sourceCode2.getTokenBefore(colonToken);
          const firstTokenOfAlternate = sourceCode2.getTokenAfter(colonToken);
          const areTestAndConsequentOnSameLine = astUtils2.isTokenOnSameLine(
            lastTokenOfTest,
            firstTokenOfConsequent
          );
          const areConsequentAndAlternateOnSameLine = astUtils2.isTokenOnSameLine(
            lastTokenOfConsequent,
            firstTokenOfAlternate
          );
          const hasComments = !!sourceCode2.getCommentsInside(node2).length;
          if (!multiline) {
            if (!areTestAndConsequentOnSameLine) {
              context.report({
                node: node2.test,
                loc: {
                  start: firstTokenOfTest.loc.start,
                  end: lastTokenOfTest.loc.end
                },
                messageId: "unexpectedTestCons",
                fix(fixer) {
                  if (hasComments) {
                    return null;
                  }
                  const fixers = [];
                  const areTestAndQuestionOnSameLine = astUtils2.isTokenOnSameLine(
                    lastTokenOfTest,
                    questionToken
                  );
                  const areQuestionAndConsOnSameLine = astUtils2.isTokenOnSameLine(
                    questionToken,
                    firstTokenOfConsequent
                  );
                  if (!areTestAndQuestionOnSameLine) {
                    fixers.push(
                      fixer.removeRange([
                        lastTokenOfTest.range[1],
                        questionToken.range[0]
                      ])
                    );
                  }
                  if (!areQuestionAndConsOnSameLine) {
                    fixers.push(
                      fixer.removeRange([
                        questionToken.range[1],
                        firstTokenOfConsequent.range[0]
                      ])
                    );
                  }
                  return fixers;
                }
              });
            }
            if (!areConsequentAndAlternateOnSameLine) {
              context.report({
                node: node2.consequent,
                loc: {
                  start: firstTokenOfConsequent.loc.start,
                  end: lastTokenOfConsequent.loc.end
                },
                messageId: "unexpectedConsAlt",
                fix(fixer) {
                  if (hasComments) {
                    return null;
                  }
                  const fixers = [];
                  const areConsAndColonOnSameLine = astUtils2.isTokenOnSameLine(
                    lastTokenOfConsequent,
                    colonToken
                  );
                  const areColonAndAltOnSameLine = astUtils2.isTokenOnSameLine(
                    colonToken,
                    firstTokenOfAlternate
                  );
                  if (!areConsAndColonOnSameLine) {
                    fixers.push(
                      fixer.removeRange([
                        lastTokenOfConsequent.range[1],
                        colonToken.range[0]
                      ])
                    );
                  }
                  if (!areColonAndAltOnSameLine) {
                    fixers.push(
                      fixer.removeRange([
                        colonToken.range[1],
                        firstTokenOfAlternate.range[0]
                      ])
                    );
                  }
                  return fixers;
                }
              });
            }
          } else {
            if (allowSingleLine && node2.loc.start.line === node2.loc.end.line) {
              return;
            }
            if (areTestAndConsequentOnSameLine) {
              context.report({
                node: node2.test,
                loc: {
                  start: firstTokenOfTest.loc.start,
                  end: lastTokenOfTest.loc.end
                },
                messageId: "expectedTestCons",
                fix: (fixer) => hasComments ? null : fixer.replaceTextRange(
                  [
                    lastTokenOfTest.range[1],
                    questionToken.range[0]
                  ],
                  "\n"
                )
              });
            }
            if (areConsequentAndAlternateOnSameLine) {
              context.report({
                node: node2.consequent,
                loc: {
                  start: firstTokenOfConsequent.loc.start,
                  end: lastTokenOfConsequent.loc.end
                },
                messageId: "expectedConsAlt",
                fix: (fixer) => hasComments ? null : fixer.replaceTextRange(
                  [
                    lastTokenOfConsequent.range[1],
                    colonToken.range[0]
                  ],
                  "\n"
                )
              });
            }
          }
        }
      };
    }
  };
  return multilineTernary;
}
var newCap;
var hasRequiredNewCap;
function requireNewCap() {
  if (hasRequiredNewCap) return newCap;
  hasRequiredNewCap = 1;
  const astUtils2 = requireAstUtils();
  const CAPS_ALLOWED = [
    "Array",
    "Boolean",
    "Date",
    "Error",
    "Function",
    "Number",
    "Object",
    "RegExp",
    "String",
    "Symbol",
    "BigInt"
  ];
  function invert(map, key) {
    map[key] = true;
    return map;
  }
  function calculateCapIsNewExceptions(config2) {
    const capIsNewExceptions = Array.from(
      /* @__PURE__ */ new Set([...config2.capIsNewExceptions, ...CAPS_ALLOWED])
    );
    return capIsNewExceptions.reduce(invert, {});
  }
  newCap = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require constructor names to begin with a capital letter",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/new-cap"
      },
      schema: [
        {
          type: "object",
          properties: {
            newIsCap: {
              type: "boolean"
            },
            capIsNew: {
              type: "boolean"
            },
            newIsCapExceptions: {
              type: "array",
              items: {
                type: "string"
              }
            },
            newIsCapExceptionPattern: {
              type: "string"
            },
            capIsNewExceptions: {
              type: "array",
              items: {
                type: "string"
              }
            },
            capIsNewExceptionPattern: {
              type: "string"
            },
            properties: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      defaultOptions: [
        {
          capIsNew: true,
          capIsNewExceptions: CAPS_ALLOWED,
          newIsCap: true,
          newIsCapExceptions: [],
          properties: true
        }
      ],
      messages: {
        upper: "A function with a name starting with an uppercase letter should only be used as a constructor.",
        lower: "A constructor name should not start with a lowercase letter."
      }
    },
    create(context) {
      const [config2] = context.options;
      const skipProperties = !config2.properties;
      const newIsCapExceptions = config2.newIsCapExceptions.reduce(invert, {});
      const newIsCapExceptionPattern = config2.newIsCapExceptionPattern ? new RegExp(config2.newIsCapExceptionPattern, "u") : null;
      const capIsNewExceptions = calculateCapIsNewExceptions(config2);
      const capIsNewExceptionPattern = config2.capIsNewExceptionPattern ? new RegExp(config2.capIsNewExceptionPattern, "u") : null;
      const listeners = {};
      const sourceCode2 = context.sourceCode;
      function extractNameFromExpression(node2) {
        return node2.callee.type === "Identifier" ? node2.callee.name : astUtils2.getStaticPropertyName(node2.callee) || "";
      }
      function getCap(str) {
        const firstChar = str.charAt(0);
        const firstCharLower = firstChar.toLowerCase();
        const firstCharUpper = firstChar.toUpperCase();
        if (firstCharLower === firstCharUpper) {
          return "non-alpha";
        }
        if (firstChar === firstCharLower) {
          return "lower";
        }
        return "upper";
      }
      function isCapAllowed(allowedMap, node2, calleeName, pattern2) {
        const sourceText = sourceCode2.getText(node2.callee);
        if (allowedMap[calleeName] || allowedMap[sourceText]) {
          return true;
        }
        if (pattern2 && pattern2.test(sourceText)) {
          return true;
        }
        const callee = astUtils2.skipChainExpression(node2.callee);
        if (calleeName === "UTC" && callee.type === "MemberExpression") {
          return callee.object.type === "Identifier" && callee.object.name === "Date";
        }
        return skipProperties && callee.type === "MemberExpression";
      }
      function report(node2, messageId) {
        let callee = astUtils2.skipChainExpression(node2.callee);
        if (callee.type === "MemberExpression") {
          callee = callee.property;
        }
        context.report({ node: node2, loc: callee.loc, messageId });
      }
      if (config2.newIsCap) {
        listeners.NewExpression = function(node2) {
          const constructorName = extractNameFromExpression(node2);
          if (constructorName) {
            const capitalization = getCap(constructorName);
            const isAllowed = capitalization !== "lower" || isCapAllowed(
              newIsCapExceptions,
              node2,
              constructorName,
              newIsCapExceptionPattern
            );
            if (!isAllowed) {
              report(node2, "lower");
            }
          }
        };
      }
      if (config2.capIsNew) {
        listeners.CallExpression = function(node2) {
          const calleeName = extractNameFromExpression(node2);
          if (calleeName) {
            const capitalization = getCap(calleeName);
            const isAllowed = capitalization !== "upper" || isCapAllowed(
              capIsNewExceptions,
              node2,
              calleeName,
              capIsNewExceptionPattern
            );
            if (!isAllowed) {
              report(node2, "upper");
            }
          }
        };
      }
      return listeners;
    }
  };
  return newCap;
}
var newParens;
var hasRequiredNewParens;
function requireNewParens() {
  if (hasRequiredNewParens) return newParens;
  hasRequiredNewParens = 1;
  const astUtils2 = requireAstUtils();
  newParens = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "new-parens",
              url: "https://eslint.style/rules/new-parens"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce or disallow parentheses when invoking a constructor with no arguments",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/new-parens"
      },
      fixable: "code",
      schema: [
        {
          enum: ["always", "never"]
        }
      ],
      messages: {
        missing: "Missing '()' invoking a constructor.",
        unnecessary: "Unnecessary '()' invoking a constructor with no arguments."
      }
    },
    create(context) {
      const options = context.options;
      const always = options[0] !== "never";
      const sourceCode2 = context.sourceCode;
      return {
        NewExpression(node2) {
          if (node2.arguments.length !== 0) {
            return;
          }
          const lastToken = sourceCode2.getLastToken(node2);
          const hasLastParen = lastToken && astUtils2.isClosingParenToken(lastToken);
          const hasParens = hasLastParen && astUtils2.isOpeningParenToken(
            sourceCode2.getTokenBefore(lastToken)
          ) && node2.callee.range[1] < node2.range[1];
          if (always) {
            if (!hasParens) {
              context.report({
                node: node2,
                messageId: "missing",
                fix: (fixer) => fixer.insertTextAfter(node2, "()")
              });
            }
          } else {
            if (hasParens) {
              context.report({
                node: node2,
                messageId: "unnecessary",
                fix: (fixer) => [
                  fixer.remove(
                    sourceCode2.getTokenBefore(lastToken)
                  ),
                  fixer.remove(lastToken),
                  fixer.insertTextBefore(node2, "("),
                  fixer.insertTextAfter(node2, ")")
                ]
              });
            }
          }
        }
      };
    }
  };
  return newParens;
}
var newlineAfterVar;
var hasRequiredNewlineAfterVar;
function requireNewlineAfterVar() {
  if (hasRequiredNewlineAfterVar) return newlineAfterVar;
  hasRequiredNewlineAfterVar = 1;
  const astUtils2 = requireAstUtils();
  newlineAfterVar = {
    meta: {
      type: "layout",
      docs: {
        description: "Require or disallow an empty line after variable declarations",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/newline-after-var"
      },
      schema: [
        {
          enum: ["never", "always"]
        }
      ],
      fixable: "whitespace",
      messages: {
        expected: "Expected blank line after variable declarations.",
        unexpected: "Unexpected blank line after variable declarations."
      },
      deprecated: {
        message: "The rule was replaced with a more general rule.",
        url: "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        deprecatedSince: "4.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "The new rule moved to a plugin.",
            url: "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "padding-line-between-statements",
              url: "https://eslint.style/rules/padding-line-between-statements"
            }
          }
        ]
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const mode = context.options[0] === "never" ? "never" : "always";
      const commentEndLine = sourceCode2.getAllComments().reduce((result, token) => {
        result[token.loc.start.line] = token.loc.end.line;
        return result;
      }, {});
      function getLastToken(node2) {
        const lastToken = sourceCode2.getLastToken(node2);
        if (lastToken.type === "Punctuator" && lastToken.value === ";") {
          const prevToken = sourceCode2.getTokenBefore(lastToken);
          if (prevToken.loc.end.line !== lastToken.loc.start.line) {
            return prevToken;
          }
        }
        return lastToken;
      }
      function isVar(keyword2) {
        return keyword2 === "var" || keyword2 === "let" || keyword2 === "const";
      }
      function isForTypeSpecifier(keyword2) {
        return keyword2 === "ForStatement" || keyword2 === "ForInStatement" || keyword2 === "ForOfStatement";
      }
      function isExportSpecifier(nodeType) {
        return nodeType === "ExportNamedDeclaration" || nodeType === "ExportSpecifier" || nodeType === "ExportDefaultDeclaration" || nodeType === "ExportAllDeclaration";
      }
      function isLastNode(node2) {
        const token = sourceCode2.getTokenAfter(node2);
        return !token || token.type === "Punctuator" && token.value === "}";
      }
      function getLastCommentLineOfBlock(commentStartLine) {
        const currentCommentEnd = commentEndLine[commentStartLine];
        return commentEndLine[currentCommentEnd + 1] ? getLastCommentLineOfBlock(currentCommentEnd + 1) : currentCommentEnd;
      }
      function hasBlankLineAfterComment(token, commentStartLine) {
        return token.loc.start.line > getLastCommentLineOfBlock(commentStartLine) + 1;
      }
      function checkForBlankLine(node2) {
        const lastToken = getLastToken(node2), nextToken = lastToken === sourceCode2.getLastToken(node2) ? sourceCode2.getTokenAfter(node2) : sourceCode2.getLastToken(node2), nextLineNum = lastToken.loc.end.line + 1;
        if (!nextToken) {
          return;
        }
        if (isForTypeSpecifier(node2.parent.type)) {
          return;
        }
        if (isExportSpecifier(node2.parent.type)) {
          return;
        }
        if (nextToken.type === "Keyword" && isVar(nextToken.value)) {
          return;
        }
        if (isLastNode(node2)) {
          return;
        }
        const noNextLineToken = nextToken.loc.start.line > nextLineNum;
        const hasNextLineComment = typeof commentEndLine[nextLineNum] !== "undefined";
        if (mode === "never" && noNextLineToken && !hasNextLineComment) {
          context.report({
            node: node2,
            messageId: "unexpected",
            fix(fixer) {
              const linesBetween = sourceCode2.getText().slice(lastToken.range[1], nextToken.range[0]).split(astUtils2.LINEBREAK_MATCHER);
              return fixer.replaceTextRange(
                [lastToken.range[1], nextToken.range[0]],
                `${linesBetween.slice(0, -1).join("")}
${linesBetween.at(-1)}`
              );
            }
          });
        }
        if (mode === "always" && (!noNextLineToken || hasNextLineComment && !hasBlankLineAfterComment(nextToken, nextLineNum))) {
          context.report({
            node: node2,
            messageId: "expected",
            fix(fixer) {
              if ((noNextLineToken ? getLastCommentLineOfBlock(nextLineNum) : lastToken.loc.end.line) === nextToken.loc.start.line) {
                return fixer.insertTextBefore(nextToken, "\n\n");
              }
              return fixer.insertTextBeforeRange(
                [
                  nextToken.range[0] - nextToken.loc.start.column,
                  nextToken.range[1]
                ],
                "\n"
              );
            }
          });
        }
      }
      return {
        VariableDeclaration: checkForBlankLine
      };
    }
  };
  return newlineAfterVar;
}
var newlineBeforeReturn;
var hasRequiredNewlineBeforeReturn;
function requireNewlineBeforeReturn() {
  if (hasRequiredNewlineBeforeReturn) return newlineBeforeReturn;
  hasRequiredNewlineBeforeReturn = 1;
  newlineBeforeReturn = {
    meta: {
      type: "layout",
      docs: {
        description: "Require an empty line before `return` statements",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/newline-before-return"
      },
      fixable: "whitespace",
      schema: [],
      messages: {
        expected: "Expected newline before return statement."
      },
      deprecated: {
        message: "The rule was replaced with a more general rule.",
        url: "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        deprecatedSince: "4.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "The new rule moved to a plugin.",
            url: "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "padding-line-between-statements",
              url: "https://eslint.style/rules/padding-line-between-statements"
            }
          }
        ]
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function isPrecededByTokens(node2, testTokens) {
        const tokenBefore = sourceCode2.getTokenBefore(node2);
        return testTokens.includes(tokenBefore.value);
      }
      function isFirstNode(node2) {
        const parentType = node2.parent.type;
        if (node2.parent.body) {
          return Array.isArray(node2.parent.body) ? node2.parent.body[0] === node2 : node2.parent.body === node2;
        }
        if (parentType === "IfStatement") {
          return isPrecededByTokens(node2, ["else", ")"]);
        }
        if (parentType === "DoWhileStatement") {
          return isPrecededByTokens(node2, ["do"]);
        }
        if (parentType === "SwitchCase") {
          return isPrecededByTokens(node2, [":"]);
        }
        return isPrecededByTokens(node2, [")"]);
      }
      function calcCommentLines(node2, lineNumTokenBefore) {
        const comments = sourceCode2.getCommentsBefore(node2);
        let numLinesComments = 0;
        if (!comments.length) {
          return numLinesComments;
        }
        comments.forEach((comment2) => {
          numLinesComments++;
          if (comment2.type === "Block") {
            numLinesComments += comment2.loc.end.line - comment2.loc.start.line;
          }
          if (comment2.loc.start.line === lineNumTokenBefore) {
            numLinesComments--;
          }
          if (comment2.loc.end.line === node2.loc.start.line) {
            numLinesComments--;
          }
        });
        return numLinesComments;
      }
      function getLineNumberOfTokenBefore(node2) {
        const tokenBefore = sourceCode2.getTokenBefore(node2);
        let lineNumTokenBefore;
        if (tokenBefore) {
          lineNumTokenBefore = tokenBefore.loc.end.line;
        } else {
          lineNumTokenBefore = 0;
        }
        return lineNumTokenBefore;
      }
      function hasNewlineBefore(node2) {
        const lineNumNode = node2.loc.start.line;
        const lineNumTokenBefore = getLineNumberOfTokenBefore(node2);
        const commentLines = calcCommentLines(node2, lineNumTokenBefore);
        return lineNumNode - lineNumTokenBefore - commentLines > 1;
      }
      function canFix(node2) {
        const leadingComments = sourceCode2.getCommentsBefore(node2);
        const lastLeadingComment = leadingComments.at(-1);
        const tokenBefore = sourceCode2.getTokenBefore(node2);
        if (leadingComments.length === 0) {
          return true;
        }
        if (lastLeadingComment.loc.end.line === tokenBefore.loc.end.line && lastLeadingComment.loc.end.line !== node2.loc.start.line) {
          return true;
        }
        return false;
      }
      return {
        ReturnStatement(node2) {
          if (!isFirstNode(node2) && !hasNewlineBefore(node2)) {
            context.report({
              node: node2,
              messageId: "expected",
              fix(fixer) {
                if (canFix(node2)) {
                  const tokenBefore = sourceCode2.getTokenBefore(node2);
                  const newlines = node2.loc.start.line === tokenBefore.loc.end.line ? "\n\n" : "\n";
                  return fixer.insertTextBefore(node2, newlines);
                }
                return null;
              }
            });
          }
        }
      };
    }
  };
  return newlineBeforeReturn;
}
var newlinePerChainedCall;
var hasRequiredNewlinePerChainedCall;
function requireNewlinePerChainedCall() {
  if (hasRequiredNewlinePerChainedCall) return newlinePerChainedCall;
  hasRequiredNewlinePerChainedCall = 1;
  const astUtils2 = requireAstUtils();
  newlinePerChainedCall = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "newline-per-chained-call",
              url: "https://eslint.style/rules/newline-per-chained-call"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require a newline after each call in a method chain",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/newline-per-chained-call"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            ignoreChainWithDepth: {
              type: "integer",
              minimum: 1,
              maximum: 10,
              default: 2
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        expected: "Expected line break before `{{callee}}`."
      }
    },
    create(context) {
      const options = context.options[0] || {}, ignoreChainWithDepth = options.ignoreChainWithDepth || 2;
      const sourceCode2 = context.sourceCode;
      function getPrefix(node2) {
        if (node2.computed) {
          if (node2.optional) {
            return "?.[";
          }
          return "[";
        }
        if (node2.optional) {
          return "?.";
        }
        return ".";
      }
      function getPropertyText(node2) {
        const prefix = getPrefix(node2);
        const lines = sourceCode2.getText(node2.property).split(astUtils2.LINEBREAK_MATCHER);
        const suffix = node2.computed && lines.length === 1 ? "]" : "";
        return prefix + lines[0] + suffix;
      }
      return {
        "CallExpression:exit"(node2) {
          const callee = astUtils2.skipChainExpression(node2.callee);
          if (callee.type !== "MemberExpression") {
            return;
          }
          let parent = astUtils2.skipChainExpression(callee.object);
          let depth = 1;
          while (parent && parent.callee) {
            depth += 1;
            parent = astUtils2.skipChainExpression(
              astUtils2.skipChainExpression(parent.callee).object
            );
          }
          if (depth > ignoreChainWithDepth && astUtils2.isTokenOnSameLine(callee.object, callee.property)) {
            const firstTokenAfterObject = sourceCode2.getTokenAfter(
              callee.object,
              astUtils2.isNotClosingParenToken
            );
            context.report({
              node: callee.property,
              loc: {
                start: firstTokenAfterObject.loc.start,
                end: callee.loc.end
              },
              messageId: "expected",
              data: {
                callee: getPropertyText(callee)
              },
              fix(fixer) {
                return fixer.insertTextBefore(
                  firstTokenAfterObject,
                  "\n"
                );
              }
            });
          }
        }
      };
    }
  };
  return newlinePerChainedCall;
}
var noAlert;
var hasRequiredNoAlert;
function requireNoAlert() {
  if (hasRequiredNoAlert) return noAlert;
  hasRequiredNoAlert = 1;
  const {
    getStaticPropertyName: getPropertyName,
    getVariableByName,
    skipChainExpression
  } = requireAstUtils();
  function isProhibitedIdentifier(name) {
    return /^(?:alert|confirm|prompt)$/u.test(name);
  }
  function findReference(scope, node2) {
    const references = scope.references.filter(
      (reference) => reference.identifier.range[0] === node2.range[0] && reference.identifier.range[1] === node2.range[1]
    );
    if (references.length === 1) {
      return references[0];
    }
    return null;
  }
  function isShadowed(scope, node2) {
    const reference = findReference(scope, node2);
    return reference && reference.resolved && reference.resolved.defs.length > 0;
  }
  function isGlobalThisReferenceOrGlobalWindow(scope, node2) {
    if (scope.type === "global" && node2.type === "ThisExpression") {
      return true;
    }
    if (node2.type === "Identifier" && (node2.name === "window" || node2.name === "globalThis" && getVariableByName(scope, "globalThis"))) {
      return !isShadowed(scope, node2);
    }
    return false;
  }
  noAlert = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow the use of `alert`, `confirm`, and `prompt`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-alert"
      },
      schema: [],
      messages: {
        unexpected: "Unexpected {{name}}."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        CallExpression(node2) {
          const callee = skipChainExpression(node2.callee), currentScope = sourceCode2.getScope(node2);
          if (callee.type === "Identifier") {
            const name = callee.name;
            if (!isShadowed(currentScope, callee) && isProhibitedIdentifier(callee.name)) {
              context.report({
                node: node2,
                messageId: "unexpected",
                data: { name }
              });
            }
          } else if (callee.type === "MemberExpression" && isGlobalThisReferenceOrGlobalWindow(
            currentScope,
            callee.object
          )) {
            const name = getPropertyName(callee);
            if (isProhibitedIdentifier(name)) {
              context.report({
                node: node2,
                messageId: "unexpected",
                data: { name }
              });
            }
          }
        }
      };
    }
  };
  return noAlert;
}
var noArrayConstructor;
var hasRequiredNoArrayConstructor;
function requireNoArrayConstructor() {
  if (hasRequiredNoArrayConstructor) return noArrayConstructor;
  hasRequiredNoArrayConstructor = 1;
  const {
    getVariableByName,
    isClosingParenToken,
    isOpeningParenToken,
    isStartOfExpressionStatement,
    needsPrecedingSemicolon
  } = requireAstUtils();
  noArrayConstructor = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "suggestion",
      docs: {
        description: "Disallow `Array` constructors",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-array-constructor"
      },
      fixable: "code",
      hasSuggestions: true,
      schema: [],
      messages: {
        preferLiteral: "The array literal notation [] is preferable.",
        useLiteral: "Replace with an array literal.",
        useLiteralAfterSemicolon: "Replace with an array literal, add preceding semicolon."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function hasCommentsInArrayConstructor(node2) {
        const firstToken = sourceCode2.getFirstToken(node2);
        const lastToken = sourceCode2.getLastToken(node2);
        let lastRelevantToken = sourceCode2.getLastToken(node2.callee);
        while (lastRelevantToken !== lastToken && !isOpeningParenToken(lastRelevantToken)) {
          lastRelevantToken = sourceCode2.getTokenAfter(lastRelevantToken);
        }
        return sourceCode2.commentsExistBetween(
          firstToken,
          lastRelevantToken
        );
      }
      function getArgumentsText(node2) {
        const lastToken = sourceCode2.getLastToken(node2);
        if (!isClosingParenToken(lastToken)) {
          return "";
        }
        let firstToken = node2.callee;
        do {
          firstToken = sourceCode2.getTokenAfter(firstToken);
          if (!firstToken || firstToken === lastToken) {
            return "";
          }
        } while (!isOpeningParenToken(firstToken));
        return sourceCode2.text.slice(
          firstToken.range[1],
          lastToken.range[0]
        );
      }
      function check2(node2) {
        if (node2.callee.type !== "Identifier" || node2.callee.name !== "Array" || node2.typeArguments || node2.arguments.length === 1 && node2.arguments[0].type !== "SpreadElement") {
          return;
        }
        const variable = getVariableByName(
          sourceCode2.getScope(node2),
          "Array"
        );
        if (variable && variable.identifiers.length === 0) {
          const argsText = getArgumentsText(node2);
          let fixText;
          let messageId;
          const nonSpreadCount = node2.arguments.reduce(
            (count, arg) => arg.type !== "SpreadElement" ? count + 1 : count,
            0
          );
          const shouldSuggest = node2.optional || node2.arguments.length > 0 && nonSpreadCount < 2 || hasCommentsInArrayConstructor(node2);
          if (isStartOfExpressionStatement(node2) && needsPrecedingSemicolon(sourceCode2, node2)) {
            fixText = `;[${argsText}]`;
            messageId = "useLiteralAfterSemicolon";
          } else {
            fixText = `[${argsText}]`;
            messageId = "useLiteral";
          }
          context.report({
            node: node2,
            messageId: "preferLiteral",
            fix(fixer) {
              if (shouldSuggest) {
                return null;
              }
              return fixer.replaceText(node2, fixText);
            },
            suggest: [
              {
                messageId,
                fix(fixer) {
                  if (shouldSuggest) {
                    return fixer.replaceText(node2, fixText);
                  }
                  return null;
                }
              }
            ]
          });
        }
      }
      return {
        CallExpression: check2,
        NewExpression: check2
      };
    }
  };
  return noArrayConstructor;
}
var noAsyncPromiseExecutor;
var hasRequiredNoAsyncPromiseExecutor;
function requireNoAsyncPromiseExecutor() {
  if (hasRequiredNoAsyncPromiseExecutor) return noAsyncPromiseExecutor;
  hasRequiredNoAsyncPromiseExecutor = 1;
  noAsyncPromiseExecutor = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow using an async function as a Promise executor",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-async-promise-executor"
      },
      fixable: null,
      schema: [],
      messages: {
        async: "Promise executor functions should not be async."
      }
    },
    create(context) {
      return {
        "NewExpression[callee.name='Promise'][arguments.0.async=true]"(node2) {
          context.report({
            node: context.sourceCode.getFirstToken(
              node2.arguments[0],
              (token) => token.value === "async"
            ),
            messageId: "async"
          });
        }
      };
    }
  };
  return noAsyncPromiseExecutor;
}
var noAwaitInLoop;
var hasRequiredNoAwaitInLoop;
function requireNoAwaitInLoop() {
  if (hasRequiredNoAwaitInLoop) return noAwaitInLoop;
  hasRequiredNoAwaitInLoop = 1;
  function isBoundary(node2) {
    const t2 = node2.type;
    return t2 === "FunctionDeclaration" || t2 === "FunctionExpression" || t2 === "ArrowFunctionExpression" || /*
    * Don't report the await expressions on for-await-of loop since it's
    * asynchronous iteration intentionally.
    */
    t2 === "ForOfStatement" && node2.await === true;
  }
  function isLooped(node2, parent) {
    switch (parent.type) {
      case "ForStatement":
        return node2 === parent.test || node2 === parent.update || node2 === parent.body;
      case "ForOfStatement":
      case "ForInStatement":
        return node2 === parent.body || node2 === parent.left && node2.kind === "await using";
      case "WhileStatement":
      case "DoWhileStatement":
        return node2 === parent.test || node2 === parent.body;
      default:
        return false;
    }
  }
  noAwaitInLoop = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow `await` inside of loops",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-await-in-loop"
      },
      schema: [],
      messages: {
        unexpectedAwait: "Unexpected `await` inside a loop."
      }
    },
    create(context) {
      function validate2(awaitNode) {
        if (awaitNode.type === "VariableDeclaration" && awaitNode.kind !== "await using") {
          return;
        }
        if (awaitNode.type === "ForOfStatement" && !awaitNode.await) {
          return;
        }
        let node2 = awaitNode;
        let parent = node2.parent;
        while (parent && !isBoundary(parent)) {
          if (isLooped(node2, parent)) {
            context.report({
              node: awaitNode,
              messageId: "unexpectedAwait"
            });
            return;
          }
          node2 = parent;
          parent = parent.parent;
        }
      }
      return {
        AwaitExpression: validate2,
        ForOfStatement: validate2,
        VariableDeclaration: validate2
      };
    }
  };
  return noAwaitInLoop;
}
var noBitwise;
var hasRequiredNoBitwise;
function requireNoBitwise() {
  if (hasRequiredNoBitwise) return noBitwise;
  hasRequiredNoBitwise = 1;
  const BITWISE_OPERATORS = [
    "^",
    "|",
    "&",
    "<<",
    ">>",
    ">>>",
    "^=",
    "|=",
    "&=",
    "<<=",
    ">>=",
    ">>>=",
    "~"
  ];
  noBitwise = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allow: [],
          int32Hint: false
        }
      ],
      docs: {
        description: "Disallow bitwise operators",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-bitwise"
      },
      schema: [
        {
          type: "object",
          properties: {
            allow: {
              type: "array",
              items: {
                enum: BITWISE_OPERATORS
              },
              uniqueItems: true
            },
            int32Hint: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpected: "Unexpected use of '{{operator}}'."
      }
    },
    create(context) {
      const [{ allow: allowed, int32Hint }] = context.options;
      function report(node2) {
        context.report({
          node: node2,
          messageId: "unexpected",
          data: { operator: node2.operator }
        });
      }
      function hasBitwiseOperator(node2) {
        return BITWISE_OPERATORS.includes(node2.operator);
      }
      function allowedOperator(node2) {
        return allowed.includes(node2.operator);
      }
      function isInt32Hint(node2) {
        return int32Hint && node2.operator === "|" && node2.right && node2.right.type === "Literal" && node2.right.value === 0;
      }
      function checkNodeForBitwiseOperator(node2) {
        if (hasBitwiseOperator(node2) && !allowedOperator(node2) && !isInt32Hint(node2)) {
          report(node2);
        }
      }
      return {
        AssignmentExpression: checkNodeForBitwiseOperator,
        BinaryExpression: checkNodeForBitwiseOperator,
        UnaryExpression: checkNodeForBitwiseOperator
      };
    }
  };
  return noBitwise;
}
var noBufferConstructor;
var hasRequiredNoBufferConstructor;
function requireNoBufferConstructor() {
  if (hasRequiredNoBufferConstructor) return noBufferConstructor;
  hasRequiredNoBufferConstructor = 1;
  noBufferConstructor = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "no-deprecated-api",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-deprecated-api.md"
            }
          }
        ]
      },
      type: "problem",
      docs: {
        description: "Disallow use of the `Buffer()` constructor",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-buffer-constructor"
      },
      schema: [],
      messages: {
        deprecated: "{{expr}} is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead."
      }
    },
    create(context) {
      return {
        "CallExpression[callee.name='Buffer'], NewExpression[callee.name='Buffer']"(node2) {
          context.report({
            node: node2,
            messageId: "deprecated",
            data: {
              expr: node2.type === "CallExpression" ? "Buffer()" : "new Buffer()"
            }
          });
        }
      };
    }
  };
  return noBufferConstructor;
}
var noCaller;
var hasRequiredNoCaller;
function requireNoCaller() {
  if (hasRequiredNoCaller) return noCaller;
  hasRequiredNoCaller = 1;
  noCaller = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow the use of `arguments.caller` or `arguments.callee`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-caller"
      },
      schema: [],
      messages: {
        unexpected: "Avoid arguments.{{prop}}."
      }
    },
    create(context) {
      return {
        MemberExpression(node2) {
          const objectName = node2.object.name, propertyName = node2.property.name;
          if (objectName === "arguments" && !node2.computed && propertyName && propertyName.match(/^calle[er]$/u)) {
            context.report({
              node: node2,
              messageId: "unexpected",
              data: { prop: propertyName }
            });
          }
        }
      };
    }
  };
  return noCaller;
}
var noCaseDeclarations;
var hasRequiredNoCaseDeclarations;
function requireNoCaseDeclarations() {
  if (hasRequiredNoCaseDeclarations) return noCaseDeclarations;
  hasRequiredNoCaseDeclarations = 1;
  noCaseDeclarations = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow lexical declarations in case clauses",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-case-declarations"
      },
      hasSuggestions: true,
      schema: [],
      messages: {
        addBrackets: "Add {} brackets around the case block.",
        unexpected: "Unexpected lexical declaration in case block."
      }
    },
    create(context) {
      function isLexicalDeclaration(node2) {
        switch (node2.type) {
          case "FunctionDeclaration":
          case "ClassDeclaration":
            return true;
          case "VariableDeclaration":
            return node2.kind !== "var";
          default:
            return false;
        }
      }
      return {
        SwitchCase(node2) {
          for (let i2 = 0; i2 < node2.consequent.length; i2++) {
            const statement = node2.consequent[i2];
            if (isLexicalDeclaration(statement)) {
              context.report({
                node: statement,
                messageId: "unexpected",
                suggest: [
                  {
                    messageId: "addBrackets",
                    fix: (fixer) => [
                      fixer.insertTextBefore(
                        node2.consequent[0],
                        "{ "
                      ),
                      fixer.insertTextAfter(
                        node2.consequent.at(-1),
                        " }"
                      )
                    ]
                  }
                ]
              });
            }
          }
        }
      };
    }
  };
  return noCaseDeclarations;
}
var noCatchShadow;
var hasRequiredNoCatchShadow;
function requireNoCatchShadow() {
  if (hasRequiredNoCatchShadow) return noCatchShadow;
  hasRequiredNoCatchShadow = 1;
  const astUtils2 = requireAstUtils();
  noCatchShadow = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `catch` clause parameters from shadowing variables in the outer scope",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-catch-shadow"
      },
      deprecated: {
        message: "This rule was renamed.",
        url: "https://eslint.org/blog/2018/07/eslint-v5.1.0-released/",
        deprecatedSince: "5.1.0",
        availableUntil: null,
        replacedBy: [
          {
            rule: {
              name: "no-shadow",
              url: "https://eslint.org/docs/rules/no-shadow"
            }
          }
        ]
      },
      schema: [],
      messages: {
        mutable: "Value of '{{name}}' may be overwritten in IE 8 and earlier."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function paramIsShadowing(scope, name) {
        return astUtils2.getVariableByName(scope, name) !== null;
      }
      return {
        "CatchClause[param!=null]"(node2) {
          let scope = sourceCode2.getScope(node2);
          if (scope.block === node2) {
            scope = scope.upper;
          }
          if (paramIsShadowing(scope, node2.param.name)) {
            context.report({
              node: node2,
              messageId: "mutable",
              data: { name: node2.param.name }
            });
          }
        }
      };
    }
  };
  return noCatchShadow;
}
var noClassAssign;
var hasRequiredNoClassAssign;
function requireNoClassAssign() {
  if (hasRequiredNoClassAssign) return noClassAssign;
  hasRequiredNoClassAssign = 1;
  const astUtils2 = requireAstUtils();
  noClassAssign = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow reassigning class members",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-class-assign"
      },
      schema: [],
      messages: {
        class: "'{{name}}' is a class."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function checkVariable(variable) {
        astUtils2.getModifyingReferences(variable.references).forEach((reference) => {
          context.report({
            node: reference.identifier,
            messageId: "class",
            data: { name: reference.identifier.name }
          });
        });
      }
      function checkForClass(node2) {
        sourceCode2.getDeclaredVariables(node2).forEach(checkVariable);
      }
      return {
        ClassDeclaration: checkForClass,
        ClassExpression: checkForClass
      };
    }
  };
  return noClassAssign;
}
var noCompareNegZero;
var hasRequiredNoCompareNegZero;
function requireNoCompareNegZero() {
  if (hasRequiredNoCompareNegZero) return noCompareNegZero;
  hasRequiredNoCompareNegZero = 1;
  noCompareNegZero = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow comparing against `-0`",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-compare-neg-zero"
      },
      fixable: null,
      schema: [],
      messages: {
        unexpected: "Do not use the '{{operator}}' operator to compare against -0."
      }
    },
    create(context) {
      function isNegZero(node2) {
        return node2.type === "UnaryExpression" && node2.operator === "-" && node2.argument.type === "Literal" && node2.argument.value === 0;
      }
      const OPERATORS_TO_CHECK = /* @__PURE__ */ new Set([
        ">",
        ">=",
        "<",
        "<=",
        "==",
        "===",
        "!=",
        "!=="
      ]);
      return {
        BinaryExpression(node2) {
          if (OPERATORS_TO_CHECK.has(node2.operator)) {
            if (isNegZero(node2.left) || isNegZero(node2.right)) {
              context.report({
                node: node2,
                messageId: "unexpected",
                data: { operator: node2.operator }
              });
            }
          }
        }
      };
    }
  };
  return noCompareNegZero;
}
var noCondAssign;
var hasRequiredNoCondAssign;
function requireNoCondAssign() {
  if (hasRequiredNoCondAssign) return noCondAssign;
  hasRequiredNoCondAssign = 1;
  const astUtils2 = requireAstUtils();
  const TEST_CONDITION_PARENT_TYPES = /* @__PURE__ */ new Set([
    "IfStatement",
    "WhileStatement",
    "DoWhileStatement",
    "ForStatement",
    "ConditionalExpression"
  ]);
  const NODE_DESCRIPTIONS = {
    DoWhileStatement: "a 'do...while' statement",
    ForStatement: "a 'for' statement",
    IfStatement: "an 'if' statement",
    WhileStatement: "a 'while' statement"
  };
  noCondAssign = {
    meta: {
      type: "problem",
      defaultOptions: ["except-parens"],
      docs: {
        description: "Disallow assignment operators in conditional expressions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-cond-assign"
      },
      schema: [
        {
          enum: ["except-parens", "always"]
        }
      ],
      messages: {
        unexpected: "Unexpected assignment within {{type}}.",
        // must match JSHint's error message
        missing: "Expected a conditional expression and instead saw an assignment."
      }
    },
    create(context) {
      const [prohibitAssign] = context.options;
      const sourceCode2 = context.sourceCode;
      function isConditionalTestExpression(node2) {
        return node2.parent && TEST_CONDITION_PARENT_TYPES.has(node2.parent.type) && node2 === node2.parent.test;
      }
      function findConditionalAncestor(node2) {
        let currentAncestor = node2;
        do {
          if (isConditionalTestExpression(currentAncestor)) {
            return currentAncestor.parent;
          }
        } while ((currentAncestor = currentAncestor.parent) && !astUtils2.isFunction(currentAncestor));
        return null;
      }
      function isParenthesisedTwice(node2) {
        const previousToken = sourceCode2.getTokenBefore(node2, 1), nextToken = sourceCode2.getTokenAfter(node2, 1);
        return astUtils2.isParenthesised(sourceCode2, node2) && previousToken && astUtils2.isOpeningParenToken(previousToken) && previousToken.range[1] <= node2.range[0] && astUtils2.isClosingParenToken(nextToken) && nextToken.range[0] >= node2.range[1];
      }
      function testForAssign(node2) {
        if (node2.test && node2.test.type === "AssignmentExpression" && (node2.type === "ForStatement" ? !astUtils2.isParenthesised(sourceCode2, node2.test) : !isParenthesisedTwice(node2.test))) {
          context.report({
            node: node2.test,
            messageId: "missing"
          });
        }
      }
      function testForConditionalAncestor(node2) {
        const ancestor = findConditionalAncestor(node2);
        if (ancestor) {
          context.report({
            node: node2,
            messageId: "unexpected",
            data: {
              type: NODE_DESCRIPTIONS[ancestor.type] || ancestor.type
            }
          });
        }
      }
      if (prohibitAssign === "always") {
        return {
          AssignmentExpression: testForConditionalAncestor
        };
      }
      return {
        DoWhileStatement: testForAssign,
        ForStatement: testForAssign,
        IfStatement: testForAssign,
        WhileStatement: testForAssign,
        ConditionalExpression: testForAssign
      };
    }
  };
  return noCondAssign;
}
var noConfusingArrow;
var hasRequiredNoConfusingArrow;
function requireNoConfusingArrow() {
  if (hasRequiredNoConfusingArrow) return noConfusingArrow;
  hasRequiredNoConfusingArrow = 1;
  const astUtils2 = requireAstUtils();
  function isConditional(node2) {
    return node2 && node2.type === "ConditionalExpression";
  }
  noConfusingArrow = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-confusing-arrow",
              url: "https://eslint.style/rules/no-confusing-arrow"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow arrow functions where they could be confused with comparisons",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-confusing-arrow"
      },
      fixable: "code",
      schema: [
        {
          type: "object",
          properties: {
            allowParens: { type: "boolean", default: true },
            onlyOneSimpleParam: { type: "boolean", default: false }
          },
          additionalProperties: false
        }
      ],
      messages: {
        confusing: "Arrow function used ambiguously with a conditional expression."
      }
    },
    create(context) {
      const config2 = context.options[0] || {};
      const allowParens = config2.allowParens || config2.allowParens === void 0;
      const onlyOneSimpleParam = config2.onlyOneSimpleParam;
      const sourceCode2 = context.sourceCode;
      function checkArrowFunc(node2) {
        const body = node2.body;
        if (isConditional(body) && !(allowParens && astUtils2.isParenthesised(sourceCode2, body)) && !(onlyOneSimpleParam && !(node2.params.length === 1 && node2.params[0].type === "Identifier"))) {
          context.report({
            node: node2,
            messageId: "confusing",
            fix(fixer) {
              return allowParens && fixer.replaceText(
                node2.body,
                `(${sourceCode2.getText(node2.body)})`
              );
            }
          });
        }
      }
      return {
        ArrowFunctionExpression: checkArrowFunc
      };
    }
  };
  return noConfusingArrow;
}
var noConsole;
var hasRequiredNoConsole;
function requireNoConsole() {
  if (hasRequiredNoConsole) return noConsole;
  hasRequiredNoConsole = 1;
  const astUtils2 = requireAstUtils();
  noConsole = {
    meta: {
      type: "suggestion",
      defaultOptions: [{}],
      docs: {
        description: "Disallow the use of `console`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-console"
      },
      schema: [
        {
          type: "object",
          properties: {
            allow: {
              type: "array",
              items: {
                type: "string"
              },
              minItems: 1,
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      hasSuggestions: true,
      messages: {
        unexpected: "Unexpected console statement.",
        limited: "Unexpected console statement. Only these console methods are allowed: {{ allowed }}.",
        removeConsole: "Remove the console.{{ propertyName }}().",
        removeMethodCall: "Remove the console method call."
      }
    },
    create(context) {
      const [{ allow: allowed = [] }] = context.options;
      const sourceCode2 = context.sourceCode;
      function isConsole(reference) {
        const id2 = reference.identifier;
        return id2 && id2.name === "console";
      }
      function isAllowed(node2) {
        const propertyName = astUtils2.getStaticPropertyName(node2);
        return propertyName && allowed.includes(propertyName);
      }
      function isMemberAccessExceptAllowed(reference) {
        const node2 = reference.identifier;
        const parent = node2.parent;
        return parent.type === "MemberExpression" && parent.object === node2 && !isAllowed(parent);
      }
      function maybeAsiHazard(node2) {
        const SAFE_TOKENS_BEFORE = /^[:;{]$/u;
        const UNSAFE_CHARS_AFTER = /^[-[(/+`]/u;
        const tokenBefore = sourceCode2.getTokenBefore(node2);
        const tokenAfter = sourceCode2.getTokenAfter(node2);
        return Boolean(tokenAfter) && UNSAFE_CHARS_AFTER.test(tokenAfter.value) && tokenAfter.value !== "++" && tokenAfter.value !== "--" && Boolean(tokenBefore) && !SAFE_TOKENS_BEFORE.test(tokenBefore.value);
      }
      function canProvideSuggestions(node2) {
        return node2.parent.type === "CallExpression" && node2.parent.callee === node2 && node2.parent.parent.type === "ExpressionStatement" && astUtils2.STATEMENT_LIST_PARENTS.has(
          node2.parent.parent.parent.type
        ) && !maybeAsiHazard(node2.parent.parent);
      }
      function report(reference) {
        const node2 = reference.identifier.parent;
        const suggest = [];
        if (canProvideSuggestions(node2)) {
          const suggestion = {
            fix(fixer) {
              return fixer.remove(node2.parent.parent);
            }
          };
          if (node2.computed) {
            suggestion.messageId = "removeMethodCall";
          } else {
            suggestion.messageId = "removeConsole";
            suggestion.data = { propertyName: node2.property.name };
          }
          suggest.push(suggestion);
        }
        context.report({
          node: node2,
          loc: node2.loc,
          messageId: allowed.length ? "limited" : "unexpected",
          data: { allowed: allowed.join(", ") },
          suggest
        });
      }
      return {
        "Program:exit"(node2) {
          const scope = sourceCode2.getScope(node2);
          const consoleVar = astUtils2.getVariableByName(scope, "console");
          const shadowed = consoleVar && consoleVar.defs.length > 0;
          const references = consoleVar ? consoleVar.references : scope.through.filter(isConsole);
          if (!shadowed) {
            references.filter(isMemberAccessExceptAllowed).forEach(report);
          }
        }
      };
    }
  };
  return noConsole;
}
var noConstAssign;
var hasRequiredNoConstAssign;
function requireNoConstAssign() {
  if (hasRequiredNoConstAssign) return noConstAssign;
  hasRequiredNoConstAssign = 1;
  const astUtils2 = requireAstUtils();
  const CONSTANT_BINDINGS = /* @__PURE__ */ new Set(["const", "using", "await using"]);
  noConstAssign = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow reassigning `const`, `using`, and `await using` variables",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-const-assign"
      },
      schema: [],
      messages: {
        const: "'{{name}}' is constant."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function checkVariable(variable) {
        astUtils2.getModifyingReferences(variable.references).forEach((reference) => {
          context.report({
            node: reference.identifier,
            messageId: "const",
            data: { name: reference.identifier.name }
          });
        });
      }
      return {
        VariableDeclaration(node2) {
          if (CONSTANT_BINDINGS.has(node2.kind)) {
            sourceCode2.getDeclaredVariables(node2).forEach(checkVariable);
          }
        }
      };
    }
  };
  return noConstAssign;
}
var noConstantBinaryExpression;
var hasRequiredNoConstantBinaryExpression;
function requireNoConstantBinaryExpression() {
  if (hasRequiredNoConstantBinaryExpression) return noConstantBinaryExpression;
  hasRequiredNoConstantBinaryExpression = 1;
  const {
    isNullLiteral,
    isConstant,
    isReferenceToGlobalVariable,
    isLogicalAssignmentOperator,
    ECMASCRIPT_GLOBALS
  } = requireAstUtils();
  const NUMERIC_OR_STRING_BINARY_OPERATORS = /* @__PURE__ */ new Set([
    "+",
    "-",
    "*",
    "/",
    "%",
    "|",
    "^",
    "&",
    "**",
    "<<",
    ">>",
    ">>>"
  ]);
  function isNullOrUndefined2(scope, node2) {
    return isNullLiteral(node2) || node2.type === "Identifier" && node2.name === "undefined" && isReferenceToGlobalVariable(scope, node2) || node2.type === "UnaryExpression" && node2.operator === "void";
  }
  function hasConstantNullishness(scope, node2, nonNullish) {
    if (nonNullish && isNullOrUndefined2(scope, node2)) {
      return false;
    }
    switch (node2.type) {
      case "ObjectExpression":
      // Objects are never nullish
      case "ArrayExpression":
      // Arrays are never nullish
      case "ArrowFunctionExpression":
      // Functions never nullish
      case "FunctionExpression":
      // Functions are never nullish
      case "ClassExpression":
      // Classes are never nullish
      case "NewExpression":
      // Objects are never nullish
      case "Literal":
      // Nullish, or non-nullish, literals never change
      case "TemplateLiteral":
      // A string is never nullish
      case "UpdateExpression":
      // Numbers are never nullish
      case "BinaryExpression":
        return true;
      case "CallExpression": {
        if (node2.callee.type !== "Identifier") {
          return false;
        }
        const functionName = node2.callee.name;
        return (functionName === "Boolean" || functionName === "String" || functionName === "Number") && isReferenceToGlobalVariable(scope, node2.callee);
      }
      case "LogicalExpression": {
        return node2.operator === "??" && hasConstantNullishness(scope, node2.right, true);
      }
      case "AssignmentExpression":
        if (node2.operator === "=") {
          return hasConstantNullishness(scope, node2.right, nonNullish);
        }
        if (isLogicalAssignmentOperator(node2.operator)) {
          return false;
        }
        return true;
      case "UnaryExpression":
        return true;
      case "SequenceExpression": {
        const last = node2.expressions.at(-1);
        return hasConstantNullishness(scope, last, nonNullish);
      }
      case "Identifier":
        return node2.name === "undefined" && isReferenceToGlobalVariable(scope, node2);
      case "JSXElement":
      // ESLint has a policy of not assuming any specific JSX behavior.
      case "JSXFragment":
        return false;
      default:
        return false;
    }
  }
  function isStaticBoolean(scope, node2) {
    switch (node2.type) {
      case "Literal":
        return typeof node2.value === "boolean";
      case "CallExpression":
        return node2.callee.type === "Identifier" && node2.callee.name === "Boolean" && isReferenceToGlobalVariable(scope, node2.callee) && (node2.arguments.length === 0 || isConstant(scope, node2.arguments[0], true));
      case "UnaryExpression":
        return node2.operator === "!" && isConstant(scope, node2.argument, true);
      default:
        return false;
    }
  }
  function hasConstantLooseBooleanComparison(scope, node2) {
    switch (node2.type) {
      case "ObjectExpression":
      case "ClassExpression":
        return true;
      case "ArrayExpression": {
        const nonSpreadElements = node2.elements.filter(
          (e2) => (
            // Elements can be `null` in sparse arrays: `[,,]`;
            e2 !== null && e2.type !== "SpreadElement"
          )
        );
        return node2.elements.length === 0 || nonSpreadElements.length > 1;
      }
      case "ArrowFunctionExpression":
      case "FunctionExpression":
        return true;
      case "UnaryExpression":
        if (node2.operator === "void" || // Always returns `undefined`
        node2.operator === "typeof") {
          return true;
        }
        if (node2.operator === "!") {
          return isConstant(scope, node2.argument, true);
        }
        return false;
      case "NewExpression":
        return false;
      case "CallExpression": {
        if (node2.callee.type === "Identifier" && node2.callee.name === "Boolean" && isReferenceToGlobalVariable(scope, node2.callee)) {
          return node2.arguments.length === 0 || isConstant(scope, node2.arguments[0], true);
        }
        return false;
      }
      case "Literal":
        return true;
      case "Identifier":
        return node2.name === "undefined" && isReferenceToGlobalVariable(scope, node2);
      case "TemplateLiteral":
        return node2.expressions.length === 0;
      case "AssignmentExpression":
        if (node2.operator === "=") {
          return hasConstantLooseBooleanComparison(scope, node2.right);
        }
        return false;
      case "SequenceExpression": {
        const last = node2.expressions.at(-1);
        return hasConstantLooseBooleanComparison(scope, last);
      }
      case "JSXElement":
      // ESLint has a policy of not assuming any specific JSX behavior.
      case "JSXFragment":
        return false;
      default:
        return false;
    }
  }
  function hasConstantStrictBooleanComparison(scope, node2) {
    switch (node2.type) {
      case "ObjectExpression":
      // Objects are not booleans
      case "ArrayExpression":
      // Arrays are not booleans
      case "ArrowFunctionExpression":
      // Functions are not booleans
      case "FunctionExpression":
      case "ClassExpression":
      // Classes are not booleans
      case "NewExpression":
      // Objects are not booleans
      case "TemplateLiteral":
      // Strings are not booleans
      case "Literal":
      // True, false, or not boolean, literals never change.
      case "UpdateExpression":
        return true;
      case "BinaryExpression":
        return NUMERIC_OR_STRING_BINARY_OPERATORS.has(node2.operator);
      case "UnaryExpression": {
        if (node2.operator === "delete") {
          return false;
        }
        if (node2.operator === "!") {
          return isConstant(scope, node2.argument, true);
        }
        return true;
      }
      case "SequenceExpression": {
        const last = node2.expressions.at(-1);
        return hasConstantStrictBooleanComparison(scope, last);
      }
      case "Identifier":
        return node2.name === "undefined" && isReferenceToGlobalVariable(scope, node2);
      case "AssignmentExpression":
        if (node2.operator === "=") {
          return hasConstantStrictBooleanComparison(scope, node2.right);
        }
        if (isLogicalAssignmentOperator(node2.operator)) {
          return false;
        }
        return true;
      case "CallExpression": {
        if (node2.callee.type !== "Identifier") {
          return false;
        }
        const functionName = node2.callee.name;
        if ((functionName === "String" || functionName === "Number") && isReferenceToGlobalVariable(scope, node2.callee)) {
          return true;
        }
        if (functionName === "Boolean" && isReferenceToGlobalVariable(scope, node2.callee)) {
          return node2.arguments.length === 0 || isConstant(scope, node2.arguments[0], true);
        }
        return false;
      }
      case "JSXElement":
      // ESLint has a policy of not assuming any specific JSX behavior.
      case "JSXFragment":
        return false;
      default:
        return false;
    }
  }
  function isAlwaysNew(scope, node2) {
    switch (node2.type) {
      case "ObjectExpression":
      case "ArrayExpression":
      case "ArrowFunctionExpression":
      case "FunctionExpression":
      case "ClassExpression":
        return true;
      case "NewExpression": {
        if (node2.callee.type !== "Identifier") {
          return false;
        }
        return Object.hasOwn(ECMASCRIPT_GLOBALS, node2.callee.name) && isReferenceToGlobalVariable(scope, node2.callee);
      }
      case "Literal":
        return typeof node2.regex === "object";
      case "SequenceExpression": {
        const last = node2.expressions.at(-1);
        return isAlwaysNew(scope, last);
      }
      case "AssignmentExpression":
        if (node2.operator === "=") {
          return isAlwaysNew(scope, node2.right);
        }
        return false;
      case "ConditionalExpression":
        return isAlwaysNew(scope, node2.consequent) && isAlwaysNew(scope, node2.alternate);
      case "JSXElement":
      // ESLint has a policy of not assuming any specific JSX behavior.
      case "JSXFragment":
        return false;
      default:
        return false;
    }
  }
  function findBinaryExpressionConstantOperand(scope, a2, b, operator) {
    if (operator === "==" || operator === "!=") {
      if (isNullOrUndefined2(scope, a2) && hasConstantNullishness(scope, b, false) || isStaticBoolean(scope, a2) && hasConstantLooseBooleanComparison(scope, b)) {
        return b;
      }
    } else if (operator === "===" || operator === "!==") {
      if (isNullOrUndefined2(scope, a2) && hasConstantNullishness(scope, b, false) || isStaticBoolean(scope, a2) && hasConstantStrictBooleanComparison(scope, b)) {
        return b;
      }
    }
    return null;
  }
  noConstantBinaryExpression = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow expressions where the operation doesn't affect the value",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-constant-binary-expression"
      },
      schema: [],
      messages: {
        constantBinaryOperand: "Unexpected constant binary expression. Compares constantly with the {{otherSide}}-hand side of the `{{operator}}`.",
        constantShortCircuit: "Unexpected constant {{property}} on the left-hand side of a `{{operator}}` expression.",
        alwaysNew: "Unexpected comparison to newly constructed object. These two values can never be equal.",
        bothAlwaysNew: "Unexpected comparison of two newly constructed objects. These two values can never be equal."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        LogicalExpression(node2) {
          const { operator, left } = node2;
          const scope = sourceCode2.getScope(node2);
          if ((operator === "&&" || operator === "||") && isConstant(scope, left, true)) {
            context.report({
              node: left,
              messageId: "constantShortCircuit",
              data: { property: "truthiness", operator }
            });
          } else if (operator === "??" && hasConstantNullishness(scope, left, false)) {
            context.report({
              node: left,
              messageId: "constantShortCircuit",
              data: { property: "nullishness", operator }
            });
          }
        },
        BinaryExpression(node2) {
          const scope = sourceCode2.getScope(node2);
          const { right, left, operator } = node2;
          const rightConstantOperand = findBinaryExpressionConstantOperand(
            scope,
            left,
            right,
            operator
          );
          const leftConstantOperand = findBinaryExpressionConstantOperand(
            scope,
            right,
            left,
            operator
          );
          if (rightConstantOperand) {
            context.report({
              node: rightConstantOperand,
              messageId: "constantBinaryOperand",
              data: { operator, otherSide: "left" }
            });
          } else if (leftConstantOperand) {
            context.report({
              node: leftConstantOperand,
              messageId: "constantBinaryOperand",
              data: { operator, otherSide: "right" }
            });
          } else if (operator === "===" || operator === "!==") {
            if (isAlwaysNew(scope, left)) {
              context.report({ node: left, messageId: "alwaysNew" });
            } else if (isAlwaysNew(scope, right)) {
              context.report({ node: right, messageId: "alwaysNew" });
            }
          } else if (operator === "==" || operator === "!=") {
            if (isAlwaysNew(scope, left) && isAlwaysNew(scope, right)) {
              context.report({
                node: left,
                messageId: "bothAlwaysNew"
              });
            }
          }
        }
        /*
         * In theory we could handle short-circuiting assignment operators,
         * for some constant values, but that would require walking the
         * scope to find the value of the variable being assigned. This is
         * dependent on https://github.com/eslint/eslint/issues/13776
         *
         * AssignmentExpression() {},
         */
      };
    }
  };
  return noConstantBinaryExpression;
}
var noConstantCondition;
var hasRequiredNoConstantCondition;
function requireNoConstantCondition() {
  if (hasRequiredNoConstantCondition) return noConstantCondition;
  hasRequiredNoConstantCondition = 1;
  const { isConstant } = requireAstUtils();
  noConstantCondition = {
    meta: {
      type: "problem",
      defaultOptions: [{ checkLoops: "allExceptWhileTrue" }],
      docs: {
        description: "Disallow constant expressions in conditions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-constant-condition"
      },
      schema: [
        {
          type: "object",
          properties: {
            checkLoops: {
              enum: [
                "all",
                "allExceptWhileTrue",
                "none",
                true,
                false
              ]
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpected: "Unexpected constant condition."
      }
    },
    create(context) {
      const loopSetStack = [];
      const sourceCode2 = context.sourceCode;
      let [{ checkLoops }] = context.options;
      if (checkLoops === true) {
        checkLoops = "all";
      } else if (checkLoops === false) {
        checkLoops = "none";
      }
      let loopsInCurrentScope = /* @__PURE__ */ new Set();
      function trackConstantConditionLoop(node2) {
        if (node2.test && isConstant(sourceCode2.getScope(node2), node2.test, true)) {
          loopsInCurrentScope.add(node2);
        }
      }
      function checkConstantConditionLoopInSet(node2) {
        if (loopsInCurrentScope.has(node2)) {
          loopsInCurrentScope.delete(node2);
          context.report({ node: node2.test, messageId: "unexpected" });
        }
      }
      function reportIfConstant(node2) {
        if (node2.test && isConstant(sourceCode2.getScope(node2), node2.test, true)) {
          context.report({ node: node2.test, messageId: "unexpected" });
        }
      }
      function enterFunction() {
        loopSetStack.push(loopsInCurrentScope);
        loopsInCurrentScope = /* @__PURE__ */ new Set();
      }
      function exitFunction() {
        loopsInCurrentScope = loopSetStack.pop();
      }
      function checkLoop(node2) {
        if (checkLoops === "all" || checkLoops === "allExceptWhileTrue") {
          trackConstantConditionLoop(node2);
        }
      }
      return {
        ConditionalExpression: reportIfConstant,
        IfStatement: reportIfConstant,
        WhileStatement(node2) {
          if (node2.test.type === "Literal" && node2.test.value === true && checkLoops === "allExceptWhileTrue") {
            return;
          }
          checkLoop(node2);
        },
        "WhileStatement:exit": checkConstantConditionLoopInSet,
        DoWhileStatement: checkLoop,
        "DoWhileStatement:exit": checkConstantConditionLoopInSet,
        ForStatement: checkLoop,
        "ForStatement > .test": (node2) => checkLoop(node2.parent),
        "ForStatement:exit": checkConstantConditionLoopInSet,
        FunctionDeclaration: enterFunction,
        "FunctionDeclaration:exit": exitFunction,
        FunctionExpression: enterFunction,
        "FunctionExpression:exit": exitFunction,
        YieldExpression: () => loopsInCurrentScope.clear()
      };
    }
  };
  return noConstantCondition;
}
var noConstructorReturn;
var hasRequiredNoConstructorReturn;
function requireNoConstructorReturn() {
  if (hasRequiredNoConstructorReturn) return noConstructorReturn;
  hasRequiredNoConstructorReturn = 1;
  noConstructorReturn = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow returning value from constructor",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-constructor-return"
      },
      schema: [],
      fixable: null,
      messages: {
        unexpected: "Unexpected return statement in constructor."
      }
    },
    create(context) {
      const stack = [];
      return {
        onCodePathStart(_, node2) {
          stack.push(node2);
        },
        onCodePathEnd() {
          stack.pop();
        },
        ReturnStatement(node2) {
          const last = stack.at(-1);
          if (!last.parent) {
            return;
          }
          if (last.parent.type === "MethodDefinition" && last.parent.kind === "constructor" && node2.argument) {
            context.report({
              node: node2,
              messageId: "unexpected"
            });
          }
        }
      };
    }
  };
  return noConstructorReturn;
}
var noContinue;
var hasRequiredNoContinue;
function requireNoContinue() {
  if (hasRequiredNoContinue) return noContinue;
  hasRequiredNoContinue = 1;
  noContinue = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `continue` statements",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-continue"
      },
      schema: [],
      messages: {
        unexpected: "Unexpected use of continue statement."
      }
    },
    create(context) {
      return {
        ContinueStatement(node2) {
          context.report({ node: node2, messageId: "unexpected" });
        }
      };
    }
  };
  return noContinue;
}
var regexpp = {};
var hasRequiredRegexpp;
function requireRegexpp() {
  if (hasRequiredRegexpp) return regexpp;
  hasRequiredRegexpp = 1;
  Object.defineProperty(regexpp, "__esModule", { value: true });
  var ast2 = /* @__PURE__ */ Object.freeze({
    __proto__: null
  });
  const latestEcmaVersion = 2025;
  let largeIdStartRanges = void 0;
  let largeIdContinueRanges = void 0;
  function isIdStart(cp) {
    if (cp < 65)
      return false;
    if (cp < 91)
      return true;
    if (cp < 97)
      return false;
    if (cp < 123)
      return true;
    return isLargeIdStart(cp);
  }
  function isIdContinue(cp) {
    if (cp < 48)
      return false;
    if (cp < 58)
      return true;
    if (cp < 65)
      return false;
    if (cp < 91)
      return true;
    if (cp === 95)
      return true;
    if (cp < 97)
      return false;
    if (cp < 123)
      return true;
    return isLargeIdStart(cp) || isLargeIdContinue(cp);
  }
  function isLargeIdStart(cp) {
    return isInRange(cp, largeIdStartRanges !== null && largeIdStartRanges !== void 0 ? largeIdStartRanges : largeIdStartRanges = initLargeIdStartRanges());
  }
  function isLargeIdContinue(cp) {
    return isInRange(cp, largeIdContinueRanges !== null && largeIdContinueRanges !== void 0 ? largeIdContinueRanges : largeIdContinueRanges = initLargeIdContinueRanges());
  }
  function initLargeIdStartRanges() {
    return restoreRanges("4q 0 b 0 5 0 6 m 2 u 2 cp 5 b f 4 8 0 2 0 3m 4 2 1 3 3 2 0 7 0 2 2 2 0 2 j 2 2a 2 3u 9 4l 2 11 3 0 7 14 20 q 5 3 1a 16 10 1 2 2q 2 0 g 1 8 1 b 2 3 0 h 0 2 t u 2g c 0 p w a 1 5 0 6 l 5 0 a 0 4 0 o o 8 a 6 n 2 5 i 15 1n 1h 4 0 j 0 8 9 g f 5 7 3 1 3 l 2 6 2 0 4 3 4 0 h 0 e 1 2 2 f 1 b 0 9 5 5 1 3 l 2 6 2 1 2 1 2 1 w 3 2 0 k 2 h 8 2 2 2 l 2 6 2 1 2 4 4 0 j 0 g 1 o 0 c 7 3 1 3 l 2 6 2 1 2 4 4 0 v 1 2 2 g 0 i 0 2 5 4 2 2 3 4 1 2 0 2 1 4 1 4 2 4 b n 0 1h 7 2 2 2 m 2 f 4 0 r 2 3 0 3 1 v 0 5 7 2 2 2 m 2 9 2 4 4 0 w 1 2 1 g 1 i 8 2 2 2 14 3 0 h 0 6 2 9 2 p 5 6 h 4 n 2 8 2 0 3 6 1n 1b 2 1 d 6 1n 1 2 0 2 4 2 n 2 0 2 9 2 1 a 0 3 4 2 0 m 3 x 0 1s 7 2 z s 4 38 16 l 0 h 5 5 3 4 0 4 1 8 2 5 c d 0 i 11 2 0 6 0 3 16 2 98 2 3 3 6 2 0 2 3 3 14 2 3 3 w 2 3 3 6 2 0 2 3 3 e 2 1k 2 3 3 1u 12 f h 2d 3 5 4 h7 3 g 2 p 6 22 4 a 8 h e i f h f c 2 2 g 1f 10 0 5 0 1w 2g 8 14 2 0 6 1x b u 1e t 3 4 c 17 5 p 1j m a 1g 2b 0 2m 1a i 7 1j t e 1 b 17 r z 16 2 b z 3 a 6 16 3 2 16 3 2 5 2 1 4 0 6 5b 1t 7p 3 5 3 11 3 5 3 7 2 0 2 0 2 0 2 u 3 1g 2 6 2 0 4 2 2 6 4 3 3 5 5 c 6 2 2 6 39 0 e 0 h c 2u 0 5 0 3 9 2 0 3 5 7 0 2 0 2 0 2 f 3 3 6 4 5 0 i 14 22g 6c 7 3 4 1 d 11 2 0 6 0 3 1j 8 0 h m a 6 2 6 2 6 2 6 2 6 2 6 2 6 2 6 fb 2 q 8 8 4 3 4 5 2d 5 4 2 2h 2 3 6 16 2 2l i v 1d f e9 533 1t h3g 1w 19 3 7g 4 f b 1 l 1a h u 3 27 14 8 3 2u 3 1u 3 1 2 0 2 7 m f 2 2 2 3 2 m u 1f f 1d 1r 5 4 0 2 1 c r b m q s 8 1a t 0 h 4 2 9 b 4 2 14 o 2 2 7 l m 4 0 4 1d 2 0 4 1 3 4 3 0 2 0 p 2 3 a 8 2 d 5 3 5 3 5 a 6 2 6 2 16 2 d 7 36 u 8mb d m 5 1c 6it a5 3 2x 13 6 d 4 6 0 2 9 2 c 2 4 2 0 2 1 2 1 2 2z y a2 j 1r 3 1h 15 b 39 4 2 3q 11 p 7 p c 2g 4 5 3 5 3 5 3 2 10 b 2 p 2 i 2 1 2 e 3 d z 3e 1y 1g 7g s 4 1c 1c v e t 6 11 b t 3 z 5 7 2 4 17 4d j z 5 z 5 13 9 1f d a 2 e 2 6 2 1 2 a 2 e 2 6 2 1 4 1f d 8m a l b 7 p 5 2 15 2 8 1y 5 3 0 2 17 2 1 4 0 3 m b m a u 1u i 2 1 b l b p 1z 1j 7 1 1t 0 g 3 2 2 2 s 17 s 4 s 10 7 2 r s 1h b l b i e h 33 20 1k 1e e 1e e z 13 r a m 6z 15 7 1 h 2 1o s b 0 9 l 17 h 1b k s m d 1g 1m 1 3 0 e 18 x o r z u 0 3 0 9 y 4 0 d 1b f 3 m 0 2 0 10 h 2 o k 1 1s 6 2 0 2 3 2 e 2 9 8 1a 13 7 3 1 3 l 2 6 2 1 2 4 4 0 j 0 d 4 v 9 2 0 3 0 2 11 2 0 q 0 2 0 19 1g j 3 l 2 v 1b l 1 2 0 55 1a 16 3 11 1b l 0 1o 16 e 0 20 q 12 6 56 17 39 1r w 7 3 0 3 7 2 1 2 n g 0 2 0 2n 7 3 12 h 0 2 0 t 0 b 13 8 0 m 0 c 19 k 0 j 20 5k w w 8 2 10 i 0 1e t 35 6 2 1 2 11 m 0 q 5 2 1 2 v f 0 94 i g 0 2 c 2 x 3h 0 28 pl 2v 32 i 5f 219 2o g tr i 5 q 32y 6 g6 5a2 t 1cz fs 8 u i 26 i t j 1b h 3 w k 6 i c1 18 5w 1r 3l 22 6 0 1v c 1t 1 2 0 t 4qf 9 yd 16 9 6w8 3 2 6 2 1 2 82 g 0 u 2 3 0 f 3 9 az 1s5 2y 6 c 4 8 8 9 4mf 2c 2 1y 2 1 3 0 3 1 3 3 2 b 2 0 2 6 2 1s 2 3 3 7 2 6 2 r 2 3 2 4 2 0 4 6 2 9f 3 o 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 7 1f9 u 7 5 7a 1p 43 18 b 6 h 0 8y t j 17 dh r 6d t 3 0 ds 6 2 3 2 1 2 e 2 5g 1o 1v 8 0 xh 3 2 q 2 1 2 0 3 0 2 9 2 3 2 0 2 0 7 0 5 0 2 0 2 0 2 2 2 1 2 0 3 0 2 0 2 0 2 0 2 0 2 1 2 0 3 3 2 6 2 3 2 3 2 0 2 9 2 g 6 2 2 4 2 g 3et wyn x 37d 7 65 3 4g1 f 5rk g h9 1wj f1 15v 3t6 6 38f");
  }
  function initLargeIdContinueRanges() {
    return restoreRanges("53 0 g9 33 o 0 70 4 7e 18 2 0 2 1 2 1 2 0 21 a 1d u 7 0 2u 6 3 5 3 1 2 3 3 9 o 0 v q 2k a g 9 y 8 a 0 p 3 2 8 2 2 2 4 18 2 1o 8 17 n 2 w 1j 2 2 h 2 6 b 1 3 9 i 2 1l 0 2 6 3 1 3 2 a 0 b 1 3 9 f 0 3 2 1l 0 2 4 5 1 3 2 4 0 l b 4 0 c 2 1l 0 2 7 2 2 2 2 l 1 3 9 b 5 2 2 1l 0 2 6 3 1 3 2 8 2 b 1 3 9 j 0 1o 4 4 2 2 3 a 0 f 9 h 4 1k 0 2 6 2 2 2 3 8 1 c 1 3 9 i 2 1l 0 2 6 2 2 2 3 8 1 c 1 3 9 4 0 d 3 1k 1 2 6 2 2 2 3 a 0 b 1 3 9 i 2 1z 0 5 5 2 0 2 7 7 9 3 1 1q 0 3 6 d 7 2 9 2g 0 3 8 c 6 2 9 1r 1 7 9 c 0 2 0 2 0 5 1 1e j 2 1 6 a 2 z a 0 2t j 2 9 d 3 5 2 2 2 3 6 4 3 e b 2 e jk 2 a 8 pt 3 t 2 u 1 v 1 1t v a 0 3 9 y 2 2 a 40 0 3b b 5 b b 9 3l a 1p 4 1m 9 2 s 3 a 7 9 n d 2 f 1e 4 1c g c 9 i 8 d 2 v c 3 9 19 d 1d j 9 9 7 9 3b 2 2 k 5 0 7 0 3 2 5j 1r el 1 1e 1 k 0 3g c 5 0 4 b 2db 2 3y 0 2p v ff 5 2y 1 2p 0 n51 9 1y 0 5 9 x 1 29 1 7l 0 4 0 5 0 o 4 5 0 2c 1 1f h b 9 7 h e a t 7 q c 19 3 1c d g 9 c 0 b 9 1c d d 0 9 1 3 9 y 2 1f 0 2 2 3 1 6 1 2 0 16 4 6 1 6l 7 2 1 3 9 fmt 0 ki f h f 4 1 p 2 5d 9 12 0 12 0 ig 0 6b 0 46 4 86 9 120 2 2 1 6 3 15 2 5 0 4m 1 fy 3 9 9 7 9 w 4 8u 1 28 3 1z a 1e 3 3f 2 1i e w a 3 1 b 3 1a a 8 0 1a 9 7 2 11 d 2 9 6 1 19 0 d 2 1d d 9 3 2 b 2b b 7 0 3 0 4e b 6 9 7 3 1k 1 2 6 3 1 3 2 a 0 b 1 3 6 4 4 1w 8 2 0 3 0 2 3 2 4 2 0 f 1 2b h a 9 5 0 2a j d 9 5y 6 3 8 s 1 2b g g 9 2a c 9 9 7 j 1m e 5 9 6r e 4m 9 1z 5 2 1 3 3 2 0 2 1 d 9 3c 6 3 6 4 0 t 9 15 6 2 3 9 0 a a 1b f 9j 9 1i 7 2 7 h 9 1l l 2 d 3f 5 4 0 2 1 2 6 2 0 9 9 1d 4 2 1 2 4 9 9 96 3 a 1 2 0 1d 6 4 4 e a 44m 0 7 e 8uh r 1t3 9 2f 9 13 4 1o 6 q 9 ev 9 d2 0 2 1i 8 3 2a 0 c 1 f58 1 382 9 ef 19 3 m f3 4 4 5 9 7 3 6 v 3 45 2 13e 1d e9 1i 5 1d 9 0 f 0 n 4 2 e 11t 6 2 g 3 6 2 1 2 4 2t 0 4h 6 a 9 9x 0 1q d dv d 6t 1 2 9 k6 6 32 6 6 9 3o7 9 gvt3 6n");
  }
  function isInRange(cp, ranges) {
    let l2 = 0, r2 = ranges.length / 2 | 0, i2 = 0, min = 0, max = 0;
    while (l2 < r2) {
      i2 = (l2 + r2) / 2 | 0;
      min = ranges[2 * i2];
      max = ranges[2 * i2 + 1];
      if (cp < min) {
        r2 = i2;
      } else if (cp > max) {
        l2 = i2 + 1;
      } else {
        return true;
      }
    }
    return false;
  }
  function restoreRanges(data2) {
    let last = 0;
    return data2.split(" ").map((s2) => last += parseInt(s2, 36) | 0);
  }
  class DataSet {
    constructor(raw2018, raw2019, raw2020, raw2021, raw2022, raw2023, raw2024, raw2025) {
      this._raw2018 = raw2018;
      this._raw2019 = raw2019;
      this._raw2020 = raw2020;
      this._raw2021 = raw2021;
      this._raw2022 = raw2022;
      this._raw2023 = raw2023;
      this._raw2024 = raw2024;
      this._raw2025 = raw2025;
    }
    get es2018() {
      var _a;
      return (_a = this._set2018) !== null && _a !== void 0 ? _a : this._set2018 = new Set(this._raw2018.split(" "));
    }
    get es2019() {
      var _a;
      return (_a = this._set2019) !== null && _a !== void 0 ? _a : this._set2019 = new Set(this._raw2019.split(" "));
    }
    get es2020() {
      var _a;
      return (_a = this._set2020) !== null && _a !== void 0 ? _a : this._set2020 = new Set(this._raw2020.split(" "));
    }
    get es2021() {
      var _a;
      return (_a = this._set2021) !== null && _a !== void 0 ? _a : this._set2021 = new Set(this._raw2021.split(" "));
    }
    get es2022() {
      var _a;
      return (_a = this._set2022) !== null && _a !== void 0 ? _a : this._set2022 = new Set(this._raw2022.split(" "));
    }
    get es2023() {
      var _a;
      return (_a = this._set2023) !== null && _a !== void 0 ? _a : this._set2023 = new Set(this._raw2023.split(" "));
    }
    get es2024() {
      var _a;
      return (_a = this._set2024) !== null && _a !== void 0 ? _a : this._set2024 = new Set(this._raw2024.split(" "));
    }
    get es2025() {
      var _a;
      return (_a = this._set2025) !== null && _a !== void 0 ? _a : this._set2025 = new Set(this._raw2025.split(" "));
    }
  }
  const gcNameSet = /* @__PURE__ */ new Set(["General_Category", "gc"]);
  const scNameSet = /* @__PURE__ */ new Set(["Script", "Script_Extensions", "sc", "scx"]);
  const gcValueSets = new DataSet("C Cased_Letter Cc Cf Close_Punctuation Cn Co Combining_Mark Connector_Punctuation Control Cs Currency_Symbol Dash_Punctuation Decimal_Number Enclosing_Mark Final_Punctuation Format Initial_Punctuation L LC Letter Letter_Number Line_Separator Ll Lm Lo Lowercase_Letter Lt Lu M Mark Math_Symbol Mc Me Mn Modifier_Letter Modifier_Symbol N Nd Nl No Nonspacing_Mark Number Open_Punctuation Other Other_Letter Other_Number Other_Punctuation Other_Symbol P Paragraph_Separator Pc Pd Pe Pf Pi Po Private_Use Ps Punctuation S Sc Separator Sk Sm So Space_Separator Spacing_Mark Surrogate Symbol Titlecase_Letter Unassigned Uppercase_Letter Z Zl Zp Zs cntrl digit punct", "", "", "", "", "", "", "");
  const scValueSets = new DataSet("Adlam Adlm Aghb Ahom Anatolian_Hieroglyphs Arab Arabic Armenian Armi Armn Avestan Avst Bali Balinese Bamu Bamum Bass Bassa_Vah Batak Batk Beng Bengali Bhaiksuki Bhks Bopo Bopomofo Brah Brahmi Brai Braille Bugi Buginese Buhd Buhid Cakm Canadian_Aboriginal Cans Cari Carian Caucasian_Albanian Chakma Cham Cher Cherokee Common Copt Coptic Cprt Cuneiform Cypriot Cyrillic Cyrl Deseret Deva Devanagari Dsrt Dupl Duployan Egyp Egyptian_Hieroglyphs Elba Elbasan Ethi Ethiopic Geor Georgian Glag Glagolitic Gonm Goth Gothic Gran Grantha Greek Grek Gujarati Gujr Gurmukhi Guru Han Hang Hangul Hani Hano Hanunoo Hatr Hatran Hebr Hebrew Hira Hiragana Hluw Hmng Hung Imperial_Aramaic Inherited Inscriptional_Pahlavi Inscriptional_Parthian Ital Java Javanese Kaithi Kali Kana Kannada Katakana Kayah_Li Khar Kharoshthi Khmer Khmr Khoj Khojki Khudawadi Knda Kthi Lana Lao Laoo Latin Latn Lepc Lepcha Limb Limbu Lina Linb Linear_A Linear_B Lisu Lyci Lycian Lydi Lydian Mahajani Mahj Malayalam Mand Mandaic Mani Manichaean Marc Marchen Masaram_Gondi Meetei_Mayek Mend Mende_Kikakui Merc Mero Meroitic_Cursive Meroitic_Hieroglyphs Miao Mlym Modi Mong Mongolian Mro Mroo Mtei Mult Multani Myanmar Mymr Nabataean Narb Nbat New_Tai_Lue Newa Nko Nkoo Nshu Nushu Ogam Ogham Ol_Chiki Olck Old_Hungarian Old_Italic Old_North_Arabian Old_Permic Old_Persian Old_South_Arabian Old_Turkic Oriya Orkh Orya Osage Osge Osma Osmanya Pahawh_Hmong Palm Palmyrene Pau_Cin_Hau Pauc Perm Phag Phags_Pa Phli Phlp Phnx Phoenician Plrd Prti Psalter_Pahlavi Qaac Qaai Rejang Rjng Runic Runr Samaritan Samr Sarb Saur Saurashtra Sgnw Sharada Shavian Shaw Shrd Sidd Siddham SignWriting Sind Sinh Sinhala Sora Sora_Sompeng Soyo Soyombo Sund Sundanese Sylo Syloti_Nagri Syrc Syriac Tagalog Tagb Tagbanwa Tai_Le Tai_Tham Tai_Viet Takr Takri Tale Talu Tamil Taml Tang Tangut Tavt Telu Telugu Tfng Tglg Thaa Thaana Thai Tibetan Tibt Tifinagh Tirh Tirhuta Ugar Ugaritic Vai Vaii Wara Warang_Citi Xpeo Xsux Yi Yiii Zanabazar_Square Zanb Zinh Zyyy", "Dogr Dogra Gong Gunjala_Gondi Hanifi_Rohingya Maka Makasar Medefaidrin Medf Old_Sogdian Rohg Sogd Sogdian Sogo", "Elym Elymaic Hmnp Nand Nandinagari Nyiakeng_Puachue_Hmong Wancho Wcho", "Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", "Cpmn Cypro_Minoan Old_Uyghur Ougr Tangsa Tnsa Toto Vith Vithkuqi", "Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz", "", "");
  const binPropertySets = new DataSet("AHex ASCII ASCII_Hex_Digit Alpha Alphabetic Any Assigned Bidi_C Bidi_Control Bidi_M Bidi_Mirrored CI CWCF CWCM CWKCF CWL CWT CWU Case_Ignorable Cased Changes_When_Casefolded Changes_When_Casemapped Changes_When_Lowercased Changes_When_NFKC_Casefolded Changes_When_Titlecased Changes_When_Uppercased DI Dash Default_Ignorable_Code_Point Dep Deprecated Dia Diacritic Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Ext Extender Gr_Base Gr_Ext Grapheme_Base Grapheme_Extend Hex Hex_Digit IDC IDS IDSB IDST IDS_Binary_Operator IDS_Trinary_Operator ID_Continue ID_Start Ideo Ideographic Join_C Join_Control LOE Logical_Order_Exception Lower Lowercase Math NChar Noncharacter_Code_Point Pat_Syn Pat_WS Pattern_Syntax Pattern_White_Space QMark Quotation_Mark RI Radical Regional_Indicator SD STerm Sentence_Terminal Soft_Dotted Term Terminal_Punctuation UIdeo Unified_Ideograph Upper Uppercase VS Variation_Selector White_Space XIDC XIDS XID_Continue XID_Start space", "Extended_Pictographic", "", "EBase EComp EMod EPres ExtPict", "", "", "", "");
  const binPropertyOfStringsSets = new DataSet("", "", "", "", "", "", "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji RGI_Emoji_Flag_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence", "");
  function isValidUnicodeProperty(version2, name, value) {
    if (gcNameSet.has(name)) {
      return version2 >= 2018 && gcValueSets.es2018.has(value);
    }
    if (scNameSet.has(name)) {
      return version2 >= 2018 && scValueSets.es2018.has(value) || version2 >= 2019 && scValueSets.es2019.has(value) || version2 >= 2020 && scValueSets.es2020.has(value) || version2 >= 2021 && scValueSets.es2021.has(value) || version2 >= 2022 && scValueSets.es2022.has(value) || version2 >= 2023 && scValueSets.es2023.has(value);
    }
    return false;
  }
  function isValidLoneUnicodeProperty(version2, value) {
    return version2 >= 2018 && binPropertySets.es2018.has(value) || version2 >= 2019 && binPropertySets.es2019.has(value) || version2 >= 2021 && binPropertySets.es2021.has(value);
  }
  function isValidLoneUnicodePropertyOfString(version2, value) {
    return version2 >= 2024 && binPropertyOfStringsSets.es2024.has(value);
  }
  const BACKSPACE = 8;
  const CHARACTER_TABULATION = 9;
  const LINE_FEED = 10;
  const LINE_TABULATION = 11;
  const FORM_FEED = 12;
  const CARRIAGE_RETURN = 13;
  const EXCLAMATION_MARK = 33;
  const NUMBER_SIGN = 35;
  const DOLLAR_SIGN = 36;
  const PERCENT_SIGN = 37;
  const AMPERSAND = 38;
  const LEFT_PARENTHESIS = 40;
  const RIGHT_PARENTHESIS = 41;
  const ASTERISK = 42;
  const PLUS_SIGN = 43;
  const COMMA = 44;
  const HYPHEN_MINUS = 45;
  const FULL_STOP = 46;
  const SOLIDUS = 47;
  const DIGIT_ZERO = 48;
  const DIGIT_ONE = 49;
  const DIGIT_SEVEN = 55;
  const DIGIT_NINE = 57;
  const COLON = 58;
  const SEMICOLON = 59;
  const LESS_THAN_SIGN = 60;
  const EQUALS_SIGN = 61;
  const GREATER_THAN_SIGN = 62;
  const QUESTION_MARK = 63;
  const COMMERCIAL_AT = 64;
  const LATIN_CAPITAL_LETTER_A = 65;
  const LATIN_CAPITAL_LETTER_B = 66;
  const LATIN_CAPITAL_LETTER_D = 68;
  const LATIN_CAPITAL_LETTER_F = 70;
  const LATIN_CAPITAL_LETTER_P = 80;
  const LATIN_CAPITAL_LETTER_S = 83;
  const LATIN_CAPITAL_LETTER_W = 87;
  const LATIN_CAPITAL_LETTER_Z = 90;
  const LOW_LINE = 95;
  const LATIN_SMALL_LETTER_A = 97;
  const LATIN_SMALL_LETTER_B = 98;
  const LATIN_SMALL_LETTER_C = 99;
  const LATIN_SMALL_LETTER_D = 100;
  const LATIN_SMALL_LETTER_F = 102;
  const LATIN_SMALL_LETTER_G = 103;
  const LATIN_SMALL_LETTER_I = 105;
  const LATIN_SMALL_LETTER_K = 107;
  const LATIN_SMALL_LETTER_M = 109;
  const LATIN_SMALL_LETTER_N = 110;
  const LATIN_SMALL_LETTER_P = 112;
  const LATIN_SMALL_LETTER_Q = 113;
  const LATIN_SMALL_LETTER_R = 114;
  const LATIN_SMALL_LETTER_S = 115;
  const LATIN_SMALL_LETTER_T = 116;
  const LATIN_SMALL_LETTER_U = 117;
  const LATIN_SMALL_LETTER_V = 118;
  const LATIN_SMALL_LETTER_W = 119;
  const LATIN_SMALL_LETTER_X = 120;
  const LATIN_SMALL_LETTER_Y = 121;
  const LATIN_SMALL_LETTER_Z = 122;
  const LEFT_SQUARE_BRACKET = 91;
  const REVERSE_SOLIDUS = 92;
  const RIGHT_SQUARE_BRACKET = 93;
  const CIRCUMFLEX_ACCENT = 94;
  const GRAVE_ACCENT = 96;
  const LEFT_CURLY_BRACKET = 123;
  const VERTICAL_LINE = 124;
  const RIGHT_CURLY_BRACKET = 125;
  const TILDE = 126;
  const ZERO_WIDTH_NON_JOINER = 8204;
  const ZERO_WIDTH_JOINER = 8205;
  const LINE_SEPARATOR = 8232;
  const PARAGRAPH_SEPARATOR = 8233;
  const MIN_CODE_POINT = 0;
  const MAX_CODE_POINT = 1114111;
  function isLatinLetter(code2) {
    return code2 >= LATIN_CAPITAL_LETTER_A && code2 <= LATIN_CAPITAL_LETTER_Z || code2 >= LATIN_SMALL_LETTER_A && code2 <= LATIN_SMALL_LETTER_Z;
  }
  function isDecimalDigit(code2) {
    return code2 >= DIGIT_ZERO && code2 <= DIGIT_NINE;
  }
  function isOctalDigit(code2) {
    return code2 >= DIGIT_ZERO && code2 <= DIGIT_SEVEN;
  }
  function isHexDigit(code2) {
    return code2 >= DIGIT_ZERO && code2 <= DIGIT_NINE || code2 >= LATIN_CAPITAL_LETTER_A && code2 <= LATIN_CAPITAL_LETTER_F || code2 >= LATIN_SMALL_LETTER_A && code2 <= LATIN_SMALL_LETTER_F;
  }
  function isLineTerminator(code2) {
    return code2 === LINE_FEED || code2 === CARRIAGE_RETURN || code2 === LINE_SEPARATOR || code2 === PARAGRAPH_SEPARATOR;
  }
  function isValidUnicode(code2) {
    return code2 >= MIN_CODE_POINT && code2 <= MAX_CODE_POINT;
  }
  function digitToInt(code2) {
    if (code2 >= LATIN_SMALL_LETTER_A && code2 <= LATIN_SMALL_LETTER_F) {
      return code2 - LATIN_SMALL_LETTER_A + 10;
    }
    if (code2 >= LATIN_CAPITAL_LETTER_A && code2 <= LATIN_CAPITAL_LETTER_F) {
      return code2 - LATIN_CAPITAL_LETTER_A + 10;
    }
    return code2 - DIGIT_ZERO;
  }
  function isLeadSurrogate(code2) {
    return code2 >= 55296 && code2 <= 56319;
  }
  function isTrailSurrogate(code2) {
    return code2 >= 56320 && code2 <= 57343;
  }
  function combineSurrogatePair(lead, trail) {
    return (lead - 55296) * 1024 + (trail - 56320) + 65536;
  }
  class GroupSpecifiersAsES2018 {
    constructor() {
      this.groupName = /* @__PURE__ */ new Set();
    }
    clear() {
      this.groupName.clear();
    }
    isEmpty() {
      return !this.groupName.size;
    }
    hasInPattern(name) {
      return this.groupName.has(name);
    }
    hasInScope(name) {
      return this.hasInPattern(name);
    }
    addToScope(name) {
      this.groupName.add(name);
    }
    enterDisjunction() {
    }
    enterAlternative() {
    }
    leaveDisjunction() {
    }
  }
  class BranchID {
    constructor(parent, base) {
      this.parent = parent;
      this.base = base !== null && base !== void 0 ? base : this;
    }
    separatedFrom(other) {
      var _a, _b;
      if (this.base === other.base && this !== other) {
        return true;
      }
      if (other.parent && this.separatedFrom(other.parent)) {
        return true;
      }
      return (_b = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.separatedFrom(other)) !== null && _b !== void 0 ? _b : false;
    }
    child() {
      return new BranchID(this, null);
    }
    sibling() {
      return new BranchID(this.parent, this.base);
    }
  }
  class GroupSpecifiersAsES2025 {
    constructor() {
      this.branchID = new BranchID(null, null);
      this.groupNames = /* @__PURE__ */ new Map();
    }
    clear() {
      this.branchID = new BranchID(null, null);
      this.groupNames.clear();
    }
    isEmpty() {
      return !this.groupNames.size;
    }
    enterDisjunction() {
      this.branchID = this.branchID.child();
    }
    enterAlternative(index) {
      if (index === 0) {
        return;
      }
      this.branchID = this.branchID.sibling();
    }
    leaveDisjunction() {
      this.branchID = this.branchID.parent;
    }
    hasInPattern(name) {
      return this.groupNames.has(name);
    }
    hasInScope(name) {
      const branches = this.groupNames.get(name);
      if (!branches) {
        return false;
      }
      for (const branch of branches) {
        if (!branch.separatedFrom(this.branchID)) {
          return true;
        }
      }
      return false;
    }
    addToScope(name) {
      const branches = this.groupNames.get(name);
      if (branches) {
        branches.push(this.branchID);
        return;
      }
      this.groupNames.set(name, [this.branchID]);
    }
  }
  const legacyImpl = {
    at(s2, end, i2) {
      return i2 < end ? s2.charCodeAt(i2) : -1;
    },
    width(c2) {
      return 1;
    }
  };
  const unicodeImpl = {
    at(s2, end, i2) {
      return i2 < end ? s2.codePointAt(i2) : -1;
    },
    width(c2) {
      return c2 > 65535 ? 2 : 1;
    }
  };
  class Reader {
    constructor() {
      this._impl = legacyImpl;
      this._s = "";
      this._i = 0;
      this._end = 0;
      this._cp1 = -1;
      this._w1 = 1;
      this._cp2 = -1;
      this._w2 = 1;
      this._cp3 = -1;
      this._w3 = 1;
      this._cp4 = -1;
    }
    get source() {
      return this._s;
    }
    get index() {
      return this._i;
    }
    get currentCodePoint() {
      return this._cp1;
    }
    get nextCodePoint() {
      return this._cp2;
    }
    get nextCodePoint2() {
      return this._cp3;
    }
    get nextCodePoint3() {
      return this._cp4;
    }
    reset(source, start, end, uFlag) {
      this._impl = uFlag ? unicodeImpl : legacyImpl;
      this._s = source;
      this._end = end;
      this.rewind(start);
    }
    rewind(index) {
      const impl = this._impl;
      this._i = index;
      this._cp1 = impl.at(this._s, this._end, index);
      this._w1 = impl.width(this._cp1);
      this._cp2 = impl.at(this._s, this._end, index + this._w1);
      this._w2 = impl.width(this._cp2);
      this._cp3 = impl.at(this._s, this._end, index + this._w1 + this._w2);
      this._w3 = impl.width(this._cp3);
      this._cp4 = impl.at(this._s, this._end, index + this._w1 + this._w2 + this._w3);
    }
    advance() {
      if (this._cp1 !== -1) {
        const impl = this._impl;
        this._i += this._w1;
        this._cp1 = this._cp2;
        this._w1 = this._w2;
        this._cp2 = this._cp3;
        this._w2 = impl.width(this._cp2);
        this._cp3 = this._cp4;
        this._w3 = impl.width(this._cp3);
        this._cp4 = impl.at(this._s, this._end, this._i + this._w1 + this._w2 + this._w3);
      }
    }
    eat(cp) {
      if (this._cp1 === cp) {
        this.advance();
        return true;
      }
      return false;
    }
    eat2(cp1, cp2) {
      if (this._cp1 === cp1 && this._cp2 === cp2) {
        this.advance();
        this.advance();
        return true;
      }
      return false;
    }
    eat3(cp1, cp2, cp3) {
      if (this._cp1 === cp1 && this._cp2 === cp2 && this._cp3 === cp3) {
        this.advance();
        this.advance();
        this.advance();
        return true;
      }
      return false;
    }
  }
  class RegExpSyntaxError extends SyntaxError {
    constructor(message, index) {
      super(message);
      this.index = index;
    }
  }
  function newRegExpSyntaxError(srcCtx, flags2, index, message) {
    let source = "";
    if (srcCtx.kind === "literal") {
      const literal = srcCtx.source.slice(srcCtx.start, srcCtx.end);
      if (literal) {
        source = `: ${literal}`;
      }
    } else if (srcCtx.kind === "pattern") {
      const pattern2 = srcCtx.source.slice(srcCtx.start, srcCtx.end);
      const flagsText = `${flags2.unicode ? "u" : ""}${flags2.unicodeSets ? "v" : ""}`;
      source = `: /${pattern2}/${flagsText}`;
    }
    return new RegExpSyntaxError(`Invalid regular expression${source}: ${message}`, index);
  }
  const SYNTAX_CHARACTER = /* @__PURE__ */ new Set([
    CIRCUMFLEX_ACCENT,
    DOLLAR_SIGN,
    REVERSE_SOLIDUS,
    FULL_STOP,
    ASTERISK,
    PLUS_SIGN,
    QUESTION_MARK,
    LEFT_PARENTHESIS,
    RIGHT_PARENTHESIS,
    LEFT_SQUARE_BRACKET,
    RIGHT_SQUARE_BRACKET,
    LEFT_CURLY_BRACKET,
    RIGHT_CURLY_BRACKET,
    VERTICAL_LINE
  ]);
  const CLASS_SET_RESERVED_DOUBLE_PUNCTUATOR_CHARACTER = /* @__PURE__ */ new Set([
    AMPERSAND,
    EXCLAMATION_MARK,
    NUMBER_SIGN,
    DOLLAR_SIGN,
    PERCENT_SIGN,
    ASTERISK,
    PLUS_SIGN,
    COMMA,
    FULL_STOP,
    COLON,
    SEMICOLON,
    LESS_THAN_SIGN,
    EQUALS_SIGN,
    GREATER_THAN_SIGN,
    QUESTION_MARK,
    COMMERCIAL_AT,
    CIRCUMFLEX_ACCENT,
    GRAVE_ACCENT,
    TILDE
  ]);
  const CLASS_SET_SYNTAX_CHARACTER = /* @__PURE__ */ new Set([
    LEFT_PARENTHESIS,
    RIGHT_PARENTHESIS,
    LEFT_SQUARE_BRACKET,
    RIGHT_SQUARE_BRACKET,
    LEFT_CURLY_BRACKET,
    RIGHT_CURLY_BRACKET,
    SOLIDUS,
    HYPHEN_MINUS,
    REVERSE_SOLIDUS,
    VERTICAL_LINE
  ]);
  const CLASS_SET_RESERVED_PUNCTUATOR = /* @__PURE__ */ new Set([
    AMPERSAND,
    HYPHEN_MINUS,
    EXCLAMATION_MARK,
    NUMBER_SIGN,
    PERCENT_SIGN,
    COMMA,
    COLON,
    SEMICOLON,
    LESS_THAN_SIGN,
    EQUALS_SIGN,
    GREATER_THAN_SIGN,
    COMMERCIAL_AT,
    GRAVE_ACCENT,
    TILDE
  ]);
  const FLAG_PROP_TO_CODEPOINT = {
    global: LATIN_SMALL_LETTER_G,
    ignoreCase: LATIN_SMALL_LETTER_I,
    multiline: LATIN_SMALL_LETTER_M,
    unicode: LATIN_SMALL_LETTER_U,
    sticky: LATIN_SMALL_LETTER_Y,
    dotAll: LATIN_SMALL_LETTER_S,
    hasIndices: LATIN_SMALL_LETTER_D,
    unicodeSets: LATIN_SMALL_LETTER_V
  };
  const FLAG_CODEPOINT_TO_PROP = Object.fromEntries(Object.entries(FLAG_PROP_TO_CODEPOINT).map(([k, v2]) => [v2, k]));
  function isSyntaxCharacter(cp) {
    return SYNTAX_CHARACTER.has(cp);
  }
  function isClassSetReservedDoublePunctuatorCharacter(cp) {
    return CLASS_SET_RESERVED_DOUBLE_PUNCTUATOR_CHARACTER.has(cp);
  }
  function isClassSetSyntaxCharacter(cp) {
    return CLASS_SET_SYNTAX_CHARACTER.has(cp);
  }
  function isClassSetReservedPunctuator(cp) {
    return CLASS_SET_RESERVED_PUNCTUATOR.has(cp);
  }
  function isIdentifierStartChar(cp) {
    return isIdStart(cp) || cp === DOLLAR_SIGN || cp === LOW_LINE;
  }
  function isIdentifierPartChar(cp) {
    return isIdContinue(cp) || cp === DOLLAR_SIGN || cp === ZERO_WIDTH_NON_JOINER || cp === ZERO_WIDTH_JOINER;
  }
  function isUnicodePropertyNameCharacter(cp) {
    return isLatinLetter(cp) || cp === LOW_LINE;
  }
  function isUnicodePropertyValueCharacter(cp) {
    return isUnicodePropertyNameCharacter(cp) || isDecimalDigit(cp);
  }
  function isRegularExpressionModifier(ch) {
    return ch === LATIN_SMALL_LETTER_I || ch === LATIN_SMALL_LETTER_M || ch === LATIN_SMALL_LETTER_S;
  }
  class RegExpValidator {
    constructor(options) {
      this._reader = new Reader();
      this._unicodeMode = false;
      this._unicodeSetsMode = false;
      this._nFlag = false;
      this._lastIntValue = 0;
      this._lastRange = {
        min: 0,
        max: Number.POSITIVE_INFINITY
      };
      this._lastStrValue = "";
      this._lastAssertionIsQuantifiable = false;
      this._numCapturingParens = 0;
      this._backreferenceNames = /* @__PURE__ */ new Set();
      this._srcCtx = null;
      this._options = options !== null && options !== void 0 ? options : {};
      this._groupSpecifiers = this.ecmaVersion >= 2025 ? new GroupSpecifiersAsES2025() : new GroupSpecifiersAsES2018();
    }
    validateLiteral(source, start = 0, end = source.length) {
      this._srcCtx = { source, start, end, kind: "literal" };
      this._unicodeSetsMode = this._unicodeMode = this._nFlag = false;
      this.reset(source, start, end);
      this.onLiteralEnter(start);
      if (this.eat(SOLIDUS) && this.eatRegExpBody() && this.eat(SOLIDUS)) {
        const flagStart = this.index;
        const unicode2 = source.includes("u", flagStart);
        const unicodeSets = source.includes("v", flagStart);
        this.validateFlagsInternal(source, flagStart, end);
        this.validatePatternInternal(source, start + 1, flagStart - 1, {
          unicode: unicode2,
          unicodeSets
        });
      } else if (start >= end) {
        this.raise("Empty");
      } else {
        const c2 = String.fromCodePoint(this.currentCodePoint);
        this.raise(`Unexpected character '${c2}'`);
      }
      this.onLiteralLeave(start, end);
    }
    validateFlags(source, start = 0, end = source.length) {
      this._srcCtx = { source, start, end, kind: "flags" };
      this.validateFlagsInternal(source, start, end);
    }
    validatePattern(source, start = 0, end = source.length, uFlagOrFlags = void 0) {
      this._srcCtx = { source, start, end, kind: "pattern" };
      this.validatePatternInternal(source, start, end, uFlagOrFlags);
    }
    validatePatternInternal(source, start = 0, end = source.length, uFlagOrFlags = void 0) {
      const mode = this._parseFlagsOptionToMode(uFlagOrFlags, end);
      this._unicodeMode = mode.unicodeMode;
      this._nFlag = mode.nFlag;
      this._unicodeSetsMode = mode.unicodeSetsMode;
      this.reset(source, start, end);
      this.consumePattern();
      if (!this._nFlag && this.ecmaVersion >= 2018 && !this._groupSpecifiers.isEmpty()) {
        this._nFlag = true;
        this.rewind(start);
        this.consumePattern();
      }
    }
    validateFlagsInternal(source, start, end) {
      const flags2 = this.parseFlags(source, start, end);
      this.onRegExpFlags(start, end, flags2);
    }
    _parseFlagsOptionToMode(uFlagOrFlags, sourceEnd) {
      let unicode2 = false;
      let unicodeSets = false;
      if (uFlagOrFlags && this.ecmaVersion >= 2015) {
        if (typeof uFlagOrFlags === "object") {
          unicode2 = Boolean(uFlagOrFlags.unicode);
          if (this.ecmaVersion >= 2024) {
            unicodeSets = Boolean(uFlagOrFlags.unicodeSets);
          }
        } else {
          unicode2 = uFlagOrFlags;
        }
      }
      if (unicode2 && unicodeSets) {
        this.raise("Invalid regular expression flags", {
          index: sourceEnd + 1,
          unicode: unicode2,
          unicodeSets
        });
      }
      const unicodeMode = unicode2 || unicodeSets;
      const nFlag = unicode2 && this.ecmaVersion >= 2018 || unicodeSets || Boolean(this._options.strict && this.ecmaVersion >= 2023);
      const unicodeSetsMode = unicodeSets;
      return { unicodeMode, nFlag, unicodeSetsMode };
    }
    get strict() {
      return Boolean(this._options.strict) || this._unicodeMode;
    }
    get ecmaVersion() {
      var _a;
      return (_a = this._options.ecmaVersion) !== null && _a !== void 0 ? _a : latestEcmaVersion;
    }
    onLiteralEnter(start) {
      if (this._options.onLiteralEnter) {
        this._options.onLiteralEnter(start);
      }
    }
    onLiteralLeave(start, end) {
      if (this._options.onLiteralLeave) {
        this._options.onLiteralLeave(start, end);
      }
    }
    onRegExpFlags(start, end, flags2) {
      if (this._options.onRegExpFlags) {
        this._options.onRegExpFlags(start, end, flags2);
      }
      if (this._options.onFlags) {
        this._options.onFlags(start, end, flags2.global, flags2.ignoreCase, flags2.multiline, flags2.unicode, flags2.sticky, flags2.dotAll, flags2.hasIndices);
      }
    }
    onPatternEnter(start) {
      if (this._options.onPatternEnter) {
        this._options.onPatternEnter(start);
      }
    }
    onPatternLeave(start, end) {
      if (this._options.onPatternLeave) {
        this._options.onPatternLeave(start, end);
      }
    }
    onDisjunctionEnter(start) {
      if (this._options.onDisjunctionEnter) {
        this._options.onDisjunctionEnter(start);
      }
    }
    onDisjunctionLeave(start, end) {
      if (this._options.onDisjunctionLeave) {
        this._options.onDisjunctionLeave(start, end);
      }
    }
    onAlternativeEnter(start, index) {
      if (this._options.onAlternativeEnter) {
        this._options.onAlternativeEnter(start, index);
      }
    }
    onAlternativeLeave(start, end, index) {
      if (this._options.onAlternativeLeave) {
        this._options.onAlternativeLeave(start, end, index);
      }
    }
    onGroupEnter(start) {
      if (this._options.onGroupEnter) {
        this._options.onGroupEnter(start);
      }
    }
    onGroupLeave(start, end) {
      if (this._options.onGroupLeave) {
        this._options.onGroupLeave(start, end);
      }
    }
    onModifiersEnter(start) {
      if (this._options.onModifiersEnter) {
        this._options.onModifiersEnter(start);
      }
    }
    onModifiersLeave(start, end) {
      if (this._options.onModifiersLeave) {
        this._options.onModifiersLeave(start, end);
      }
    }
    onAddModifiers(start, end, flags2) {
      if (this._options.onAddModifiers) {
        this._options.onAddModifiers(start, end, flags2);
      }
    }
    onRemoveModifiers(start, end, flags2) {
      if (this._options.onRemoveModifiers) {
        this._options.onRemoveModifiers(start, end, flags2);
      }
    }
    onCapturingGroupEnter(start, name) {
      if (this._options.onCapturingGroupEnter) {
        this._options.onCapturingGroupEnter(start, name);
      }
    }
    onCapturingGroupLeave(start, end, name) {
      if (this._options.onCapturingGroupLeave) {
        this._options.onCapturingGroupLeave(start, end, name);
      }
    }
    onQuantifier(start, end, min, max, greedy) {
      if (this._options.onQuantifier) {
        this._options.onQuantifier(start, end, min, max, greedy);
      }
    }
    onLookaroundAssertionEnter(start, kind, negate) {
      if (this._options.onLookaroundAssertionEnter) {
        this._options.onLookaroundAssertionEnter(start, kind, negate);
      }
    }
    onLookaroundAssertionLeave(start, end, kind, negate) {
      if (this._options.onLookaroundAssertionLeave) {
        this._options.onLookaroundAssertionLeave(start, end, kind, negate);
      }
    }
    onEdgeAssertion(start, end, kind) {
      if (this._options.onEdgeAssertion) {
        this._options.onEdgeAssertion(start, end, kind);
      }
    }
    onWordBoundaryAssertion(start, end, kind, negate) {
      if (this._options.onWordBoundaryAssertion) {
        this._options.onWordBoundaryAssertion(start, end, kind, negate);
      }
    }
    onAnyCharacterSet(start, end, kind) {
      if (this._options.onAnyCharacterSet) {
        this._options.onAnyCharacterSet(start, end, kind);
      }
    }
    onEscapeCharacterSet(start, end, kind, negate) {
      if (this._options.onEscapeCharacterSet) {
        this._options.onEscapeCharacterSet(start, end, kind, negate);
      }
    }
    onUnicodePropertyCharacterSet(start, end, kind, key, value, negate, strings) {
      if (this._options.onUnicodePropertyCharacterSet) {
        this._options.onUnicodePropertyCharacterSet(start, end, kind, key, value, negate, strings);
      }
    }
    onCharacter(start, end, value) {
      if (this._options.onCharacter) {
        this._options.onCharacter(start, end, value);
      }
    }
    onBackreference(start, end, ref2) {
      if (this._options.onBackreference) {
        this._options.onBackreference(start, end, ref2);
      }
    }
    onCharacterClassEnter(start, negate, unicodeSets) {
      if (this._options.onCharacterClassEnter) {
        this._options.onCharacterClassEnter(start, negate, unicodeSets);
      }
    }
    onCharacterClassLeave(start, end, negate) {
      if (this._options.onCharacterClassLeave) {
        this._options.onCharacterClassLeave(start, end, negate);
      }
    }
    onCharacterClassRange(start, end, min, max) {
      if (this._options.onCharacterClassRange) {
        this._options.onCharacterClassRange(start, end, min, max);
      }
    }
    onClassIntersection(start, end) {
      if (this._options.onClassIntersection) {
        this._options.onClassIntersection(start, end);
      }
    }
    onClassSubtraction(start, end) {
      if (this._options.onClassSubtraction) {
        this._options.onClassSubtraction(start, end);
      }
    }
    onClassStringDisjunctionEnter(start) {
      if (this._options.onClassStringDisjunctionEnter) {
        this._options.onClassStringDisjunctionEnter(start);
      }
    }
    onClassStringDisjunctionLeave(start, end) {
      if (this._options.onClassStringDisjunctionLeave) {
        this._options.onClassStringDisjunctionLeave(start, end);
      }
    }
    onStringAlternativeEnter(start, index) {
      if (this._options.onStringAlternativeEnter) {
        this._options.onStringAlternativeEnter(start, index);
      }
    }
    onStringAlternativeLeave(start, end, index) {
      if (this._options.onStringAlternativeLeave) {
        this._options.onStringAlternativeLeave(start, end, index);
      }
    }
    get index() {
      return this._reader.index;
    }
    get currentCodePoint() {
      return this._reader.currentCodePoint;
    }
    get nextCodePoint() {
      return this._reader.nextCodePoint;
    }
    get nextCodePoint2() {
      return this._reader.nextCodePoint2;
    }
    get nextCodePoint3() {
      return this._reader.nextCodePoint3;
    }
    reset(source, start, end) {
      this._reader.reset(source, start, end, this._unicodeMode);
    }
    rewind(index) {
      this._reader.rewind(index);
    }
    advance() {
      this._reader.advance();
    }
    eat(cp) {
      return this._reader.eat(cp);
    }
    eat2(cp1, cp2) {
      return this._reader.eat2(cp1, cp2);
    }
    eat3(cp1, cp2, cp3) {
      return this._reader.eat3(cp1, cp2, cp3);
    }
    raise(message, context) {
      var _a, _b, _c;
      throw newRegExpSyntaxError(this._srcCtx, {
        unicode: (_a = context === null || context === void 0 ? void 0 : context.unicode) !== null && _a !== void 0 ? _a : this._unicodeMode && !this._unicodeSetsMode,
        unicodeSets: (_b = context === null || context === void 0 ? void 0 : context.unicodeSets) !== null && _b !== void 0 ? _b : this._unicodeSetsMode
      }, (_c = context === null || context === void 0 ? void 0 : context.index) !== null && _c !== void 0 ? _c : this.index, message);
    }
    eatRegExpBody() {
      const start = this.index;
      let inClass = false;
      let escaped = false;
      for (; ; ) {
        const cp = this.currentCodePoint;
        if (cp === -1 || isLineTerminator(cp)) {
          const kind = inClass ? "character class" : "regular expression";
          this.raise(`Unterminated ${kind}`);
        }
        if (escaped) {
          escaped = false;
        } else if (cp === REVERSE_SOLIDUS) {
          escaped = true;
        } else if (cp === LEFT_SQUARE_BRACKET) {
          inClass = true;
        } else if (cp === RIGHT_SQUARE_BRACKET) {
          inClass = false;
        } else if (cp === SOLIDUS && !inClass || cp === ASTERISK && this.index === start) {
          break;
        }
        this.advance();
      }
      return this.index !== start;
    }
    consumePattern() {
      const start = this.index;
      this._numCapturingParens = this.countCapturingParens();
      this._groupSpecifiers.clear();
      this._backreferenceNames.clear();
      this.onPatternEnter(start);
      this.consumeDisjunction();
      const cp = this.currentCodePoint;
      if (this.currentCodePoint !== -1) {
        if (cp === RIGHT_PARENTHESIS) {
          this.raise("Unmatched ')'");
        }
        if (cp === REVERSE_SOLIDUS) {
          this.raise("\\ at end of pattern");
        }
        if (cp === RIGHT_SQUARE_BRACKET || cp === RIGHT_CURLY_BRACKET) {
          this.raise("Lone quantifier brackets");
        }
        const c2 = String.fromCodePoint(cp);
        this.raise(`Unexpected character '${c2}'`);
      }
      for (const name of this._backreferenceNames) {
        if (!this._groupSpecifiers.hasInPattern(name)) {
          this.raise("Invalid named capture referenced");
        }
      }
      this.onPatternLeave(start, this.index);
    }
    countCapturingParens() {
      const start = this.index;
      let inClass = false;
      let escaped = false;
      let count = 0;
      let cp = 0;
      while ((cp = this.currentCodePoint) !== -1) {
        if (escaped) {
          escaped = false;
        } else if (cp === REVERSE_SOLIDUS) {
          escaped = true;
        } else if (cp === LEFT_SQUARE_BRACKET) {
          inClass = true;
        } else if (cp === RIGHT_SQUARE_BRACKET) {
          inClass = false;
        } else if (cp === LEFT_PARENTHESIS && !inClass && (this.nextCodePoint !== QUESTION_MARK || this.nextCodePoint2 === LESS_THAN_SIGN && this.nextCodePoint3 !== EQUALS_SIGN && this.nextCodePoint3 !== EXCLAMATION_MARK)) {
          count += 1;
        }
        this.advance();
      }
      this.rewind(start);
      return count;
    }
    consumeDisjunction() {
      const start = this.index;
      let i2 = 0;
      this._groupSpecifiers.enterDisjunction();
      this.onDisjunctionEnter(start);
      do {
        this.consumeAlternative(i2++);
      } while (this.eat(VERTICAL_LINE));
      if (this.consumeQuantifier(true)) {
        this.raise("Nothing to repeat");
      }
      if (this.eat(LEFT_CURLY_BRACKET)) {
        this.raise("Lone quantifier brackets");
      }
      this.onDisjunctionLeave(start, this.index);
      this._groupSpecifiers.leaveDisjunction();
    }
    consumeAlternative(i2) {
      const start = this.index;
      this._groupSpecifiers.enterAlternative(i2);
      this.onAlternativeEnter(start, i2);
      while (this.currentCodePoint !== -1 && this.consumeTerm()) {
      }
      this.onAlternativeLeave(start, this.index, i2);
    }
    consumeTerm() {
      if (this._unicodeMode || this.strict) {
        return this.consumeAssertion() || this.consumeAtom() && this.consumeOptionalQuantifier();
      }
      return this.consumeAssertion() && (!this._lastAssertionIsQuantifiable || this.consumeOptionalQuantifier()) || this.consumeExtendedAtom() && this.consumeOptionalQuantifier();
    }
    consumeOptionalQuantifier() {
      this.consumeQuantifier();
      return true;
    }
    consumeAssertion() {
      const start = this.index;
      this._lastAssertionIsQuantifiable = false;
      if (this.eat(CIRCUMFLEX_ACCENT)) {
        this.onEdgeAssertion(start, this.index, "start");
        return true;
      }
      if (this.eat(DOLLAR_SIGN)) {
        this.onEdgeAssertion(start, this.index, "end");
        return true;
      }
      if (this.eat2(REVERSE_SOLIDUS, LATIN_CAPITAL_LETTER_B)) {
        this.onWordBoundaryAssertion(start, this.index, "word", true);
        return true;
      }
      if (this.eat2(REVERSE_SOLIDUS, LATIN_SMALL_LETTER_B)) {
        this.onWordBoundaryAssertion(start, this.index, "word", false);
        return true;
      }
      if (this.eat2(LEFT_PARENTHESIS, QUESTION_MARK)) {
        const lookbehind = this.ecmaVersion >= 2018 && this.eat(LESS_THAN_SIGN);
        let negate = false;
        if (this.eat(EQUALS_SIGN) || (negate = this.eat(EXCLAMATION_MARK))) {
          const kind = lookbehind ? "lookbehind" : "lookahead";
          this.onLookaroundAssertionEnter(start, kind, negate);
          this.consumeDisjunction();
          if (!this.eat(RIGHT_PARENTHESIS)) {
            this.raise("Unterminated group");
          }
          this._lastAssertionIsQuantifiable = !lookbehind && !this.strict;
          this.onLookaroundAssertionLeave(start, this.index, kind, negate);
          return true;
        }
        this.rewind(start);
      }
      return false;
    }
    consumeQuantifier(noConsume = false) {
      const start = this.index;
      let min = 0;
      let max = 0;
      let greedy = false;
      if (this.eat(ASTERISK)) {
        min = 0;
        max = Number.POSITIVE_INFINITY;
      } else if (this.eat(PLUS_SIGN)) {
        min = 1;
        max = Number.POSITIVE_INFINITY;
      } else if (this.eat(QUESTION_MARK)) {
        min = 0;
        max = 1;
      } else if (this.eatBracedQuantifier(noConsume)) {
        ({ min, max } = this._lastRange);
      } else {
        return false;
      }
      greedy = !this.eat(QUESTION_MARK);
      if (!noConsume) {
        this.onQuantifier(start, this.index, min, max, greedy);
      }
      return true;
    }
    eatBracedQuantifier(noError) {
      const start = this.index;
      if (this.eat(LEFT_CURLY_BRACKET)) {
        if (this.eatDecimalDigits()) {
          const min = this._lastIntValue;
          let max = min;
          if (this.eat(COMMA)) {
            max = this.eatDecimalDigits() ? this._lastIntValue : Number.POSITIVE_INFINITY;
          }
          if (this.eat(RIGHT_CURLY_BRACKET)) {
            if (!noError && max < min) {
              this.raise("numbers out of order in {} quantifier");
            }
            this._lastRange = { min, max };
            return true;
          }
        }
        if (!noError && (this._unicodeMode || this.strict)) {
          this.raise("Incomplete quantifier");
        }
        this.rewind(start);
      }
      return false;
    }
    consumeAtom() {
      return this.consumePatternCharacter() || this.consumeDot() || this.consumeReverseSolidusAtomEscape() || Boolean(this.consumeCharacterClass()) || this.consumeCapturingGroup() || this.consumeUncapturingGroup();
    }
    consumeDot() {
      if (this.eat(FULL_STOP)) {
        this.onAnyCharacterSet(this.index - 1, this.index, "any");
        return true;
      }
      return false;
    }
    consumeReverseSolidusAtomEscape() {
      const start = this.index;
      if (this.eat(REVERSE_SOLIDUS)) {
        if (this.consumeAtomEscape()) {
          return true;
        }
        this.rewind(start);
      }
      return false;
    }
    consumeUncapturingGroup() {
      const start = this.index;
      if (this.eat2(LEFT_PARENTHESIS, QUESTION_MARK)) {
        this.onGroupEnter(start);
        if (this.ecmaVersion >= 2025) {
          this.consumeModifiers();
        }
        if (!this.eat(COLON)) {
          this.rewind(start + 1);
          this.raise("Invalid group");
        }
        this.consumeDisjunction();
        if (!this.eat(RIGHT_PARENTHESIS)) {
          this.raise("Unterminated group");
        }
        this.onGroupLeave(start, this.index);
        return true;
      }
      return false;
    }
    consumeModifiers() {
      const start = this.index;
      const hasAddModifiers = this.eatModifiers();
      const addModifiersEnd = this.index;
      const hasHyphen = this.eat(HYPHEN_MINUS);
      if (!hasAddModifiers && !hasHyphen) {
        return false;
      }
      this.onModifiersEnter(start);
      const addModifiers = this.parseModifiers(start, addModifiersEnd);
      this.onAddModifiers(start, addModifiersEnd, addModifiers);
      if (hasHyphen) {
        const modifiersStart = this.index;
        if (!this.eatModifiers() && !hasAddModifiers && this.currentCodePoint === COLON) {
          this.raise("Invalid empty flags");
        }
        const modifiers = this.parseModifiers(modifiersStart, this.index);
        for (const [flagName] of Object.entries(modifiers).filter(([, enable]) => enable)) {
          if (addModifiers[flagName]) {
            this.raise(`Duplicated flag '${String.fromCodePoint(FLAG_PROP_TO_CODEPOINT[flagName])}'`);
          }
        }
        this.onRemoveModifiers(modifiersStart, this.index, modifiers);
      }
      this.onModifiersLeave(start, this.index);
      return true;
    }
    consumeCapturingGroup() {
      const start = this.index;
      if (this.eat(LEFT_PARENTHESIS)) {
        let name = null;
        if (this.ecmaVersion >= 2018) {
          if (this.consumeGroupSpecifier()) {
            name = this._lastStrValue;
          } else if (this.currentCodePoint === QUESTION_MARK) {
            this.rewind(start);
            return false;
          }
        } else if (this.currentCodePoint === QUESTION_MARK) {
          this.rewind(start);
          return false;
        }
        this.onCapturingGroupEnter(start, name);
        this.consumeDisjunction();
        if (!this.eat(RIGHT_PARENTHESIS)) {
          this.raise("Unterminated group");
        }
        this.onCapturingGroupLeave(start, this.index, name);
        return true;
      }
      return false;
    }
    consumeExtendedAtom() {
      return this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeReverseSolidusFollowedByC() || Boolean(this.consumeCharacterClass()) || this.consumeCapturingGroup() || this.consumeUncapturingGroup() || this.consumeInvalidBracedQuantifier() || this.consumeExtendedPatternCharacter();
    }
    consumeReverseSolidusFollowedByC() {
      const start = this.index;
      if (this.currentCodePoint === REVERSE_SOLIDUS && this.nextCodePoint === LATIN_SMALL_LETTER_C) {
        this._lastIntValue = this.currentCodePoint;
        this.advance();
        this.onCharacter(start, this.index, REVERSE_SOLIDUS);
        return true;
      }
      return false;
    }
    consumeInvalidBracedQuantifier() {
      if (this.eatBracedQuantifier(true)) {
        this.raise("Nothing to repeat");
      }
      return false;
    }
    consumePatternCharacter() {
      const start = this.index;
      const cp = this.currentCodePoint;
      if (cp !== -1 && !isSyntaxCharacter(cp)) {
        this.advance();
        this.onCharacter(start, this.index, cp);
        return true;
      }
      return false;
    }
    consumeExtendedPatternCharacter() {
      const start = this.index;
      const cp = this.currentCodePoint;
      if (cp !== -1 && cp !== CIRCUMFLEX_ACCENT && cp !== DOLLAR_SIGN && cp !== REVERSE_SOLIDUS && cp !== FULL_STOP && cp !== ASTERISK && cp !== PLUS_SIGN && cp !== QUESTION_MARK && cp !== LEFT_PARENTHESIS && cp !== RIGHT_PARENTHESIS && cp !== LEFT_SQUARE_BRACKET && cp !== VERTICAL_LINE) {
        this.advance();
        this.onCharacter(start, this.index, cp);
        return true;
      }
      return false;
    }
    consumeGroupSpecifier() {
      const start = this.index;
      if (this.eat(QUESTION_MARK)) {
        if (this.eatGroupName()) {
          if (!this._groupSpecifiers.hasInScope(this._lastStrValue)) {
            this._groupSpecifiers.addToScope(this._lastStrValue);
            return true;
          }
          this.raise("Duplicate capture group name");
        }
        this.rewind(start);
      }
      return false;
    }
    consumeAtomEscape() {
      if (this.consumeBackreference() || this.consumeCharacterClassEscape() || this.consumeCharacterEscape() || this._nFlag && this.consumeKGroupName()) {
        return true;
      }
      if (this.strict || this._unicodeMode) {
        this.raise("Invalid escape");
      }
      return false;
    }
    consumeBackreference() {
      const start = this.index;
      if (this.eatDecimalEscape()) {
        const n2 = this._lastIntValue;
        if (n2 <= this._numCapturingParens) {
          this.onBackreference(start - 1, this.index, n2);
          return true;
        }
        if (this.strict || this._unicodeMode) {
          this.raise("Invalid escape");
        }
        this.rewind(start);
      }
      return false;
    }
    consumeCharacterClassEscape() {
      var _a;
      const start = this.index;
      if (this.eat(LATIN_SMALL_LETTER_D)) {
        this._lastIntValue = -1;
        this.onEscapeCharacterSet(start - 1, this.index, "digit", false);
        return {};
      }
      if (this.eat(LATIN_CAPITAL_LETTER_D)) {
        this._lastIntValue = -1;
        this.onEscapeCharacterSet(start - 1, this.index, "digit", true);
        return {};
      }
      if (this.eat(LATIN_SMALL_LETTER_S)) {
        this._lastIntValue = -1;
        this.onEscapeCharacterSet(start - 1, this.index, "space", false);
        return {};
      }
      if (this.eat(LATIN_CAPITAL_LETTER_S)) {
        this._lastIntValue = -1;
        this.onEscapeCharacterSet(start - 1, this.index, "space", true);
        return {};
      }
      if (this.eat(LATIN_SMALL_LETTER_W)) {
        this._lastIntValue = -1;
        this.onEscapeCharacterSet(start - 1, this.index, "word", false);
        return {};
      }
      if (this.eat(LATIN_CAPITAL_LETTER_W)) {
        this._lastIntValue = -1;
        this.onEscapeCharacterSet(start - 1, this.index, "word", true);
        return {};
      }
      let negate = false;
      if (this._unicodeMode && this.ecmaVersion >= 2018 && (this.eat(LATIN_SMALL_LETTER_P) || (negate = this.eat(LATIN_CAPITAL_LETTER_P)))) {
        this._lastIntValue = -1;
        let result = null;
        if (this.eat(LEFT_CURLY_BRACKET) && (result = this.eatUnicodePropertyValueExpression()) && this.eat(RIGHT_CURLY_BRACKET)) {
          if (negate && result.strings) {
            this.raise("Invalid property name");
          }
          this.onUnicodePropertyCharacterSet(start - 1, this.index, "property", result.key, result.value, negate, (_a = result.strings) !== null && _a !== void 0 ? _a : false);
          return { mayContainStrings: result.strings };
        }
        this.raise("Invalid property name");
      }
      return null;
    }
    consumeCharacterEscape() {
      const start = this.index;
      if (this.eatControlEscape() || this.eatCControlLetter() || this.eatZero() || this.eatHexEscapeSequence() || this.eatRegExpUnicodeEscapeSequence() || !this.strict && !this._unicodeMode && this.eatLegacyOctalEscapeSequence() || this.eatIdentityEscape()) {
        this.onCharacter(start - 1, this.index, this._lastIntValue);
        return true;
      }
      return false;
    }
    consumeKGroupName() {
      const start = this.index;
      if (this.eat(LATIN_SMALL_LETTER_K)) {
        if (this.eatGroupName()) {
          const groupName = this._lastStrValue;
          this._backreferenceNames.add(groupName);
          this.onBackreference(start - 1, this.index, groupName);
          return true;
        }
        this.raise("Invalid named reference");
      }
      return false;
    }
    consumeCharacterClass() {
      const start = this.index;
      if (this.eat(LEFT_SQUARE_BRACKET)) {
        const negate = this.eat(CIRCUMFLEX_ACCENT);
        this.onCharacterClassEnter(start, negate, this._unicodeSetsMode);
        const result = this.consumeClassContents();
        if (!this.eat(RIGHT_SQUARE_BRACKET)) {
          if (this.currentCodePoint === -1) {
            this.raise("Unterminated character class");
          }
          this.raise("Invalid character in character class");
        }
        if (negate && result.mayContainStrings) {
          this.raise("Negated character class may contain strings");
        }
        this.onCharacterClassLeave(start, this.index, negate);
        return result;
      }
      return null;
    }
    consumeClassContents() {
      if (this._unicodeSetsMode) {
        if (this.currentCodePoint === RIGHT_SQUARE_BRACKET) {
          return {};
        }
        const result = this.consumeClassSetExpression();
        return result;
      }
      const strict2 = this.strict || this._unicodeMode;
      for (; ; ) {
        const rangeStart = this.index;
        if (!this.consumeClassAtom()) {
          break;
        }
        const min = this._lastIntValue;
        if (!this.eat(HYPHEN_MINUS)) {
          continue;
        }
        this.onCharacter(this.index - 1, this.index, HYPHEN_MINUS);
        if (!this.consumeClassAtom()) {
          break;
        }
        const max = this._lastIntValue;
        if (min === -1 || max === -1) {
          if (strict2) {
            this.raise("Invalid character class");
          }
          continue;
        }
        if (min > max) {
          this.raise("Range out of order in character class");
        }
        this.onCharacterClassRange(rangeStart, this.index, min, max);
      }
      return {};
    }
    consumeClassAtom() {
      const start = this.index;
      const cp = this.currentCodePoint;
      if (cp !== -1 && cp !== REVERSE_SOLIDUS && cp !== RIGHT_SQUARE_BRACKET) {
        this.advance();
        this._lastIntValue = cp;
        this.onCharacter(start, this.index, this._lastIntValue);
        return true;
      }
      if (this.eat(REVERSE_SOLIDUS)) {
        if (this.consumeClassEscape()) {
          return true;
        }
        if (!this.strict && this.currentCodePoint === LATIN_SMALL_LETTER_C) {
          this._lastIntValue = REVERSE_SOLIDUS;
          this.onCharacter(start, this.index, this._lastIntValue);
          return true;
        }
        if (this.strict || this._unicodeMode) {
          this.raise("Invalid escape");
        }
        this.rewind(start);
      }
      return false;
    }
    consumeClassEscape() {
      const start = this.index;
      if (this.eat(LATIN_SMALL_LETTER_B)) {
        this._lastIntValue = BACKSPACE;
        this.onCharacter(start - 1, this.index, this._lastIntValue);
        return true;
      }
      if (this._unicodeMode && this.eat(HYPHEN_MINUS)) {
        this._lastIntValue = HYPHEN_MINUS;
        this.onCharacter(start - 1, this.index, this._lastIntValue);
        return true;
      }
      let cp = 0;
      if (!this.strict && !this._unicodeMode && this.currentCodePoint === LATIN_SMALL_LETTER_C && (isDecimalDigit(cp = this.nextCodePoint) || cp === LOW_LINE)) {
        this.advance();
        this.advance();
        this._lastIntValue = cp % 32;
        this.onCharacter(start - 1, this.index, this._lastIntValue);
        return true;
      }
      return Boolean(this.consumeCharacterClassEscape()) || this.consumeCharacterEscape();
    }
    consumeClassSetExpression() {
      const start = this.index;
      let mayContainStrings = false;
      let result = null;
      if (this.consumeClassSetCharacter()) {
        if (this.consumeClassSetRangeFromOperator(start)) {
          this.consumeClassUnionRight({});
          return {};
        }
        mayContainStrings = false;
      } else if (result = this.consumeClassSetOperand()) {
        mayContainStrings = result.mayContainStrings;
      } else {
        const cp = this.currentCodePoint;
        if (cp === REVERSE_SOLIDUS) {
          this.advance();
          this.raise("Invalid escape");
        }
        if (cp === this.nextCodePoint && isClassSetReservedDoublePunctuatorCharacter(cp)) {
          this.raise("Invalid set operation in character class");
        }
        this.raise("Invalid character in character class");
      }
      if (this.eat2(AMPERSAND, AMPERSAND)) {
        while (this.currentCodePoint !== AMPERSAND && (result = this.consumeClassSetOperand())) {
          this.onClassIntersection(start, this.index);
          if (!result.mayContainStrings) {
            mayContainStrings = false;
          }
          if (this.eat2(AMPERSAND, AMPERSAND)) {
            continue;
          }
          return { mayContainStrings };
        }
        this.raise("Invalid character in character class");
      }
      if (this.eat2(HYPHEN_MINUS, HYPHEN_MINUS)) {
        while (this.consumeClassSetOperand()) {
          this.onClassSubtraction(start, this.index);
          if (this.eat2(HYPHEN_MINUS, HYPHEN_MINUS)) {
            continue;
          }
          return { mayContainStrings };
        }
        this.raise("Invalid character in character class");
      }
      return this.consumeClassUnionRight({ mayContainStrings });
    }
    consumeClassUnionRight(leftResult) {
      let mayContainStrings = leftResult.mayContainStrings;
      for (; ; ) {
        const start = this.index;
        if (this.consumeClassSetCharacter()) {
          this.consumeClassSetRangeFromOperator(start);
          continue;
        }
        const result = this.consumeClassSetOperand();
        if (result) {
          if (result.mayContainStrings) {
            mayContainStrings = true;
          }
          continue;
        }
        break;
      }
      return { mayContainStrings };
    }
    consumeClassSetRangeFromOperator(start) {
      const currentStart = this.index;
      const min = this._lastIntValue;
      if (this.eat(HYPHEN_MINUS)) {
        if (this.consumeClassSetCharacter()) {
          const max = this._lastIntValue;
          if (min === -1 || max === -1) {
            this.raise("Invalid character class");
          }
          if (min > max) {
            this.raise("Range out of order in character class");
          }
          this.onCharacterClassRange(start, this.index, min, max);
          return true;
        }
        this.rewind(currentStart);
      }
      return false;
    }
    consumeClassSetOperand() {
      let result = null;
      if (result = this.consumeNestedClass()) {
        return result;
      }
      if (result = this.consumeClassStringDisjunction()) {
        return result;
      }
      if (this.consumeClassSetCharacter()) {
        return {};
      }
      return null;
    }
    consumeNestedClass() {
      const start = this.index;
      if (this.eat(LEFT_SQUARE_BRACKET)) {
        const negate = this.eat(CIRCUMFLEX_ACCENT);
        this.onCharacterClassEnter(start, negate, true);
        const result = this.consumeClassContents();
        if (!this.eat(RIGHT_SQUARE_BRACKET)) {
          this.raise("Unterminated character class");
        }
        if (negate && result.mayContainStrings) {
          this.raise("Negated character class may contain strings");
        }
        this.onCharacterClassLeave(start, this.index, negate);
        return result;
      }
      if (this.eat(REVERSE_SOLIDUS)) {
        const result = this.consumeCharacterClassEscape();
        if (result) {
          return result;
        }
        this.rewind(start);
      }
      return null;
    }
    consumeClassStringDisjunction() {
      const start = this.index;
      if (this.eat3(REVERSE_SOLIDUS, LATIN_SMALL_LETTER_Q, LEFT_CURLY_BRACKET)) {
        this.onClassStringDisjunctionEnter(start);
        let i2 = 0;
        let mayContainStrings = false;
        do {
          if (this.consumeClassString(i2++).mayContainStrings) {
            mayContainStrings = true;
          }
        } while (this.eat(VERTICAL_LINE));
        if (this.eat(RIGHT_CURLY_BRACKET)) {
          this.onClassStringDisjunctionLeave(start, this.index);
          return { mayContainStrings };
        }
        this.raise("Unterminated class string disjunction");
      }
      return null;
    }
    consumeClassString(i2) {
      const start = this.index;
      let count = 0;
      this.onStringAlternativeEnter(start, i2);
      while (this.currentCodePoint !== -1 && this.consumeClassSetCharacter()) {
        count++;
      }
      this.onStringAlternativeLeave(start, this.index, i2);
      return { mayContainStrings: count !== 1 };
    }
    consumeClassSetCharacter() {
      const start = this.index;
      const cp = this.currentCodePoint;
      if (cp !== this.nextCodePoint || !isClassSetReservedDoublePunctuatorCharacter(cp)) {
        if (cp !== -1 && !isClassSetSyntaxCharacter(cp)) {
          this._lastIntValue = cp;
          this.advance();
          this.onCharacter(start, this.index, this._lastIntValue);
          return true;
        }
      }
      if (this.eat(REVERSE_SOLIDUS)) {
        if (this.consumeCharacterEscape()) {
          return true;
        }
        if (isClassSetReservedPunctuator(this.currentCodePoint)) {
          this._lastIntValue = this.currentCodePoint;
          this.advance();
          this.onCharacter(start, this.index, this._lastIntValue);
          return true;
        }
        if (this.eat(LATIN_SMALL_LETTER_B)) {
          this._lastIntValue = BACKSPACE;
          this.onCharacter(start, this.index, this._lastIntValue);
          return true;
        }
        this.rewind(start);
      }
      return false;
    }
    eatGroupName() {
      if (this.eat(LESS_THAN_SIGN)) {
        if (this.eatRegExpIdentifierName() && this.eat(GREATER_THAN_SIGN)) {
          return true;
        }
        this.raise("Invalid capture group name");
      }
      return false;
    }
    eatRegExpIdentifierName() {
      if (this.eatRegExpIdentifierStart()) {
        this._lastStrValue = String.fromCodePoint(this._lastIntValue);
        while (this.eatRegExpIdentifierPart()) {
          this._lastStrValue += String.fromCodePoint(this._lastIntValue);
        }
        return true;
      }
      return false;
    }
    eatRegExpIdentifierStart() {
      const start = this.index;
      const forceUFlag = !this._unicodeMode && this.ecmaVersion >= 2020;
      let cp = this.currentCodePoint;
      this.advance();
      if (cp === REVERSE_SOLIDUS && this.eatRegExpUnicodeEscapeSequence(forceUFlag)) {
        cp = this._lastIntValue;
      } else if (forceUFlag && isLeadSurrogate(cp) && isTrailSurrogate(this.currentCodePoint)) {
        cp = combineSurrogatePair(cp, this.currentCodePoint);
        this.advance();
      }
      if (isIdentifierStartChar(cp)) {
        this._lastIntValue = cp;
        return true;
      }
      if (this.index !== start) {
        this.rewind(start);
      }
      return false;
    }
    eatRegExpIdentifierPart() {
      const start = this.index;
      const forceUFlag = !this._unicodeMode && this.ecmaVersion >= 2020;
      let cp = this.currentCodePoint;
      this.advance();
      if (cp === REVERSE_SOLIDUS && this.eatRegExpUnicodeEscapeSequence(forceUFlag)) {
        cp = this._lastIntValue;
      } else if (forceUFlag && isLeadSurrogate(cp) && isTrailSurrogate(this.currentCodePoint)) {
        cp = combineSurrogatePair(cp, this.currentCodePoint);
        this.advance();
      }
      if (isIdentifierPartChar(cp)) {
        this._lastIntValue = cp;
        return true;
      }
      if (this.index !== start) {
        this.rewind(start);
      }
      return false;
    }
    eatCControlLetter() {
      const start = this.index;
      if (this.eat(LATIN_SMALL_LETTER_C)) {
        if (this.eatControlLetter()) {
          return true;
        }
        this.rewind(start);
      }
      return false;
    }
    eatZero() {
      if (this.currentCodePoint === DIGIT_ZERO && !isDecimalDigit(this.nextCodePoint)) {
        this._lastIntValue = 0;
        this.advance();
        return true;
      }
      return false;
    }
    eatControlEscape() {
      if (this.eat(LATIN_SMALL_LETTER_F)) {
        this._lastIntValue = FORM_FEED;
        return true;
      }
      if (this.eat(LATIN_SMALL_LETTER_N)) {
        this._lastIntValue = LINE_FEED;
        return true;
      }
      if (this.eat(LATIN_SMALL_LETTER_R)) {
        this._lastIntValue = CARRIAGE_RETURN;
        return true;
      }
      if (this.eat(LATIN_SMALL_LETTER_T)) {
        this._lastIntValue = CHARACTER_TABULATION;
        return true;
      }
      if (this.eat(LATIN_SMALL_LETTER_V)) {
        this._lastIntValue = LINE_TABULATION;
        return true;
      }
      return false;
    }
    eatControlLetter() {
      const cp = this.currentCodePoint;
      if (isLatinLetter(cp)) {
        this.advance();
        this._lastIntValue = cp % 32;
        return true;
      }
      return false;
    }
    eatRegExpUnicodeEscapeSequence(forceUFlag = false) {
      const start = this.index;
      const uFlag = forceUFlag || this._unicodeMode;
      if (this.eat(LATIN_SMALL_LETTER_U)) {
        if (uFlag && this.eatRegExpUnicodeSurrogatePairEscape() || this.eatFixedHexDigits(4) || uFlag && this.eatRegExpUnicodeCodePointEscape()) {
          return true;
        }
        if (this.strict || uFlag) {
          this.raise("Invalid unicode escape");
        }
        this.rewind(start);
      }
      return false;
    }
    eatRegExpUnicodeSurrogatePairEscape() {
      const start = this.index;
      if (this.eatFixedHexDigits(4)) {
        const lead = this._lastIntValue;
        if (isLeadSurrogate(lead) && this.eat(REVERSE_SOLIDUS) && this.eat(LATIN_SMALL_LETTER_U) && this.eatFixedHexDigits(4)) {
          const trail = this._lastIntValue;
          if (isTrailSurrogate(trail)) {
            this._lastIntValue = combineSurrogatePair(lead, trail);
            return true;
          }
        }
        this.rewind(start);
      }
      return false;
    }
    eatRegExpUnicodeCodePointEscape() {
      const start = this.index;
      if (this.eat(LEFT_CURLY_BRACKET) && this.eatHexDigits() && this.eat(RIGHT_CURLY_BRACKET) && isValidUnicode(this._lastIntValue)) {
        return true;
      }
      this.rewind(start);
      return false;
    }
    eatIdentityEscape() {
      const cp = this.currentCodePoint;
      if (this.isValidIdentityEscape(cp)) {
        this._lastIntValue = cp;
        this.advance();
        return true;
      }
      return false;
    }
    isValidIdentityEscape(cp) {
      if (cp === -1) {
        return false;
      }
      if (this._unicodeMode) {
        return isSyntaxCharacter(cp) || cp === SOLIDUS;
      }
      if (this.strict) {
        return !isIdContinue(cp);
      }
      if (this._nFlag) {
        return !(cp === LATIN_SMALL_LETTER_C || cp === LATIN_SMALL_LETTER_K);
      }
      return cp !== LATIN_SMALL_LETTER_C;
    }
    eatDecimalEscape() {
      this._lastIntValue = 0;
      let cp = this.currentCodePoint;
      if (cp >= DIGIT_ONE && cp <= DIGIT_NINE) {
        do {
          this._lastIntValue = 10 * this._lastIntValue + (cp - DIGIT_ZERO);
          this.advance();
        } while ((cp = this.currentCodePoint) >= DIGIT_ZERO && cp <= DIGIT_NINE);
        return true;
      }
      return false;
    }
    eatUnicodePropertyValueExpression() {
      const start = this.index;
      if (this.eatUnicodePropertyName() && this.eat(EQUALS_SIGN)) {
        const key = this._lastStrValue;
        if (this.eatUnicodePropertyValue()) {
          const value = this._lastStrValue;
          if (isValidUnicodeProperty(this.ecmaVersion, key, value)) {
            return {
              key,
              value: value || null
            };
          }
          this.raise("Invalid property name");
        }
      }
      this.rewind(start);
      if (this.eatLoneUnicodePropertyNameOrValue()) {
        const nameOrValue = this._lastStrValue;
        if (isValidUnicodeProperty(this.ecmaVersion, "General_Category", nameOrValue)) {
          return {
            key: "General_Category",
            value: nameOrValue || null
          };
        }
        if (isValidLoneUnicodeProperty(this.ecmaVersion, nameOrValue)) {
          return {
            key: nameOrValue,
            value: null
          };
        }
        if (this._unicodeSetsMode && isValidLoneUnicodePropertyOfString(this.ecmaVersion, nameOrValue)) {
          return {
            key: nameOrValue,
            value: null,
            strings: true
          };
        }
        this.raise("Invalid property name");
      }
      return null;
    }
    eatUnicodePropertyName() {
      this._lastStrValue = "";
      while (isUnicodePropertyNameCharacter(this.currentCodePoint)) {
        this._lastStrValue += String.fromCodePoint(this.currentCodePoint);
        this.advance();
      }
      return this._lastStrValue !== "";
    }
    eatUnicodePropertyValue() {
      this._lastStrValue = "";
      while (isUnicodePropertyValueCharacter(this.currentCodePoint)) {
        this._lastStrValue += String.fromCodePoint(this.currentCodePoint);
        this.advance();
      }
      return this._lastStrValue !== "";
    }
    eatLoneUnicodePropertyNameOrValue() {
      return this.eatUnicodePropertyValue();
    }
    eatHexEscapeSequence() {
      const start = this.index;
      if (this.eat(LATIN_SMALL_LETTER_X)) {
        if (this.eatFixedHexDigits(2)) {
          return true;
        }
        if (this._unicodeMode || this.strict) {
          this.raise("Invalid escape");
        }
        this.rewind(start);
      }
      return false;
    }
    eatDecimalDigits() {
      const start = this.index;
      this._lastIntValue = 0;
      while (isDecimalDigit(this.currentCodePoint)) {
        this._lastIntValue = 10 * this._lastIntValue + digitToInt(this.currentCodePoint);
        this.advance();
      }
      return this.index !== start;
    }
    eatHexDigits() {
      const start = this.index;
      this._lastIntValue = 0;
      while (isHexDigit(this.currentCodePoint)) {
        this._lastIntValue = 16 * this._lastIntValue + digitToInt(this.currentCodePoint);
        this.advance();
      }
      return this.index !== start;
    }
    eatLegacyOctalEscapeSequence() {
      if (this.eatOctalDigit()) {
        const n1 = this._lastIntValue;
        if (this.eatOctalDigit()) {
          const n2 = this._lastIntValue;
          if (n1 <= 3 && this.eatOctalDigit()) {
            this._lastIntValue = n1 * 64 + n2 * 8 + this._lastIntValue;
          } else {
            this._lastIntValue = n1 * 8 + n2;
          }
        } else {
          this._lastIntValue = n1;
        }
        return true;
      }
      return false;
    }
    eatOctalDigit() {
      const cp = this.currentCodePoint;
      if (isOctalDigit(cp)) {
        this.advance();
        this._lastIntValue = cp - DIGIT_ZERO;
        return true;
      }
      this._lastIntValue = 0;
      return false;
    }
    eatFixedHexDigits(length) {
      const start = this.index;
      this._lastIntValue = 0;
      for (let i2 = 0; i2 < length; ++i2) {
        const cp = this.currentCodePoint;
        if (!isHexDigit(cp)) {
          this.rewind(start);
          return false;
        }
        this._lastIntValue = 16 * this._lastIntValue + digitToInt(cp);
        this.advance();
      }
      return true;
    }
    eatModifiers() {
      let ate = false;
      while (isRegularExpressionModifier(this.currentCodePoint)) {
        this.advance();
        ate = true;
      }
      return ate;
    }
    parseModifiers(start, end) {
      const { ignoreCase, multiline, dotAll } = this.parseFlags(this._reader.source, start, end);
      return { ignoreCase, multiline, dotAll };
    }
    parseFlags(source, start, end) {
      const flags2 = {
        global: false,
        ignoreCase: false,
        multiline: false,
        unicode: false,
        sticky: false,
        dotAll: false,
        hasIndices: false,
        unicodeSets: false
      };
      const validFlags = /* @__PURE__ */ new Set();
      validFlags.add(LATIN_SMALL_LETTER_G);
      validFlags.add(LATIN_SMALL_LETTER_I);
      validFlags.add(LATIN_SMALL_LETTER_M);
      if (this.ecmaVersion >= 2015) {
        validFlags.add(LATIN_SMALL_LETTER_U);
        validFlags.add(LATIN_SMALL_LETTER_Y);
        if (this.ecmaVersion >= 2018) {
          validFlags.add(LATIN_SMALL_LETTER_S);
          if (this.ecmaVersion >= 2022) {
            validFlags.add(LATIN_SMALL_LETTER_D);
            if (this.ecmaVersion >= 2024) {
              validFlags.add(LATIN_SMALL_LETTER_V);
            }
          }
        }
      }
      for (let i2 = start; i2 < end; ++i2) {
        const flag = source.charCodeAt(i2);
        if (validFlags.has(flag)) {
          const prop = FLAG_CODEPOINT_TO_PROP[flag];
          if (flags2[prop]) {
            this.raise(`Duplicated flag '${source[i2]}'`, {
              index: start
            });
          }
          flags2[prop] = true;
        } else {
          this.raise(`Invalid flag '${source[i2]}'`, { index: start });
        }
      }
      return flags2;
    }
  }
  const DUMMY_PATTERN = {};
  const DUMMY_FLAGS = {};
  const DUMMY_CAPTURING_GROUP = {};
  function isClassSetOperand(node2) {
    return node2.type === "Character" || node2.type === "CharacterSet" || node2.type === "CharacterClass" || node2.type === "ExpressionCharacterClass" || node2.type === "ClassStringDisjunction";
  }
  class RegExpParserState {
    constructor(options) {
      var _a;
      this._node = DUMMY_PATTERN;
      this._expressionBufferMap = /* @__PURE__ */ new Map();
      this._flags = DUMMY_FLAGS;
      this._backreferences = [];
      this._capturingGroups = [];
      this.source = "";
      this.strict = Boolean(options === null || options === void 0 ? void 0 : options.strict);
      this.ecmaVersion = (_a = options === null || options === void 0 ? void 0 : options.ecmaVersion) !== null && _a !== void 0 ? _a : latestEcmaVersion;
    }
    get pattern() {
      if (this._node.type !== "Pattern") {
        throw new Error("UnknownError");
      }
      return this._node;
    }
    get flags() {
      if (this._flags.type !== "Flags") {
        throw new Error("UnknownError");
      }
      return this._flags;
    }
    onRegExpFlags(start, end, { global, ignoreCase, multiline, unicode: unicode2, sticky, dotAll, hasIndices, unicodeSets }) {
      this._flags = {
        type: "Flags",
        parent: null,
        start,
        end,
        raw: this.source.slice(start, end),
        global,
        ignoreCase,
        multiline,
        unicode: unicode2,
        sticky,
        dotAll,
        hasIndices,
        unicodeSets
      };
    }
    onPatternEnter(start) {
      this._node = {
        type: "Pattern",
        parent: null,
        start,
        end: start,
        raw: "",
        alternatives: []
      };
      this._backreferences.length = 0;
      this._capturingGroups.length = 0;
    }
    onPatternLeave(start, end) {
      this._node.end = end;
      this._node.raw = this.source.slice(start, end);
      for (const reference of this._backreferences) {
        const ref2 = reference.ref;
        const groups = typeof ref2 === "number" ? [this._capturingGroups[ref2 - 1]] : this._capturingGroups.filter((g2) => g2.name === ref2);
        if (groups.length === 1) {
          const group = groups[0];
          reference.ambiguous = false;
          reference.resolved = group;
        } else {
          reference.ambiguous = true;
          reference.resolved = groups;
        }
        for (const group of groups) {
          group.references.push(reference);
        }
      }
    }
    onAlternativeEnter(start) {
      const parent = this._node;
      if (parent.type !== "Assertion" && parent.type !== "CapturingGroup" && parent.type !== "Group" && parent.type !== "Pattern") {
        throw new Error("UnknownError");
      }
      this._node = {
        type: "Alternative",
        parent,
        start,
        end: start,
        raw: "",
        elements: []
      };
      parent.alternatives.push(this._node);
    }
    onAlternativeLeave(start, end) {
      const node2 = this._node;
      if (node2.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      node2.end = end;
      node2.raw = this.source.slice(start, end);
      this._node = node2.parent;
    }
    onGroupEnter(start) {
      const parent = this._node;
      if (parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      const group = {
        type: "Group",
        parent,
        start,
        end: start,
        raw: "",
        modifiers: null,
        alternatives: []
      };
      this._node = group;
      parent.elements.push(this._node);
    }
    onGroupLeave(start, end) {
      const node2 = this._node;
      if (node2.type !== "Group" || node2.parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      node2.end = end;
      node2.raw = this.source.slice(start, end);
      this._node = node2.parent;
    }
    onModifiersEnter(start) {
      const parent = this._node;
      if (parent.type !== "Group") {
        throw new Error("UnknownError");
      }
      this._node = {
        type: "Modifiers",
        parent,
        start,
        end: start,
        raw: "",
        add: null,
        remove: null
      };
      parent.modifiers = this._node;
    }
    onModifiersLeave(start, end) {
      const node2 = this._node;
      if (node2.type !== "Modifiers" || node2.parent.type !== "Group") {
        throw new Error("UnknownError");
      }
      node2.end = end;
      node2.raw = this.source.slice(start, end);
      this._node = node2.parent;
    }
    onAddModifiers(start, end, { ignoreCase, multiline, dotAll }) {
      const parent = this._node;
      if (parent.type !== "Modifiers") {
        throw new Error("UnknownError");
      }
      parent.add = {
        type: "ModifierFlags",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        ignoreCase,
        multiline,
        dotAll
      };
    }
    onRemoveModifiers(start, end, { ignoreCase, multiline, dotAll }) {
      const parent = this._node;
      if (parent.type !== "Modifiers") {
        throw new Error("UnknownError");
      }
      parent.remove = {
        type: "ModifierFlags",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        ignoreCase,
        multiline,
        dotAll
      };
    }
    onCapturingGroupEnter(start, name) {
      const parent = this._node;
      if (parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      this._node = {
        type: "CapturingGroup",
        parent,
        start,
        end: start,
        raw: "",
        name,
        alternatives: [],
        references: []
      };
      parent.elements.push(this._node);
      this._capturingGroups.push(this._node);
    }
    onCapturingGroupLeave(start, end) {
      const node2 = this._node;
      if (node2.type !== "CapturingGroup" || node2.parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      node2.end = end;
      node2.raw = this.source.slice(start, end);
      this._node = node2.parent;
    }
    onQuantifier(start, end, min, max, greedy) {
      const parent = this._node;
      if (parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      const element = parent.elements.pop();
      if (element == null || element.type === "Quantifier" || element.type === "Assertion" && element.kind !== "lookahead") {
        throw new Error("UnknownError");
      }
      const node2 = {
        type: "Quantifier",
        parent,
        start: element.start,
        end,
        raw: this.source.slice(element.start, end),
        min,
        max,
        greedy,
        element
      };
      parent.elements.push(node2);
      element.parent = node2;
    }
    onLookaroundAssertionEnter(start, kind, negate) {
      const parent = this._node;
      if (parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      const node2 = this._node = {
        type: "Assertion",
        parent,
        start,
        end: start,
        raw: "",
        kind,
        negate,
        alternatives: []
      };
      parent.elements.push(node2);
    }
    onLookaroundAssertionLeave(start, end) {
      const node2 = this._node;
      if (node2.type !== "Assertion" || node2.parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      node2.end = end;
      node2.raw = this.source.slice(start, end);
      this._node = node2.parent;
    }
    onEdgeAssertion(start, end, kind) {
      const parent = this._node;
      if (parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      parent.elements.push({
        type: "Assertion",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        kind
      });
    }
    onWordBoundaryAssertion(start, end, kind, negate) {
      const parent = this._node;
      if (parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      parent.elements.push({
        type: "Assertion",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        kind,
        negate
      });
    }
    onAnyCharacterSet(start, end, kind) {
      const parent = this._node;
      if (parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      parent.elements.push({
        type: "CharacterSet",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        kind
      });
    }
    onEscapeCharacterSet(start, end, kind, negate) {
      const parent = this._node;
      if (parent.type !== "Alternative" && parent.type !== "CharacterClass") {
        throw new Error("UnknownError");
      }
      parent.elements.push({
        type: "CharacterSet",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        kind,
        negate
      });
    }
    onUnicodePropertyCharacterSet(start, end, kind, key, value, negate, strings) {
      const parent = this._node;
      if (parent.type !== "Alternative" && parent.type !== "CharacterClass") {
        throw new Error("UnknownError");
      }
      const base = {
        type: "CharacterSet",
        parent: null,
        start,
        end,
        raw: this.source.slice(start, end),
        kind,
        strings: null,
        key
      };
      if (strings) {
        if (parent.type === "CharacterClass" && !parent.unicodeSets || negate || value !== null) {
          throw new Error("UnknownError");
        }
        parent.elements.push(Object.assign(Object.assign({}, base), { parent, strings, value, negate }));
      } else {
        parent.elements.push(Object.assign(Object.assign({}, base), { parent, strings, value, negate }));
      }
    }
    onCharacter(start, end, value) {
      const parent = this._node;
      if (parent.type !== "Alternative" && parent.type !== "CharacterClass" && parent.type !== "StringAlternative") {
        throw new Error("UnknownError");
      }
      parent.elements.push({
        type: "Character",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        value
      });
    }
    onBackreference(start, end, ref2) {
      const parent = this._node;
      if (parent.type !== "Alternative") {
        throw new Error("UnknownError");
      }
      const node2 = {
        type: "Backreference",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        ref: ref2,
        ambiguous: false,
        resolved: DUMMY_CAPTURING_GROUP
      };
      parent.elements.push(node2);
      this._backreferences.push(node2);
    }
    onCharacterClassEnter(start, negate, unicodeSets) {
      const parent = this._node;
      const base = {
        type: "CharacterClass",
        parent,
        start,
        end: start,
        raw: "",
        unicodeSets,
        negate,
        elements: []
      };
      if (parent.type === "Alternative") {
        const node2 = Object.assign(Object.assign({}, base), { parent });
        this._node = node2;
        parent.elements.push(node2);
      } else if (parent.type === "CharacterClass" && parent.unicodeSets && unicodeSets) {
        const node2 = Object.assign(Object.assign({}, base), {
          parent,
          unicodeSets
        });
        this._node = node2;
        parent.elements.push(node2);
      } else {
        throw new Error("UnknownError");
      }
    }
    onCharacterClassLeave(start, end) {
      const node2 = this._node;
      if (node2.type !== "CharacterClass" || node2.parent.type !== "Alternative" && node2.parent.type !== "CharacterClass") {
        throw new Error("UnknownError");
      }
      const parent = node2.parent;
      node2.end = end;
      node2.raw = this.source.slice(start, end);
      this._node = parent;
      const expression = this._expressionBufferMap.get(node2);
      if (!expression) {
        return;
      }
      if (node2.elements.length > 0) {
        throw new Error("UnknownError");
      }
      this._expressionBufferMap.delete(node2);
      const newNode = {
        type: "ExpressionCharacterClass",
        parent,
        start: node2.start,
        end: node2.end,
        raw: node2.raw,
        negate: node2.negate,
        expression
      };
      expression.parent = newNode;
      if (node2 !== parent.elements.pop()) {
        throw new Error("UnknownError");
      }
      parent.elements.push(newNode);
    }
    onCharacterClassRange(start, end) {
      const parent = this._node;
      if (parent.type !== "CharacterClass") {
        throw new Error("UnknownError");
      }
      const elements = parent.elements;
      const max = elements.pop();
      if (!max || max.type !== "Character") {
        throw new Error("UnknownError");
      }
      if (!parent.unicodeSets) {
        const hyphen = elements.pop();
        if (!hyphen || hyphen.type !== "Character" || hyphen.value !== HYPHEN_MINUS) {
          throw new Error("UnknownError");
        }
      }
      const min = elements.pop();
      if (!min || min.type !== "Character") {
        throw new Error("UnknownError");
      }
      const node2 = {
        type: "CharacterClassRange",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        min,
        max
      };
      min.parent = node2;
      max.parent = node2;
      elements.push(node2);
    }
    onClassIntersection(start, end) {
      var _a;
      const parent = this._node;
      if (parent.type !== "CharacterClass" || !parent.unicodeSets) {
        throw new Error("UnknownError");
      }
      const right = parent.elements.pop();
      const left = (_a = this._expressionBufferMap.get(parent)) !== null && _a !== void 0 ? _a : parent.elements.pop();
      if (!left || !right || left.type === "ClassSubtraction" || left.type !== "ClassIntersection" && !isClassSetOperand(left) || !isClassSetOperand(right)) {
        throw new Error("UnknownError");
      }
      const node2 = {
        type: "ClassIntersection",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        left,
        right
      };
      left.parent = node2;
      right.parent = node2;
      this._expressionBufferMap.set(parent, node2);
    }
    onClassSubtraction(start, end) {
      var _a;
      const parent = this._node;
      if (parent.type !== "CharacterClass" || !parent.unicodeSets) {
        throw new Error("UnknownError");
      }
      const right = parent.elements.pop();
      const left = (_a = this._expressionBufferMap.get(parent)) !== null && _a !== void 0 ? _a : parent.elements.pop();
      if (!left || !right || left.type === "ClassIntersection" || left.type !== "ClassSubtraction" && !isClassSetOperand(left) || !isClassSetOperand(right)) {
        throw new Error("UnknownError");
      }
      const node2 = {
        type: "ClassSubtraction",
        parent,
        start,
        end,
        raw: this.source.slice(start, end),
        left,
        right
      };
      left.parent = node2;
      right.parent = node2;
      this._expressionBufferMap.set(parent, node2);
    }
    onClassStringDisjunctionEnter(start) {
      const parent = this._node;
      if (parent.type !== "CharacterClass" || !parent.unicodeSets) {
        throw new Error("UnknownError");
      }
      this._node = {
        type: "ClassStringDisjunction",
        parent,
        start,
        end: start,
        raw: "",
        alternatives: []
      };
      parent.elements.push(this._node);
    }
    onClassStringDisjunctionLeave(start, end) {
      const node2 = this._node;
      if (node2.type !== "ClassStringDisjunction" || node2.parent.type !== "CharacterClass") {
        throw new Error("UnknownError");
      }
      node2.end = end;
      node2.raw = this.source.slice(start, end);
      this._node = node2.parent;
    }
    onStringAlternativeEnter(start) {
      const parent = this._node;
      if (parent.type !== "ClassStringDisjunction") {
        throw new Error("UnknownError");
      }
      this._node = {
        type: "StringAlternative",
        parent,
        start,
        end: start,
        raw: "",
        elements: []
      };
      parent.alternatives.push(this._node);
    }
    onStringAlternativeLeave(start, end) {
      const node2 = this._node;
      if (node2.type !== "StringAlternative") {
        throw new Error("UnknownError");
      }
      node2.end = end;
      node2.raw = this.source.slice(start, end);
      this._node = node2.parent;
    }
  }
  class RegExpParser {
    constructor(options) {
      this._state = new RegExpParserState(options);
      this._validator = new RegExpValidator(this._state);
    }
    parseLiteral(source, start = 0, end = source.length) {
      this._state.source = source;
      this._validator.validateLiteral(source, start, end);
      const pattern2 = this._state.pattern;
      const flags2 = this._state.flags;
      const literal = {
        type: "RegExpLiteral",
        parent: null,
        start,
        end,
        raw: source,
        pattern: pattern2,
        flags: flags2
      };
      pattern2.parent = literal;
      flags2.parent = literal;
      return literal;
    }
    parseFlags(source, start = 0, end = source.length) {
      this._state.source = source;
      this._validator.validateFlags(source, start, end);
      return this._state.flags;
    }
    parsePattern(source, start = 0, end = source.length, uFlagOrFlags = void 0) {
      this._state.source = source;
      this._validator.validatePattern(source, start, end, uFlagOrFlags);
      return this._state.pattern;
    }
  }
  class RegExpVisitor {
    constructor(handlers) {
      this._handlers = handlers;
    }
    visit(node2) {
      switch (node2.type) {
        case "Alternative":
          this.visitAlternative(node2);
          break;
        case "Assertion":
          this.visitAssertion(node2);
          break;
        case "Backreference":
          this.visitBackreference(node2);
          break;
        case "CapturingGroup":
          this.visitCapturingGroup(node2);
          break;
        case "Character":
          this.visitCharacter(node2);
          break;
        case "CharacterClass":
          this.visitCharacterClass(node2);
          break;
        case "CharacterClassRange":
          this.visitCharacterClassRange(node2);
          break;
        case "CharacterSet":
          this.visitCharacterSet(node2);
          break;
        case "ClassIntersection":
          this.visitClassIntersection(node2);
          break;
        case "ClassStringDisjunction":
          this.visitClassStringDisjunction(node2);
          break;
        case "ClassSubtraction":
          this.visitClassSubtraction(node2);
          break;
        case "ExpressionCharacterClass":
          this.visitExpressionCharacterClass(node2);
          break;
        case "Flags":
          this.visitFlags(node2);
          break;
        case "Group":
          this.visitGroup(node2);
          break;
        case "Modifiers":
          this.visitModifiers(node2);
          break;
        case "ModifierFlags":
          this.visitModifierFlags(node2);
          break;
        case "Pattern":
          this.visitPattern(node2);
          break;
        case "Quantifier":
          this.visitQuantifier(node2);
          break;
        case "RegExpLiteral":
          this.visitRegExpLiteral(node2);
          break;
        case "StringAlternative":
          this.visitStringAlternative(node2);
          break;
        default:
          throw new Error(`Unknown type: ${node2.type}`);
      }
    }
    visitAlternative(node2) {
      if (this._handlers.onAlternativeEnter) {
        this._handlers.onAlternativeEnter(node2);
      }
      node2.elements.forEach(this.visit, this);
      if (this._handlers.onAlternativeLeave) {
        this._handlers.onAlternativeLeave(node2);
      }
    }
    visitAssertion(node2) {
      if (this._handlers.onAssertionEnter) {
        this._handlers.onAssertionEnter(node2);
      }
      if (node2.kind === "lookahead" || node2.kind === "lookbehind") {
        node2.alternatives.forEach(this.visit, this);
      }
      if (this._handlers.onAssertionLeave) {
        this._handlers.onAssertionLeave(node2);
      }
    }
    visitBackreference(node2) {
      if (this._handlers.onBackreferenceEnter) {
        this._handlers.onBackreferenceEnter(node2);
      }
      if (this._handlers.onBackreferenceLeave) {
        this._handlers.onBackreferenceLeave(node2);
      }
    }
    visitCapturingGroup(node2) {
      if (this._handlers.onCapturingGroupEnter) {
        this._handlers.onCapturingGroupEnter(node2);
      }
      node2.alternatives.forEach(this.visit, this);
      if (this._handlers.onCapturingGroupLeave) {
        this._handlers.onCapturingGroupLeave(node2);
      }
    }
    visitCharacter(node2) {
      if (this._handlers.onCharacterEnter) {
        this._handlers.onCharacterEnter(node2);
      }
      if (this._handlers.onCharacterLeave) {
        this._handlers.onCharacterLeave(node2);
      }
    }
    visitCharacterClass(node2) {
      if (this._handlers.onCharacterClassEnter) {
        this._handlers.onCharacterClassEnter(node2);
      }
      node2.elements.forEach(this.visit, this);
      if (this._handlers.onCharacterClassLeave) {
        this._handlers.onCharacterClassLeave(node2);
      }
    }
    visitCharacterClassRange(node2) {
      if (this._handlers.onCharacterClassRangeEnter) {
        this._handlers.onCharacterClassRangeEnter(node2);
      }
      this.visitCharacter(node2.min);
      this.visitCharacter(node2.max);
      if (this._handlers.onCharacterClassRangeLeave) {
        this._handlers.onCharacterClassRangeLeave(node2);
      }
    }
    visitCharacterSet(node2) {
      if (this._handlers.onCharacterSetEnter) {
        this._handlers.onCharacterSetEnter(node2);
      }
      if (this._handlers.onCharacterSetLeave) {
        this._handlers.onCharacterSetLeave(node2);
      }
    }
    visitClassIntersection(node2) {
      if (this._handlers.onClassIntersectionEnter) {
        this._handlers.onClassIntersectionEnter(node2);
      }
      this.visit(node2.left);
      this.visit(node2.right);
      if (this._handlers.onClassIntersectionLeave) {
        this._handlers.onClassIntersectionLeave(node2);
      }
    }
    visitClassStringDisjunction(node2) {
      if (this._handlers.onClassStringDisjunctionEnter) {
        this._handlers.onClassStringDisjunctionEnter(node2);
      }
      node2.alternatives.forEach(this.visit, this);
      if (this._handlers.onClassStringDisjunctionLeave) {
        this._handlers.onClassStringDisjunctionLeave(node2);
      }
    }
    visitClassSubtraction(node2) {
      if (this._handlers.onClassSubtractionEnter) {
        this._handlers.onClassSubtractionEnter(node2);
      }
      this.visit(node2.left);
      this.visit(node2.right);
      if (this._handlers.onClassSubtractionLeave) {
        this._handlers.onClassSubtractionLeave(node2);
      }
    }
    visitExpressionCharacterClass(node2) {
      if (this._handlers.onExpressionCharacterClassEnter) {
        this._handlers.onExpressionCharacterClassEnter(node2);
      }
      this.visit(node2.expression);
      if (this._handlers.onExpressionCharacterClassLeave) {
        this._handlers.onExpressionCharacterClassLeave(node2);
      }
    }
    visitFlags(node2) {
      if (this._handlers.onFlagsEnter) {
        this._handlers.onFlagsEnter(node2);
      }
      if (this._handlers.onFlagsLeave) {
        this._handlers.onFlagsLeave(node2);
      }
    }
    visitGroup(node2) {
      if (this._handlers.onGroupEnter) {
        this._handlers.onGroupEnter(node2);
      }
      if (node2.modifiers) {
        this.visit(node2.modifiers);
      }
      node2.alternatives.forEach(this.visit, this);
      if (this._handlers.onGroupLeave) {
        this._handlers.onGroupLeave(node2);
      }
    }
    visitModifiers(node2) {
      if (this._handlers.onModifiersEnter) {
        this._handlers.onModifiersEnter(node2);
      }
      if (node2.add) {
        this.visit(node2.add);
      }
      if (node2.remove) {
        this.visit(node2.remove);
      }
      if (this._handlers.onModifiersLeave) {
        this._handlers.onModifiersLeave(node2);
      }
    }
    visitModifierFlags(node2) {
      if (this._handlers.onModifierFlagsEnter) {
        this._handlers.onModifierFlagsEnter(node2);
      }
      if (this._handlers.onModifierFlagsLeave) {
        this._handlers.onModifierFlagsLeave(node2);
      }
    }
    visitPattern(node2) {
      if (this._handlers.onPatternEnter) {
        this._handlers.onPatternEnter(node2);
      }
      node2.alternatives.forEach(this.visit, this);
      if (this._handlers.onPatternLeave) {
        this._handlers.onPatternLeave(node2);
      }
    }
    visitQuantifier(node2) {
      if (this._handlers.onQuantifierEnter) {
        this._handlers.onQuantifierEnter(node2);
      }
      this.visit(node2.element);
      if (this._handlers.onQuantifierLeave) {
        this._handlers.onQuantifierLeave(node2);
      }
    }
    visitRegExpLiteral(node2) {
      if (this._handlers.onRegExpLiteralEnter) {
        this._handlers.onRegExpLiteralEnter(node2);
      }
      this.visitPattern(node2.pattern);
      this.visitFlags(node2.flags);
      if (this._handlers.onRegExpLiteralLeave) {
        this._handlers.onRegExpLiteralLeave(node2);
      }
    }
    visitStringAlternative(node2) {
      if (this._handlers.onStringAlternativeEnter) {
        this._handlers.onStringAlternativeEnter(node2);
      }
      node2.elements.forEach(this.visit, this);
      if (this._handlers.onStringAlternativeLeave) {
        this._handlers.onStringAlternativeLeave(node2);
      }
    }
  }
  function parseRegExpLiteral(source, options) {
    return new RegExpParser(options).parseLiteral(String(source));
  }
  function validateRegExpLiteral(source, options) {
    new RegExpValidator(options).validateLiteral(source);
  }
  function visitRegExpAST(node2, handlers) {
    new RegExpVisitor(handlers).visit(node2);
  }
  regexpp.AST = ast2;
  regexpp.RegExpParser = RegExpParser;
  regexpp.RegExpSyntaxError = RegExpSyntaxError;
  regexpp.RegExpValidator = RegExpValidator;
  regexpp.parseRegExpLiteral = parseRegExpLiteral;
  regexpp.validateRegExpLiteral = validateRegExpLiteral;
  regexpp.visitRegExpAST = visitRegExpAST;
  return regexpp;
}
var noControlRegex;
var hasRequiredNoControlRegex;
function requireNoControlRegex() {
  if (hasRequiredNoControlRegex) return noControlRegex;
  hasRequiredNoControlRegex = 1;
  const RegExpValidator = requireRegexpp().RegExpValidator;
  const collector = new class {
    constructor() {
      this._source = "";
      this._controlChars = [];
      this._validator = new RegExpValidator(this);
    }
    onPatternEnter() {
      this._controlChars = [];
    }
    onCharacter(start, end, cp) {
      if (cp >= 0 && cp <= 31 && (this._source.codePointAt(start) === cp || this._source.slice(start, end).startsWith("\\x") || this._source.slice(start, end).startsWith("\\u"))) {
        this._controlChars.push(`\\x${`0${cp.toString(16)}`.slice(-2)}`);
      }
    }
    collectControlChars(regexpStr, flags2) {
      const uFlag = typeof flags2 === "string" && flags2.includes("u");
      const vFlag = typeof flags2 === "string" && flags2.includes("v");
      this._controlChars = [];
      this._source = regexpStr;
      try {
        this._validator.validatePattern(regexpStr, void 0, void 0, {
          unicode: uFlag,
          unicodeSets: vFlag
        });
      } catch {
      }
      return this._controlChars;
    }
  }();
  noControlRegex = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow control characters in regular expressions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-control-regex"
      },
      schema: [],
      messages: {
        unexpected: "Unexpected control character(s) in regular expression: {{controlChars}}."
      }
    },
    create(context) {
      function getRegExp(node2) {
        if (node2.regex) {
          return node2.regex;
        }
        if (typeof node2.value === "string" && (node2.parent.type === "NewExpression" || node2.parent.type === "CallExpression") && node2.parent.callee.type === "Identifier" && node2.parent.callee.name === "RegExp" && node2.parent.arguments[0] === node2) {
          const pattern2 = node2.value;
          const flags2 = node2.parent.arguments.length > 1 && node2.parent.arguments[1].type === "Literal" && typeof node2.parent.arguments[1].value === "string" ? node2.parent.arguments[1].value : null;
          return { pattern: pattern2, flags: flags2 };
        }
        return null;
      }
      return {
        Literal(node2) {
          const regExp = getRegExp(node2);
          if (regExp) {
            const { pattern: pattern2, flags: flags2 } = regExp;
            const controlCharacters = collector.collectControlChars(
              pattern2,
              flags2
            );
            if (controlCharacters.length > 0) {
              context.report({
                node: node2,
                messageId: "unexpected",
                data: {
                  controlChars: controlCharacters.join(", ")
                }
              });
            }
          }
        }
      };
    }
  };
  return noControlRegex;
}
var noDebugger;
var hasRequiredNoDebugger;
function requireNoDebugger() {
  if (hasRequiredNoDebugger) return noDebugger;
  hasRequiredNoDebugger = 1;
  noDebugger = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow the use of `debugger`",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-debugger"
      },
      fixable: null,
      schema: [],
      messages: {
        unexpected: "Unexpected 'debugger' statement."
      }
    },
    create(context) {
      return {
        DebuggerStatement(node2) {
          context.report({
            node: node2,
            messageId: "unexpected"
          });
        }
      };
    }
  };
  return noDebugger;
}
var noDeleteVar;
var hasRequiredNoDeleteVar;
function requireNoDeleteVar() {
  if (hasRequiredNoDeleteVar) return noDeleteVar;
  hasRequiredNoDeleteVar = 1;
  noDeleteVar = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow deleting variables",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-delete-var"
      },
      schema: [],
      messages: {
        unexpected: "Variables should not be deleted."
      }
    },
    create(context) {
      return {
        UnaryExpression(node2) {
          if (node2.operator === "delete" && node2.argument.type === "Identifier") {
            context.report({ node: node2, messageId: "unexpected" });
          }
        }
      };
    }
  };
  return noDeleteVar;
}
var noDivRegex;
var hasRequiredNoDivRegex;
function requireNoDivRegex() {
  if (hasRequiredNoDivRegex) return noDivRegex;
  hasRequiredNoDivRegex = 1;
  noDivRegex = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow equal signs explicitly at the beginning of regular expressions",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-div-regex"
      },
      fixable: "code",
      schema: [],
      messages: {
        unexpected: "A regular expression literal can be confused with '/='."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        Literal(node2) {
          const token = sourceCode2.getFirstToken(node2);
          if (token.type === "RegularExpression" && token.value[1] === "=") {
            context.report({
              node: node2,
              messageId: "unexpected",
              fix(fixer) {
                return fixer.replaceTextRange(
                  [token.range[0] + 1, token.range[0] + 2],
                  "[=]"
                );
              }
            });
          }
        }
      };
    }
  };
  return noDivRegex;
}
var noDupeArgs;
var hasRequiredNoDupeArgs;
function requireNoDupeArgs() {
  if (hasRequiredNoDupeArgs) return noDupeArgs;
  hasRequiredNoDupeArgs = 1;
  noDupeArgs = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow duplicate arguments in `function` definitions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-dupe-args"
      },
      schema: [],
      messages: {
        unexpected: "Duplicate param '{{name}}'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function isParameter(def) {
        return def.type === "Parameter";
      }
      function checkParams(node2) {
        const variables = sourceCode2.getDeclaredVariables(node2);
        for (let i2 = 0; i2 < variables.length; ++i2) {
          const variable = variables[i2];
          const defs = variable.defs.filter(isParameter);
          if (defs.length >= 2) {
            context.report({
              node: node2,
              messageId: "unexpected",
              data: { name: variable.name }
            });
          }
        }
      }
      return {
        FunctionDeclaration: checkParams,
        FunctionExpression: checkParams
      };
    }
  };
  return noDupeArgs;
}
var noDupeClassMembers;
var hasRequiredNoDupeClassMembers;
function requireNoDupeClassMembers() {
  if (hasRequiredNoDupeClassMembers) return noDupeClassMembers;
  hasRequiredNoDupeClassMembers = 1;
  const astUtils2 = requireAstUtils();
  noDupeClassMembers = {
    meta: {
      type: "problem",
      dialects: ["javascript", "typescript"],
      language: "javascript",
      docs: {
        description: "Disallow duplicate class members",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-dupe-class-members"
      },
      schema: [],
      messages: {
        unexpected: "Duplicate name '{{name}}'."
      }
    },
    create(context) {
      let stack = [];
      function getState(name, isStatic) {
        const stateMap = stack.at(-1);
        const key = `$${name}`;
        if (!stateMap[key]) {
          stateMap[key] = {
            nonStatic: { init: false, get: false, set: false },
            static: { init: false, get: false, set: false }
          };
        }
        return stateMap[key][isStatic ? "static" : "nonStatic"];
      }
      return {
        // Initializes the stack of state of member declarations.
        Program() {
          stack = [];
        },
        // Initializes state of member declarations for the class.
        ClassBody() {
          stack.push(/* @__PURE__ */ Object.create(null));
        },
        // Disposes the state for the class.
        "ClassBody:exit"() {
          stack.pop();
        },
        // Reports the node if its name has been declared already.
        "MethodDefinition, PropertyDefinition"(node2) {
          if (node2.value && node2.value.type === "TSEmptyBodyFunctionExpression") {
            return;
          }
          const name = astUtils2.getStaticPropertyName(node2);
          const kind = node2.type === "MethodDefinition" ? node2.kind : "field";
          if (name === null || kind === "constructor") {
            return;
          }
          const state = getState(name, node2.static);
          let isDuplicate;
          if (kind === "get") {
            isDuplicate = state.init || state.get;
            state.get = true;
          } else if (kind === "set") {
            isDuplicate = state.init || state.set;
            state.set = true;
          } else {
            isDuplicate = state.init || state.get || state.set;
            state.init = true;
          }
          if (isDuplicate) {
            context.report({
              node: node2,
              messageId: "unexpected",
              data: { name }
            });
          }
        }
      };
    }
  };
  return noDupeClassMembers;
}
var noDupeElseIf;
var hasRequiredNoDupeElseIf;
function requireNoDupeElseIf() {
  if (hasRequiredNoDupeElseIf) return noDupeElseIf;
  hasRequiredNoDupeElseIf = 1;
  const astUtils2 = requireAstUtils();
  function isSubsetByComparator(comparator, arrA, arrB) {
    return arrA.every((a2) => arrB.some((b) => comparator(a2, b)));
  }
  function splitByLogicalOperator(operator, node2) {
    if (node2.type === "LogicalExpression" && node2.operator === operator) {
      return [
        ...splitByLogicalOperator(operator, node2.left),
        ...splitByLogicalOperator(operator, node2.right)
      ];
    }
    return [node2];
  }
  const splitByOr = splitByLogicalOperator.bind(null, "||");
  const splitByAnd = splitByLogicalOperator.bind(null, "&&");
  noDupeElseIf = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow duplicate conditions in if-else-if chains",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-dupe-else-if"
      },
      schema: [],
      messages: {
        unexpected: "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function equal(a2, b) {
        if (a2.type !== b.type) {
          return false;
        }
        if (a2.type === "LogicalExpression" && (a2.operator === "||" || a2.operator === "&&") && a2.operator === b.operator) {
          return equal(a2.left, b.left) && equal(a2.right, b.right) || equal(a2.left, b.right) && equal(a2.right, b.left);
        }
        return astUtils2.equalTokens(a2, b, sourceCode2);
      }
      const isSubset = isSubsetByComparator.bind(null, equal);
      return {
        IfStatement(node2) {
          const test = node2.test, conditionsToCheck = test.type === "LogicalExpression" && test.operator === "&&" ? [test, ...splitByAnd(test)] : [test];
          let current = node2, listToCheck = conditionsToCheck.map(
            (c2) => splitByOr(c2).map(splitByAnd)
          );
          while (current.parent && current.parent.type === "IfStatement" && current.parent.alternate === current) {
            current = current.parent;
            const currentOrOperands = splitByOr(current.test).map(
              splitByAnd
            );
            listToCheck = listToCheck.map(
              (orOperands) => orOperands.filter(
                (orOperand) => !currentOrOperands.some(
                  (currentOrOperand) => isSubset(currentOrOperand, orOperand)
                )
              )
            );
            if (listToCheck.some((orOperands) => orOperands.length === 0)) {
              context.report({ node: test, messageId: "unexpected" });
              break;
            }
          }
        }
      };
    }
  };
  return noDupeElseIf;
}
var noDupeKeys;
var hasRequiredNoDupeKeys;
function requireNoDupeKeys() {
  if (hasRequiredNoDupeKeys) return noDupeKeys;
  hasRequiredNoDupeKeys = 1;
  const astUtils2 = requireAstUtils();
  const GET_KIND = /^(?:init|get)$/u;
  const SET_KIND = /^(?:init|set)$/u;
  class ObjectInfo {
    /**
     * @param {ObjectInfo|null} upper The information of the outer object.
     * @param {ASTNode} node The ObjectExpression node of this information.
     */
    constructor(upper, node2) {
      this.upper = upper;
      this.node = node2;
      this.properties = /* @__PURE__ */ new Map();
    }
    /**
     * Gets the information of the given Property node.
     * @param {ASTNode} node The Property node to get.
     * @returns {{get: boolean, set: boolean}} The information of the property.
     */
    getPropertyInfo(node2) {
      const name = astUtils2.getStaticPropertyName(node2);
      if (!this.properties.has(name)) {
        this.properties.set(name, { get: false, set: false });
      }
      return this.properties.get(name);
    }
    /**
     * Checks whether the given property has been defined already or not.
     * @param {ASTNode} node The Property node to check.
     * @returns {boolean} `true` if the property has been defined.
     */
    isPropertyDefined(node2) {
      const entry = this.getPropertyInfo(node2);
      return GET_KIND.test(node2.kind) && entry.get || SET_KIND.test(node2.kind) && entry.set;
    }
    /**
     * Defines the given property.
     * @param {ASTNode} node The Property node to define.
     * @returns {void}
     */
    defineProperty(node2) {
      const entry = this.getPropertyInfo(node2);
      if (GET_KIND.test(node2.kind)) {
        entry.get = true;
      }
      if (SET_KIND.test(node2.kind)) {
        entry.set = true;
      }
    }
  }
  noDupeKeys = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow duplicate keys in object literals",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-dupe-keys"
      },
      schema: [],
      messages: {
        unexpected: "Duplicate key '{{name}}'."
      }
    },
    create(context) {
      let info = null;
      return {
        ObjectExpression(node2) {
          info = new ObjectInfo(info, node2);
        },
        "ObjectExpression:exit"() {
          info = info.upper;
        },
        Property(node2) {
          const name = astUtils2.getStaticPropertyName(node2);
          if (node2.parent.type !== "ObjectExpression") {
            return;
          }
          if (name === null) {
            return;
          }
          if (name === "__proto__" && node2.kind === "init" && !node2.computed && !node2.shorthand && !node2.method) {
            return;
          }
          if (info.isPropertyDefined(node2)) {
            context.report({
              node: info.node,
              loc: node2.key.loc,
              messageId: "unexpected",
              data: { name }
            });
          }
          info.defineProperty(node2);
        }
      };
    }
  };
  return noDupeKeys;
}
var noDuplicateCase;
var hasRequiredNoDuplicateCase;
function requireNoDuplicateCase() {
  if (hasRequiredNoDuplicateCase) return noDuplicateCase;
  hasRequiredNoDuplicateCase = 1;
  const astUtils2 = requireAstUtils();
  noDuplicateCase = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow duplicate case labels",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-duplicate-case"
      },
      schema: [],
      messages: {
        unexpected: "Duplicate case label."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function equal(a2, b) {
        if (a2.type !== b.type) {
          return false;
        }
        return astUtils2.equalTokens(a2, b, sourceCode2);
      }
      return {
        SwitchStatement(node2) {
          const previousTests = [];
          for (const switchCase of node2.cases) {
            if (switchCase.test) {
              const test = switchCase.test;
              if (previousTests.some(
                (previousTest) => equal(previousTest, test)
              )) {
                context.report({
                  node: switchCase,
                  messageId: "unexpected"
                });
              } else {
                previousTests.push(test);
              }
            }
          }
        }
      };
    }
  };
  return noDuplicateCase;
}
var noDuplicateImports;
var hasRequiredNoDuplicateImports;
function requireNoDuplicateImports() {
  if (hasRequiredNoDuplicateImports) return noDuplicateImports;
  hasRequiredNoDuplicateImports = 1;
  const NAMED_TYPES = ["ImportSpecifier", "ExportSpecifier"];
  const NAMESPACE_TYPES = [
    "ImportNamespaceSpecifier",
    "ExportNamespaceSpecifier"
  ];
  function isImportExportSpecifier(importExportType, type2) {
    const arrayToCheck = type2 === "named" ? NAMED_TYPES : NAMESPACE_TYPES;
    return arrayToCheck.includes(importExportType);
  }
  function getImportExportType(node2) {
    if (node2.specifiers && node2.specifiers.length > 0) {
      const nodeSpecifiers = node2.specifiers;
      const index = nodeSpecifiers.findIndex(
        ({ type: type2 }) => isImportExportSpecifier(type2, "named") || isImportExportSpecifier(type2, "namespace")
      );
      const i2 = index > -1 ? index : 0;
      return nodeSpecifiers[i2].type;
    }
    if (node2.type === "ExportAllDeclaration") {
      if (node2.exported) {
        return "ExportNamespaceSpecifier";
      }
      return "ExportAll";
    }
    return "SideEffectImport";
  }
  function isImportExportCanBeMerged(node1, node2) {
    const importExportType1 = getImportExportType(node1);
    const importExportType2 = getImportExportType(node2);
    if ((node1.importKind === "type" || node1.exportKind === "type") && (node2.importKind === "type" || node2.exportKind === "type")) {
      const isDefault1 = importExportType1 === "ImportDefaultSpecifier";
      const isDefault2 = importExportType2 === "ImportDefaultSpecifier";
      const isNamed1 = isImportExportSpecifier(importExportType1, "named");
      const isNamed2 = isImportExportSpecifier(importExportType2, "named");
      if (isDefault1 && isNamed2 || isDefault2 && isNamed1) {
        return false;
      }
    }
    if (importExportType1 === "ExportAll" && importExportType2 !== "ExportAll" && importExportType2 !== "SideEffectImport" || importExportType1 !== "ExportAll" && importExportType1 !== "SideEffectImport" && importExportType2 === "ExportAll") {
      return false;
    }
    if (isImportExportSpecifier(importExportType1, "namespace") && isImportExportSpecifier(importExportType2, "named") || isImportExportSpecifier(importExportType2, "namespace") && isImportExportSpecifier(importExportType1, "named")) {
      return false;
    }
    return true;
  }
  function shouldReportImportExport(node2, previousNodes, allowSeparateTypeImports) {
    let i2 = 0;
    while (i2 < previousNodes.length) {
      const previousNode = previousNodes[i2];
      if (allowSeparateTypeImports) {
        const isTypeNode = node2.importKind === "type" || node2.exportKind === "type";
        const isTypePrevious = previousNode.importKind === "type" || previousNode.exportKind === "type";
        if (isTypeNode !== isTypePrevious) {
          i2++;
          continue;
        }
      }
      if (isImportExportCanBeMerged(node2, previousNode)) {
        return true;
      }
      i2++;
    }
    return false;
  }
  function getNodesByDeclarationType(nodes, type2) {
    return nodes.filter(({ declarationType }) => declarationType === type2).map(({ node: node2 }) => node2);
  }
  function getModule(node2) {
    if (node2 && node2.source && node2.source.value) {
      return node2.source.value.trim();
    }
    return "";
  }
  function checkAndReport(context, node2, modules, declarationType, includeExports, allowSeparateTypeImports) {
    const module = getModule(node2);
    if (modules.has(module)) {
      const previousNodes = modules.get(module);
      const messagesIds = [];
      const importNodes = getNodesByDeclarationType(previousNodes, "import");
      let exportNodes;
      if (includeExports) {
        exportNodes = getNodesByDeclarationType(previousNodes, "export");
      }
      if (declarationType === "import") {
        if (shouldReportImportExport(
          node2,
          importNodes,
          allowSeparateTypeImports
        )) {
          messagesIds.push("import");
        }
        if (includeExports) {
          if (shouldReportImportExport(
            node2,
            exportNodes,
            allowSeparateTypeImports
          )) {
            messagesIds.push("importAs");
          }
        }
      } else if (declarationType === "export") {
        if (shouldReportImportExport(
          node2,
          exportNodes,
          allowSeparateTypeImports
        )) {
          messagesIds.push("export");
        }
        if (shouldReportImportExport(
          node2,
          importNodes,
          allowSeparateTypeImports
        )) {
          messagesIds.push("exportAs");
        }
      }
      messagesIds.forEach(
        (messageId) => context.report({
          node: node2,
          messageId,
          data: {
            module
          }
        })
      );
    }
  }
  function handleImportsExports(context, modules, declarationType, includeExports, allowSeparateTypeImports) {
    return function(node2) {
      const module = getModule(node2);
      if (module) {
        checkAndReport(
          context,
          node2,
          modules,
          declarationType,
          includeExports,
          allowSeparateTypeImports
        );
        const currentNode = { node: node2, declarationType };
        let nodes = [currentNode];
        if (modules.has(module)) {
          const previousNodes = modules.get(module);
          nodes = [...previousNodes, currentNode];
        }
        modules.set(module, nodes);
      }
    };
  }
  noDuplicateImports = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "problem",
      defaultOptions: [
        {
          includeExports: false,
          allowSeparateTypeImports: false
        }
      ],
      docs: {
        description: "Disallow duplicate module imports",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-duplicate-imports"
      },
      schema: [
        {
          type: "object",
          properties: {
            includeExports: {
              type: "boolean"
            },
            allowSeparateTypeImports: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        import: "'{{module}}' import is duplicated.",
        importAs: "'{{module}}' import is duplicated as export.",
        export: "'{{module}}' export is duplicated.",
        exportAs: "'{{module}}' export is duplicated as import."
      }
    },
    create(context) {
      const [{ includeExports, allowSeparateTypeImports }] = context.options;
      const modules = /* @__PURE__ */ new Map();
      const handlers = {
        ImportDeclaration: handleImportsExports(
          context,
          modules,
          "import",
          includeExports,
          allowSeparateTypeImports
        )
      };
      if (includeExports) {
        handlers.ExportNamedDeclaration = handleImportsExports(
          context,
          modules,
          "export",
          includeExports,
          allowSeparateTypeImports
        );
        handlers.ExportAllDeclaration = handleImportsExports(
          context,
          modules,
          "export",
          includeExports,
          allowSeparateTypeImports
        );
      }
      return handlers;
    }
  };
  return noDuplicateImports;
}
var fixTracker;
var hasRequiredFixTracker;
function requireFixTracker() {
  if (hasRequiredFixTracker) return fixTracker;
  hasRequiredFixTracker = 1;
  const astUtils2 = requireAstUtils();
  class FixTracker {
    /**
     * Create a new FixTracker.
     * @param {ruleFixer} fixer A ruleFixer instance.
     * @param {SourceCode} sourceCode A SourceCode object for the current code.
     */
    constructor(fixer, sourceCode2) {
      this.fixer = fixer;
      this.sourceCode = sourceCode2;
      this.retainedRange = null;
    }
    /**
     * Mark the given range as "retained", meaning that other fixes may not
     * may not modify this region in the same pass.
     * @param {SourceRange} range The range to retain.
     * @returns {FixTracker} The same RuleFixer, for chained calls.
     */
    retainRange(range) {
      this.retainedRange = range;
      return this;
    }
    /**
     * Given a node, find the function containing it (or the entire program) and
     * mark it as retained, meaning that other fixes may not modify it in this
     * pass. This is useful for avoiding conflicts in fixes that modify control
     * flow.
     * @param {ASTNode} node The node to use as a starting point.
     * @returns {FixTracker} The same RuleFixer, for chained calls.
     */
    retainEnclosingFunction(node2) {
      const functionNode = astUtils2.getUpperFunction(node2);
      return this.retainRange(
        functionNode ? functionNode.range : this.sourceCode.ast.range
      );
    }
    /**
     * Given a node or token, find the token before and afterward, and mark that
     * range as retained, meaning that other fixes may not modify it in this
     * pass. This is useful for avoiding conflicts in fixes that make a small
     * change to the code where the AST should not be changed.
     * @param {ASTNode|Token} nodeOrToken The node or token to use as a starting
     *      point. The token to the left and right are use in the range.
     * @returns {FixTracker} The same RuleFixer, for chained calls.
     */
    retainSurroundingTokens(nodeOrToken) {
      const tokenBefore = this.sourceCode.getTokenBefore(nodeOrToken) || nodeOrToken;
      const tokenAfter = this.sourceCode.getTokenAfter(nodeOrToken) || nodeOrToken;
      return this.retainRange([tokenBefore.range[0], tokenAfter.range[1]]);
    }
    /**
     * Create a fix command that replaces the given range with the given text,
     * accounting for any retained ranges.
     * @param {SourceRange} range The range to remove in the fix.
     * @param {string} text The text to insert in place of the range.
     * @returns {Object} The fix command.
     */
    replaceTextRange(range, text) {
      let actualRange;
      if (this.retainedRange) {
        actualRange = [
          Math.min(this.retainedRange[0], range[0]),
          Math.max(this.retainedRange[1], range[1])
        ];
      } else {
        actualRange = range;
      }
      return this.fixer.replaceTextRange(
        actualRange,
        this.sourceCode.text.slice(actualRange[0], range[0]) + text + this.sourceCode.text.slice(range[1], actualRange[1])
      );
    }
    /**
     * Create a fix command that removes the given node or token, accounting for
     * any retained ranges.
     * @param {ASTNode|Token} nodeOrToken The node or token to remove.
     * @returns {Object} The fix command.
     */
    remove(nodeOrToken) {
      return this.replaceTextRange(nodeOrToken.range, "");
    }
  }
  fixTracker = FixTracker;
  return fixTracker;
}
var noElseReturn;
var hasRequiredNoElseReturn;
function requireNoElseReturn() {
  if (hasRequiredNoElseReturn) return noElseReturn;
  hasRequiredNoElseReturn = 1;
  const astUtils2 = requireAstUtils();
  const FixTracker = requireFixTracker();
  noElseReturn = {
    meta: {
      type: "suggestion",
      defaultOptions: [{ allowElseIf: true }],
      docs: {
        description: "Disallow `else` blocks after `return` statements in `if` statements",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-else-return"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowElseIf: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        unexpected: "Unnecessary 'else' after 'return'."
      }
    },
    create(context) {
      const [{ allowElseIf }] = context.options;
      const sourceCode2 = context.sourceCode;
      function isSafeToDeclare(names, scope) {
        if (names.length === 0) {
          return true;
        }
        const functionScope = scope.variableScope;
        const declaredVariables = scope.variables.filter(
          ({ defs }) => defs.length > 0
        );
        if (declaredVariables.some(({ name }) => names.includes(name))) {
          return false;
        }
        if (scope !== functionScope && scope.upper.type === "catch") {
          if (scope.upper.variables.some(
            ({ name }) => names.includes(name)
          )) {
            return false;
          }
        }
        const usedImplicitVariables = scope.variables.filter(
          ({ defs, references }) => defs.length === 0 && references.length > 0
        );
        if (usedImplicitVariables.some(({ name }) => names.includes(name))) {
          return false;
        }
        if (scope.through.some((t2) => names.includes(t2.identifier.name))) {
          return false;
        }
        if (scope !== functionScope) {
          const scopeNodeRange = scope.block.range;
          const variablesToCheck = functionScope.variables.filter(
            ({ name }) => names.includes(name)
          );
          if (variablesToCheck.some(
            (v2) => v2.defs.some(
              ({ node: { range } }) => scopeNodeRange[0] <= range[0] && range[1] <= scopeNodeRange[1]
            )
          )) {
            return false;
          }
        }
        return true;
      }
      function isSafeFromNameCollisions(node2, scope) {
        if (node2.type === "FunctionDeclaration") {
          return false;
        }
        if (node2.type !== "BlockStatement") {
          return true;
        }
        const elseBlockScope = scope.childScopes.find(
          ({ block }) => block === node2
        );
        if (!elseBlockScope) {
          return true;
        }
        const namesToCheck = elseBlockScope.variables.map(
          ({ name }) => name
        );
        return isSafeToDeclare(namesToCheck, scope);
      }
      function displayReport(elseNode) {
        const currentScope = sourceCode2.getScope(elseNode.parent);
        context.report({
          node: elseNode,
          messageId: "unexpected",
          fix(fixer) {
            if (!isSafeFromNameCollisions(elseNode, currentScope)) {
              return null;
            }
            const startToken = sourceCode2.getFirstToken(elseNode);
            const elseToken = sourceCode2.getTokenBefore(startToken);
            const source = sourceCode2.getText(elseNode);
            const lastIfToken = sourceCode2.getTokenBefore(elseToken);
            let fixedSource, firstTokenOfElseBlock;
            if (startToken.type === "Punctuator" && startToken.value === "{") {
              firstTokenOfElseBlock = sourceCode2.getTokenAfter(startToken);
            } else {
              firstTokenOfElseBlock = startToken;
            }
            const ifBlockMaybeUnsafe = elseNode.parent.consequent.type !== "BlockStatement" && lastIfToken.value !== ";";
            const elseBlockUnsafe = /^[([/+`-]/u.test(
              firstTokenOfElseBlock.value
            );
            if (ifBlockMaybeUnsafe && elseBlockUnsafe) {
              return null;
            }
            const endToken = sourceCode2.getLastToken(elseNode);
            const lastTokenOfElseBlock = sourceCode2.getTokenBefore(endToken);
            if (lastTokenOfElseBlock.value !== ";") {
              const nextToken = sourceCode2.getTokenAfter(endToken);
              const nextTokenUnsafe = nextToken && /^[([/+`-]/u.test(nextToken.value);
              const nextTokenOnSameLine = nextToken && nextToken.loc.start.line === lastTokenOfElseBlock.loc.start.line;
              if (nextTokenUnsafe || nextTokenOnSameLine && nextToken.value !== "}") {
                return null;
              }
            }
            if (startToken.type === "Punctuator" && startToken.value === "{") {
              fixedSource = source.slice(1, -1);
            } else {
              fixedSource = source;
            }
            return new FixTracker(fixer, sourceCode2).retainEnclosingFunction(elseNode).replaceTextRange(
              [elseToken.range[0], elseNode.range[1]],
              fixedSource
            );
          }
        });
      }
      function checkForReturn(node2) {
        return node2.type === "ReturnStatement";
      }
      function naiveHasReturn(node2) {
        if (node2.type === "BlockStatement") {
          const body = node2.body, lastChildNode = body.at(-1);
          return lastChildNode && checkForReturn(lastChildNode);
        }
        return checkForReturn(node2);
      }
      function hasElse(node2) {
        return node2.alternate && node2.consequent;
      }
      function checkForIf(node2) {
        return node2.type === "IfStatement" && hasElse(node2) && naiveHasReturn(node2.alternate) && naiveHasReturn(node2.consequent);
      }
      function checkForReturnOrIf(node2) {
        return checkForReturn(node2) || checkForIf(node2);
      }
      function alwaysReturns(node2) {
        if (node2.type === "BlockStatement") {
          return node2.body.some(checkForReturnOrIf);
        }
        return checkForReturnOrIf(node2);
      }
      function checkIfWithoutElse(node2) {
        const parent = node2.parent;
        if (!astUtils2.STATEMENT_LIST_PARENTS.has(parent.type)) {
          return;
        }
        const consequents = [];
        let alternate;
        for (let currentNode = node2; currentNode.type === "IfStatement"; currentNode = currentNode.alternate) {
          if (!currentNode.alternate) {
            return;
          }
          consequents.push(currentNode.consequent);
          alternate = currentNode.alternate;
        }
        if (consequents.every(alwaysReturns)) {
          displayReport(alternate);
        }
      }
      function checkIfWithElse(node2) {
        const parent = node2.parent;
        if (!astUtils2.STATEMENT_LIST_PARENTS.has(parent.type)) {
          return;
        }
        const alternate = node2.alternate;
        if (alternate && alwaysReturns(node2.consequent)) {
          displayReport(alternate);
        }
      }
      return {
        "IfStatement:exit": allowElseIf ? checkIfWithoutElse : checkIfWithElse
      };
    }
  };
  return noElseReturn;
}
var noEmpty;
var hasRequiredNoEmpty;
function requireNoEmpty() {
  if (hasRequiredNoEmpty) return noEmpty;
  hasRequiredNoEmpty = 1;
  const astUtils2 = requireAstUtils();
  noEmpty = {
    meta: {
      hasSuggestions: true,
      type: "suggestion",
      defaultOptions: [
        {
          allowEmptyCatch: false
        }
      ],
      docs: {
        description: "Disallow empty block statements",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-empty"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowEmptyCatch: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpected: "Empty {{type}} statement.",
        suggestComment: "Add comment inside empty {{type}} statement."
      }
    },
    create(context) {
      const [{ allowEmptyCatch }] = context.options;
      const sourceCode2 = context.sourceCode;
      return {
        BlockStatement(node2) {
          if (node2.body.length !== 0) {
            return;
          }
          if (astUtils2.isFunction(node2.parent)) {
            return;
          }
          if (allowEmptyCatch && node2.parent.type === "CatchClause") {
            return;
          }
          if (sourceCode2.getCommentsInside(node2).length > 0) {
            return;
          }
          context.report({
            node: node2,
            messageId: "unexpected",
            data: { type: "block" },
            suggest: [
              {
                messageId: "suggestComment",
                data: { type: "block" },
                fix(fixer) {
                  const range = [
                    node2.range[0] + 1,
                    node2.range[1] - 1
                  ];
                  return fixer.replaceTextRange(
                    range,
                    " /* empty */ "
                  );
                }
              }
            ]
          });
        },
        SwitchStatement(node2) {
          if (typeof node2.cases === "undefined" || node2.cases.length === 0) {
            const openingBrace = sourceCode2.getTokenAfter(
              node2.discriminant,
              astUtils2.isOpeningBraceToken
            );
            const closingBrace = sourceCode2.getLastToken(node2);
            if (sourceCode2.commentsExistBetween(
              openingBrace,
              closingBrace
            )) {
              return;
            }
            context.report({
              node: node2,
              loc: {
                start: openingBrace.loc.start,
                end: closingBrace.loc.end
              },
              messageId: "unexpected",
              data: { type: "switch" },
              suggest: [
                {
                  messageId: "suggestComment",
                  data: { type: "switch" },
                  fix(fixer) {
                    const range = [
                      openingBrace.range[1],
                      closingBrace.range[0]
                    ];
                    return fixer.replaceTextRange(
                      range,
                      " /* empty */ "
                    );
                  }
                }
              ]
            });
          }
        }
      };
    }
  };
  return noEmpty;
}
var noEmptyCharacterClass;
var hasRequiredNoEmptyCharacterClass;
function requireNoEmptyCharacterClass() {
  if (hasRequiredNoEmptyCharacterClass) return noEmptyCharacterClass;
  hasRequiredNoEmptyCharacterClass = 1;
  const { RegExpParser, visitRegExpAST } = requireRegexpp();
  const parser = new RegExpParser();
  const QUICK_TEST_REGEX = /\[\]/u;
  noEmptyCharacterClass = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow empty character classes in regular expressions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-empty-character-class"
      },
      schema: [],
      messages: {
        unexpected: "Empty class."
      }
    },
    create(context) {
      return {
        "Literal[regex]"(node2) {
          const { pattern: pattern2, flags: flags2 } = node2.regex;
          if (!QUICK_TEST_REGEX.test(pattern2)) {
            return;
          }
          let regExpAST;
          try {
            regExpAST = parser.parsePattern(
              pattern2,
              0,
              pattern2.length,
              {
                unicode: flags2.includes("u"),
                unicodeSets: flags2.includes("v")
              }
            );
          } catch {
            return;
          }
          visitRegExpAST(regExpAST, {
            onCharacterClassEnter(characterClass) {
              if (!characterClass.negate && characterClass.elements.length === 0) {
                context.report({ node: node2, messageId: "unexpected" });
              }
            }
          });
        }
      };
    }
  };
  return noEmptyCharacterClass;
}
var noEmptyFunction;
var hasRequiredNoEmptyFunction;
function requireNoEmptyFunction() {
  if (hasRequiredNoEmptyFunction) return noEmptyFunction;
  hasRequiredNoEmptyFunction = 1;
  const astUtils2 = requireAstUtils();
  const ALLOW_OPTIONS = Object.freeze([
    "functions",
    "arrowFunctions",
    "generatorFunctions",
    "methods",
    "generatorMethods",
    "getters",
    "setters",
    "constructors",
    "asyncFunctions",
    "asyncMethods",
    "privateConstructors",
    "protectedConstructors",
    "decoratedFunctions",
    "overrideMethods"
  ]);
  function getKind(node2) {
    const parent = node2.parent;
    let kind;
    if (node2.type === "ArrowFunctionExpression") {
      return "arrowFunctions";
    }
    if (parent.type === "Property") {
      if (parent.kind === "get") {
        return "getters";
      }
      if (parent.kind === "set") {
        return "setters";
      }
      kind = parent.method ? "methods" : "functions";
    } else if (parent.type === "MethodDefinition") {
      if (parent.kind === "get") {
        return "getters";
      }
      if (parent.kind === "set") {
        return "setters";
      }
      if (parent.kind === "constructor") {
        return "constructors";
      }
      kind = "methods";
    } else {
      kind = "functions";
    }
    let prefix;
    if (node2.generator) {
      prefix = "generator";
    } else if (node2.async) {
      prefix = "async";
    } else {
      return kind;
    }
    return prefix + kind[0].toUpperCase() + kind.slice(1);
  }
  function isParameterPropertiesConstructor(node2) {
    return node2.params.some((param) => param.type === "TSParameterProperty");
  }
  noEmptyFunction = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      hasSuggestions: true,
      type: "suggestion",
      defaultOptions: [{ allow: [] }],
      docs: {
        description: "Disallow empty functions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-empty-function"
      },
      schema: [
        {
          type: "object",
          properties: {
            allow: {
              type: "array",
              items: { enum: ALLOW_OPTIONS },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpected: "Unexpected empty {{name}}.",
        suggestComment: "Add comment inside empty {{name}}."
      }
    },
    create(context) {
      const [{ allow }] = context.options;
      const sourceCode2 = context.sourceCode;
      function isAllowedEmptyFunction(node2) {
        const kind = getKind(node2);
        if (allow.includes(kind)) {
          return true;
        }
        if (kind === "constructors") {
          if (node2.parent.accessibility === "private" && allow.includes("privateConstructors") || node2.parent.accessibility === "protected" && allow.includes("protectedConstructors") || isParameterPropertiesConstructor(node2)) {
            return true;
          }
        }
        if (/(?:g|s)etters|methods$/iu.test(kind)) {
          if (node2.parent.decorators?.length && allow.includes("decoratedFunctions") || node2.parent.override && allow.includes("overrideMethods")) {
            return true;
          }
        }
        return false;
      }
      function reportIfEmpty(node2) {
        const name = astUtils2.getFunctionNameWithKind(node2);
        const innerComments = sourceCode2.getTokens(node2.body, {
          includeComments: true,
          filter: astUtils2.isCommentToken
        });
        if (!isAllowedEmptyFunction(node2) && node2.body.type === "BlockStatement" && node2.body.body.length === 0 && innerComments.length === 0) {
          context.report({
            node: node2,
            loc: node2.body.loc,
            messageId: "unexpected",
            data: { name },
            suggest: [
              {
                messageId: "suggestComment",
                data: { name },
                fix(fixer) {
                  const range = [
                    node2.body.range[0] + 1,
                    node2.body.range[1] - 1
                  ];
                  return fixer.replaceTextRange(
                    range,
                    " /* empty */ "
                  );
                }
              }
            ]
          });
        }
      }
      return {
        ArrowFunctionExpression: reportIfEmpty,
        FunctionDeclaration: reportIfEmpty,
        FunctionExpression: reportIfEmpty
      };
    }
  };
  return noEmptyFunction;
}
var noEmptyPattern;
var hasRequiredNoEmptyPattern;
function requireNoEmptyPattern() {
  if (hasRequiredNoEmptyPattern) return noEmptyPattern;
  hasRequiredNoEmptyPattern = 1;
  const astUtils2 = requireAstUtils();
  noEmptyPattern = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          allowObjectPatternsAsParameters: false
        }
      ],
      docs: {
        description: "Disallow empty destructuring patterns",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-empty-pattern"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowObjectPatternsAsParameters: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpected: "Unexpected empty {{type}} pattern."
      }
    },
    create(context) {
      const [{ allowObjectPatternsAsParameters }] = context.options;
      return {
        ObjectPattern(node2) {
          if (node2.properties.length > 0) {
            return;
          }
          if (allowObjectPatternsAsParameters && (astUtils2.isFunction(node2.parent) || node2.parent.type === "AssignmentPattern" && astUtils2.isFunction(node2.parent.parent) && node2.parent.right.type === "ObjectExpression" && node2.parent.right.properties.length === 0)) {
            return;
          }
          context.report({
            node: node2,
            messageId: "unexpected",
            data: { type: "object" }
          });
        },
        ArrayPattern(node2) {
          if (node2.elements.length === 0) {
            context.report({
              node: node2,
              messageId: "unexpected",
              data: { type: "array" }
            });
          }
        }
      };
    }
  };
  return noEmptyPattern;
}
var noEmptyStaticBlock;
var hasRequiredNoEmptyStaticBlock;
function requireNoEmptyStaticBlock() {
  if (hasRequiredNoEmptyStaticBlock) return noEmptyStaticBlock;
  hasRequiredNoEmptyStaticBlock = 1;
  noEmptyStaticBlock = {
    meta: {
      hasSuggestions: true,
      type: "suggestion",
      docs: {
        description: "Disallow empty static blocks",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-empty-static-block"
      },
      schema: [],
      messages: {
        unexpected: "Unexpected empty static block.",
        suggestComment: "Add comment inside empty static block."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        StaticBlock(node2) {
          if (node2.body.length === 0) {
            const openingBrace = sourceCode2.getFirstToken(node2, {
              skip: 1
            });
            const closingBrace = sourceCode2.getLastToken(node2);
            if (sourceCode2.getCommentsBefore(closingBrace).length === 0) {
              context.report({
                loc: {
                  start: openingBrace.loc.start,
                  end: closingBrace.loc.end
                },
                messageId: "unexpected",
                suggest: [
                  {
                    messageId: "suggestComment",
                    fix(fixer) {
                      const range = [
                        openingBrace.range[1],
                        closingBrace.range[0]
                      ];
                      return fixer.replaceTextRange(
                        range,
                        " /* empty */ "
                      );
                    }
                  }
                ]
              });
            }
          }
        }
      };
    }
  };
  return noEmptyStaticBlock;
}
var noEqNull;
var hasRequiredNoEqNull;
function requireNoEqNull() {
  if (hasRequiredNoEqNull) return noEqNull;
  hasRequiredNoEqNull = 1;
  noEqNull = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `null` comparisons without type-checking operators",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-eq-null"
      },
      schema: [],
      messages: {
        unexpected: "Use '===' to compare with null."
      }
    },
    create(context) {
      return {
        BinaryExpression(node2) {
          const badOperator = node2.operator === "==" || node2.operator === "!=";
          if (node2.right.type === "Literal" && node2.right.raw === "null" && badOperator || node2.left.type === "Literal" && node2.left.raw === "null" && badOperator) {
            context.report({ node: node2, messageId: "unexpected" });
          }
        }
      };
    }
  };
  return noEqNull;
}
var noEval;
var hasRequiredNoEval;
function requireNoEval() {
  if (hasRequiredNoEval) return noEval;
  hasRequiredNoEval = 1;
  const astUtils2 = requireAstUtils();
  const candidatesOfGlobalObject = Object.freeze([
    "global",
    "window",
    "globalThis"
  ]);
  function isMember(node2, name) {
    return astUtils2.isSpecificMemberAccess(node2, null, name);
  }
  noEval = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allowIndirect: false
        }
      ],
      docs: {
        description: "Disallow the use of `eval()`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-eval"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowIndirect: { type: "boolean" }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpected: "eval can be harmful."
      }
    },
    create(context) {
      const [{ allowIndirect }] = context.options;
      const sourceCode2 = context.sourceCode;
      let funcInfo = null;
      function enterThisScope(node2) {
        const strict2 = sourceCode2.getScope(node2).isStrict;
        funcInfo = {
          upper: funcInfo,
          node: node2,
          strict: strict2,
          isTopLevelOfScript: false,
          defaultThis: false,
          initialized: strict2
        };
      }
      function exitThisScope() {
        funcInfo = funcInfo.upper;
      }
      function report(node2) {
        const parent = node2.parent;
        const locationNode = node2.type === "MemberExpression" ? node2.property : node2;
        const reportNode = parent.type === "CallExpression" && parent.callee === node2 ? parent : node2;
        context.report({
          node: reportNode,
          loc: locationNode.loc,
          messageId: "unexpected"
        });
      }
      function reportAccessingEvalViaGlobalObject(globalScope) {
        for (let i2 = 0; i2 < candidatesOfGlobalObject.length; ++i2) {
          const name = candidatesOfGlobalObject[i2];
          const variable = astUtils2.getVariableByName(globalScope, name);
          if (!variable) {
            continue;
          }
          const references = variable.references;
          for (let j = 0; j < references.length; ++j) {
            const identifier = references[j].identifier;
            let node2 = identifier.parent;
            while (isMember(node2, name)) {
              node2 = node2.parent;
            }
            if (isMember(node2, "eval")) {
              report(node2);
            }
          }
        }
      }
      function reportAccessingEval(globalScope) {
        const variable = astUtils2.getVariableByName(globalScope, "eval");
        if (!variable) {
          return;
        }
        const references = variable.references;
        for (let i2 = 0; i2 < references.length; ++i2) {
          const reference = references[i2];
          const id2 = reference.identifier;
          if (id2.name === "eval" && !astUtils2.isCallee(id2)) {
            report(id2);
          }
        }
      }
      if (allowIndirect) {
        return {
          "CallExpression:exit"(node2) {
            const callee = node2.callee;
            if (!node2.optional && astUtils2.isSpecificId(callee, "eval")) {
              report(callee);
            }
          }
        };
      }
      return {
        "CallExpression:exit"(node2) {
          const callee = node2.callee;
          if (astUtils2.isSpecificId(callee, "eval")) {
            report(callee);
          }
        },
        Program(node2) {
          const scope = sourceCode2.getScope(node2), features = context.languageOptions.parserOptions.ecmaFeatures || {}, strict2 = scope.isStrict || node2.sourceType === "module" || features.globalReturn && scope.childScopes[0].isStrict, isTopLevelOfScript = node2.sourceType !== "module" && !features.globalReturn;
          funcInfo = {
            upper: null,
            node: node2,
            strict: strict2,
            isTopLevelOfScript,
            defaultThis: true,
            initialized: true
          };
        },
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          exitThisScope();
          reportAccessingEval(globalScope);
          reportAccessingEvalViaGlobalObject(globalScope);
        },
        FunctionDeclaration: enterThisScope,
        "FunctionDeclaration:exit": exitThisScope,
        FunctionExpression: enterThisScope,
        "FunctionExpression:exit": exitThisScope,
        "PropertyDefinition > *.value": enterThisScope,
        "PropertyDefinition > *.value:exit": exitThisScope,
        StaticBlock: enterThisScope,
        "StaticBlock:exit": exitThisScope,
        ThisExpression(node2) {
          if (!isMember(node2.parent, "eval")) {
            return;
          }
          if (!funcInfo.initialized) {
            funcInfo.initialized = true;
            funcInfo.defaultThis = astUtils2.isDefaultThisBinding(
              funcInfo.node,
              sourceCode2
            );
          }
          if (funcInfo.isTopLevelOfScript || !funcInfo.strict && funcInfo.defaultThis) {
            report(node2.parent);
          }
        }
      };
    }
  };
  return noEval;
}
var noExAssign;
var hasRequiredNoExAssign;
function requireNoExAssign() {
  if (hasRequiredNoExAssign) return noExAssign;
  hasRequiredNoExAssign = 1;
  const astUtils2 = requireAstUtils();
  noExAssign = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow reassigning exceptions in `catch` clauses",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-ex-assign"
      },
      schema: [],
      messages: {
        unexpected: "Do not assign to the exception parameter."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function checkVariable(variable) {
        astUtils2.getModifyingReferences(variable.references).forEach((reference) => {
          context.report({
            node: reference.identifier,
            messageId: "unexpected"
          });
        });
      }
      return {
        CatchClause(node2) {
          sourceCode2.getDeclaredVariables(node2).forEach(checkVariable);
        }
      };
    }
  };
  return noExAssign;
}
var noExtendNative;
var hasRequiredNoExtendNative;
function requireNoExtendNative() {
  if (hasRequiredNoExtendNative) return noExtendNative;
  hasRequiredNoExtendNative = 1;
  const astUtils2 = requireAstUtils();
  noExtendNative = {
    meta: {
      type: "suggestion",
      defaultOptions: [{ exceptions: [] }],
      docs: {
        description: "Disallow extending native types",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-extend-native"
      },
      schema: [
        {
          type: "object",
          properties: {
            exceptions: {
              type: "array",
              items: {
                type: "string"
              },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpected: "{{builtin}} prototype is read only, properties should not be added."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const exceptions = new Set(context.options[0].exceptions);
      const modifiedBuiltins = new Set(
        Object.keys(astUtils2.ECMASCRIPT_GLOBALS).filter((builtin2) => builtin2[0].toUpperCase() === builtin2[0]).filter((builtin2) => !exceptions.has(builtin2))
      );
      function reportNode(node2, builtin2) {
        context.report({
          node: node2,
          messageId: "unexpected",
          data: {
            builtin: builtin2
          }
        });
      }
      function isPrototypePropertyAccessed(identifierNode) {
        return Boolean(
          identifierNode && identifierNode.parent && identifierNode.parent.type === "MemberExpression" && identifierNode.parent.object === identifierNode && astUtils2.getStaticPropertyName(identifierNode.parent) === "prototype"
        );
      }
      function isAssigningToPropertyOf(node2) {
        return node2.parent.type === "MemberExpression" && node2.parent.object === node2 && node2.parent.parent.type === "AssignmentExpression" && node2.parent.parent.left === node2.parent;
      }
      function isInDefinePropertyCall(node2) {
        return node2.parent.type === "CallExpression" && node2.parent.arguments[0] === node2 && astUtils2.isSpecificMemberAccess(
          node2.parent.callee,
          "Object",
          /^definePropert(?:y|ies)$/u
        );
      }
      function checkAndReportPrototypeExtension(identifierNode) {
        if (!isPrototypePropertyAccessed(identifierNode)) {
          return;
        }
        const prototypeNode = identifierNode.parent.parent.type === "ChainExpression" ? identifierNode.parent.parent : identifierNode.parent;
        if (isAssigningToPropertyOf(prototypeNode)) {
          reportNode(prototypeNode.parent.parent, identifierNode.name);
        } else if (isInDefinePropertyCall(prototypeNode)) {
          reportNode(prototypeNode.parent, identifierNode.name);
        }
      }
      return {
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          modifiedBuiltins.forEach((builtin2) => {
            const builtinVar = globalScope.set.get(builtin2);
            if (builtinVar && builtinVar.references) {
              builtinVar.references.map((ref2) => ref2.identifier).forEach(checkAndReportPrototypeExtension);
            }
          });
        }
      };
    }
  };
  return noExtendNative;
}
var noExtraBind;
var hasRequiredNoExtraBind;
function requireNoExtraBind() {
  if (hasRequiredNoExtraBind) return noExtraBind;
  hasRequiredNoExtraBind = 1;
  const astUtils2 = requireAstUtils();
  const SIDE_EFFECT_FREE_NODE_TYPES = /* @__PURE__ */ new Set([
    "Literal",
    "Identifier",
    "ThisExpression",
    "FunctionExpression"
  ]);
  noExtraBind = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary calls to `.bind()`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-extra-bind"
      },
      schema: [],
      fixable: "code",
      messages: {
        unexpected: "The function binding is unnecessary."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let scopeInfo = null;
      function isSideEffectFree(node2) {
        return SIDE_EFFECT_FREE_NODE_TYPES.has(node2.type);
      }
      function report(node2) {
        const memberNode = node2.parent;
        const callNode = memberNode.parent.type === "ChainExpression" ? memberNode.parent.parent : memberNode.parent;
        context.report({
          node: callNode,
          messageId: "unexpected",
          loc: memberNode.property.loc,
          fix(fixer) {
            if (!isSideEffectFree(callNode.arguments[0])) {
              return null;
            }
            const tokenPairs = [
              [
                // `.`, `?.`, or `[` token.
                sourceCode2.getTokenAfter(
                  memberNode.object,
                  astUtils2.isNotClosingParenToken
                ),
                // property name or `]` token.
                sourceCode2.getLastToken(memberNode)
              ],
              [
                // `?.` or `(` token of arguments.
                sourceCode2.getTokenAfter(
                  memberNode,
                  astUtils2.isNotClosingParenToken
                ),
                // `)` token of arguments.
                sourceCode2.getLastToken(callNode)
              ]
            ];
            const firstTokenToRemove = tokenPairs[0][0];
            const lastTokenToRemove = tokenPairs[1][1];
            if (sourceCode2.commentsExistBetween(
              firstTokenToRemove,
              lastTokenToRemove
            )) {
              return null;
            }
            return tokenPairs.map(
              ([start, end]) => fixer.removeRange([start.range[0], end.range[1]])
            );
          }
        });
      }
      function isCalleeOfBindMethod(node2) {
        if (!astUtils2.isSpecificMemberAccess(node2.parent, null, "bind")) {
          return false;
        }
        const bindNode = node2.parent.parent.type === "ChainExpression" ? node2.parent.parent : node2.parent;
        return bindNode.parent.type === "CallExpression" && bindNode.parent.callee === bindNode && bindNode.parent.arguments.length === 1 && bindNode.parent.arguments[0].type !== "SpreadElement";
      }
      function enterFunction(node2) {
        scopeInfo = {
          isBound: isCalleeOfBindMethod(node2),
          thisFound: false,
          upper: scopeInfo
        };
      }
      function exitFunction(node2) {
        if (scopeInfo.isBound && !scopeInfo.thisFound) {
          report(node2);
        }
        scopeInfo = scopeInfo.upper;
      }
      function exitArrowFunction(node2) {
        if (isCalleeOfBindMethod(node2)) {
          report(node2);
        }
      }
      function markAsThisFound() {
        if (scopeInfo) {
          scopeInfo.thisFound = true;
        }
      }
      return {
        "ArrowFunctionExpression:exit": exitArrowFunction,
        FunctionDeclaration: enterFunction,
        "FunctionDeclaration:exit": exitFunction,
        FunctionExpression: enterFunction,
        "FunctionExpression:exit": exitFunction,
        ThisExpression: markAsThisFound
      };
    }
  };
  return noExtraBind;
}
var noExtraBooleanCast;
var hasRequiredNoExtraBooleanCast;
function requireNoExtraBooleanCast() {
  if (hasRequiredNoExtraBooleanCast) return noExtraBooleanCast;
  hasRequiredNoExtraBooleanCast = 1;
  const astUtils2 = requireAstUtils();
  const eslintUtils2 = /* @__PURE__ */ requireEslintUtils();
  const precedence = astUtils2.getPrecedence;
  noExtraBooleanCast = {
    meta: {
      type: "suggestion",
      defaultOptions: [{}],
      docs: {
        description: "Disallow unnecessary boolean casts",
        recommended: true,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-extra-boolean-cast"
      },
      schema: [
        {
          anyOf: [
            {
              type: "object",
              properties: {
                enforceForInnerExpressions: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            },
            // deprecated
            {
              type: "object",
              properties: {
                enforceForLogicalOperands: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      fixable: "code",
      messages: {
        unexpectedCall: "Redundant Boolean call.",
        unexpectedNegation: "Redundant double negation."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ enforceForLogicalOperands, enforceForInnerExpressions }] = context.options;
      const BOOLEAN_NODE_TYPES = /* @__PURE__ */ new Set([
        "IfStatement",
        "DoWhileStatement",
        "WhileStatement",
        "ConditionalExpression",
        "ForStatement"
      ]);
      function isBooleanFunctionOrConstructorCall(node2) {
        return (node2.type === "CallExpression" || node2.type === "NewExpression") && node2.callee.type === "Identifier" && node2.callee.name === "Boolean";
      }
      function isInBooleanContext(node2) {
        return isBooleanFunctionOrConstructorCall(node2.parent) && node2 === node2.parent.arguments[0] || BOOLEAN_NODE_TYPES.has(node2.parent.type) && node2 === node2.parent.test || // !<bool>
        node2.parent.type === "UnaryExpression" && node2.parent.operator === "!";
      }
      function isInFlaggedContext(node2) {
        if (node2.parent.type === "ChainExpression") {
          return isInFlaggedContext(node2.parent);
        }
        if (enforceForLogicalOperands || enforceForInnerExpressions) {
          if (node2.parent.type === "LogicalExpression") {
            if (node2.parent.operator === "||" || node2.parent.operator === "&&") {
              return isInFlaggedContext(node2.parent);
            }
            if (enforceForInnerExpressions && node2.parent.operator === "??" && node2.parent.right === node2) {
              return isInFlaggedContext(node2.parent);
            }
          }
        }
        if (enforceForInnerExpressions) {
          if (node2.parent.type === "ConditionalExpression" && (node2.parent.consequent === node2 || node2.parent.alternate === node2)) {
            return isInFlaggedContext(node2.parent);
          }
          if (node2.parent.type === "SequenceExpression" && node2.parent.expressions.at(-1) === node2) {
            return isInFlaggedContext(node2.parent);
          }
        }
        return isInBooleanContext(node2);
      }
      function hasCommentsInside(node2) {
        return Boolean(sourceCode2.getCommentsInside(node2).length);
      }
      function isParenthesized(node2) {
        return eslintUtils2.isParenthesized(1, node2, sourceCode2);
      }
      function needsParens(previousNode, node2) {
        if (previousNode.parent.type === "ChainExpression") {
          return needsParens(previousNode.parent, node2);
        }
        if (isParenthesized(previousNode)) {
          return false;
        }
        const parent = previousNode.parent;
        switch (parent.type) {
          case "CallExpression":
          case "NewExpression":
            return node2.type === "SequenceExpression";
          case "IfStatement":
          case "DoWhileStatement":
          case "WhileStatement":
          case "ForStatement":
          case "SequenceExpression":
            return false;
          case "ConditionalExpression":
            if (previousNode === parent.test) {
              return precedence(node2) <= precedence(parent);
            }
            if (previousNode === parent.consequent || previousNode === parent.alternate) {
              return precedence(node2) < precedence({ type: "AssignmentExpression" });
            }
            throw new Error(
              "Ternary child must be test, consequent, or alternate."
            );
          case "UnaryExpression":
            return precedence(node2) < precedence(parent);
          case "LogicalExpression":
            if (astUtils2.isMixedLogicalAndCoalesceExpressions(
              node2,
              parent
            )) {
              return true;
            }
            if (previousNode === parent.left) {
              return precedence(node2) < precedence(parent);
            }
            return precedence(node2) <= precedence(parent);
          /* c8 ignore next */
          default:
            throw new Error(`Unexpected parent type: ${parent.type}`);
        }
      }
      return {
        UnaryExpression(node2) {
          const parent = node2.parent;
          if (node2.operator !== "!" || parent.type !== "UnaryExpression" || parent.operator !== "!") {
            return;
          }
          if (isInFlaggedContext(parent)) {
            context.report({
              node: parent,
              messageId: "unexpectedNegation",
              fix(fixer) {
                if (hasCommentsInside(parent)) {
                  return null;
                }
                if (needsParens(parent, node2.argument)) {
                  return fixer.replaceText(
                    parent,
                    `(${sourceCode2.getText(node2.argument)})`
                  );
                }
                let prefix = "";
                const tokenBefore = sourceCode2.getTokenBefore(parent);
                const firstReplacementToken = sourceCode2.getFirstToken(node2.argument);
                if (tokenBefore && tokenBefore.range[1] === parent.range[0] && !astUtils2.canTokensBeAdjacent(
                  tokenBefore,
                  firstReplacementToken
                )) {
                  prefix = " ";
                }
                return fixer.replaceText(
                  parent,
                  prefix + sourceCode2.getText(node2.argument)
                );
              }
            });
          }
        },
        CallExpression(node2) {
          if (node2.callee.type !== "Identifier" || node2.callee.name !== "Boolean") {
            return;
          }
          if (isInFlaggedContext(node2)) {
            context.report({
              node: node2,
              messageId: "unexpectedCall",
              fix(fixer) {
                const parent = node2.parent;
                if (node2.arguments.length === 0) {
                  if (parent.type === "UnaryExpression" && parent.operator === "!") {
                    if (hasCommentsInside(parent)) {
                      return null;
                    }
                    const replacement = "true";
                    let prefix = "";
                    const tokenBefore = sourceCode2.getTokenBefore(parent);
                    if (tokenBefore && tokenBefore.range[1] === parent.range[0] && !astUtils2.canTokensBeAdjacent(
                      tokenBefore,
                      replacement
                    )) {
                      prefix = " ";
                    }
                    return fixer.replaceText(
                      parent,
                      prefix + replacement
                    );
                  }
                  if (hasCommentsInside(node2)) {
                    return null;
                  }
                  return fixer.replaceText(node2, "false");
                }
                if (node2.arguments.length === 1) {
                  const argument = node2.arguments[0];
                  if (argument.type === "SpreadElement" || hasCommentsInside(node2)) {
                    return null;
                  }
                  if (needsParens(node2, argument)) {
                    return fixer.replaceText(
                      node2,
                      `(${sourceCode2.getText(argument)})`
                    );
                  }
                  return fixer.replaceText(
                    node2,
                    sourceCode2.getText(argument)
                  );
                }
                return null;
              }
            });
          }
        }
      };
    }
  };
  return noExtraBooleanCast;
}
var noExtraLabel;
var hasRequiredNoExtraLabel;
function requireNoExtraLabel() {
  if (hasRequiredNoExtraLabel) return noExtraLabel;
  hasRequiredNoExtraLabel = 1;
  const astUtils2 = requireAstUtils();
  noExtraLabel = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary labels",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-extra-label"
      },
      schema: [],
      fixable: "code",
      messages: {
        unexpected: "This label '{{name}}' is unnecessary."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let scopeInfo = null;
      function enterBreakableStatement(node2) {
        scopeInfo = {
          label: node2.parent.type === "LabeledStatement" ? node2.parent.label : null,
          breakable: true,
          upper: scopeInfo
        };
      }
      function exitBreakableStatement() {
        scopeInfo = scopeInfo.upper;
      }
      function enterLabeledStatement(node2) {
        if (!astUtils2.isBreakableStatement(node2.body)) {
          scopeInfo = {
            label: node2.label,
            breakable: false,
            upper: scopeInfo
          };
        }
      }
      function exitLabeledStatement(node2) {
        if (!astUtils2.isBreakableStatement(node2.body)) {
          scopeInfo = scopeInfo.upper;
        }
      }
      function reportIfUnnecessary(node2) {
        if (!node2.label) {
          return;
        }
        const labelNode = node2.label;
        for (let info = scopeInfo; info !== null; info = info.upper) {
          if (info.breakable || info.label && info.label.name === labelNode.name) {
            if (info.breakable && info.label && info.label.name === labelNode.name) {
              context.report({
                node: labelNode,
                messageId: "unexpected",
                data: labelNode,
                fix(fixer) {
                  const breakOrContinueToken = sourceCode2.getFirstToken(node2);
                  if (sourceCode2.commentsExistBetween(
                    breakOrContinueToken,
                    labelNode
                  )) {
                    return null;
                  }
                  return fixer.removeRange([
                    breakOrContinueToken.range[1],
                    labelNode.range[1]
                  ]);
                }
              });
            }
            return;
          }
        }
      }
      return {
        WhileStatement: enterBreakableStatement,
        "WhileStatement:exit": exitBreakableStatement,
        DoWhileStatement: enterBreakableStatement,
        "DoWhileStatement:exit": exitBreakableStatement,
        ForStatement: enterBreakableStatement,
        "ForStatement:exit": exitBreakableStatement,
        ForInStatement: enterBreakableStatement,
        "ForInStatement:exit": exitBreakableStatement,
        ForOfStatement: enterBreakableStatement,
        "ForOfStatement:exit": exitBreakableStatement,
        SwitchStatement: enterBreakableStatement,
        "SwitchStatement:exit": exitBreakableStatement,
        LabeledStatement: enterLabeledStatement,
        "LabeledStatement:exit": exitLabeledStatement,
        BreakStatement: reportIfUnnecessary,
        ContinueStatement: reportIfUnnecessary
      };
    }
  };
  return noExtraLabel;
}
var noExtraParens;
var hasRequiredNoExtraParens;
function requireNoExtraParens() {
  if (hasRequiredNoExtraParens) return noExtraParens;
  hasRequiredNoExtraParens = 1;
  const {
    isParenthesized: isParenthesizedRaw
  } = /* @__PURE__ */ requireEslintUtils();
  const astUtils2 = requireAstUtils();
  noExtraParens = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-extra-parens",
              url: "https://eslint.style/rules/no-extra-parens"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Disallow unnecessary parentheses",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-extra-parens"
      },
      fixable: "code",
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: ["functions"]
              }
            ],
            minItems: 0,
            maxItems: 1
          },
          {
            type: "array",
            items: [
              {
                enum: ["all"]
              },
              {
                type: "object",
                properties: {
                  conditionalAssign: { type: "boolean" },
                  ternaryOperandBinaryExpressions: {
                    type: "boolean"
                  },
                  nestedBinaryExpressions: { type: "boolean" },
                  returnAssign: { type: "boolean" },
                  ignoreJSX: {
                    enum: [
                      "none",
                      "all",
                      "single-line",
                      "multi-line"
                    ]
                  },
                  enforceForArrowConditionals: {
                    type: "boolean"
                  },
                  enforceForSequenceExpressions: {
                    type: "boolean"
                  },
                  enforceForNewInMemberExpressions: {
                    type: "boolean"
                  },
                  enforceForFunctionPrototypeMethods: {
                    type: "boolean"
                  },
                  allowParensAfterCommentPattern: {
                    type: "string"
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          }
        ]
      },
      messages: {
        unexpected: "Unnecessary parentheses around expression."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const tokensToIgnore = /* @__PURE__ */ new WeakSet();
      const precedence = astUtils2.getPrecedence;
      const ALL_NODES = context.options[0] !== "functions";
      const EXCEPT_COND_ASSIGN = ALL_NODES && context.options[1] && context.options[1].conditionalAssign === false;
      const EXCEPT_COND_TERNARY = ALL_NODES && context.options[1] && context.options[1].ternaryOperandBinaryExpressions === false;
      const NESTED_BINARY = ALL_NODES && context.options[1] && context.options[1].nestedBinaryExpressions === false;
      const EXCEPT_RETURN_ASSIGN = ALL_NODES && context.options[1] && context.options[1].returnAssign === false;
      const IGNORE_JSX = ALL_NODES && context.options[1] && context.options[1].ignoreJSX;
      const IGNORE_ARROW_CONDITIONALS = ALL_NODES && context.options[1] && context.options[1].enforceForArrowConditionals === false;
      const IGNORE_SEQUENCE_EXPRESSIONS = ALL_NODES && context.options[1] && context.options[1].enforceForSequenceExpressions === false;
      const IGNORE_NEW_IN_MEMBER_EXPR = ALL_NODES && context.options[1] && context.options[1].enforceForNewInMemberExpressions === false;
      const IGNORE_FUNCTION_PROTOTYPE_METHODS = ALL_NODES && context.options[1] && context.options[1].enforceForFunctionPrototypeMethods === false;
      const ALLOW_PARENS_AFTER_COMMENT_PATTERN = ALL_NODES && context.options[1] && context.options[1].allowParensAfterCommentPattern;
      const PRECEDENCE_OF_ASSIGNMENT_EXPR = precedence({
        type: "AssignmentExpression"
      });
      const PRECEDENCE_OF_UPDATE_EXPR = precedence({
        type: "UpdateExpression"
      });
      let reportsBuffer;
      function isImmediateFunctionPrototypeMethodCall(node2) {
        const callNode = astUtils2.skipChainExpression(node2);
        if (callNode.type !== "CallExpression") {
          return false;
        }
        const callee = astUtils2.skipChainExpression(callNode.callee);
        return callee.type === "MemberExpression" && callee.object.type === "FunctionExpression" && ["call", "apply"].includes(
          astUtils2.getStaticPropertyName(callee)
        );
      }
      function ruleApplies(node2) {
        if (node2.type === "JSXElement" || node2.type === "JSXFragment") {
          const isSingleLine = node2.loc.start.line === node2.loc.end.line;
          switch (IGNORE_JSX) {
            // Exclude this JSX element from linting
            case "all":
              return false;
            // Exclude this JSX element if it is multi-line element
            case "multi-line":
              return isSingleLine;
            // Exclude this JSX element if it is single-line element
            case "single-line":
              return !isSingleLine;
          }
        }
        if (node2.type === "SequenceExpression" && IGNORE_SEQUENCE_EXPRESSIONS) {
          return false;
        }
        if (isImmediateFunctionPrototypeMethodCall(node2) && IGNORE_FUNCTION_PROTOTYPE_METHODS) {
          return false;
        }
        return ALL_NODES || node2.type === "FunctionExpression" || node2.type === "ArrowFunctionExpression";
      }
      function isParenthesised(node2) {
        return isParenthesizedRaw(1, node2, sourceCode2);
      }
      function isParenthesisedTwice(node2) {
        return isParenthesizedRaw(2, node2, sourceCode2);
      }
      function hasExcessParens(node2) {
        return ruleApplies(node2) && isParenthesised(node2);
      }
      function hasDoubleExcessParens(node2) {
        return ruleApplies(node2) && isParenthesisedTwice(node2);
      }
      function hasExcessParensWithPrecedence(node2, precedenceLowerLimit) {
        if (ruleApplies(node2) && isParenthesised(node2)) {
          if (precedence(node2) >= precedenceLowerLimit || isParenthesisedTwice(node2)) {
            return true;
          }
        }
        return false;
      }
      function isCondAssignException(node2) {
        return EXCEPT_COND_ASSIGN && node2.test.type === "AssignmentExpression";
      }
      function isInReturnStatement(node2) {
        for (let currentNode = node2; currentNode; currentNode = currentNode.parent) {
          if (currentNode.type === "ReturnStatement" || currentNode.type === "ArrowFunctionExpression" && currentNode.body.type !== "BlockStatement") {
            return true;
          }
        }
        return false;
      }
      function isNewExpressionWithParens(newExpression) {
        const lastToken = sourceCode2.getLastToken(newExpression);
        const penultimateToken = sourceCode2.getTokenBefore(lastToken);
        return newExpression.arguments.length > 0 || // The expression should end with its own parens, e.g., new new foo() is not a new expression with parens
        astUtils2.isOpeningParenToken(penultimateToken) && astUtils2.isClosingParenToken(lastToken) && newExpression.callee.range[1] < newExpression.range[1];
      }
      function containsAssignment(node2) {
        if (node2.type === "AssignmentExpression") {
          return true;
        }
        if (node2.type === "ConditionalExpression" && (node2.consequent.type === "AssignmentExpression" || node2.alternate.type === "AssignmentExpression")) {
          return true;
        }
        if (node2.left && node2.left.type === "AssignmentExpression" || node2.right && node2.right.type === "AssignmentExpression") {
          return true;
        }
        return false;
      }
      function isReturnAssignException(node2) {
        if (!EXCEPT_RETURN_ASSIGN || !isInReturnStatement(node2)) {
          return false;
        }
        if (node2.type === "ReturnStatement") {
          return node2.argument && containsAssignment(node2.argument);
        }
        if (node2.type === "ArrowFunctionExpression" && node2.body.type !== "BlockStatement") {
          return containsAssignment(node2.body);
        }
        return containsAssignment(node2);
      }
      function hasExcessParensNoLineTerminator(token, node2) {
        if (token.loc.end.line === node2.loc.start.line) {
          return hasExcessParens(node2);
        }
        return hasDoubleExcessParens(node2);
      }
      function requiresLeadingSpace(node2) {
        const leftParenToken = sourceCode2.getTokenBefore(node2);
        const tokenBeforeLeftParen = sourceCode2.getTokenBefore(
          leftParenToken,
          { includeComments: true }
        );
        const tokenAfterLeftParen = sourceCode2.getTokenAfter(
          leftParenToken,
          { includeComments: true }
        );
        return tokenBeforeLeftParen && tokenBeforeLeftParen.range[1] === leftParenToken.range[0] && leftParenToken.range[1] === tokenAfterLeftParen.range[0] && !astUtils2.canTokensBeAdjacent(
          tokenBeforeLeftParen,
          tokenAfterLeftParen
        );
      }
      function requiresTrailingSpace(node2) {
        const nextTwoTokens = sourceCode2.getTokensAfter(node2, { count: 2 });
        const rightParenToken = nextTwoTokens[0];
        const tokenAfterRightParen = nextTwoTokens[1];
        const tokenBeforeRightParen = sourceCode2.getLastToken(node2);
        return rightParenToken && tokenAfterRightParen && !sourceCode2.isSpaceBetweenTokens(
          rightParenToken,
          tokenAfterRightParen
        ) && !astUtils2.canTokensBeAdjacent(
          tokenBeforeRightParen,
          tokenAfterRightParen
        );
      }
      function isIIFE(node2) {
        const maybeCallNode = astUtils2.skipChainExpression(node2);
        return maybeCallNode.type === "CallExpression" && maybeCallNode.callee.type === "FunctionExpression";
      }
      function canBeAssignmentTarget(node2) {
        return node2 && (node2.type === "Identifier" || node2.type === "MemberExpression");
      }
      function isFixable(node2) {
        if (node2.type !== "Literal" || typeof node2.value !== "string") {
          return true;
        }
        if (isParenthesisedTwice(node2)) {
          return true;
        }
        return !astUtils2.isTopLevelExpressionStatement(node2.parent);
      }
      function report(node2) {
        const leftParenToken = sourceCode2.getTokenBefore(node2);
        const rightParenToken = sourceCode2.getTokenAfter(node2);
        if (!isParenthesisedTwice(node2)) {
          if (tokensToIgnore.has(sourceCode2.getFirstToken(node2))) {
            return;
          }
          if (isIIFE(node2) && !isParenthesised(node2.callee)) {
            return;
          }
          if (ALLOW_PARENS_AFTER_COMMENT_PATTERN) {
            const commentsBeforeLeftParenToken = sourceCode2.getCommentsBefore(leftParenToken);
            const totalCommentsBeforeLeftParenTokenCount = commentsBeforeLeftParenToken.length;
            const ignorePattern = new RegExp(
              ALLOW_PARENS_AFTER_COMMENT_PATTERN,
              "u"
            );
            if (totalCommentsBeforeLeftParenTokenCount > 0 && ignorePattern.test(
              commentsBeforeLeftParenToken[totalCommentsBeforeLeftParenTokenCount - 1].value
            )) {
              return;
            }
          }
        }
        function finishReport() {
          context.report({
            node: node2,
            loc: leftParenToken.loc,
            messageId: "unexpected",
            fix: isFixable(node2) ? (fixer) => {
              const parenthesizedSource = sourceCode2.text.slice(
                leftParenToken.range[1],
                rightParenToken.range[0]
              );
              return fixer.replaceTextRange(
                [
                  leftParenToken.range[0],
                  rightParenToken.range[1]
                ],
                (requiresLeadingSpace(node2) ? " " : "") + parenthesizedSource + (requiresTrailingSpace(node2) ? " " : "")
              );
            } : null
          });
        }
        if (reportsBuffer) {
          reportsBuffer.reports.push({ node: node2, finishReport });
          return;
        }
        finishReport();
      }
      function checkArgumentWithPrecedence(node2) {
        if (hasExcessParensWithPrecedence(node2.argument, precedence(node2))) {
          report(node2.argument);
        }
      }
      function doesMemberExpressionContainCallExpression(node2) {
        let currentNode = node2.object;
        let currentNodeType = node2.object.type;
        while (currentNodeType === "MemberExpression") {
          currentNode = currentNode.object;
          currentNodeType = currentNode.type;
        }
        return currentNodeType === "CallExpression";
      }
      function checkCallNew(node2) {
        const callee = node2.callee;
        if (hasExcessParensWithPrecedence(callee, precedence(node2))) {
          if (hasDoubleExcessParens(callee) || !(isIIFE(node2) || // (new A)(); new (new A)();
          callee.type === "NewExpression" && !isNewExpressionWithParens(callee) && !(node2.type === "NewExpression" && !isNewExpressionWithParens(node2)) || // new (a().b)(); new (a.b().c);
          node2.type === "NewExpression" && callee.type === "MemberExpression" && doesMemberExpressionContainCallExpression(
            callee
          ) || // (a?.b)(); (a?.())();
          !node2.optional && callee.type === "ChainExpression")) {
            report(node2.callee);
          }
        }
        node2.arguments.filter(
          (arg) => hasExcessParensWithPrecedence(
            arg,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          )
        ).forEach(report);
      }
      function checkBinaryLogical(node2) {
        const prec = precedence(node2);
        const leftPrecedence = precedence(node2.left);
        const rightPrecedence = precedence(node2.right);
        const isExponentiation = node2.operator === "**";
        const shouldSkipLeft = NESTED_BINARY && (node2.left.type === "BinaryExpression" || node2.left.type === "LogicalExpression");
        const shouldSkipRight = NESTED_BINARY && (node2.right.type === "BinaryExpression" || node2.right.type === "LogicalExpression");
        if (!shouldSkipLeft && hasExcessParens(node2.left)) {
          if (!(["AwaitExpression", "UnaryExpression"].includes(
            node2.left.type
          ) && isExponentiation) && !astUtils2.isMixedLogicalAndCoalesceExpressions(
            node2.left,
            node2
          ) && (leftPrecedence > prec || leftPrecedence === prec && !isExponentiation) || isParenthesisedTwice(node2.left)) {
            report(node2.left);
          }
        }
        if (!shouldSkipRight && hasExcessParens(node2.right)) {
          if (!astUtils2.isMixedLogicalAndCoalesceExpressions(
            node2.right,
            node2
          ) && (rightPrecedence > prec || rightPrecedence === prec && isExponentiation) || isParenthesisedTwice(node2.right)) {
            report(node2.right);
          }
        }
      }
      function checkClass(node2) {
        if (!node2.superClass) {
          return;
        }
        const hasExtraParens = precedence(node2.superClass) > PRECEDENCE_OF_UPDATE_EXPR ? hasExcessParens(node2.superClass) : hasDoubleExcessParens(node2.superClass);
        if (hasExtraParens) {
          report(node2.superClass);
        }
      }
      function checkSpreadOperator(node2) {
        if (hasExcessParensWithPrecedence(
          node2.argument,
          PRECEDENCE_OF_ASSIGNMENT_EXPR
        )) {
          report(node2.argument);
        }
      }
      function checkExpressionOrExportStatement(node2) {
        const firstToken = isParenthesised(node2) ? sourceCode2.getTokenBefore(node2) : sourceCode2.getFirstToken(node2);
        const secondToken = sourceCode2.getTokenAfter(
          firstToken,
          astUtils2.isNotOpeningParenToken
        );
        const thirdToken = secondToken ? sourceCode2.getTokenAfter(secondToken) : null;
        const tokenAfterClosingParens = secondToken ? sourceCode2.getTokenAfter(
          secondToken,
          astUtils2.isNotClosingParenToken
        ) : null;
        if (astUtils2.isOpeningParenToken(firstToken) && (astUtils2.isOpeningBraceToken(secondToken) || secondToken.type === "Keyword" && (secondToken.value === "function" || secondToken.value === "class" || secondToken.value === "let" && tokenAfterClosingParens && (astUtils2.isOpeningBracketToken(
          tokenAfterClosingParens
        ) || tokenAfterClosingParens.type === "Identifier")) || secondToken && secondToken.type === "Identifier" && secondToken.value === "async" && thirdToken && thirdToken.type === "Keyword" && thirdToken.value === "function")) {
          tokensToIgnore.add(secondToken);
        }
        const hasExtraParens = node2.parent.type === "ExportDefaultDeclaration" ? hasExcessParensWithPrecedence(
          node2,
          PRECEDENCE_OF_ASSIGNMENT_EXPR
        ) : hasExcessParens(node2);
        if (hasExtraParens) {
          report(node2);
        }
      }
      function pathToAncestor(node2, ancestor) {
        const path = [node2];
        let currentNode = node2;
        while (currentNode !== ancestor) {
          currentNode = currentNode.parent;
          if (currentNode === null) {
            throw new Error(
              "Nodes are not in the ancestor-descendant relationship."
            );
          }
          path.push(currentNode);
        }
        return path;
      }
      function pathToDescendant(node2, descendant) {
        return pathToAncestor(descendant, node2).reverse();
      }
      function isSafelyEnclosingInExpression(node2, child) {
        switch (node2.type) {
          case "ArrayExpression":
          case "ArrayPattern":
          case "BlockStatement":
          case "ObjectExpression":
          case "ObjectPattern":
          case "TemplateLiteral":
            return true;
          case "ArrowFunctionExpression":
          case "FunctionExpression":
            return node2.params.includes(child);
          case "CallExpression":
          case "NewExpression":
            return node2.arguments.includes(child);
          case "MemberExpression":
            return node2.computed && node2.property === child;
          case "ConditionalExpression":
            return node2.consequent === child;
          default:
            return false;
        }
      }
      function startNewReportsBuffering() {
        reportsBuffer = {
          upper: reportsBuffer,
          inExpressionNodes: [],
          reports: []
        };
      }
      function endCurrentReportsBuffering() {
        const { upper, inExpressionNodes, reports } = reportsBuffer;
        if (upper) {
          upper.inExpressionNodes.push(...inExpressionNodes);
          upper.reports.push(...reports);
        } else {
          reports.forEach(({ finishReport }) => finishReport());
        }
        reportsBuffer = upper;
      }
      function isInCurrentReportsBuffer(node2) {
        return reportsBuffer.reports.some((r2) => r2.node === node2);
      }
      function removeFromCurrentReportsBuffer(node2) {
        reportsBuffer.reports = reportsBuffer.reports.filter(
          (r2) => r2.node !== node2
        );
      }
      function isMemberExpInNewCallee(node2) {
        if (node2.type === "MemberExpression") {
          return node2.parent.type === "NewExpression" && node2.parent.callee === node2 ? true : node2.parent.object === node2 && isMemberExpInNewCallee(node2.parent);
        }
        return false;
      }
      function isAnonymousFunctionAssignmentException({
        left,
        operator,
        right
      }) {
        if (left.type === "Identifier" && ["=", "&&=", "||=", "??="].includes(operator)) {
          const rhsType = right.type;
          if (rhsType === "ArrowFunctionExpression") {
            return true;
          }
          if ((rhsType === "FunctionExpression" || rhsType === "ClassExpression") && !right.id) {
            return true;
          }
        }
        return false;
      }
      return {
        ArrayExpression(node2) {
          node2.elements.filter(
            (e2) => e2 && hasExcessParensWithPrecedence(
              e2,
              PRECEDENCE_OF_ASSIGNMENT_EXPR
            )
          ).forEach(report);
        },
        ArrayPattern(node2) {
          node2.elements.filter((e2) => canBeAssignmentTarget(e2) && hasExcessParens(e2)).forEach(report);
        },
        ArrowFunctionExpression(node2) {
          if (isReturnAssignException(node2)) {
            return;
          }
          if (node2.body.type === "ConditionalExpression" && IGNORE_ARROW_CONDITIONALS) {
            return;
          }
          if (node2.body.type !== "BlockStatement") {
            const firstBodyToken = sourceCode2.getFirstToken(
              node2.body,
              astUtils2.isNotOpeningParenToken
            );
            const tokenBeforeFirst = sourceCode2.getTokenBefore(firstBodyToken);
            if (astUtils2.isOpeningParenToken(tokenBeforeFirst) && astUtils2.isOpeningBraceToken(firstBodyToken)) {
              tokensToIgnore.add(firstBodyToken);
            }
            if (hasExcessParensWithPrecedence(
              node2.body,
              PRECEDENCE_OF_ASSIGNMENT_EXPR
            )) {
              report(node2.body);
            }
          }
        },
        AssignmentExpression(node2) {
          if (canBeAssignmentTarget(node2.left) && hasExcessParens(node2.left) && (!isAnonymousFunctionAssignmentException(node2) || isParenthesisedTwice(node2.left))) {
            report(node2.left);
          }
          if (!isReturnAssignException(node2) && hasExcessParensWithPrecedence(node2.right, precedence(node2))) {
            report(node2.right);
          }
        },
        BinaryExpression(node2) {
          if (reportsBuffer && node2.operator === "in") {
            reportsBuffer.inExpressionNodes.push(node2);
          }
          checkBinaryLogical(node2);
        },
        CallExpression: checkCallNew,
        ConditionalExpression(node2) {
          if (isReturnAssignException(node2)) {
            return;
          }
          const availableTypes = /* @__PURE__ */ new Set([
            "BinaryExpression",
            "LogicalExpression"
          ]);
          if (!(EXCEPT_COND_TERNARY && availableTypes.has(node2.test.type)) && !isCondAssignException(node2) && hasExcessParensWithPrecedence(
            node2.test,
            precedence({
              type: "LogicalExpression",
              operator: "||"
            })
          )) {
            report(node2.test);
          }
          if (!(EXCEPT_COND_TERNARY && availableTypes.has(node2.consequent.type)) && hasExcessParensWithPrecedence(
            node2.consequent,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          )) {
            report(node2.consequent);
          }
          if (!(EXCEPT_COND_TERNARY && availableTypes.has(node2.alternate.type)) && hasExcessParensWithPrecedence(
            node2.alternate,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          )) {
            report(node2.alternate);
          }
        },
        DoWhileStatement(node2) {
          if (hasExcessParens(node2.test) && !isCondAssignException(node2)) {
            report(node2.test);
          }
        },
        ExportDefaultDeclaration: (node2) => checkExpressionOrExportStatement(node2.declaration),
        ExpressionStatement: (node2) => checkExpressionOrExportStatement(node2.expression),
        ForInStatement(node2) {
          if (node2.left.type !== "VariableDeclaration") {
            const firstLeftToken = sourceCode2.getFirstToken(
              node2.left,
              astUtils2.isNotOpeningParenToken
            );
            if (firstLeftToken.value === "let" && astUtils2.isOpeningBracketToken(
              sourceCode2.getTokenAfter(
                firstLeftToken,
                astUtils2.isNotClosingParenToken
              )
            )) {
              tokensToIgnore.add(firstLeftToken);
            }
          }
          if (hasExcessParens(node2.left)) {
            report(node2.left);
          }
          if (hasExcessParens(node2.right)) {
            report(node2.right);
          }
        },
        ForOfStatement(node2) {
          if (node2.left.type !== "VariableDeclaration") {
            const firstLeftToken = sourceCode2.getFirstToken(
              node2.left,
              astUtils2.isNotOpeningParenToken
            );
            if (firstLeftToken.value === "let") {
              tokensToIgnore.add(firstLeftToken);
            }
          }
          if (hasExcessParens(node2.left)) {
            report(node2.left);
          }
          if (hasExcessParensWithPrecedence(
            node2.right,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          )) {
            report(node2.right);
          }
        },
        ForStatement(node2) {
          if (node2.test && hasExcessParens(node2.test) && !isCondAssignException(node2)) {
            report(node2.test);
          }
          if (node2.update && hasExcessParens(node2.update)) {
            report(node2.update);
          }
          if (node2.init) {
            if (node2.init.type !== "VariableDeclaration") {
              const firstToken = sourceCode2.getFirstToken(
                node2.init,
                astUtils2.isNotOpeningParenToken
              );
              if (firstToken.value === "let" && astUtils2.isOpeningBracketToken(
                sourceCode2.getTokenAfter(
                  firstToken,
                  astUtils2.isNotClosingParenToken
                )
              )) {
                tokensToIgnore.add(firstToken);
              }
            }
            startNewReportsBuffering();
            if (hasExcessParens(node2.init)) {
              report(node2.init);
            }
          }
        },
        "ForStatement > *.init:exit"(node2) {
          if (reportsBuffer.reports.length) {
            reportsBuffer.inExpressionNodes.forEach(
              (inExpressionNode) => {
                const path = pathToDescendant(
                  node2,
                  inExpressionNode
                );
                let nodeToExclude;
                for (let i2 = 0; i2 < path.length; i2++) {
                  const pathNode = path[i2];
                  if (i2 < path.length - 1) {
                    const nextPathNode = path[i2 + 1];
                    if (isSafelyEnclosingInExpression(
                      pathNode,
                      nextPathNode
                    )) {
                      return;
                    }
                  }
                  if (isParenthesised(pathNode)) {
                    if (isInCurrentReportsBuffer(pathNode)) {
                      if (isParenthesisedTwice(pathNode)) {
                        return;
                      }
                      if (!nodeToExclude) {
                        nodeToExclude = pathNode;
                      }
                    } else {
                      return;
                    }
                  }
                }
                removeFromCurrentReportsBuffer(nodeToExclude);
              }
            );
          }
          endCurrentReportsBuffering();
        },
        IfStatement(node2) {
          if (hasExcessParens(node2.test) && !isCondAssignException(node2)) {
            report(node2.test);
          }
        },
        ImportExpression(node2) {
          const { source } = node2;
          if (source.type === "SequenceExpression") {
            if (hasDoubleExcessParens(source)) {
              report(source);
            }
          } else if (hasExcessParens(source)) {
            report(source);
          }
        },
        LogicalExpression: checkBinaryLogical,
        MemberExpression(node2) {
          const shouldAllowWrapOnce = isMemberExpInNewCallee(node2) && doesMemberExpressionContainCallExpression(node2);
          const nodeObjHasExcessParens = shouldAllowWrapOnce ? hasDoubleExcessParens(node2.object) : hasExcessParens(node2.object) && !(isImmediateFunctionPrototypeMethodCall(
            node2.parent
          ) && node2.parent.callee === node2 && IGNORE_FUNCTION_PROTOTYPE_METHODS);
          if (nodeObjHasExcessParens && precedence(node2.object) >= precedence(node2) && (node2.computed || !(astUtils2.isDecimalInteger(node2.object) || // RegExp literal is allowed to have parens (#1589)
          node2.object.type === "Literal" && node2.object.regex))) {
            report(node2.object);
          }
          if (nodeObjHasExcessParens && node2.object.type === "CallExpression") {
            report(node2.object);
          }
          if (nodeObjHasExcessParens && !IGNORE_NEW_IN_MEMBER_EXPR && node2.object.type === "NewExpression" && isNewExpressionWithParens(node2.object)) {
            report(node2.object);
          }
          if (nodeObjHasExcessParens && node2.optional && node2.object.type === "ChainExpression") {
            report(node2.object);
          }
          if (node2.computed && hasExcessParens(node2.property)) {
            report(node2.property);
          }
        },
        "MethodDefinition[computed=true]"(node2) {
          if (hasExcessParensWithPrecedence(
            node2.key,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          )) {
            report(node2.key);
          }
        },
        NewExpression: checkCallNew,
        ObjectExpression(node2) {
          node2.properties.filter(
            (property) => property.value && hasExcessParensWithPrecedence(
              property.value,
              PRECEDENCE_OF_ASSIGNMENT_EXPR
            )
          ).forEach((property) => report(property.value));
        },
        ObjectPattern(node2) {
          node2.properties.filter((property) => {
            const value = property.value;
            return canBeAssignmentTarget(value) && hasExcessParens(value);
          }).forEach((property) => report(property.value));
        },
        Property(node2) {
          if (node2.computed) {
            const { key } = node2;
            if (key && hasExcessParensWithPrecedence(
              key,
              PRECEDENCE_OF_ASSIGNMENT_EXPR
            )) {
              report(key);
            }
          }
        },
        PropertyDefinition(node2) {
          if (node2.computed && hasExcessParensWithPrecedence(
            node2.key,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          )) {
            report(node2.key);
          }
          if (node2.value && hasExcessParensWithPrecedence(
            node2.value,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          )) {
            report(node2.value);
          }
        },
        RestElement(node2) {
          const argument = node2.argument;
          if (canBeAssignmentTarget(argument) && hasExcessParens(argument)) {
            report(argument);
          }
        },
        ReturnStatement(node2) {
          const returnToken = sourceCode2.getFirstToken(node2);
          if (isReturnAssignException(node2)) {
            return;
          }
          if (node2.argument && hasExcessParensNoLineTerminator(
            returnToken,
            node2.argument
          ) && // RegExp literal is allowed to have parens (#1589)
          !(node2.argument.type === "Literal" && node2.argument.regex)) {
            report(node2.argument);
          }
        },
        SequenceExpression(node2) {
          const precedenceOfNode = precedence(node2);
          node2.expressions.filter(
            (e2) => hasExcessParensWithPrecedence(e2, precedenceOfNode)
          ).forEach(report);
        },
        SwitchCase(node2) {
          if (node2.test && hasExcessParens(node2.test)) {
            report(node2.test);
          }
        },
        SwitchStatement(node2) {
          if (hasExcessParens(node2.discriminant)) {
            report(node2.discriminant);
          }
        },
        ThrowStatement(node2) {
          const throwToken = sourceCode2.getFirstToken(node2);
          if (hasExcessParensNoLineTerminator(throwToken, node2.argument)) {
            report(node2.argument);
          }
        },
        UnaryExpression: checkArgumentWithPrecedence,
        UpdateExpression(node2) {
          if (node2.prefix) {
            checkArgumentWithPrecedence(node2);
          } else {
            const { argument } = node2;
            const operatorToken = sourceCode2.getLastToken(node2);
            if (argument.loc.end.line === operatorToken.loc.start.line) {
              checkArgumentWithPrecedence(node2);
            } else {
              if (hasDoubleExcessParens(argument)) {
                report(argument);
              }
            }
          }
        },
        AwaitExpression: checkArgumentWithPrecedence,
        VariableDeclarator(node2) {
          if (node2.init && hasExcessParensWithPrecedence(
            node2.init,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          ) && // RegExp literal is allowed to have parens (#1589)
          !(node2.init.type === "Literal" && node2.init.regex)) {
            report(node2.init);
          }
        },
        WhileStatement(node2) {
          if (hasExcessParens(node2.test) && !isCondAssignException(node2)) {
            report(node2.test);
          }
        },
        WithStatement(node2) {
          if (hasExcessParens(node2.object)) {
            report(node2.object);
          }
        },
        YieldExpression(node2) {
          if (node2.argument) {
            const yieldToken = sourceCode2.getFirstToken(node2);
            if (precedence(node2.argument) >= precedence(node2) && hasExcessParensNoLineTerminator(
              yieldToken,
              node2.argument
            ) || hasDoubleExcessParens(node2.argument)) {
              report(node2.argument);
            }
          }
        },
        ClassDeclaration: checkClass,
        ClassExpression: checkClass,
        SpreadElement: checkSpreadOperator,
        SpreadProperty: checkSpreadOperator,
        ExperimentalSpreadProperty: checkSpreadOperator,
        TemplateLiteral(node2) {
          node2.expressions.filter((e2) => e2 && hasExcessParens(e2)).forEach(report);
        },
        AssignmentPattern(node2) {
          const { left, right } = node2;
          if (canBeAssignmentTarget(left) && hasExcessParens(left)) {
            report(left);
          }
          if (right && hasExcessParensWithPrecedence(
            right,
            PRECEDENCE_OF_ASSIGNMENT_EXPR
          )) {
            report(right);
          }
        }
      };
    }
  };
  return noExtraParens;
}
var noExtraSemi;
var hasRequiredNoExtraSemi;
function requireNoExtraSemi() {
  if (hasRequiredNoExtraSemi) return noExtraSemi;
  hasRequiredNoExtraSemi = 1;
  const FixTracker = requireFixTracker();
  const astUtils2 = requireAstUtils();
  noExtraSemi = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-extra-semi",
              url: "https://eslint.style/rules/no-extra-semi"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary semicolons",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-extra-semi"
      },
      fixable: "code",
      schema: [],
      messages: {
        unexpected: "Unnecessary semicolon."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function isFixable(nodeOrToken) {
        const nextToken = sourceCode2.getTokenAfter(nodeOrToken);
        if (!nextToken || nextToken.type !== "String") {
          return true;
        }
        const stringNode = sourceCode2.getNodeByRangeIndex(
          nextToken.range[0]
        );
        return !astUtils2.isTopLevelExpressionStatement(stringNode.parent);
      }
      function report(nodeOrToken) {
        context.report({
          node: nodeOrToken,
          messageId: "unexpected",
          fix: isFixable(nodeOrToken) ? (fixer) => (
            /*
             * Expand the replacement range to include the surrounding
             * tokens to avoid conflicting with semi.
             * https://github.com/eslint/eslint/issues/7928
             */
            new FixTracker(fixer, context.sourceCode).retainSurroundingTokens(nodeOrToken).remove(nodeOrToken)
          ) : null
        });
      }
      function checkForPartOfClassBody(firstToken) {
        for (let token = firstToken; token.type === "Punctuator" && !astUtils2.isClosingBraceToken(token); token = sourceCode2.getTokenAfter(token)) {
          if (astUtils2.isSemicolonToken(token)) {
            report(token);
          }
        }
      }
      return {
        /**
         * Reports this empty statement, except if the parent node is a loop.
         * @param {Node} node A EmptyStatement node to be reported.
         * @returns {void}
         */
        EmptyStatement(node2) {
          const parent = node2.parent, allowedParentTypes = [
            "ForStatement",
            "ForInStatement",
            "ForOfStatement",
            "WhileStatement",
            "DoWhileStatement",
            "IfStatement",
            "LabeledStatement",
            "WithStatement"
          ];
          if (!allowedParentTypes.includes(parent.type)) {
            report(node2);
          }
        },
        /**
         * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.
         * @param {Node} node A ClassBody node to check.
         * @returns {void}
         */
        ClassBody(node2) {
          checkForPartOfClassBody(sourceCode2.getFirstToken(node2, 1));
        },
        /**
         * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.
         * @param {Node} node A MethodDefinition node of the start point.
         * @returns {void}
         */
        "MethodDefinition, PropertyDefinition, StaticBlock"(node2) {
          checkForPartOfClassBody(sourceCode2.getTokenAfter(node2));
        }
      };
    }
  };
  return noExtraSemi;
}
var noFallthrough;
var hasRequiredNoFallthrough;
function requireNoFallthrough() {
  if (hasRequiredNoFallthrough) return noFallthrough;
  hasRequiredNoFallthrough = 1;
  const { directivesPattern } = requireDirectives();
  const DEFAULT_FALLTHROUGH_COMMENT = /falls?\s?through/iu;
  function isAnySegmentReachable(segments) {
    for (const segment of segments) {
      if (segment.reachable) {
        return true;
      }
    }
    return false;
  }
  function isFallThroughComment(comment2, fallthroughCommentPattern) {
    return fallthroughCommentPattern.test(comment2) && !directivesPattern.test(comment2.trim());
  }
  function getFallthroughComment(caseWhichFallsThrough, subsequentCase, context, fallthroughCommentPattern) {
    const sourceCode2 = context.sourceCode;
    if (caseWhichFallsThrough.consequent.length === 1 && caseWhichFallsThrough.consequent[0].type === "BlockStatement") {
      const trailingCloseBrace = sourceCode2.getLastToken(
        caseWhichFallsThrough.consequent[0]
      );
      const commentInBlock = sourceCode2.getCommentsBefore(trailingCloseBrace).pop();
      if (commentInBlock && isFallThroughComment(
        commentInBlock.value,
        fallthroughCommentPattern
      )) {
        return commentInBlock;
      }
    }
    const comment2 = sourceCode2.getCommentsBefore(subsequentCase).pop();
    if (comment2 && isFallThroughComment(comment2.value, fallthroughCommentPattern)) {
      return comment2;
    }
    return null;
  }
  function hasBlankLinesBetween(node2, token) {
    return token.loc.start.line > node2.loc.end.line + 1;
  }
  noFallthrough = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          allowEmptyCase: false,
          reportUnusedFallthroughComment: false
        }
      ],
      docs: {
        description: "Disallow fallthrough of `case` statements",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-fallthrough"
      },
      schema: [
        {
          type: "object",
          properties: {
            commentPattern: {
              type: "string"
            },
            allowEmptyCase: {
              type: "boolean"
            },
            reportUnusedFallthroughComment: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unusedFallthroughComment: "Found a comment that would permit fallthrough, but case cannot fall through.",
        case: "Expected a 'break' statement before 'case'.",
        default: "Expected a 'break' statement before 'default'."
      }
    },
    create(context) {
      const codePathSegments = [];
      let currentCodePathSegments = /* @__PURE__ */ new Set();
      const sourceCode2 = context.sourceCode;
      const [
        { allowEmptyCase, commentPattern, reportUnusedFallthroughComment }
      ] = context.options;
      const fallthroughCommentPattern = commentPattern ? new RegExp(commentPattern, "u") : DEFAULT_FALLTHROUGH_COMMENT;
      let previousCase = null;
      return {
        onCodePathStart() {
          codePathSegments.push(currentCodePathSegments);
          currentCodePathSegments = /* @__PURE__ */ new Set();
        },
        onCodePathEnd() {
          currentCodePathSegments = codePathSegments.pop();
        },
        onUnreachableCodePathSegmentStart(segment) {
          currentCodePathSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          currentCodePathSegments.delete(segment);
        },
        onCodePathSegmentStart(segment) {
          currentCodePathSegments.add(segment);
        },
        onCodePathSegmentEnd(segment) {
          currentCodePathSegments.delete(segment);
        },
        SwitchCase(node2) {
          if (previousCase && previousCase.node.parent === node2.parent) {
            const previousCaseFallthroughComment = getFallthroughComment(
              previousCase.node,
              node2,
              context,
              fallthroughCommentPattern
            );
            if (previousCase.isFallthrough && !previousCaseFallthroughComment) {
              context.report({
                messageId: node2.test ? "case" : "default",
                node: node2
              });
            } else if (reportUnusedFallthroughComment && !previousCase.isSwitchExitReachable && previousCaseFallthroughComment) {
              context.report({
                messageId: "unusedFallthroughComment",
                node: previousCaseFallthroughComment
              });
            }
          }
          previousCase = null;
        },
        "SwitchCase:exit"(node2) {
          const nextToken = sourceCode2.getTokenAfter(node2);
          const isSwitchExitReachable = isAnySegmentReachable(
            currentCodePathSegments
          );
          const isFallthrough = isSwitchExitReachable && (node2.consequent.length > 0 || !allowEmptyCase && hasBlankLinesBetween(node2, nextToken)) && node2.parent.cases.at(-1) !== node2;
          previousCase = {
            node: node2,
            isSwitchExitReachable,
            isFallthrough
          };
        }
      };
    }
  };
  return noFallthrough;
}
var noFloatingDecimal;
var hasRequiredNoFloatingDecimal;
function requireNoFloatingDecimal() {
  if (hasRequiredNoFloatingDecimal) return noFloatingDecimal;
  hasRequiredNoFloatingDecimal = 1;
  const astUtils2 = requireAstUtils();
  noFloatingDecimal = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-floating-decimal",
              url: "https://eslint.style/rules/no-floating-decimal"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow leading or trailing decimal points in numeric literals",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-floating-decimal"
      },
      schema: [],
      fixable: "code",
      messages: {
        leading: "A leading decimal point can be confused with a dot.",
        trailing: "A trailing decimal point can be confused with a dot."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        Literal(node2) {
          if (typeof node2.value === "number") {
            if (node2.raw.startsWith(".")) {
              context.report({
                node: node2,
                messageId: "leading",
                fix(fixer) {
                  const tokenBefore = sourceCode2.getTokenBefore(node2);
                  const needsSpaceBefore = tokenBefore && tokenBefore.range[1] === node2.range[0] && !astUtils2.canTokensBeAdjacent(
                    tokenBefore,
                    `0${node2.raw}`
                  );
                  return fixer.insertTextBefore(
                    node2,
                    needsSpaceBefore ? " 0" : "0"
                  );
                }
              });
            }
            if (node2.raw.indexOf(".") === node2.raw.length - 1) {
              context.report({
                node: node2,
                messageId: "trailing",
                fix: (fixer) => fixer.insertTextAfter(node2, "0")
              });
            }
          }
        }
      };
    }
  };
  return noFloatingDecimal;
}
var noFuncAssign;
var hasRequiredNoFuncAssign;
function requireNoFuncAssign() {
  if (hasRequiredNoFuncAssign) return noFuncAssign;
  hasRequiredNoFuncAssign = 1;
  const astUtils2 = requireAstUtils();
  noFuncAssign = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow reassigning `function` declarations",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-func-assign"
      },
      schema: [],
      messages: {
        isAFunction: "'{{name}}' is a function."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function checkReference(references) {
        astUtils2.getModifyingReferences(references).forEach((reference) => {
          context.report({
            node: reference.identifier,
            messageId: "isAFunction",
            data: {
              name: reference.identifier.name
            }
          });
        });
      }
      function checkVariable(variable) {
        if (variable.defs[0].type === "FunctionName") {
          checkReference(variable.references);
        }
      }
      function checkForFunction(node2) {
        sourceCode2.getDeclaredVariables(node2).forEach(checkVariable);
      }
      return {
        FunctionDeclaration: checkForFunction,
        FunctionExpression: checkForFunction
      };
    }
  };
  return noFuncAssign;
}
var noGlobalAssign;
var hasRequiredNoGlobalAssign;
function requireNoGlobalAssign() {
  if (hasRequiredNoGlobalAssign) return noGlobalAssign;
  hasRequiredNoGlobalAssign = 1;
  noGlobalAssign = {
    meta: {
      type: "suggestion",
      defaultOptions: [{ exceptions: [] }],
      docs: {
        description: "Disallow assignments to native objects or read-only global variables",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-global-assign"
      },
      schema: [
        {
          type: "object",
          properties: {
            exceptions: {
              type: "array",
              items: { type: "string" },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        globalShouldNotBeModified: "Read-only global '{{name}}' should not be modified."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ exceptions }] = context.options;
      function checkReference(reference, index, references) {
        const identifier = reference.identifier;
        if (reference.init === false && reference.isWrite() && /*
        * Destructuring assignments can have multiple default value,
        * so possibly there are multiple writeable references for the same identifier.
        */
        (index === 0 || references[index - 1].identifier !== identifier)) {
          context.report({
            node: identifier,
            messageId: "globalShouldNotBeModified",
            data: {
              name: identifier.name
            }
          });
        }
      }
      function checkVariable(variable) {
        if (variable.writeable === false && !exceptions.includes(variable.name)) {
          variable.references.forEach(checkReference);
        }
      }
      return {
        Program(node2) {
          const globalScope = sourceCode2.getScope(node2);
          globalScope.variables.forEach(checkVariable);
        }
      };
    }
  };
  return noGlobalAssign;
}
var noImplicitCoercion;
var hasRequiredNoImplicitCoercion;
function requireNoImplicitCoercion() {
  if (hasRequiredNoImplicitCoercion) return noImplicitCoercion;
  hasRequiredNoImplicitCoercion = 1;
  const astUtils2 = requireAstUtils();
  const INDEX_OF_PATTERN = /^(?:i|lastI)ndexOf$/u;
  const ALLOWABLE_OPERATORS = ["~", "!!", "+", "- -", "-", "*"];
  function isDoubleLogicalNegating(node2) {
    return node2.operator === "!" && node2.argument.type === "UnaryExpression" && node2.argument.operator === "!";
  }
  function isBinaryNegatingOfIndexOf(node2) {
    if (node2.operator !== "~") {
      return false;
    }
    const callNode = astUtils2.skipChainExpression(node2.argument);
    return callNode.type === "CallExpression" && astUtils2.isSpecificMemberAccess(callNode.callee, null, INDEX_OF_PATTERN);
  }
  function isMultiplyByOne(node2) {
    return node2.operator === "*" && (node2.left.type === "Literal" && node2.left.value === 1 || node2.right.type === "Literal" && node2.right.value === 1);
  }
  function isMultiplyByFractionOfOne(node2, sourceCode2) {
    return node2.type === "BinaryExpression" && node2.operator === "*" && node2.right.type === "Literal" && node2.right.value === 1 && node2.parent.type === "BinaryExpression" && node2.parent.operator === "/" && node2.parent.left === node2 && !astUtils2.isParenthesised(sourceCode2, node2);
  }
  function isNumeric(node2) {
    return node2.type === "Literal" && typeof node2.value === "number" || node2.type === "CallExpression" && (node2.callee.name === "Number" || node2.callee.name === "parseInt" || node2.callee.name === "parseFloat");
  }
  function getNonNumericOperand(node2) {
    const left = node2.left, right = node2.right;
    if (right.type !== "BinaryExpression" && !isNumeric(right)) {
      return right;
    }
    if (left.type !== "BinaryExpression" && !isNumeric(left)) {
      return left;
    }
    return null;
  }
  function isStringType(node2) {
    return astUtils2.isStringLiteral(node2) || node2.type === "CallExpression" && node2.callee.type === "Identifier" && node2.callee.name === "String";
  }
  function isEmptyString(node2) {
    return astUtils2.isStringLiteral(node2) && (node2.value === "" || node2.type === "TemplateLiteral" && node2.quasis.length === 1 && node2.quasis[0].value.cooked === "");
  }
  function isConcatWithEmptyString(node2) {
    return node2.operator === "+" && (isEmptyString(node2.left) && !isStringType(node2.right) || isEmptyString(node2.right) && !isStringType(node2.left));
  }
  function isAppendEmptyString(node2) {
    return node2.operator === "+=" && isEmptyString(node2.right);
  }
  function getNonEmptyOperand(node2) {
    return isEmptyString(node2.left) ? node2.right : node2.left;
  }
  noImplicitCoercion = {
    meta: {
      hasSuggestions: true,
      type: "suggestion",
      docs: {
        description: "Disallow shorthand type conversions",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-implicit-coercion"
      },
      fixable: "code",
      schema: [
        {
          type: "object",
          properties: {
            boolean: {
              type: "boolean"
            },
            number: {
              type: "boolean"
            },
            string: {
              type: "boolean"
            },
            disallowTemplateShorthand: {
              type: "boolean"
            },
            allow: {
              type: "array",
              items: {
                enum: ALLOWABLE_OPERATORS
              },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      defaultOptions: [
        {
          allow: [],
          boolean: true,
          disallowTemplateShorthand: false,
          number: true,
          string: true
        }
      ],
      messages: {
        implicitCoercion: "Unexpected implicit coercion encountered. Use `{{recommendation}}` instead.",
        useRecommendation: "Use `{{recommendation}}` instead."
      }
    },
    create(context) {
      const [options] = context.options;
      const sourceCode2 = context.sourceCode;
      function report(node2, recommendation, shouldSuggest, shouldFix) {
        function fix(fixer) {
          const tokenBefore = sourceCode2.getTokenBefore(node2);
          if (tokenBefore?.range[1] === node2.range[0] && !astUtils2.canTokensBeAdjacent(tokenBefore, recommendation)) {
            return fixer.replaceText(node2, ` ${recommendation}`);
          }
          return fixer.replaceText(node2, recommendation);
        }
        context.report({
          node: node2,
          messageId: "implicitCoercion",
          data: { recommendation },
          fix(fixer) {
            if (!shouldFix) {
              return null;
            }
            return fix(fixer);
          },
          suggest: [
            {
              messageId: "useRecommendation",
              data: { recommendation },
              fix(fixer) {
                if (shouldFix || !shouldSuggest) {
                  return null;
                }
                return fix(fixer);
              }
            }
          ]
        });
      }
      return {
        UnaryExpression(node2) {
          let operatorAllowed;
          operatorAllowed = options.allow.includes("!!");
          if (!operatorAllowed && options.boolean && isDoubleLogicalNegating(node2)) {
            const recommendation = `Boolean(${sourceCode2.getText(node2.argument.argument)})`;
            const variable = astUtils2.getVariableByName(
              sourceCode2.getScope(node2),
              "Boolean"
            );
            const booleanExists = variable?.identifiers.length === 0;
            report(node2, recommendation, true, booleanExists);
          }
          operatorAllowed = options.allow.includes("~");
          if (!operatorAllowed && options.boolean && isBinaryNegatingOfIndexOf(node2)) {
            const comparison = node2.argument.type === "ChainExpression" ? ">= 0" : "!== -1";
            const recommendation = `${sourceCode2.getText(node2.argument)} ${comparison}`;
            report(node2, recommendation, false, false);
          }
          operatorAllowed = options.allow.includes("+");
          if (!operatorAllowed && options.number && node2.operator === "+" && !isNumeric(node2.argument)) {
            const recommendation = `Number(${sourceCode2.getText(node2.argument)})`;
            report(node2, recommendation, true, false);
          }
          operatorAllowed = options.allow.includes("- -");
          if (!operatorAllowed && options.number && node2.operator === "-" && node2.argument.type === "UnaryExpression" && node2.argument.operator === "-" && !isNumeric(node2.argument.argument)) {
            const recommendation = `Number(${sourceCode2.getText(node2.argument.argument)})`;
            report(node2, recommendation, true, false);
          }
        },
        // Use `:exit` to prevent double reporting
        "BinaryExpression:exit"(node2) {
          let operatorAllowed;
          operatorAllowed = options.allow.includes("*");
          const nonNumericOperand = !operatorAllowed && options.number && isMultiplyByOne(node2) && !isMultiplyByFractionOfOne(node2, sourceCode2) && getNonNumericOperand(node2);
          if (nonNumericOperand) {
            const recommendation = `Number(${sourceCode2.getText(nonNumericOperand)})`;
            report(node2, recommendation, true, false);
          }
          operatorAllowed = options.allow.includes("-");
          if (!operatorAllowed && options.number && node2.operator === "-" && node2.right.type === "Literal" && node2.right.value === 0 && !isNumeric(node2.left)) {
            const recommendation = `Number(${sourceCode2.getText(node2.left)})`;
            report(node2, recommendation, true, false);
          }
          operatorAllowed = options.allow.includes("+");
          if (!operatorAllowed && options.string && isConcatWithEmptyString(node2)) {
            const recommendation = `String(${sourceCode2.getText(getNonEmptyOperand(node2))})`;
            report(node2, recommendation, true, false);
          }
        },
        AssignmentExpression(node2) {
          const operatorAllowed = options.allow.includes("+");
          if (!operatorAllowed && options.string && isAppendEmptyString(node2)) {
            const code2 = sourceCode2.getText(getNonEmptyOperand(node2));
            const recommendation = `${code2} = String(${code2})`;
            report(node2, recommendation, true, false);
          }
        },
        TemplateLiteral(node2) {
          if (!options.disallowTemplateShorthand) {
            return;
          }
          if (node2.parent.type === "TaggedTemplateExpression") {
            return;
          }
          if (node2.expressions.length !== 1) {
            return;
          }
          if (node2.quasis[0].value.cooked !== "") {
            return;
          }
          if (node2.quasis[1].value.cooked !== "") {
            return;
          }
          if (isStringType(node2.expressions[0])) {
            return;
          }
          const code2 = sourceCode2.getText(node2.expressions[0]);
          const recommendation = `String(${code2})`;
          report(node2, recommendation, true, false);
        }
      };
    }
  };
  return noImplicitCoercion;
}
var noImplicitGlobals;
var hasRequiredNoImplicitGlobals;
function requireNoImplicitGlobals() {
  if (hasRequiredNoImplicitGlobals) return noImplicitGlobals;
  hasRequiredNoImplicitGlobals = 1;
  const ASSIGNMENT_NODES = /* @__PURE__ */ new Set([
    "AssignmentExpression",
    "ForInStatement",
    "ForOfStatement"
  ]);
  noImplicitGlobals = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          lexicalBindings: false
        }
      ],
      docs: {
        description: "Disallow declarations in the global scope",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-implicit-globals"
      },
      schema: [
        {
          type: "object",
          properties: {
            lexicalBindings: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        globalNonLexicalBinding: "Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.",
        globalLexicalBinding: "Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.",
        globalVariableLeak: "Global variable leak, declare the variable if it is intended to be local.",
        assignmentToReadonlyGlobal: "Unexpected assignment to read-only global variable.",
        redeclarationOfReadonlyGlobal: "Unexpected redeclaration of read-only global variable."
      }
    },
    create(context) {
      const [{ lexicalBindings: checkLexicalBindings }] = context.options;
      const sourceCode2 = context.sourceCode;
      function report(node2, messageId, kind) {
        context.report({
          node: node2,
          messageId,
          data: {
            kind
          }
        });
      }
      return {
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          scope.variables.forEach((variable) => {
            const isReadonlyEslintGlobalVariable = variable.writeable === false;
            const isWritableEslintGlobalVariable = variable.writeable === true;
            if (isWritableEslintGlobalVariable) {
              return;
            }
            if (variable.eslintExported) {
              return;
            }
            variable.defs.forEach((def) => {
              const defNode = def.node;
              if (def.type === "FunctionName" || def.type === "Variable" && def.parent.kind === "var") {
                if (isReadonlyEslintGlobalVariable) {
                  report(
                    defNode,
                    "redeclarationOfReadonlyGlobal"
                  );
                } else {
                  report(
                    defNode,
                    "globalNonLexicalBinding",
                    def.type === "FunctionName" ? "function" : `'${def.parent.kind}'`
                  );
                }
              }
              if (checkLexicalBindings) {
                if (def.type === "ClassName" || def.type === "Variable" && (def.parent.kind === "let" || def.parent.kind === "const")) {
                  if (isReadonlyEslintGlobalVariable) {
                    report(
                      defNode,
                      "redeclarationOfReadonlyGlobal"
                    );
                  } else {
                    report(
                      defNode,
                      "globalLexicalBinding",
                      def.type === "ClassName" ? "class" : `'${def.parent.kind}'`
                    );
                  }
                }
              }
            });
            if (isReadonlyEslintGlobalVariable && variable.defs.length === 0) {
              variable.references.forEach((reference) => {
                if (reference.isWrite() && !reference.isRead()) {
                  let assignmentParent = reference.identifier.parent;
                  while (assignmentParent && !ASSIGNMENT_NODES.has(assignmentParent.type)) {
                    assignmentParent = assignmentParent.parent;
                  }
                  report(
                    assignmentParent ?? reference.identifier,
                    "assignmentToReadonlyGlobal"
                  );
                }
              });
            }
          });
          scope.implicit.variables.forEach((variable) => {
            variable.defs.forEach((def) => {
              report(def.node, "globalVariableLeak");
            });
          });
        }
      };
    }
  };
  return noImplicitGlobals;
}
var noImpliedEval;
var hasRequiredNoImpliedEval;
function requireNoImpliedEval() {
  if (hasRequiredNoImpliedEval) return noImpliedEval;
  hasRequiredNoImpliedEval = 1;
  const astUtils2 = requireAstUtils();
  const { getStaticValue } = /* @__PURE__ */ requireEslintUtils();
  noImpliedEval = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow the use of `eval()`-like methods",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-implied-eval"
      },
      schema: [],
      messages: {
        impliedEval: "Implied eval. Consider passing a function instead of a string.",
        execScript: "Implied eval. Do not use execScript()."
      }
    },
    create(context) {
      const GLOBAL_CANDIDATES = Object.freeze([
        "global",
        "window",
        "globalThis"
      ]);
      const EVAL_LIKE_FUNC_PATTERN = /^(?:set(?:Interval|Timeout)|execScript)$/u;
      const sourceCode2 = context.sourceCode;
      function isEvaluatedString(node2) {
        if (node2.type === "Literal" && typeof node2.value === "string" || node2.type === "TemplateLiteral") {
          return true;
        }
        if (node2.type === "BinaryExpression" && node2.operator === "+") {
          return isEvaluatedString(node2.left) || isEvaluatedString(node2.right);
        }
        return false;
      }
      function reportImpliedEvalCallExpression(node2) {
        const [firstArgument] = node2.arguments;
        if (firstArgument) {
          const staticValue = getStaticValue(
            firstArgument,
            sourceCode2.getScope(node2)
          );
          const isStaticString = staticValue && typeof staticValue.value === "string";
          const isString2 = isStaticString || isEvaluatedString(firstArgument);
          if (isString2) {
            const calleeName = node2.callee.type === "Identifier" ? node2.callee.name : astUtils2.getStaticPropertyName(node2.callee);
            const isExecScript = calleeName === "execScript";
            context.report({
              node: node2,
              messageId: isExecScript ? "execScript" : "impliedEval"
            });
          }
        }
      }
      function reportImpliedEvalViaGlobal(globalVar) {
        const { references, name } = globalVar;
        references.forEach((ref2) => {
          const identifier = ref2.identifier;
          let node2 = identifier.parent;
          while (astUtils2.isSpecificMemberAccess(node2, null, name)) {
            node2 = node2.parent;
          }
          if (astUtils2.isSpecificMemberAccess(
            node2,
            null,
            EVAL_LIKE_FUNC_PATTERN
          )) {
            const calleeNode = node2.parent.type === "ChainExpression" ? node2.parent : node2;
            const parent = calleeNode.parent;
            if (parent.type === "CallExpression" && parent.callee === calleeNode) {
              reportImpliedEvalCallExpression(parent);
            }
          }
        });
      }
      return {
        CallExpression(node2) {
          if (astUtils2.isSpecificId(
            node2.callee,
            EVAL_LIKE_FUNC_PATTERN
          ) && sourceCode2.isGlobalReference(node2.callee)) {
            reportImpliedEvalCallExpression(node2);
          }
        },
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          GLOBAL_CANDIDATES.map(
            (candidate) => astUtils2.getVariableByName(globalScope, candidate)
          ).filter(
            (globalVar) => !!globalVar && globalVar.defs.length === 0
          ).forEach(reportImpliedEvalViaGlobal);
        }
      };
    }
  };
  return noImpliedEval;
}
var noImportAssign;
var hasRequiredNoImportAssign;
function requireNoImportAssign() {
  if (hasRequiredNoImportAssign) return noImportAssign;
  hasRequiredNoImportAssign = 1;
  const { findVariable } = /* @__PURE__ */ requireEslintUtils();
  const astUtils2 = requireAstUtils();
  const WellKnownMutationFunctions = {
    Object: /^(?:assign|definePropert(?:y|ies)|freeze|setPrototypeOf)$/u,
    Reflect: /^(?:(?:define|delete)Property|set(?:PrototypeOf)?)$/u
  };
  function isAssignmentLeft(node2) {
    const { parent } = node2;
    return parent.type === "AssignmentExpression" && parent.left === node2 || // Destructuring assignments
    parent.type === "ArrayPattern" || parent.type === "Property" && parent.value === node2 && parent.parent.type === "ObjectPattern" || parent.type === "RestElement" || parent.type === "AssignmentPattern" && parent.left === node2;
  }
  function isOperandOfMutationUnaryOperator(node2) {
    const argumentNode = node2.parent.type === "ChainExpression" ? node2.parent : node2;
    const { parent } = argumentNode;
    return parent.type === "UpdateExpression" && parent.argument === argumentNode || parent.type === "UnaryExpression" && parent.operator === "delete" && parent.argument === argumentNode;
  }
  function isIterationVariable(node2) {
    const { parent } = node2;
    return parent.type === "ForInStatement" && parent.left === node2 || parent.type === "ForOfStatement" && parent.left === node2;
  }
  function isArgumentOfWellKnownMutationFunction(node2, scope) {
    const { parent } = node2;
    if (parent.type !== "CallExpression" || parent.arguments[0] !== node2) {
      return false;
    }
    const callee = astUtils2.skipChainExpression(parent.callee);
    if (!astUtils2.isSpecificMemberAccess(
      callee,
      "Object",
      WellKnownMutationFunctions.Object
    ) && !astUtils2.isSpecificMemberAccess(
      callee,
      "Reflect",
      WellKnownMutationFunctions.Reflect
    )) {
      return false;
    }
    const variable = findVariable(scope, callee.object);
    return variable !== null && variable.scope.type === "global";
  }
  function isMemberWrite(id2, scope) {
    const { parent } = id2;
    return parent.type === "MemberExpression" && parent.object === id2 && (isAssignmentLeft(parent) || isOperandOfMutationUnaryOperator(parent) || isIterationVariable(parent)) || isArgumentOfWellKnownMutationFunction(id2, scope);
  }
  function getWriteNode(id2) {
    let node2 = id2.parent;
    while (node2 && node2.type !== "AssignmentExpression" && node2.type !== "UpdateExpression" && node2.type !== "UnaryExpression" && node2.type !== "CallExpression" && node2.type !== "ForInStatement" && node2.type !== "ForOfStatement") {
      node2 = node2.parent;
    }
    return node2 || id2;
  }
  noImportAssign = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow assigning to imported bindings",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-import-assign"
      },
      schema: [],
      messages: {
        readonly: "'{{name}}' is read-only.",
        readonlyMember: "The members of '{{name}}' are read-only."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        ImportDeclaration(node2) {
          const scope = sourceCode2.getScope(node2);
          for (const variable of sourceCode2.getDeclaredVariables(node2)) {
            const shouldCheckMembers = variable.defs.some(
              (d2) => d2.node.type === "ImportNamespaceSpecifier"
            );
            let prevIdNode = null;
            for (const reference of variable.references) {
              const idNode = reference.identifier;
              if (idNode === prevIdNode) {
                continue;
              }
              prevIdNode = idNode;
              if (reference.isWrite()) {
                context.report({
                  node: getWriteNode(idNode),
                  messageId: "readonly",
                  data: { name: idNode.name }
                });
              } else if (shouldCheckMembers && isMemberWrite(idNode, scope)) {
                context.report({
                  node: getWriteNode(idNode),
                  messageId: "readonlyMember",
                  data: { name: idNode.name }
                });
              }
            }
          }
        }
      };
    }
  };
  return noImportAssign;
}
var noInlineComments;
var hasRequiredNoInlineComments;
function requireNoInlineComments() {
  if (hasRequiredNoInlineComments) return noInlineComments;
  hasRequiredNoInlineComments = 1;
  const astUtils2 = requireAstUtils();
  noInlineComments = {
    meta: {
      type: "suggestion",
      defaultOptions: [{}],
      docs: {
        description: "Disallow inline comments after code",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-inline-comments"
      },
      schema: [
        {
          type: "object",
          properties: {
            ignorePattern: {
              type: "string"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedInlineComment: "Unexpected comment inline with code."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ ignorePattern }] = context.options;
      const customIgnoreRegExp = ignorePattern && new RegExp(ignorePattern, "u");
      function testCodeAroundComment(node2) {
        const startLine = String(sourceCode2.lines[node2.loc.start.line - 1]), endLine = String(sourceCode2.lines[node2.loc.end.line - 1]), preamble = startLine.slice(0, node2.loc.start.column).trim(), postamble = endLine.slice(node2.loc.end.column).trim(), isPreambleEmpty = !preamble, isPostambleEmpty = !postamble;
        if (isPreambleEmpty && isPostambleEmpty) {
          return;
        }
        if (customIgnoreRegExp && customIgnoreRegExp.test(node2.value)) {
          return;
        }
        if ((isPreambleEmpty || preamble === "{") && (isPostambleEmpty || postamble === "}")) {
          const enclosingNode = sourceCode2.getNodeByRangeIndex(
            node2.range[0]
          );
          if (enclosingNode && enclosingNode.type === "JSXEmptyExpression") {
            return;
          }
        }
        if (astUtils2.isDirectiveComment(node2)) {
          return;
        }
        context.report({
          node: node2,
          messageId: "unexpectedInlineComment"
        });
      }
      return {
        Program() {
          sourceCode2.getAllComments().filter((token) => token.type !== "Shebang").forEach(testCodeAroundComment);
        }
      };
    }
  };
  return noInlineComments;
}
var noInnerDeclarations;
var hasRequiredNoInnerDeclarations;
function requireNoInnerDeclarations() {
  if (hasRequiredNoInnerDeclarations) return noInnerDeclarations;
  hasRequiredNoInnerDeclarations = 1;
  const astUtils2 = requireAstUtils();
  const validParent = /* @__PURE__ */ new Set([
    "Program",
    "StaticBlock",
    "ExportNamedDeclaration",
    "ExportDefaultDeclaration"
  ]);
  const validBlockStatementParent = /* @__PURE__ */ new Set([
    "FunctionDeclaration",
    "FunctionExpression",
    "ArrowFunctionExpression"
  ]);
  function getAllowedBodyDescription(node2) {
    let { parent } = node2;
    while (parent) {
      if (parent.type === "StaticBlock") {
        return "class static block body";
      }
      if (astUtils2.isFunction(parent)) {
        return "function body";
      }
      ({ parent } = parent);
    }
    return "program";
  }
  noInnerDeclarations = {
    meta: {
      type: "problem",
      defaultOptions: ["functions", { blockScopedFunctions: "allow" }],
      docs: {
        description: "Disallow variable or `function` declarations in nested blocks",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-inner-declarations"
      },
      schema: [
        {
          enum: ["functions", "both"]
        },
        {
          type: "object",
          properties: {
            blockScopedFunctions: {
              enum: ["allow", "disallow"]
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        moveDeclToRoot: "Move {{type}} declaration to {{body}} root."
      }
    },
    create(context) {
      const both = context.options[0] === "both";
      const { blockScopedFunctions } = context.options[1];
      const sourceCode2 = context.sourceCode;
      const ecmaVersion2 = context.languageOptions.ecmaVersion;
      function check2(node2) {
        const parent = node2.parent;
        if (parent.type === "BlockStatement" && validBlockStatementParent.has(parent.parent.type)) {
          return;
        }
        if (validParent.has(parent.type)) {
          return;
        }
        context.report({
          node: node2,
          messageId: "moveDeclToRoot",
          data: {
            type: node2.type === "FunctionDeclaration" ? "function" : "variable",
            body: getAllowedBodyDescription(node2)
          }
        });
      }
      return {
        FunctionDeclaration(node2) {
          const isInStrictCode = sourceCode2.getScope(node2).upper.isStrict;
          if (blockScopedFunctions === "allow" && ecmaVersion2 >= 2015 && isInStrictCode) {
            return;
          }
          check2(node2);
        },
        VariableDeclaration(node2) {
          if (both && node2.kind === "var") {
            check2(node2);
          }
        }
      };
    }
  };
  return noInnerDeclarations;
}
var noInvalidRegexp;
var hasRequiredNoInvalidRegexp;
function requireNoInvalidRegexp() {
  if (hasRequiredNoInvalidRegexp) return noInvalidRegexp;
  hasRequiredNoInvalidRegexp = 1;
  const RegExpValidator = requireRegexpp().RegExpValidator;
  const validator = new RegExpValidator();
  const validFlags = "dgimsuvy";
  const undefined1 = void 0;
  noInvalidRegexp = {
    meta: {
      type: "problem",
      defaultOptions: [{}],
      docs: {
        description: "Disallow invalid regular expression strings in `RegExp` constructors",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-invalid-regexp"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowConstructorFlags: {
              type: "array",
              items: {
                type: "string"
              }
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        regexMessage: "{{message}}."
      }
    },
    create(context) {
      const [{ allowConstructorFlags }] = context.options;
      let allowedFlags = [];
      if (allowConstructorFlags) {
        const temp = allowConstructorFlags.join("").replace(new RegExp(`[${validFlags}]`, "gu"), "");
        if (temp) {
          allowedFlags = [...new Set(temp)];
        }
      }
      function report(node2, message) {
        context.report({
          node: node2,
          messageId: "regexMessage",
          data: { message }
        });
      }
      function isString2(node2) {
        return node2 && node2.type === "Literal" && typeof node2.value === "string";
      }
      function getFlags(node2) {
        if (node2.arguments.length < 2) {
          return "";
        }
        if (isString2(node2.arguments[1])) {
          return node2.arguments[1].value;
        }
        return null;
      }
      function validateRegExpPattern(pattern2, flags2) {
        try {
          validator.validatePattern(
            pattern2,
            undefined1,
            undefined1,
            flags2
          );
          return null;
        } catch (err) {
          return err.message;
        }
      }
      function validateRegExpFlags(flags2, flagsToCheck, allFlags) {
        const duplicateFlags = [];
        if (typeof flagsToCheck === "string") {
          for (const flag of flagsToCheck) {
            if (allFlags.includes(flag)) {
              duplicateFlags.push(flag);
            }
          }
        }
        if (flags2 && flags2.includes("u") && flags2.includes("v")) {
          return "Regex 'u' and 'v' flags cannot be used together";
        }
        if (duplicateFlags.length > 0) {
          return `Duplicate flags ('${duplicateFlags.join("")}') supplied to RegExp constructor`;
        }
        if (!flagsToCheck) {
          return null;
        }
        return `Invalid flags supplied to RegExp constructor '${flagsToCheck}'`;
      }
      return {
        "CallExpression, NewExpression"(node2) {
          if (node2.callee.type !== "Identifier" || node2.callee.name !== "RegExp") {
            return;
          }
          const flags2 = getFlags(node2);
          let flagsToCheck = flags2;
          const allFlags = allowedFlags.length > 0 ? validFlags.split("").concat(allowedFlags) : validFlags.split("");
          if (flags2) {
            allFlags.forEach((flag) => {
              flagsToCheck = flagsToCheck.replace(flag, "");
            });
          }
          let message = validateRegExpFlags(
            flags2,
            flagsToCheck,
            allFlags
          );
          if (message) {
            report(node2, message);
            return;
          }
          if (!isString2(node2.arguments[0])) {
            return;
          }
          const pattern2 = node2.arguments[0].value;
          message = // If flags are unknown, report the regex only if its pattern is invalid both with and without the "u" flag
          flags2 === null ? validateRegExpPattern(pattern2, {
            unicode: true,
            unicodeSets: false
          }) && validateRegExpPattern(pattern2, {
            unicode: false,
            unicodeSets: true
          }) && validateRegExpPattern(pattern2, {
            unicode: false,
            unicodeSets: false
          }) : validateRegExpPattern(pattern2, {
            unicode: flags2.includes("u"),
            unicodeSets: flags2.includes("v")
          });
          if (message) {
            report(node2, message);
          }
        }
      };
    }
  };
  return noInvalidRegexp;
}
var noInvalidThis;
var hasRequiredNoInvalidThis;
function requireNoInvalidThis() {
  if (hasRequiredNoInvalidThis) return noInvalidThis;
  hasRequiredNoInvalidThis = 1;
  const astUtils2 = requireAstUtils();
  function isCodePathWithLexicalThis(codePath2, node2) {
    return codePath2.origin === "function" && node2.type === "ArrowFunctionExpression";
  }
  noInvalidThis = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "suggestion",
      defaultOptions: [{ capIsConstructor: true }],
      docs: {
        description: "Disallow use of `this` in contexts where the value of `this` is `undefined`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-invalid-this"
      },
      schema: [
        {
          type: "object",
          properties: {
            capIsConstructor: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedThis: "Unexpected 'this'."
      }
    },
    create(context) {
      const [{ capIsConstructor }] = context.options;
      const stack = [], sourceCode2 = context.sourceCode;
      stack.getCurrent = function() {
        const current = this.at(-1);
        if (!current.init) {
          current.init = true;
          current.valid = !astUtils2.isDefaultThisBinding(
            current.node,
            sourceCode2,
            { capIsConstructor }
          );
        }
        return current;
      };
      return {
        onCodePathStart(codePath2, node2) {
          if (isCodePathWithLexicalThis(codePath2, node2)) {
            return;
          }
          if (codePath2.origin === "program") {
            const scope = sourceCode2.getScope(node2);
            const features = context.languageOptions.parserOptions.ecmaFeatures || {};
            stack.push({
              init: true,
              node: node2,
              valid: !(node2.sourceType === "module" || features.globalReturn && scope.childScopes[0].isStrict)
            });
            return;
          }
          stack.push({
            init: !sourceCode2.getScope(node2).isStrict,
            node: node2,
            valid: true
          });
        },
        onCodePathEnd(codePath2, node2) {
          if (isCodePathWithLexicalThis(codePath2, node2)) {
            return;
          }
          stack.pop();
        },
        "AccessorProperty > *.value"(node2) {
          stack.push({
            init: true,
            node: node2,
            valid: true
          });
        },
        "AccessorProperty:exit"() {
          stack.pop();
        },
        // Reports if `this` of the current context is invalid.
        ThisExpression(node2) {
          if (node2.parent.type === "AccessorProperty" && node2.parent.value === node2) {
            return;
          }
          const current = stack.getCurrent();
          if (current && !current.valid) {
            context.report({
              node: node2,
              messageId: "unexpectedThis"
            });
          }
        }
      };
    }
  };
  return noInvalidThis;
}
var noIrregularWhitespace;
var hasRequiredNoIrregularWhitespace;
function requireNoIrregularWhitespace() {
  if (hasRequiredNoIrregularWhitespace) return noIrregularWhitespace;
  hasRequiredNoIrregularWhitespace = 1;
  const astUtils2 = requireAstUtils();
  const ALL_IRREGULARS = /[\f\v\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000\u2028\u2029]/u;
  const IRREGULAR_WHITESPACE = /[\f\v\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000]+/gu;
  const IRREGULAR_LINE_TERMINATORS = /[\u2028\u2029]/gu;
  const LINE_BREAK = astUtils2.createGlobalLinebreakMatcher();
  noIrregularWhitespace = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          skipComments: false,
          skipJSXText: false,
          skipRegExps: false,
          skipStrings: true,
          skipTemplates: false
        }
      ],
      docs: {
        description: "Disallow irregular whitespace",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-irregular-whitespace"
      },
      schema: [
        {
          type: "object",
          properties: {
            skipComments: {
              type: "boolean"
            },
            skipStrings: {
              type: "boolean"
            },
            skipTemplates: {
              type: "boolean"
            },
            skipRegExps: {
              type: "boolean"
            },
            skipJSXText: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        noIrregularWhitespace: "Irregular whitespace not allowed."
      }
    },
    create(context) {
      const [
        {
          skipComments,
          skipStrings,
          skipRegExps,
          skipTemplates,
          skipJSXText
        }
      ] = context.options;
      const sourceCode2 = context.sourceCode;
      const commentNodes = sourceCode2.getAllComments();
      let errors = [];
      function removeWhitespaceError(node2) {
        const locStart = node2.loc.start;
        const locEnd = node2.loc.end;
        errors = errors.filter(
          ({ loc: { start: errorLocStart } }) => errorLocStart.line < locStart.line || errorLocStart.line === locStart.line && errorLocStart.column < locStart.column || errorLocStart.line === locEnd.line && errorLocStart.column >= locEnd.column || errorLocStart.line > locEnd.line
        );
      }
      function removeInvalidNodeErrorsInLiteral(node2) {
        const shouldCheckStrings = skipStrings && typeof node2.value === "string";
        const shouldCheckRegExps = skipRegExps && Boolean(node2.regex);
        if (shouldCheckStrings || shouldCheckRegExps) {
          if (ALL_IRREGULARS.test(node2.raw)) {
            removeWhitespaceError(node2);
          }
        }
      }
      function removeInvalidNodeErrorsInTemplateLiteral(node2) {
        if (typeof node2.value.raw === "string") {
          if (ALL_IRREGULARS.test(node2.value.raw)) {
            removeWhitespaceError(node2);
          }
        }
      }
      function removeInvalidNodeErrorsInComment(node2) {
        if (ALL_IRREGULARS.test(node2.value)) {
          removeWhitespaceError(node2);
        }
      }
      function removeInvalidNodeErrorsInJSXText(node2) {
        if (ALL_IRREGULARS.test(node2.raw)) {
          removeWhitespaceError(node2);
        }
      }
      function checkForIrregularWhitespace(node2) {
        const sourceLines = sourceCode2.lines;
        sourceLines.forEach((sourceLine, lineIndex) => {
          const lineNumber = lineIndex + 1;
          let match;
          while ((match = IRREGULAR_WHITESPACE.exec(sourceLine)) !== null) {
            errors.push({
              node: node2,
              messageId: "noIrregularWhitespace",
              loc: {
                start: {
                  line: lineNumber,
                  column: match.index
                },
                end: {
                  line: lineNumber,
                  column: match.index + match[0].length
                }
              }
            });
          }
        });
      }
      function checkForIrregularLineTerminators(node2) {
        const source = sourceCode2.getText(), sourceLines = sourceCode2.lines, linebreaks = source.match(LINE_BREAK);
        let lastLineIndex = -1, match;
        while ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null) {
          const lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;
          errors.push({
            node: node2,
            messageId: "noIrregularWhitespace",
            loc: {
              start: {
                line: lineIndex + 1,
                column: sourceLines[lineIndex].length
              },
              end: {
                line: lineIndex + 2,
                column: 0
              }
            }
          });
          lastLineIndex = lineIndex;
        }
      }
      function noop2() {
      }
      const nodes = {};
      if (ALL_IRREGULARS.test(sourceCode2.getText())) {
        nodes.Program = function(node2) {
          checkForIrregularWhitespace(node2);
          checkForIrregularLineTerminators(node2);
        };
        nodes.Literal = removeInvalidNodeErrorsInLiteral;
        nodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop2;
        nodes.JSXText = skipJSXText ? removeInvalidNodeErrorsInJSXText : noop2;
        nodes["Program:exit"] = function() {
          if (skipComments) {
            commentNodes.forEach(removeInvalidNodeErrorsInComment);
          }
          errors.forEach((error) => context.report(error));
        };
      } else {
        nodes.Program = noop2;
      }
      return nodes;
    }
  };
  return noIrregularWhitespace;
}
var noIterator;
var hasRequiredNoIterator;
function requireNoIterator() {
  if (hasRequiredNoIterator) return noIterator;
  hasRequiredNoIterator = 1;
  const { getStaticPropertyName } = requireAstUtils();
  noIterator = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow the use of the `__iterator__` property",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-iterator"
      },
      schema: [],
      messages: {
        noIterator: "Reserved name '__iterator__'."
      }
    },
    create(context) {
      return {
        MemberExpression(node2) {
          if (getStaticPropertyName(node2) === "__iterator__") {
            context.report({
              node: node2,
              messageId: "noIterator"
            });
          }
        }
      };
    }
  };
  return noIterator;
}
var noLabelVar;
var hasRequiredNoLabelVar;
function requireNoLabelVar() {
  if (hasRequiredNoLabelVar) return noLabelVar;
  hasRequiredNoLabelVar = 1;
  const astUtils2 = requireAstUtils();
  noLabelVar = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow labels that share a name with a variable",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-label-var"
      },
      schema: [],
      messages: {
        identifierClashWithLabel: "Found identifier with same name as label."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function findIdentifier(scope, name) {
        return astUtils2.getVariableByName(scope, name) !== null;
      }
      return {
        LabeledStatement(node2) {
          const scope = sourceCode2.getScope(node2);
          if (findIdentifier(scope, node2.label.name)) {
            context.report({
              node: node2,
              messageId: "identifierClashWithLabel"
            });
          }
        }
      };
    }
  };
  return noLabelVar;
}
var noLabels;
var hasRequiredNoLabels;
function requireNoLabels() {
  if (hasRequiredNoLabels) return noLabels;
  hasRequiredNoLabels = 1;
  const astUtils2 = requireAstUtils();
  noLabels = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allowLoop: false,
          allowSwitch: false
        }
      ],
      docs: {
        description: "Disallow labeled statements",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-labels"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowLoop: {
              type: "boolean"
            },
            allowSwitch: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedLabel: "Unexpected labeled statement.",
        unexpectedLabelInBreak: "Unexpected label in break statement.",
        unexpectedLabelInContinue: "Unexpected label in continue statement."
      }
    },
    create(context) {
      const [{ allowLoop, allowSwitch }] = context.options;
      let scopeInfo = null;
      function getBodyKind(node2) {
        if (astUtils2.isLoop(node2)) {
          return "loop";
        }
        if (node2.type === "SwitchStatement") {
          return "switch";
        }
        return "other";
      }
      function isAllowed(kind) {
        switch (kind) {
          case "loop":
            return allowLoop;
          case "switch":
            return allowSwitch;
          default:
            return false;
        }
      }
      function getKind(label) {
        let info = scopeInfo;
        while (info) {
          if (info.label === label) {
            return info.kind;
          }
          info = info.upper;
        }
        return "other";
      }
      return {
        LabeledStatement(node2) {
          scopeInfo = {
            label: node2.label.name,
            kind: getBodyKind(node2.body),
            upper: scopeInfo
          };
        },
        "LabeledStatement:exit"(node2) {
          if (!isAllowed(scopeInfo.kind)) {
            context.report({
              node: node2,
              messageId: "unexpectedLabel"
            });
          }
          scopeInfo = scopeInfo.upper;
        },
        BreakStatement(node2) {
          if (node2.label && !isAllowed(getKind(node2.label.name))) {
            context.report({
              node: node2,
              messageId: "unexpectedLabelInBreak"
            });
          }
        },
        ContinueStatement(node2) {
          if (node2.label && !isAllowed(getKind(node2.label.name))) {
            context.report({
              node: node2,
              messageId: "unexpectedLabelInContinue"
            });
          }
        }
      };
    }
  };
  return noLabels;
}
var noLoneBlocks;
var hasRequiredNoLoneBlocks;
function requireNoLoneBlocks() {
  if (hasRequiredNoLoneBlocks) return noLoneBlocks;
  hasRequiredNoLoneBlocks = 1;
  noLoneBlocks = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary nested blocks",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-lone-blocks"
      },
      schema: [],
      messages: {
        redundantBlock: "Block is redundant.",
        redundantNestedBlock: "Nested block is redundant."
      }
    },
    create(context) {
      const loneBlocks = [];
      let ruleDef;
      const sourceCode2 = context.sourceCode;
      function report(node2) {
        const messageId = node2.parent.type === "BlockStatement" || node2.parent.type === "StaticBlock" ? "redundantNestedBlock" : "redundantBlock";
        context.report({
          node: node2,
          messageId
        });
      }
      function isLoneBlock(node2) {
        return node2.parent.type === "BlockStatement" || node2.parent.type === "StaticBlock" || node2.parent.type === "Program" || // Don't report blocks in switch cases if the block is the only statement of the case.
        node2.parent.type === "SwitchCase" && !(node2.parent.consequent[0] === node2 && node2.parent.consequent.length === 1);
      }
      function markLoneBlock(node2) {
        if (loneBlocks.length === 0) {
          return;
        }
        const block = node2.parent;
        if (loneBlocks.at(-1) === block) {
          loneBlocks.pop();
        }
      }
      ruleDef = {
        BlockStatement(node2) {
          if (isLoneBlock(node2)) {
            report(node2);
          }
        }
      };
      if (context.languageOptions.ecmaVersion >= 2015) {
        ruleDef = {
          BlockStatement(node2) {
            if (isLoneBlock(node2)) {
              loneBlocks.push(node2);
            }
          },
          "BlockStatement:exit"(node2) {
            if (loneBlocks.length > 0 && loneBlocks.at(-1) === node2) {
              loneBlocks.pop();
              report(node2);
            } else if ((node2.parent.type === "BlockStatement" || node2.parent.type === "StaticBlock") && node2.parent.body.length === 1) {
              report(node2);
            }
          }
        };
        ruleDef.VariableDeclaration = function(node2) {
          if (node2.kind !== "var") {
            markLoneBlock(node2);
          }
        };
        ruleDef.FunctionDeclaration = function(node2) {
          if (sourceCode2.getScope(node2).isStrict) {
            markLoneBlock(node2);
          }
        };
        ruleDef.ClassDeclaration = markLoneBlock;
      }
      return ruleDef;
    }
  };
  return noLoneBlocks;
}
var noLonelyIf;
var hasRequiredNoLonelyIf;
function requireNoLonelyIf() {
  if (hasRequiredNoLonelyIf) return noLonelyIf;
  hasRequiredNoLonelyIf = 1;
  const astUtils2 = requireAstUtils();
  noLonelyIf = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `if` statements as the only statement in `else` blocks",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-lonely-if"
      },
      schema: [],
      fixable: "code",
      messages: {
        unexpectedLonelyIf: "Unexpected if as the only statement in an else block."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        IfStatement(node2) {
          const parent = node2.parent, grandparent = parent.parent;
          if (parent && parent.type === "BlockStatement" && parent.body.length === 1 && !astUtils2.areBracesNecessary(parent, sourceCode2) && grandparent && grandparent.type === "IfStatement" && parent === grandparent.alternate) {
            context.report({
              node: node2,
              messageId: "unexpectedLonelyIf",
              fix(fixer) {
                const openingElseCurly = sourceCode2.getFirstToken(parent);
                const closingElseCurly = sourceCode2.getLastToken(parent);
                const elseKeyword = sourceCode2.getTokenBefore(openingElseCurly);
                const tokenAfterElseBlock = sourceCode2.getTokenAfter(closingElseCurly);
                const lastIfToken = sourceCode2.getLastToken(
                  node2.consequent
                );
                const sourceText = sourceCode2.getText();
                if (sourceText.slice(
                  openingElseCurly.range[1],
                  node2.range[0]
                ).trim() || sourceText.slice(
                  node2.range[1],
                  closingElseCurly.range[0]
                ).trim()) {
                  return null;
                }
                if (node2.consequent.type !== "BlockStatement" && lastIfToken.value !== ";" && tokenAfterElseBlock && (node2.consequent.loc.end.line === tokenAfterElseBlock.loc.start.line || /^[([/+`-]/u.test(
                  tokenAfterElseBlock.value
                ) || lastIfToken.value === "++" || lastIfToken.value === "--")) {
                  return null;
                }
                return fixer.replaceTextRange(
                  [
                    openingElseCurly.range[0],
                    closingElseCurly.range[1]
                  ],
                  (elseKeyword.range[1] === openingElseCurly.range[0] ? " " : "") + sourceCode2.getText(node2)
                );
              }
            });
          }
        }
      };
    }
  };
  return noLonelyIf;
}
var noLoopFunc;
var hasRequiredNoLoopFunc;
function requireNoLoopFunc() {
  if (hasRequiredNoLoopFunc) return noLoopFunc;
  hasRequiredNoLoopFunc = 1;
  const CONSTANT_BINDINGS = /* @__PURE__ */ new Set(["const", "using", "await using"]);
  function isIIFE(node2) {
    return (node2.type === "FunctionExpression" || node2.type === "ArrowFunctionExpression") && node2.parent && node2.parent.type === "CallExpression" && node2.parent.callee === node2;
  }
  noLoopFunc = {
    meta: {
      type: "suggestion",
      dialects: ["typescript", "javascript"],
      language: "javascript",
      docs: {
        description: "Disallow function declarations that contain unsafe references inside loop statements",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-loop-func"
      },
      schema: [],
      messages: {
        unsafeRefs: "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
      }
    },
    create(context) {
      const SKIPPED_IIFE_NODES = /* @__PURE__ */ new Set();
      const sourceCode2 = context.sourceCode;
      function getContainingLoopNode(node2) {
        for (let currentNode = node2; currentNode.parent; currentNode = currentNode.parent) {
          const parent = currentNode.parent;
          switch (parent.type) {
            case "WhileStatement":
            case "DoWhileStatement":
              return parent;
            case "ForStatement":
              if (parent.init !== currentNode) {
                return parent;
              }
              break;
            case "ForInStatement":
            case "ForOfStatement":
              if (parent.right !== currentNode) {
                return parent;
              }
              break;
            case "ArrowFunctionExpression":
            case "FunctionExpression":
            case "FunctionDeclaration":
              if (SKIPPED_IIFE_NODES.has(parent)) {
                break;
              }
              return null;
          }
        }
        return null;
      }
      function getTopLoopNode(node2, excludedNode) {
        const border = excludedNode ? excludedNode.range[1] : 0;
        let retv = node2;
        let containingLoopNode = node2;
        while (containingLoopNode && containingLoopNode.range[0] >= border) {
          retv = containingLoopNode;
          containingLoopNode = getContainingLoopNode(containingLoopNode);
        }
        return retv;
      }
      function isSafe(loopNode, reference) {
        const variable = reference.resolved;
        const definition = variable && variable.defs[0];
        const declaration = definition && definition.parent;
        const kind = declaration && declaration.type === "VariableDeclaration" ? declaration.kind : "";
        if (CONSTANT_BINDINGS.has(kind)) {
          return true;
        }
        if (kind === "let" && declaration.range[0] > loopNode.range[0] && declaration.range[1] < loopNode.range[1]) {
          return true;
        }
        const border = getTopLoopNode(
          loopNode,
          kind === "let" ? declaration : null
        ).range[0];
        function isSafeReference(upperRef) {
          const id2 = upperRef.identifier;
          return !upperRef.isWrite() || variable.scope.variableScope === upperRef.from.variableScope && id2.range[0] < border;
        }
        return Boolean(variable) && variable.references.every(isSafeReference);
      }
      function checkForLoops(node2) {
        const loopNode = getContainingLoopNode(node2);
        if (!loopNode) {
          return;
        }
        const references = sourceCode2.getScope(node2).through;
        if (!(node2.async || node2.generator)) {
          if (isIIFE(node2)) {
            const isFunctionExpression = node2.type === "FunctionExpression";
            const isFunctionReferenced = isFunctionExpression && node2.id ? references.some(
              (r2) => r2.identifier.name === node2.id.name
            ) : false;
            if (!isFunctionReferenced) {
              SKIPPED_IIFE_NODES.add(node2);
              return;
            }
          }
        }
        const unsafeRefs = [
          ...new Set(
            references.filter((r2) => r2.resolved && !isSafe(loopNode, r2)).map((r2) => r2.identifier.name)
          )
        ];
        if (unsafeRefs.length > 0) {
          context.report({
            node: node2,
            messageId: "unsafeRefs",
            data: { varNames: `'${unsafeRefs.join("', '")}'` }
          });
        }
      }
      return {
        ArrowFunctionExpression: checkForLoops,
        FunctionExpression: checkForLoops,
        FunctionDeclaration: checkForLoops
      };
    }
  };
  return noLoopFunc;
}
var noLossOfPrecision;
var hasRequiredNoLossOfPrecision;
function requireNoLossOfPrecision() {
  if (hasRequiredNoLossOfPrecision) return noLossOfPrecision;
  hasRequiredNoLossOfPrecision = 1;
  noLossOfPrecision = {
    meta: {
      type: "problem",
      dialects: ["typescript", "javascript"],
      language: "javascript",
      docs: {
        description: "Disallow literal numbers that lose precision",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-loss-of-precision"
      },
      schema: [],
      messages: {
        noLossOfPrecision: "This number literal will lose precision at runtime."
      }
    },
    create(context) {
      function isNumber2(node2) {
        return typeof node2.value === "number";
      }
      function getRaw(node2) {
        return node2.raw.replace(/_/gu, "");
      }
      function isBaseTen(node2) {
        const prefixes = ["0x", "0X", "0b", "0B", "0o", "0O"];
        return prefixes.every((prefix) => !node2.raw.startsWith(prefix)) && !/^0[0-7]+$/u.test(node2.raw);
      }
      function notBaseTenLosesPrecision(node2) {
        const rawString = getRaw(node2).toUpperCase();
        let base;
        if (rawString.startsWith("0B")) {
          base = 2;
        } else if (rawString.startsWith("0X")) {
          base = 16;
        } else {
          base = 8;
        }
        return !rawString.endsWith(node2.value.toString(base).toUpperCase());
      }
      function addDecimalPointToNumber(stringNumber) {
        return `${stringNumber[0]}.${stringNumber.slice(1)}`;
      }
      function removeLeadingZeros(numberAsString) {
        for (let i2 = 0; i2 < numberAsString.length; i2++) {
          if (numberAsString[i2] !== "0") {
            return numberAsString.slice(i2);
          }
        }
        return numberAsString;
      }
      function removeTrailingZeros(numberAsString) {
        for (let i2 = numberAsString.length - 1; i2 >= 0; i2--) {
          if (numberAsString[i2] !== "0") {
            return numberAsString.slice(0, i2 + 1);
          }
        }
        return numberAsString;
      }
      function normalizeInteger(stringInteger) {
        const significantDigits = removeTrailingZeros(
          removeLeadingZeros(stringInteger)
        );
        return {
          magnitude: stringInteger.startsWith("0") ? stringInteger.length - 2 : stringInteger.length - 1,
          coefficient: addDecimalPointToNumber(significantDigits)
        };
      }
      function normalizeFloat(stringFloat) {
        const trimmedFloat = removeLeadingZeros(stringFloat);
        if (trimmedFloat.startsWith(".")) {
          const decimalDigits = trimmedFloat.slice(1);
          const significantDigits = removeLeadingZeros(decimalDigits);
          return {
            magnitude: significantDigits.length - decimalDigits.length - 1,
            coefficient: addDecimalPointToNumber(significantDigits)
          };
        }
        return {
          magnitude: trimmedFloat.indexOf(".") - 1,
          coefficient: addDecimalPointToNumber(
            trimmedFloat.replace(".", "")
          )
        };
      }
      function convertNumberToScientificNotation(stringNumber) {
        const splitNumber = stringNumber.replace("E", "e").split("e");
        const originalCoefficient = splitNumber[0];
        const normalizedNumber = stringNumber.includes(".") ? normalizeFloat(originalCoefficient) : normalizeInteger(originalCoefficient);
        const normalizedCoefficient = normalizedNumber.coefficient;
        const magnitude = splitNumber.length > 1 ? parseInt(splitNumber[1], 10) + normalizedNumber.magnitude : normalizedNumber.magnitude;
        return `${normalizedCoefficient}e${magnitude}`;
      }
      function baseTenLosesPrecision(node2) {
        const rawNumber = getRaw(node2).toLowerCase();
        if (rawNumber.includes(".") && rawNumber.includes("e")) {
          const parts = rawNumber.split("e");
          const coefficient = parts[0];
          const exponent = parseInt(parts[1], 10);
          const decimalParts = coefficient.split(".");
          if (decimalParts.length === 2) {
            const decimalPart = decimalParts[1];
            const trailingZeros = decimalPart.match(/0*$/u)[0].length;
            if (trailingZeros === exponent) {
              return false;
            }
          }
        }
        const normalizedRawNumber = convertNumberToScientificNotation(rawNumber);
        const requestedPrecision = normalizedRawNumber.split("e")[0].replace(".", "").length;
        if (requestedPrecision > 100) {
          return true;
        }
        const storedNumber = node2.value.toPrecision(requestedPrecision);
        const normalizedStoredNumber = convertNumberToScientificNotation(storedNumber);
        return normalizedRawNumber !== normalizedStoredNumber;
      }
      function losesPrecision(node2) {
        return isBaseTen(node2) ? baseTenLosesPrecision(node2) : notBaseTenLosesPrecision(node2);
      }
      return {
        Literal(node2) {
          if (node2.value && isNumber2(node2) && losesPrecision(node2)) {
            context.report({
              messageId: "noLossOfPrecision",
              node: node2
            });
          }
        }
      };
    }
  };
  return noLossOfPrecision;
}
var noMagicNumbers;
var hasRequiredNoMagicNumbers;
function requireNoMagicNumbers() {
  if (hasRequiredNoMagicNumbers) return noMagicNumbers;
  hasRequiredNoMagicNumbers = 1;
  const astUtils2 = requireAstUtils();
  const MAX_ARRAY_LENGTH = 2 ** 32 - 1;
  function normalizeIgnoreValue(x2) {
    if (typeof x2 === "string") {
      return BigInt(x2.slice(0, -1));
    }
    return x2;
  }
  function isParentTSEnumDeclaration(node2) {
    return node2.parent.type === "TSEnumMember";
  }
  function isTSNumericLiteralType(node2) {
    let ancestor = node2.parent;
    while (ancestor.parent.type === "TSUnionType") {
      ancestor = ancestor.parent;
    }
    return ancestor.parent.type === "TSTypeAliasDeclaration";
  }
  function isParentTSReadonlyPropertyDefinition(node2) {
    if (node2.parent?.type === "PropertyDefinition" && node2.parent.readonly) {
      return true;
    }
    return false;
  }
  function isAncestorTSIndexedAccessType(node2) {
    let ancestor = node2.parent;
    while (ancestor.parent.type === "TSUnionType" || ancestor.parent.type === "TSIntersectionType") {
      ancestor = ancestor.parent;
    }
    return ancestor.parent.type === "TSIndexedAccessType";
  }
  noMagicNumbers = {
    meta: {
      type: "suggestion",
      dialects: ["typescript", "javascript"],
      language: "javascript",
      docs: {
        description: "Disallow magic numbers",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-magic-numbers"
      },
      schema: [
        {
          type: "object",
          properties: {
            detectObjects: {
              type: "boolean",
              default: false
            },
            enforceConst: {
              type: "boolean",
              default: false
            },
            ignore: {
              type: "array",
              items: {
                anyOf: [
                  { type: "number" },
                  {
                    type: "string",
                    pattern: "^[+-]?(?:0|[1-9][0-9]*)n$"
                  }
                ]
              },
              uniqueItems: true
            },
            ignoreArrayIndexes: {
              type: "boolean",
              default: false
            },
            ignoreDefaultValues: {
              type: "boolean",
              default: false
            },
            ignoreClassFieldInitialValues: {
              type: "boolean",
              default: false
            },
            ignoreEnums: {
              type: "boolean",
              default: false
            },
            ignoreNumericLiteralTypes: {
              type: "boolean",
              default: false
            },
            ignoreReadonlyClassProperties: {
              type: "boolean",
              default: false
            },
            ignoreTypeIndexes: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        useConst: "Number constants declarations must use 'const'.",
        noMagic: "No magic number: {{raw}}."
      }
    },
    create(context) {
      const config2 = context.options[0] || {}, detectObjects = !!config2.detectObjects, enforceConst = !!config2.enforceConst, ignore2 = new Set((config2.ignore || []).map(normalizeIgnoreValue)), ignoreArrayIndexes = !!config2.ignoreArrayIndexes, ignoreDefaultValues = !!config2.ignoreDefaultValues, ignoreClassFieldInitialValues = !!config2.ignoreClassFieldInitialValues, ignoreEnums = !!config2.ignoreEnums, ignoreNumericLiteralTypes = !!config2.ignoreNumericLiteralTypes, ignoreReadonlyClassProperties = !!config2.ignoreReadonlyClassProperties, ignoreTypeIndexes = !!config2.ignoreTypeIndexes;
      const okTypes = detectObjects ? [] : ["ObjectExpression", "Property", "AssignmentExpression"];
      function isIgnoredValue(value) {
        return ignore2.has(value);
      }
      function isDefaultValue(fullNumberNode) {
        const parent = fullNumberNode.parent;
        return parent.type === "AssignmentPattern" && parent.right === fullNumberNode;
      }
      function isClassFieldInitialValue(fullNumberNode) {
        const parent = fullNumberNode.parent;
        return parent.type === "PropertyDefinition" && parent.value === fullNumberNode;
      }
      function isParseIntRadix(fullNumberNode) {
        const parent = fullNumberNode.parent;
        return parent.type === "CallExpression" && fullNumberNode === parent.arguments[1] && (astUtils2.isSpecificId(parent.callee, "parseInt") || astUtils2.isSpecificMemberAccess(
          parent.callee,
          "Number",
          "parseInt"
        ));
      }
      function isJSXNumber(fullNumberNode) {
        return fullNumberNode.parent.type.indexOf("JSX") === 0;
      }
      function isArrayIndex(fullNumberNode, value) {
        const parent = fullNumberNode.parent;
        return parent.type === "MemberExpression" && parent.property === fullNumberNode && (Number.isInteger(value) || typeof value === "bigint") && value >= 0 && value < MAX_ARRAY_LENGTH;
      }
      return {
        Literal(node2) {
          if (!astUtils2.isNumericLiteral(node2)) {
            return;
          }
          let fullNumberNode;
          let value;
          let raw;
          if (node2.parent.type === "UnaryExpression" && ["-", "+"].includes(node2.parent.operator)) {
            fullNumberNode = node2.parent;
            value = node2.parent.operator === "-" ? -node2.value : node2.value;
            raw = `${node2.parent.operator}${node2.raw}`;
          } else {
            fullNumberNode = node2;
            value = node2.value;
            raw = node2.raw;
          }
          const parent = fullNumberNode.parent;
          if (isIgnoredValue(value) || ignoreDefaultValues && isDefaultValue(fullNumberNode) || ignoreClassFieldInitialValues && isClassFieldInitialValue(fullNumberNode) || ignoreEnums && isParentTSEnumDeclaration(fullNumberNode) || ignoreNumericLiteralTypes && isTSNumericLiteralType(fullNumberNode) || ignoreTypeIndexes && isAncestorTSIndexedAccessType(fullNumberNode) || ignoreReadonlyClassProperties && isParentTSReadonlyPropertyDefinition(fullNumberNode) || isParseIntRadix(fullNumberNode) || isJSXNumber(fullNumberNode) || ignoreArrayIndexes && isArrayIndex(fullNumberNode, value)) {
            return;
          }
          if (parent.type === "VariableDeclarator") {
            if (enforceConst && parent.parent.kind !== "const") {
              context.report({
                node: fullNumberNode,
                messageId: "useConst"
              });
            }
          } else if (!okTypes.includes(parent.type) || parent.type === "AssignmentExpression" && parent.left.type === "Identifier") {
            context.report({
              node: fullNumberNode,
              messageId: "noMagic",
              data: {
                raw
              }
            });
          }
        }
      };
    }
  };
  return noMagicNumbers;
}
var isCombiningCharacter;
var hasRequiredIsCombiningCharacter;
function requireIsCombiningCharacter() {
  if (hasRequiredIsCombiningCharacter) return isCombiningCharacter;
  hasRequiredIsCombiningCharacter = 1;
  isCombiningCharacter = function isCombiningCharacter2(codePoint) {
    return /^[\p{Mc}\p{Me}\p{Mn}]$/u.test(String.fromCodePoint(codePoint));
  };
  return isCombiningCharacter;
}
var isEmojiModifier;
var hasRequiredIsEmojiModifier;
function requireIsEmojiModifier() {
  if (hasRequiredIsEmojiModifier) return isEmojiModifier;
  hasRequiredIsEmojiModifier = 1;
  isEmojiModifier = function isEmojiModifier2(code2) {
    return code2 >= 127995 && code2 <= 127999;
  };
  return isEmojiModifier;
}
var isRegionalIndicatorSymbol;
var hasRequiredIsRegionalIndicatorSymbol;
function requireIsRegionalIndicatorSymbol() {
  if (hasRequiredIsRegionalIndicatorSymbol) return isRegionalIndicatorSymbol;
  hasRequiredIsRegionalIndicatorSymbol = 1;
  isRegionalIndicatorSymbol = function isRegionalIndicatorSymbol2(code2) {
    return code2 >= 127462 && code2 <= 127487;
  };
  return isRegionalIndicatorSymbol;
}
var isSurrogatePair;
var hasRequiredIsSurrogatePair;
function requireIsSurrogatePair() {
  if (hasRequiredIsSurrogatePair) return isSurrogatePair;
  hasRequiredIsSurrogatePair = 1;
  isSurrogatePair = function isSurrogatePair2(lead, tail) {
    return lead >= 55296 && lead < 56320 && tail >= 56320 && tail < 57344;
  };
  return isSurrogatePair;
}
var unicode;
var hasRequiredUnicode;
function requireUnicode() {
  if (hasRequiredUnicode) return unicode;
  hasRequiredUnicode = 1;
  const isCombiningCharacter2 = requireIsCombiningCharacter();
  const isEmojiModifier2 = requireIsEmojiModifier();
  const isRegionalIndicatorSymbol2 = requireIsRegionalIndicatorSymbol();
  const isSurrogatePair2 = requireIsSurrogatePair();
  unicode = {
    isCombiningCharacter: isCombiningCharacter2,
    isEmojiModifier: isEmojiModifier2,
    isRegionalIndicatorSymbol: isRegionalIndicatorSymbol2,
    isSurrogatePair: isSurrogatePair2
  };
  return unicode;
}
var regularExpressions;
var hasRequiredRegularExpressions;
function requireRegularExpressions() {
  if (hasRequiredRegularExpressions) return regularExpressions;
  hasRequiredRegularExpressions = 1;
  const { RegExpValidator } = requireRegexpp();
  const REGEXPP_LATEST_ECMA_VERSION = 2025;
  function isValidWithUnicodeFlag(ecmaVersion2, pattern2, flag = "u") {
    if (flag === "u" && ecmaVersion2 <= 5) {
      return false;
    }
    if (flag === "v" && ecmaVersion2 <= 2023) {
      return false;
    }
    const validator = new RegExpValidator({
      ecmaVersion: Math.min(ecmaVersion2, REGEXPP_LATEST_ECMA_VERSION)
    });
    try {
      validator.validatePattern(
        pattern2,
        void 0,
        void 0,
        flag === "u" ? {
          unicode: (
            /* uFlag = */
            true
          )
        } : {
          unicodeSets: true
        }
      );
    } catch {
      return false;
    }
    return true;
  }
  regularExpressions = {
    isValidWithUnicodeFlag,
    REGEXPP_LATEST_ECMA_VERSION
  };
  return regularExpressions;
}
var charSource;
var hasRequiredCharSource;
function requireCharSource() {
  if (hasRequiredCharSource) return charSource;
  hasRequiredCharSource = 1;
  class CodeUnit {
    constructor(start, source) {
      this.start = start;
      this.source = source;
    }
    get end() {
      return this.start + this.length;
    }
    get length() {
      return this.source.length;
    }
  }
  class TextReader {
    constructor(source) {
      this.source = source;
      this.pos = 0;
    }
    /**
     * Advances the reading position of the specified number of characters.
     * @param {number} length Number of characters to advance.
     * @returns {void}
     */
    advance(length) {
      this.pos += length;
    }
    /**
     * Reads characters from the source.
     * @param {number} [offset=0] The offset where reading starts, relative to the current position.
     * @param {number} [length=1] Number of characters to read.
     * @returns {string} A substring of source characters.
     */
    read(offset = 0, length = 1) {
      const start = offset + this.pos;
      return this.source.slice(start, start + length);
    }
  }
  const SIMPLE_ESCAPE_SEQUENCES = {
    __proto__: null,
    b: "\b",
    f: "\f",
    n: "\n",
    r: "\r",
    t: "	",
    v: "\v"
  };
  function readHexSequence(reader, length) {
    const str = reader.read(0, length);
    const charCode = parseInt(str, 16);
    reader.advance(length);
    return String.fromCharCode(charCode);
  }
  function readUnicodeSequence(reader) {
    const regExp = /\{(?<hexDigits>[\dA-F]+)\}/iuy;
    regExp.lastIndex = reader.pos;
    const match = regExp.exec(reader.source);
    if (match) {
      const codePoint = parseInt(match.groups.hexDigits, 16);
      reader.pos = regExp.lastIndex;
      return String.fromCodePoint(codePoint);
    }
    return readHexSequence(reader, 4);
  }
  function readOctalSequence(reader, maxLength) {
    const [octalStr] = reader.read(-1, maxLength).match(/^[0-7]+/u);
    reader.advance(octalStr.length - 1);
    const octal = parseInt(octalStr, 8);
    return String.fromCharCode(octal);
  }
  function readEscapeSequenceOrLineContinuation(reader) {
    const char = reader.read(1);
    reader.advance(2);
    const unitChar = SIMPLE_ESCAPE_SEQUENCES[char];
    if (unitChar) {
      return unitChar;
    }
    switch (char) {
      case "x":
        return readHexSequence(reader, 2);
      case "u":
        return readUnicodeSequence(reader);
      case "\r":
        if (reader.read() === "\n") {
          reader.advance(1);
        }
      // fallthrough
      case "\n":
      case "\u2028":
      case "\u2029":
        return "";
      case "0":
      case "1":
      case "2":
      case "3":
        return readOctalSequence(reader, 3);
      case "4":
      case "5":
      case "6":
      case "7":
        return readOctalSequence(reader, 2);
      default:
        return char;
    }
  }
  function* mapEscapeSequenceOrLineContinuation(reader) {
    const start = reader.pos;
    const str = readEscapeSequenceOrLineContinuation(reader);
    const end = reader.pos;
    const source = reader.source.slice(start, end);
    switch (str.length) {
      case 0:
        break;
      case 1:
        yield new CodeUnit(start, source);
        break;
      default:
        yield new CodeUnit(start, source);
        yield new CodeUnit(start, source);
        break;
    }
  }
  function parseStringLiteral(source) {
    const reader = new TextReader(source);
    const quote = reader.read();
    reader.advance(1);
    const codeUnits = [];
    for (; ; ) {
      const char = reader.read();
      if (char === quote) {
        break;
      }
      if (char === "\\") {
        codeUnits.push(...mapEscapeSequenceOrLineContinuation(reader));
      } else {
        codeUnits.push(new CodeUnit(reader.pos, char));
        reader.advance(1);
      }
    }
    return codeUnits;
  }
  function parseTemplateToken(source) {
    const reader = new TextReader(source);
    reader.advance(1);
    const codeUnits = [];
    for (; ; ) {
      const char = reader.read();
      if (char === "`" || char === "$" && reader.read(1) === "{") {
        break;
      }
      if (char === "\\") {
        codeUnits.push(...mapEscapeSequenceOrLineContinuation(reader));
      } else {
        let unitSource;
        if (char === "\r" && reader.read(1) === "\n") {
          unitSource = "\r\n";
        } else {
          unitSource = char;
        }
        codeUnits.push(new CodeUnit(reader.pos, unitSource));
        reader.advance(unitSource.length);
      }
    }
    return codeUnits;
  }
  charSource = { parseStringLiteral, parseTemplateToken };
  return charSource;
}
var noMisleadingCharacterClass;
var hasRequiredNoMisleadingCharacterClass;
function requireNoMisleadingCharacterClass() {
  if (hasRequiredNoMisleadingCharacterClass) return noMisleadingCharacterClass;
  hasRequiredNoMisleadingCharacterClass = 1;
  const {
    CALL,
    CONSTRUCT,
    ReferenceTracker,
    getStaticValue,
    getStringIfConstant
  } = /* @__PURE__ */ requireEslintUtils();
  const { RegExpParser, visitRegExpAST } = requireRegexpp();
  const {
    isCombiningCharacter: isCombiningCharacter2,
    isEmojiModifier: isEmojiModifier2,
    isRegionalIndicatorSymbol: isRegionalIndicatorSymbol2,
    isSurrogatePair: isSurrogatePair2
  } = requireUnicode();
  const astUtils2 = requireAstUtils();
  const { isValidWithUnicodeFlag } = requireRegularExpressions();
  const {
    parseStringLiteral,
    parseTemplateToken
  } = requireCharSource();
  function* iterateCharacterSequence(nodes) {
    let seq = [];
    for (const node2 of nodes) {
      switch (node2.type) {
        case "Character":
          seq.push(node2);
          break;
        case "CharacterClassRange":
          seq.push(node2.min);
          yield seq;
          seq = [node2.max];
          break;
        case "CharacterSet":
        case "CharacterClass":
        // [[]] nesting character class
        case "ClassStringDisjunction":
        // \q{...}
        case "ExpressionCharacterClass":
          if (seq.length > 0) {
            yield seq;
            seq = [];
          }
          break;
      }
    }
    if (seq.length > 0) {
      yield seq;
    }
  }
  function isUnicodeCodePointEscape(char) {
    return /^\\u\{[\da-f]+\}$/iu.test(char.raw);
  }
  const findCharacterSequences = {
    *surrogatePairWithoutUFlag(chars) {
      for (const [index, char] of chars.entries()) {
        const previous = chars[index - 1];
        if (previous && char && isSurrogatePair2(previous.value, char.value) && !isUnicodeCodePointEscape(previous) && !isUnicodeCodePointEscape(char)) {
          yield [previous, char];
        }
      }
    },
    *surrogatePair(chars) {
      for (const [index, char] of chars.entries()) {
        const previous = chars[index - 1];
        if (previous && char && isSurrogatePair2(previous.value, char.value) && (isUnicodeCodePointEscape(previous) || isUnicodeCodePointEscape(char))) {
          yield [previous, char];
        }
      }
    },
    *combiningClass(chars, unfilteredChars) {
      for (const [index, char] of chars.entries()) {
        const previous = unfilteredChars[index - 1];
        if (previous && char && isCombiningCharacter2(char.value) && !isCombiningCharacter2(previous.value)) {
          yield [previous, char];
        }
      }
    },
    *emojiModifier(chars) {
      for (const [index, char] of chars.entries()) {
        const previous = chars[index - 1];
        if (previous && char && isEmojiModifier2(char.value) && !isEmojiModifier2(previous.value)) {
          yield [previous, char];
        }
      }
    },
    *regionalIndicatorSymbol(chars) {
      for (const [index, char] of chars.entries()) {
        const previous = chars[index - 1];
        if (previous && char && isRegionalIndicatorSymbol2(char.value) && isRegionalIndicatorSymbol2(previous.value)) {
          yield [previous, char];
        }
      }
    },
    *zwj(chars) {
      let sequence = null;
      for (const [index, char] of chars.entries()) {
        const previous = chars[index - 1];
        const next = chars[index + 1];
        if (previous && char && next && char.value === 8205 && previous.value !== 8205 && next.value !== 8205) {
          if (sequence) {
            if (sequence.at(-1) === previous) {
              sequence.push(char, next);
            } else {
              yield sequence;
              sequence = chars.slice(index - 1, index + 2);
            }
          } else {
            sequence = chars.slice(index - 1, index + 2);
          }
        }
      }
      if (sequence) {
        yield sequence;
      }
    }
  };
  const kinds = Object.keys(findCharacterSequences);
  function getStaticValueOrRegex(node2, initialScope) {
    if (!node2) {
      return null;
    }
    if (node2.type === "Literal" && node2.regex) {
      return { regex: node2.regex };
    }
    const staticValue = getStaticValue(node2, initialScope);
    if (staticValue?.value instanceof RegExp) {
      return null;
    }
    return staticValue;
  }
  function checkForAcceptableEscape(char, charSource2) {
    if (!charSource2.startsWith("\\")) {
      return false;
    }
    const match = new RegExp("(?<=^\\\\+).$", "su").exec(charSource2);
    return match?.[0] !== String.fromCodePoint(char.value);
  }
  function checkForAcceptableEscapeInString(char, nodeSource, codeUnits) {
    const firstIndex = char.start;
    const lastIndex = char.end - 1;
    const start = codeUnits[firstIndex].start;
    const end = codeUnits[lastIndex].end;
    const charSource2 = nodeSource.slice(start, end);
    return checkForAcceptableEscape(char, charSource2);
  }
  noMisleadingCharacterClass = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          allowEscape: false
        }
      ],
      docs: {
        description: "Disallow characters which are made with multiple code points in character class syntax",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-misleading-character-class"
      },
      hasSuggestions: true,
      schema: [
        {
          type: "object",
          properties: {
            allowEscape: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        surrogatePairWithoutUFlag: "Unexpected surrogate pair in character class. Use 'u' flag.",
        surrogatePair: "Unexpected surrogate pair in character class.",
        combiningClass: "Unexpected combined character in character class.",
        emojiModifier: "Unexpected modified Emoji in character class.",
        regionalIndicatorSymbol: "Unexpected national flag in character class.",
        zwj: "Unexpected joined character sequence in character class.",
        suggestUnicodeFlag: "Add unicode 'u' flag to regex."
      }
    },
    create(context) {
      const [{ allowEscape }] = context.options;
      const sourceCode2 = context.sourceCode;
      const parser = new RegExpParser();
      const checkedPatternNodes = /* @__PURE__ */ new Set();
      function verify(node2, pattern2, flags2, unicodeFixer) {
        let patternNode;
        try {
          patternNode = parser.parsePattern(pattern2, 0, pattern2.length, {
            unicode: flags2.includes("u"),
            unicodeSets: flags2.includes("v")
          });
        } catch {
          return;
        }
        let codeUnits = null;
        function isAcceptableEscapeSequence(char) {
          if (node2.type === "Literal" && node2.regex) {
            return checkForAcceptableEscape(char, char.raw);
          }
          if (node2.type === "Literal" && typeof node2.value === "string") {
            const nodeSource = node2.raw;
            codeUnits ??= parseStringLiteral(nodeSource);
            return checkForAcceptableEscapeInString(
              char,
              nodeSource,
              codeUnits
            );
          }
          if (astUtils2.isStaticTemplateLiteral(node2)) {
            const nodeSource = sourceCode2.getText(node2);
            codeUnits ??= parseTemplateToken(nodeSource);
            return checkForAcceptableEscapeInString(
              char,
              nodeSource,
              codeUnits
            );
          }
          return false;
        }
        const foundKindMatches = /* @__PURE__ */ new Map();
        visitRegExpAST(patternNode, {
          onCharacterClassEnter(ccNode) {
            for (const unfilteredChars of iterateCharacterSequence(
              ccNode.elements
            )) {
              let chars;
              if (allowEscape) {
                chars = unfilteredChars.map(
                  (char) => isAcceptableEscapeSequence(char) ? null : char
                );
              } else {
                chars = unfilteredChars;
              }
              for (const kind of kinds) {
                const matches = findCharacterSequences[kind](
                  chars,
                  unfilteredChars
                );
                if (foundKindMatches.has(kind)) {
                  foundKindMatches.get(kind).push(...matches);
                } else {
                  foundKindMatches.set(kind, [...matches]);
                }
              }
            }
          }
        });
        function getNodeReportLocations(matches) {
          if (!astUtils2.isStaticTemplateLiteral(node2) && node2.type !== "Literal") {
            return matches.length ? [node2.loc] : [];
          }
          return matches.map((chars) => {
            const firstIndex = chars[0].start;
            const lastIndex = chars.at(-1).end - 1;
            let start;
            let end;
            if (node2.type === "TemplateLiteral") {
              const source = sourceCode2.getText(node2);
              const offset = node2.range[0];
              codeUnits ??= parseTemplateToken(source);
              start = offset + codeUnits[firstIndex].start;
              end = offset + codeUnits[lastIndex].end;
            } else if (typeof node2.value === "string") {
              const source = node2.raw;
              const offset = node2.range[0];
              codeUnits ??= parseStringLiteral(source);
              start = offset + codeUnits[firstIndex].start;
              end = offset + codeUnits[lastIndex].end;
            } else {
              const offset = node2.range[0] + 1;
              start = offset + firstIndex;
              end = offset + lastIndex + 1;
            }
            return {
              start: sourceCode2.getLocFromIndex(start),
              end: sourceCode2.getLocFromIndex(end)
            };
          });
        }
        for (const [kind, matches] of foundKindMatches) {
          let suggest;
          if (kind === "surrogatePairWithoutUFlag") {
            suggest = [
              {
                messageId: "suggestUnicodeFlag",
                fix: unicodeFixer
              }
            ];
          }
          const locs = getNodeReportLocations(matches);
          for (const loc of locs) {
            context.report({
              node: node2,
              loc,
              messageId: kind,
              suggest
            });
          }
        }
      }
      return {
        "Literal[regex]"(node2) {
          if (checkedPatternNodes.has(node2)) {
            return;
          }
          verify(node2, node2.regex.pattern, node2.regex.flags, (fixer) => {
            if (!isValidWithUnicodeFlag(
              context.languageOptions.ecmaVersion,
              node2.regex.pattern
            )) {
              return null;
            }
            return fixer.insertTextAfter(node2, "u");
          });
        },
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          const tracker = new ReferenceTracker(scope);
          for (const { node: refNode } of tracker.iterateGlobalReferences(
            {
              RegExp: { [CALL]: true, [CONSTRUCT]: true }
            }
          )) {
            let pattern2, flags2;
            const [patternNode, flagsNode] = refNode.arguments;
            const evaluatedPattern = getStaticValueOrRegex(
              patternNode,
              scope
            );
            if (!evaluatedPattern) {
              continue;
            }
            if (flagsNode) {
              if (evaluatedPattern.regex) {
                pattern2 = evaluatedPattern.regex.pattern;
                checkedPatternNodes.add(patternNode);
              } else {
                pattern2 = String(evaluatedPattern.value);
              }
              flags2 = getStringIfConstant(flagsNode, scope);
            } else {
              if (evaluatedPattern.regex) {
                continue;
              }
              pattern2 = String(evaluatedPattern.value);
              flags2 = "";
            }
            if (typeof flags2 === "string") {
              verify(patternNode, pattern2, flags2, (fixer) => {
                if (!isValidWithUnicodeFlag(
                  context.languageOptions.ecmaVersion,
                  pattern2
                )) {
                  return null;
                }
                if (refNode.arguments.length === 1) {
                  const penultimateToken = sourceCode2.getLastToken(refNode, {
                    skip: 1
                  });
                  return fixer.insertTextAfter(
                    penultimateToken,
                    astUtils2.isCommaToken(penultimateToken) ? ' "u",' : ', "u"'
                  );
                }
                if (flagsNode.type === "Literal" && typeof flagsNode.value === "string" || flagsNode.type === "TemplateLiteral") {
                  const range = [
                    flagsNode.range[0],
                    flagsNode.range[1] - 1
                  ];
                  return fixer.insertTextAfterRange(range, "u");
                }
                return null;
              });
            }
          }
        }
      };
    }
  };
  return noMisleadingCharacterClass;
}
var noMixedOperators;
var hasRequiredNoMixedOperators;
function requireNoMixedOperators() {
  if (hasRequiredNoMixedOperators) return noMixedOperators;
  hasRequiredNoMixedOperators = 1;
  const astUtils2 = requireAstUtils();
  const ARITHMETIC_OPERATORS = ["+", "-", "*", "/", "%", "**"];
  const BITWISE_OPERATORS = ["&", "|", "^", "~", "<<", ">>", ">>>"];
  const COMPARISON_OPERATORS = ["==", "!=", "===", "!==", ">", ">=", "<", "<="];
  const LOGICAL_OPERATORS = ["&&", "||"];
  const RELATIONAL_OPERATORS = ["in", "instanceof"];
  const TERNARY_OPERATOR = ["?:"];
  const COALESCE_OPERATOR = ["??"];
  const ALL_OPERATORS = [].concat(
    ARITHMETIC_OPERATORS,
    BITWISE_OPERATORS,
    COMPARISON_OPERATORS,
    LOGICAL_OPERATORS,
    RELATIONAL_OPERATORS,
    TERNARY_OPERATOR,
    COALESCE_OPERATOR
  );
  const DEFAULT_GROUPS = [
    ARITHMETIC_OPERATORS,
    BITWISE_OPERATORS,
    COMPARISON_OPERATORS,
    LOGICAL_OPERATORS,
    RELATIONAL_OPERATORS
  ];
  const TARGET_NODE_TYPE = /^(?:Binary|Logical|Conditional)Expression$/u;
  function normalizeOptions(options = {}) {
    const hasGroups = options.groups && options.groups.length > 0;
    const groups = hasGroups ? options.groups : DEFAULT_GROUPS;
    const allowSamePrecedence = options.allowSamePrecedence !== false;
    return {
      groups,
      allowSamePrecedence
    };
  }
  function includesBothInAGroup(groups, left, right) {
    return groups.some((group) => group.includes(left) && group.includes(right));
  }
  function getChildNode(node2) {
    return node2.type === "ConditionalExpression" ? node2.test : node2.left;
  }
  noMixedOperators = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-mixed-operators",
              url: "https://eslint.style/rules/no-mixed-operators"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow mixed binary operators",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-mixed-operators"
      },
      schema: [
        {
          type: "object",
          properties: {
            groups: {
              type: "array",
              items: {
                type: "array",
                items: { enum: ALL_OPERATORS },
                minItems: 2,
                uniqueItems: true
              },
              uniqueItems: true
            },
            allowSamePrecedence: {
              type: "boolean",
              default: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedMixedOperator: "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const options = normalizeOptions(context.options[0]);
      function shouldIgnore(node2) {
        const a2 = node2;
        const b = node2.parent;
        return !includesBothInAGroup(
          options.groups,
          a2.operator,
          b.type === "ConditionalExpression" ? "?:" : b.operator
        ) || options.allowSamePrecedence && astUtils2.getPrecedence(a2) === astUtils2.getPrecedence(b);
      }
      function isMixedWithParent(node2) {
        return node2.operator !== node2.parent.operator && !astUtils2.isParenthesised(sourceCode2, node2);
      }
      function getOperatorToken(node2) {
        return sourceCode2.getTokenAfter(
          getChildNode(node2),
          astUtils2.isNotClosingParenToken
        );
      }
      function reportBothOperators(node2) {
        const parent = node2.parent;
        const left = getChildNode(parent) === node2 ? node2 : parent;
        const right = getChildNode(parent) !== node2 ? node2 : parent;
        const data2 = {
          leftOperator: left.operator || "?:",
          rightOperator: right.operator || "?:"
        };
        context.report({
          node: left,
          loc: getOperatorToken(left).loc,
          messageId: "unexpectedMixedOperator",
          data: data2
        });
        context.report({
          node: right,
          loc: getOperatorToken(right).loc,
          messageId: "unexpectedMixedOperator",
          data: data2
        });
      }
      function check2(node2) {
        if (TARGET_NODE_TYPE.test(node2.parent.type) && isMixedWithParent(node2) && !shouldIgnore(node2)) {
          reportBothOperators(node2);
        }
      }
      return {
        BinaryExpression: check2,
        LogicalExpression: check2
      };
    }
  };
  return noMixedOperators;
}
var noMixedRequires;
var hasRequiredNoMixedRequires;
function requireNoMixedRequires() {
  if (hasRequiredNoMixedRequires) return noMixedRequires;
  hasRequiredNoMixedRequires = 1;
  noMixedRequires = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "no-mixed-requires",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow `require` calls to be mixed with regular variable declarations",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-mixed-requires"
      },
      schema: [
        {
          oneOf: [
            {
              type: "boolean"
            },
            {
              type: "object",
              properties: {
                grouping: {
                  type: "boolean"
                },
                allowCall: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        noMixRequire: "Do not mix 'require' and other declarations.",
        noMixCoreModuleFileComputed: "Do not mix core, module, file and computed requires."
      }
    },
    create(context) {
      const options = context.options[0];
      let grouping = false, allowCall = false;
      if (typeof options === "object") {
        grouping = options.grouping;
        allowCall = options.allowCall;
      } else {
        grouping = !!options;
      }
      function getBuiltinModules() {
        return [
          "assert",
          "buffer",
          "child_process",
          "cluster",
          "crypto",
          "dgram",
          "dns",
          "domain",
          "events",
          "fs",
          "http",
          "https",
          "net",
          "os",
          "path",
          "punycode",
          "querystring",
          "readline",
          "repl",
          "smalloc",
          "stream",
          "string_decoder",
          "tls",
          "tty",
          "url",
          "util",
          "v8",
          "vm",
          "zlib"
        ];
      }
      const BUILTIN_MODULES = getBuiltinModules();
      const DECL_REQUIRE = "require", DECL_UNINITIALIZED = "uninitialized", DECL_OTHER = "other";
      const REQ_CORE = "core", REQ_FILE = "file", REQ_MODULE = "module", REQ_COMPUTED = "computed";
      function getDeclarationType(initExpression) {
        if (!initExpression) {
          return DECL_UNINITIALIZED;
        }
        if (initExpression.type === "CallExpression" && initExpression.callee.type === "Identifier" && initExpression.callee.name === "require") {
          return DECL_REQUIRE;
        }
        if (allowCall && initExpression.type === "CallExpression" && initExpression.callee.type === "CallExpression") {
          return getDeclarationType(initExpression.callee);
        }
        if (initExpression.type === "MemberExpression") {
          return getDeclarationType(initExpression.object);
        }
        return DECL_OTHER;
      }
      function inferModuleType(initExpression) {
        if (initExpression.type === "MemberExpression") {
          return inferModuleType(initExpression.object);
        }
        if (initExpression.arguments.length === 0) {
          return REQ_COMPUTED;
        }
        const arg = initExpression.arguments[0];
        if (arg.type !== "Literal" || typeof arg.value !== "string") {
          return REQ_COMPUTED;
        }
        if (BUILTIN_MODULES.includes(arg.value)) {
          return REQ_CORE;
        }
        if (/^\.{0,2}\//u.test(arg.value)) {
          return REQ_FILE;
        }
        return REQ_MODULE;
      }
      function isMixed(declarations) {
        const contains2 = {};
        declarations.forEach((declaration) => {
          const type2 = getDeclarationType(declaration.init);
          contains2[type2] = true;
        });
        return !!(contains2[DECL_REQUIRE] && (contains2[DECL_UNINITIALIZED] || contains2[DECL_OTHER]));
      }
      function isGrouped(declarations) {
        const found = {};
        declarations.forEach((declaration) => {
          if (getDeclarationType(declaration.init) === DECL_REQUIRE) {
            found[inferModuleType(declaration.init)] = true;
          }
        });
        return Object.keys(found).length <= 1;
      }
      return {
        VariableDeclaration(node2) {
          if (isMixed(node2.declarations)) {
            context.report({
              node: node2,
              messageId: "noMixRequire"
            });
          } else if (grouping && !isGrouped(node2.declarations)) {
            context.report({
              node: node2,
              messageId: "noMixCoreModuleFileComputed"
            });
          }
        }
      };
    }
  };
  return noMixedRequires;
}
var noMixedSpacesAndTabs;
var hasRequiredNoMixedSpacesAndTabs;
function requireNoMixedSpacesAndTabs() {
  if (hasRequiredNoMixedSpacesAndTabs) return noMixedSpacesAndTabs;
  hasRequiredNoMixedSpacesAndTabs = 1;
  noMixedSpacesAndTabs = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-mixed-spaces-and-tabs",
              url: "https://eslint.style/rules/no-mixed-spaces-and-tabs"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Disallow mixed spaces and tabs for indentation",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs"
      },
      schema: [
        {
          enum: ["smart-tabs", true, false]
        }
      ],
      messages: {
        mixedSpacesAndTabs: "Mixed spaces and tabs."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let smartTabs;
      switch (context.options[0]) {
        case true:
        // Support old syntax, maybe add deprecation warning here
        case "smart-tabs":
          smartTabs = true;
          break;
        default:
          smartTabs = false;
      }
      return {
        "Program:exit"(node2) {
          const lines = sourceCode2.lines, comments = sourceCode2.getAllComments(), ignoredCommentLines = /* @__PURE__ */ new Set();
          comments.forEach((comment2) => {
            for (let i2 = comment2.loc.start.line + 1; i2 <= comment2.loc.end.line; i2++) {
              ignoredCommentLines.add(i2);
            }
          });
          let regex = /^(?=( +|\t+))\1(?:\t| )/u;
          if (smartTabs) {
            regex = /^(?=(\t*))\1(?=( +))\2\t/u;
          }
          lines.forEach((line, i2) => {
            const match = regex.exec(line);
            if (match) {
              const lineNumber = i2 + 1;
              const loc = {
                start: {
                  line: lineNumber,
                  column: match[0].length - 2
                },
                end: {
                  line: lineNumber,
                  column: match[0].length
                }
              };
              if (!ignoredCommentLines.has(lineNumber)) {
                const containingNode = sourceCode2.getNodeByRangeIndex(
                  sourceCode2.getIndexFromLoc(loc.start)
                );
                if (!(containingNode && ["Literal", "TemplateElement"].includes(
                  containingNode.type
                ))) {
                  context.report({
                    node: node2,
                    loc,
                    messageId: "mixedSpacesAndTabs"
                  });
                }
              }
            }
          });
        }
      };
    }
  };
  return noMixedSpacesAndTabs;
}
var noMultiAssign;
var hasRequiredNoMultiAssign;
function requireNoMultiAssign() {
  if (hasRequiredNoMultiAssign) return noMultiAssign;
  hasRequiredNoMultiAssign = 1;
  noMultiAssign = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          ignoreNonDeclaration: false
        }
      ],
      docs: {
        description: "Disallow use of chained assignment expressions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-multi-assign"
      },
      schema: [
        {
          type: "object",
          properties: {
            ignoreNonDeclaration: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedChain: "Unexpected chained assignment."
      }
    },
    create(context) {
      const [{ ignoreNonDeclaration }] = context.options;
      const selectors = [
        "VariableDeclarator > AssignmentExpression.init",
        "PropertyDefinition > AssignmentExpression.value"
      ];
      if (!ignoreNonDeclaration) {
        selectors.push("AssignmentExpression > AssignmentExpression.right");
      }
      return {
        [selectors](node2) {
          context.report({
            node: node2,
            messageId: "unexpectedChain"
          });
        }
      };
    }
  };
  return noMultiAssign;
}
var noMultiSpaces;
var hasRequiredNoMultiSpaces;
function requireNoMultiSpaces() {
  if (hasRequiredNoMultiSpaces) return noMultiSpaces;
  hasRequiredNoMultiSpaces = 1;
  const astUtils2 = requireAstUtils();
  noMultiSpaces = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-multi-spaces",
              url: "https://eslint.style/rules/no-multi-spaces"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Disallow multiple spaces",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-multi-spaces"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            exceptions: {
              type: "object",
              patternProperties: {
                "^([A-Z][a-z]*)+$": {
                  type: "boolean"
                }
              },
              additionalProperties: false
            },
            ignoreEOLComments: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        multipleSpaces: "Multiple spaces found before '{{displayValue}}'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const options = context.options[0] || {};
      const ignoreEOLComments = options.ignoreEOLComments;
      const exceptions = Object.assign(
        { Property: true },
        options.exceptions
      );
      const hasExceptions = Object.keys(exceptions).some(
        (key) => exceptions[key]
      );
      function formatReportedCommentValue(token) {
        const valueLines = token.value.split("\n");
        const value = valueLines[0];
        const formattedValue = `${value.slice(0, 12)}...`;
        return valueLines.length === 1 && value.length <= 12 ? value : formattedValue;
      }
      return {
        Program() {
          sourceCode2.tokensAndComments.forEach(
            (leftToken, leftIndex, tokensAndComments) => {
              if (leftIndex === tokensAndComments.length - 1) {
                return;
              }
              const rightToken = tokensAndComments[leftIndex + 1];
              if (!sourceCode2.text.slice(leftToken.range[1], rightToken.range[0]).includes("  ") || leftToken.loc.end.line < rightToken.loc.start.line) {
                return;
              }
              if (ignoreEOLComments && astUtils2.isCommentToken(rightToken) && (leftIndex === tokensAndComments.length - 2 || rightToken.loc.end.line < tokensAndComments[leftIndex + 2].loc.start.line)) {
                return;
              }
              if (hasExceptions) {
                const parentNode = sourceCode2.getNodeByRangeIndex(
                  rightToken.range[0] - 1
                );
                if (parentNode && exceptions[parentNode.type]) {
                  return;
                }
              }
              let displayValue;
              if (rightToken.type === "Block") {
                displayValue = `/*${formatReportedCommentValue(rightToken)}*/`;
              } else if (rightToken.type === "Line") {
                displayValue = `//${formatReportedCommentValue(rightToken)}`;
              } else {
                displayValue = rightToken.value;
              }
              context.report({
                node: rightToken,
                loc: {
                  start: leftToken.loc.end,
                  end: rightToken.loc.start
                },
                messageId: "multipleSpaces",
                data: { displayValue },
                fix: (fixer) => fixer.replaceTextRange(
                  [leftToken.range[1], rightToken.range[0]],
                  " "
                )
              });
            }
          );
        }
      };
    }
  };
  return noMultiSpaces;
}
var noMultiStr;
var hasRequiredNoMultiStr;
function requireNoMultiStr() {
  if (hasRequiredNoMultiStr) return noMultiStr;
  hasRequiredNoMultiStr = 1;
  const astUtils2 = requireAstUtils();
  noMultiStr = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow multiline strings",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-multi-str"
      },
      schema: [],
      messages: {
        multilineString: "Multiline support is limited to browsers supporting ES5 only."
      }
    },
    create(context) {
      function isJSXElement(node2) {
        return node2.type.indexOf("JSX") === 0;
      }
      return {
        Literal(node2) {
          if (astUtils2.LINEBREAK_MATCHER.test(node2.raw) && !isJSXElement(node2.parent)) {
            context.report({
              node: node2,
              messageId: "multilineString"
            });
          }
        }
      };
    }
  };
  return noMultiStr;
}
var noMultipleEmptyLines;
var hasRequiredNoMultipleEmptyLines;
function requireNoMultipleEmptyLines() {
  if (hasRequiredNoMultipleEmptyLines) return noMultipleEmptyLines;
  hasRequiredNoMultipleEmptyLines = 1;
  noMultipleEmptyLines = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-multiple-empty-lines",
              url: "https://eslint.style/rules/no-multiple-empty-lines"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Disallow multiple empty lines",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-multiple-empty-lines"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            max: {
              type: "integer",
              minimum: 0
            },
            maxEOF: {
              type: "integer",
              minimum: 0
            },
            maxBOF: {
              type: "integer",
              minimum: 0
            }
          },
          required: ["max"],
          additionalProperties: false
        }
      ],
      messages: {
        blankBeginningOfFile: "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
        blankEndOfFile: "Too many blank lines at the end of file. Max of {{max}} allowed.",
        consecutiveBlank: "More than {{max}} blank {{pluralizedLines}} not allowed."
      }
    },
    create(context) {
      let max = 2, maxEOF = max, maxBOF = max;
      if (context.options.length) {
        max = context.options[0].max;
        maxEOF = typeof context.options[0].maxEOF !== "undefined" ? context.options[0].maxEOF : max;
        maxBOF = typeof context.options[0].maxBOF !== "undefined" ? context.options[0].maxBOF : max;
      }
      const sourceCode2 = context.sourceCode;
      const allLines = sourceCode2.lines.at(-1) === "" ? sourceCode2.lines.slice(0, -1) : sourceCode2.lines;
      const templateLiteralLines = /* @__PURE__ */ new Set();
      return {
        TemplateLiteral(node2) {
          node2.quasis.forEach((literalPart) => {
            for (let ignoredLine = literalPart.loc.start.line; ignoredLine < literalPart.loc.end.line; ignoredLine++) {
              templateLiteralLines.add(ignoredLine);
            }
          });
        },
        "Program:exit"(node2) {
          return allLines.reduce((nonEmptyLineNumbers, line, index) => {
            if (line.trim() || templateLiteralLines.has(index + 1)) {
              nonEmptyLineNumbers.push(index + 1);
            }
            return nonEmptyLineNumbers;
          }, []).concat(allLines.length + 1).reduce((lastLineNumber, lineNumber) => {
            let messageId, maxAllowed;
            if (lastLineNumber === 0) {
              messageId = "blankBeginningOfFile";
              maxAllowed = maxBOF;
            } else if (lineNumber === allLines.length + 1) {
              messageId = "blankEndOfFile";
              maxAllowed = maxEOF;
            } else {
              messageId = "consecutiveBlank";
              maxAllowed = max;
            }
            if (lineNumber - lastLineNumber - 1 > maxAllowed) {
              context.report({
                node: node2,
                loc: {
                  start: {
                    line: lastLineNumber + maxAllowed + 1,
                    column: 0
                  },
                  end: { line: lineNumber, column: 0 }
                },
                messageId,
                data: {
                  max: maxAllowed,
                  pluralizedLines: maxAllowed === 1 ? "line" : "lines"
                },
                fix(fixer) {
                  const rangeStart = sourceCode2.getIndexFromLoc({
                    line: lastLineNumber + 1,
                    column: 0
                  });
                  const lineNumberAfterRemovedLines = lineNumber - maxAllowed;
                  const rangeEnd = lineNumberAfterRemovedLines <= allLines.length ? sourceCode2.getIndexFromLoc({
                    line: lineNumberAfterRemovedLines,
                    column: 0
                  }) : sourceCode2.text.length;
                  return fixer.removeRange([
                    rangeStart,
                    rangeEnd
                  ]);
                }
              });
            }
            return lineNumber;
          }, 0);
        }
      };
    }
  };
  return noMultipleEmptyLines;
}
var noNativeReassign;
var hasRequiredNoNativeReassign;
function requireNoNativeReassign() {
  if (hasRequiredNoNativeReassign) return noNativeReassign;
  hasRequiredNoNativeReassign = 1;
  noNativeReassign = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow assignments to native objects or read-only global variables",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-native-reassign"
      },
      deprecated: {
        message: "Renamed rule.",
        url: "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        deprecatedSince: "3.3.0",
        availableUntil: null,
        replacedBy: [
          {
            rule: {
              name: "no-global-assign",
              url: "https://eslint.org/docs/rules/no-global-assign"
            }
          }
        ]
      },
      schema: [
        {
          type: "object",
          properties: {
            exceptions: {
              type: "array",
              items: { type: "string" },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        nativeReassign: "Read-only global '{{name}}' should not be modified."
      }
    },
    create(context) {
      const config2 = context.options[0];
      const exceptions = config2 && config2.exceptions || [];
      const sourceCode2 = context.sourceCode;
      function checkReference(reference, index, references) {
        const identifier = reference.identifier;
        if (reference.init === false && reference.isWrite() && /*
        * Destructuring assignments can have multiple default value,
        * so possibly there are multiple writeable references for the same identifier.
        */
        (index === 0 || references[index - 1].identifier !== identifier)) {
          context.report({
            node: identifier,
            messageId: "nativeReassign",
            data: identifier
          });
        }
      }
      function checkVariable(variable) {
        if (variable.writeable === false && !exceptions.includes(variable.name)) {
          variable.references.forEach(checkReference);
        }
      }
      return {
        Program(node2) {
          const globalScope = sourceCode2.getScope(node2);
          globalScope.variables.forEach(checkVariable);
        }
      };
    }
  };
  return noNativeReassign;
}
var noNegatedCondition;
var hasRequiredNoNegatedCondition;
function requireNoNegatedCondition() {
  if (hasRequiredNoNegatedCondition) return noNegatedCondition;
  hasRequiredNoNegatedCondition = 1;
  noNegatedCondition = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow negated conditions",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-negated-condition"
      },
      schema: [],
      messages: {
        unexpectedNegated: "Unexpected negated condition."
      }
    },
    create(context) {
      function hasElseWithoutCondition(node2) {
        return node2.alternate && node2.alternate.type !== "IfStatement";
      }
      function isNegatedUnaryExpression(test) {
        return test.type === "UnaryExpression" && test.operator === "!";
      }
      function isNegatedBinaryExpression(test) {
        return test.type === "BinaryExpression" && (test.operator === "!=" || test.operator === "!==");
      }
      function isNegatedIf(node2) {
        return isNegatedUnaryExpression(node2.test) || isNegatedBinaryExpression(node2.test);
      }
      return {
        IfStatement(node2) {
          if (!hasElseWithoutCondition(node2)) {
            return;
          }
          if (isNegatedIf(node2)) {
            context.report({
              node: node2,
              messageId: "unexpectedNegated"
            });
          }
        },
        ConditionalExpression(node2) {
          if (isNegatedIf(node2)) {
            context.report({
              node: node2,
              messageId: "unexpectedNegated"
            });
          }
        }
      };
    }
  };
  return noNegatedCondition;
}
var noNegatedInLhs;
var hasRequiredNoNegatedInLhs;
function requireNoNegatedInLhs() {
  if (hasRequiredNoNegatedInLhs) return noNegatedInLhs;
  hasRequiredNoNegatedInLhs = 1;
  noNegatedInLhs = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow negating the left operand in `in` expressions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-negated-in-lhs"
      },
      deprecated: {
        message: "Renamed rule.",
        url: "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        deprecatedSince: "3.3.0",
        availableUntil: null,
        replacedBy: [
          {
            rule: {
              name: "no-unsafe-negation",
              url: "https://eslint.org/docs/rules/no-unsafe-negation"
            }
          }
        ]
      },
      schema: [],
      messages: {
        negatedLHS: "The 'in' expression's left operand is negated."
      }
    },
    create(context) {
      return {
        BinaryExpression(node2) {
          if (node2.operator === "in" && node2.left.type === "UnaryExpression" && node2.left.operator === "!") {
            context.report({ node: node2, messageId: "negatedLHS" });
          }
        }
      };
    }
  };
  return noNegatedInLhs;
}
var noNestedTernary;
var hasRequiredNoNestedTernary;
function requireNoNestedTernary() {
  if (hasRequiredNoNestedTernary) return noNestedTernary;
  hasRequiredNoNestedTernary = 1;
  noNestedTernary = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow nested ternary expressions",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-nested-ternary"
      },
      schema: [],
      messages: {
        noNestedTernary: "Do not nest ternary expressions."
      }
    },
    create(context) {
      return {
        ConditionalExpression(node2) {
          if (node2.alternate.type === "ConditionalExpression" || node2.consequent.type === "ConditionalExpression") {
            context.report({
              node: node2,
              messageId: "noNestedTernary"
            });
          }
        }
      };
    }
  };
  return noNestedTernary;
}
var noNew;
var hasRequiredNoNew;
function requireNoNew() {
  if (hasRequiredNoNew) return noNew;
  hasRequiredNoNew = 1;
  noNew = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `new` operators outside of assignments or comparisons",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-new"
      },
      schema: [],
      messages: {
        noNewStatement: "Do not use 'new' for side effects."
      }
    },
    create(context) {
      return {
        "ExpressionStatement > NewExpression"(node2) {
          context.report({
            node: node2.parent,
            messageId: "noNewStatement"
          });
        }
      };
    }
  };
  return noNew;
}
var noNewFunc;
var hasRequiredNoNewFunc;
function requireNoNewFunc() {
  if (hasRequiredNoNewFunc) return noNewFunc;
  hasRequiredNoNewFunc = 1;
  const astUtils2 = requireAstUtils();
  const callMethods = /* @__PURE__ */ new Set(["apply", "bind", "call"]);
  noNewFunc = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `new` operators with the `Function` object",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-new-func"
      },
      schema: [],
      messages: {
        noFunctionConstructor: "The Function constructor is eval."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          const variable = globalScope.set.get("Function");
          if (variable && variable.defs.length === 0) {
            variable.references.forEach((ref2) => {
              const idNode = ref2.identifier;
              const { parent } = idNode;
              let evalNode;
              if (parent) {
                if (idNode === parent.callee && (parent.type === "NewExpression" || parent.type === "CallExpression")) {
                  evalNode = parent;
                } else if (parent.type === "MemberExpression" && idNode === parent.object && callMethods.has(
                  astUtils2.getStaticPropertyName(parent)
                )) {
                  const maybeCallee = parent.parent.type === "ChainExpression" ? parent.parent : parent;
                  if (maybeCallee.parent.type === "CallExpression" && maybeCallee.parent.callee === maybeCallee) {
                    evalNode = maybeCallee.parent;
                  }
                }
              }
              if (evalNode) {
                context.report({
                  node: evalNode,
                  messageId: "noFunctionConstructor"
                });
              }
            });
          }
        }
      };
    }
  };
  return noNewFunc;
}
var noNewNativeNonconstructor;
var hasRequiredNoNewNativeNonconstructor;
function requireNoNewNativeNonconstructor() {
  if (hasRequiredNoNewNativeNonconstructor) return noNewNativeNonconstructor;
  hasRequiredNoNewNativeNonconstructor = 1;
  const nonConstructorGlobalFunctionNames = ["Symbol", "BigInt"];
  noNewNativeNonconstructor = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow `new` operators with global non-constructor functions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
      },
      schema: [],
      messages: {
        noNewNonconstructor: "`{{name}}` cannot be called as a constructor."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          for (const nonConstructorName of nonConstructorGlobalFunctionNames) {
            const variable = globalScope.set.get(nonConstructorName);
            if (variable && variable.defs.length === 0) {
              variable.references.forEach((ref2) => {
                const idNode = ref2.identifier;
                const parent = idNode.parent;
                if (parent && parent.type === "NewExpression" && parent.callee === idNode) {
                  context.report({
                    node: idNode,
                    messageId: "noNewNonconstructor",
                    data: { name: nonConstructorName }
                  });
                }
              });
            }
          }
        }
      };
    }
  };
  return noNewNativeNonconstructor;
}
var noNewObject;
var hasRequiredNoNewObject;
function requireNoNewObject() {
  if (hasRequiredNoNewObject) return noNewObject;
  hasRequiredNoNewObject = 1;
  const astUtils2 = requireAstUtils();
  noNewObject = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `Object` constructors",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-new-object"
      },
      deprecated: {
        message: "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
        url: "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
        deprecatedSince: "8.50.0",
        availableUntil: null,
        replacedBy: [
          {
            rule: {
              name: "no-object-constructor",
              url: "https://eslint.org/docs/rules/no-object-constructor"
            }
          }
        ]
      },
      schema: [],
      messages: {
        preferLiteral: "The object literal notation {} is preferable."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        NewExpression(node2) {
          const variable = astUtils2.getVariableByName(
            sourceCode2.getScope(node2),
            node2.callee.name
          );
          if (variable && variable.identifiers.length > 0) {
            return;
          }
          if (node2.callee.name === "Object") {
            context.report({
              node: node2,
              messageId: "preferLiteral"
            });
          }
        }
      };
    }
  };
  return noNewObject;
}
var noNewRequire;
var hasRequiredNoNewRequire;
function requireNoNewRequire() {
  if (hasRequiredNoNewRequire) return noNewRequire;
  hasRequiredNoNewRequire = 1;
  noNewRequire = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "no-new-require",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow `new` operators with calls to `require`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-new-require"
      },
      schema: [],
      messages: {
        noNewRequire: "Unexpected use of new with require."
      }
    },
    create(context) {
      return {
        NewExpression(node2) {
          if (node2.callee.type === "Identifier" && node2.callee.name === "require") {
            context.report({
              node: node2,
              messageId: "noNewRequire"
            });
          }
        }
      };
    }
  };
  return noNewRequire;
}
var noNewSymbol;
var hasRequiredNoNewSymbol;
function requireNoNewSymbol() {
  if (hasRequiredNoNewSymbol) return noNewSymbol;
  hasRequiredNoNewSymbol = 1;
  noNewSymbol = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow `new` operators with the `Symbol` object",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-new-symbol"
      },
      deprecated: {
        message: "The rule was replaced with a more general rule.",
        url: "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
        deprecatedSince: "9.0.0",
        availableUntil: null,
        replacedBy: [
          {
            rule: {
              name: "no-new-native-nonconstructor",
              url: "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
            }
          }
        ]
      },
      schema: [],
      messages: {
        noNewSymbol: "`Symbol` cannot be called as a constructor."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          const variable = globalScope.set.get("Symbol");
          if (variable && variable.defs.length === 0) {
            variable.references.forEach((ref2) => {
              const idNode = ref2.identifier;
              const parent = idNode.parent;
              if (parent && parent.type === "NewExpression" && parent.callee === idNode) {
                context.report({
                  node: idNode,
                  messageId: "noNewSymbol"
                });
              }
            });
          }
        }
      };
    }
  };
  return noNewSymbol;
}
var noNewWrappers;
var hasRequiredNoNewWrappers;
function requireNoNewWrappers() {
  if (hasRequiredNoNewWrappers) return noNewWrappers;
  hasRequiredNoNewWrappers = 1;
  const { getVariableByName } = requireAstUtils();
  noNewWrappers = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-new-wrappers"
      },
      schema: [],
      messages: {
        noConstructor: "Do not use {{fn}} as a constructor."
      }
    },
    create(context) {
      const { sourceCode: sourceCode2 } = context;
      return {
        NewExpression(node2) {
          const wrapperObjects = ["String", "Number", "Boolean"];
          const { name } = node2.callee;
          if (wrapperObjects.includes(name)) {
            const variable = getVariableByName(
              sourceCode2.getScope(node2),
              name
            );
            if (variable && variable.identifiers.length === 0) {
              context.report({
                node: node2,
                messageId: "noConstructor",
                data: { fn: name }
              });
            }
          }
        }
      };
    }
  };
  return noNewWrappers;
}
var noNonoctalDecimalEscape;
var hasRequiredNoNonoctalDecimalEscape;
function requireNoNonoctalDecimalEscape() {
  if (hasRequiredNoNonoctalDecimalEscape) return noNonoctalDecimalEscape;
  hasRequiredNoNonoctalDecimalEscape = 1;
  const QUICK_TEST_REGEX = /\\[89]/u;
  function getUnicodeEscape(character) {
    return `\\u${character.charCodeAt(0).toString(16).padStart(4, "0")}`;
  }
  noNonoctalDecimalEscape = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `\\8` and `\\9` escape sequences in string literals",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape"
      },
      hasSuggestions: true,
      schema: [],
      messages: {
        decimalEscape: "Don't use '{{decimalEscape}}' escape sequence.",
        // suggestions
        refactor: "Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.",
        escapeBackslash: "Replace '{{original}}' with '{{replacement}}' to include the actual backslash character."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function createSuggestion(messageId, range, replacement) {
        return {
          messageId,
          data: {
            original: sourceCode2.getText().slice(...range),
            replacement
          },
          fix(fixer) {
            return fixer.replaceTextRange(range, replacement);
          }
        };
      }
      return {
        Literal(node2) {
          if (typeof node2.value !== "string") {
            return;
          }
          if (!QUICK_TEST_REGEX.test(node2.raw)) {
            return;
          }
          const regex = /(?:[^\\]|(?<previousEscape>\\.))*?(?<decimalEscape>\\[89])/suy;
          let match;
          while (match = regex.exec(node2.raw)) {
            const { previousEscape, decimalEscape } = match.groups;
            const decimalEscapeRangeEnd = node2.range[0] + match.index + match[0].length;
            const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;
            const decimalEscapeRange = [
              decimalEscapeRangeStart,
              decimalEscapeRangeEnd
            ];
            const suggest = [];
            if (previousEscape === "\\0") {
              suggest.push(
                createSuggestion(
                  // "\0\8" -> "\u00008"
                  "refactor",
                  [
                    decimalEscapeRangeStart - previousEscape.length,
                    decimalEscapeRangeEnd
                  ],
                  `${getUnicodeEscape("\0")}${decimalEscape[1]}`
                ),
                createSuggestion(
                  // "\8" -> "\u0038"
                  "refactor",
                  decimalEscapeRange,
                  getUnicodeEscape(decimalEscape[1])
                )
              );
            } else {
              suggest.push(
                createSuggestion(
                  // "\8" -> "8"
                  "refactor",
                  decimalEscapeRange,
                  decimalEscape[1]
                )
              );
            }
            suggest.push(
              createSuggestion(
                // "\8" -> "\\8"
                "escapeBackslash",
                decimalEscapeRange,
                `\\${decimalEscape}`
              )
            );
            context.report({
              node: node2,
              loc: {
                start: sourceCode2.getLocFromIndex(
                  decimalEscapeRangeStart
                ),
                end: sourceCode2.getLocFromIndex(
                  decimalEscapeRangeEnd
                )
              },
              messageId: "decimalEscape",
              data: {
                decimalEscape
              },
              suggest
            });
          }
        }
      };
    }
  };
  return noNonoctalDecimalEscape;
}
var noObjCalls;
var hasRequiredNoObjCalls;
function requireNoObjCalls() {
  if (hasRequiredNoObjCalls) return noObjCalls;
  hasRequiredNoObjCalls = 1;
  const {
    CALL,
    CONSTRUCT,
    ReferenceTracker
  } = /* @__PURE__ */ requireEslintUtils();
  const getPropertyName = requireAstUtils().getStaticPropertyName;
  const nonCallableGlobals = ["Atomics", "JSON", "Math", "Reflect", "Intl"];
  function getReportNodeName(node2) {
    if (node2.type === "ChainExpression") {
      return getReportNodeName(node2.expression);
    }
    if (node2.type === "MemberExpression") {
      return getPropertyName(node2);
    }
    return node2.name;
  }
  noObjCalls = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow calling global object properties as functions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-obj-calls"
      },
      schema: [],
      messages: {
        unexpectedCall: "'{{name}}' is not a function.",
        unexpectedRefCall: "'{{name}}' is reference to '{{ref}}', which is not a function."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          const tracker = new ReferenceTracker(scope);
          const traceMap = {};
          for (const g2 of nonCallableGlobals) {
            traceMap[g2] = {
              [CALL]: true,
              [CONSTRUCT]: true
            };
          }
          for (const {
            node: refNode,
            path
          } of tracker.iterateGlobalReferences(traceMap)) {
            const name = getReportNodeName(refNode.callee);
            const ref2 = path[0];
            const messageId = name === ref2 ? "unexpectedCall" : "unexpectedRefCall";
            context.report({
              node: refNode,
              messageId,
              data: { name, ref: ref2 }
            });
          }
        }
      };
    }
  };
  return noObjCalls;
}
var noObjectConstructor;
var hasRequiredNoObjectConstructor;
function requireNoObjectConstructor() {
  if (hasRequiredNoObjectConstructor) return noObjectConstructor;
  hasRequiredNoObjectConstructor = 1;
  const {
    getVariableByName,
    isArrowToken,
    isStartOfExpressionStatement,
    needsPrecedingSemicolon
  } = requireAstUtils();
  noObjectConstructor = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow calls to the `Object` constructor without an argument",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-object-constructor"
      },
      hasSuggestions: true,
      schema: [],
      messages: {
        preferLiteral: "The object literal notation {} is preferable.",
        useLiteral: "Replace with '{{replacement}}'.",
        useLiteralAfterSemicolon: "Replace with '{{replacement}}', add preceding semicolon."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function needsParentheses(node2) {
        if (isStartOfExpressionStatement(node2)) {
          return true;
        }
        const prevToken = sourceCode2.getTokenBefore(node2);
        if (prevToken && isArrowToken(prevToken)) {
          return true;
        }
        return false;
      }
      function check2(node2) {
        if (node2.callee.type !== "Identifier" || node2.callee.name !== "Object" || node2.arguments.length) {
          return;
        }
        const variable = getVariableByName(
          sourceCode2.getScope(node2),
          "Object"
        );
        if (variable && variable.identifiers.length === 0) {
          let replacement;
          let fixText;
          let messageId = "useLiteral";
          if (needsParentheses(node2)) {
            replacement = "({})";
            if (needsPrecedingSemicolon(sourceCode2, node2)) {
              fixText = ";({})";
              messageId = "useLiteralAfterSemicolon";
            } else {
              fixText = "({})";
            }
          } else {
            replacement = fixText = "{}";
          }
          context.report({
            node: node2,
            messageId: "preferLiteral",
            suggest: [
              {
                messageId,
                data: { replacement },
                fix: (fixer) => fixer.replaceText(node2, fixText)
              }
            ]
          });
        }
      }
      return {
        CallExpression: check2,
        NewExpression: check2
      };
    }
  };
  return noObjectConstructor;
}
var noOctal;
var hasRequiredNoOctal;
function requireNoOctal() {
  if (hasRequiredNoOctal) return noOctal;
  hasRequiredNoOctal = 1;
  noOctal = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow octal literals",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-octal"
      },
      schema: [],
      messages: {
        noOctal: "Octal literals should not be used."
      }
    },
    create(context) {
      return {
        Literal(node2) {
          if (typeof node2.value === "number" && /^0\d/u.test(node2.raw)) {
            context.report({
              node: node2,
              messageId: "noOctal"
            });
          }
        }
      };
    }
  };
  return noOctal;
}
var noOctalEscape;
var hasRequiredNoOctalEscape;
function requireNoOctalEscape() {
  if (hasRequiredNoOctalEscape) return noOctalEscape;
  hasRequiredNoOctalEscape = 1;
  noOctalEscape = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow octal escape sequences in string literals",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-octal-escape"
      },
      schema: [],
      messages: {
        octalEscapeSequence: "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead."
      }
    },
    create(context) {
      return {
        Literal(node2) {
          if (typeof node2.value !== "string") {
            return;
          }
          const match = node2.raw.match(
            /^(?:[^\\]|\\.)*?\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/su
          );
          if (match) {
            context.report({
              node: node2,
              messageId: "octalEscapeSequence",
              data: { sequence: match[1] }
            });
          }
        }
      };
    }
  };
  return noOctalEscape;
}
var noParamReassign;
var hasRequiredNoParamReassign;
function requireNoParamReassign() {
  if (hasRequiredNoParamReassign) return noParamReassign;
  hasRequiredNoParamReassign = 1;
  const stopNodePattern = /(?:Statement|Declaration|Function(?:Expression)?|Program)$/u;
  noParamReassign = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow reassigning function parameters",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-param-reassign"
      },
      schema: [
        {
          oneOf: [
            {
              type: "object",
              properties: {
                props: {
                  enum: [false]
                }
              },
              additionalProperties: false
            },
            {
              type: "object",
              properties: {
                props: {
                  enum: [true]
                },
                ignorePropertyModificationsFor: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  uniqueItems: true
                },
                ignorePropertyModificationsForRegex: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        assignmentToFunctionParam: "Assignment to function parameter '{{name}}'.",
        assignmentToFunctionParamProp: "Assignment to property of function parameter '{{name}}'."
      }
    },
    create(context) {
      const props = context.options[0] && context.options[0].props;
      const ignoredPropertyAssignmentsFor = context.options[0] && context.options[0].ignorePropertyModificationsFor || [];
      const ignoredPropertyAssignmentsForRegex = context.options[0] && context.options[0].ignorePropertyModificationsForRegex || [];
      const sourceCode2 = context.sourceCode;
      function isModifyingProp(reference) {
        let node2 = reference.identifier;
        let parent = node2.parent;
        while (parent && (!stopNodePattern.test(parent.type) || parent.type === "ForInStatement" || parent.type === "ForOfStatement")) {
          switch (parent.type) {
            // e.g. foo.a = 0;
            case "AssignmentExpression":
              return parent.left === node2;
            // e.g. ++foo.a;
            case "UpdateExpression":
              return true;
            // e.g. delete foo.a;
            case "UnaryExpression":
              if (parent.operator === "delete") {
                return true;
              }
              break;
            // e.g. for (foo.a in b) {}
            case "ForInStatement":
            case "ForOfStatement":
              if (parent.left === node2) {
                return true;
              }
              return false;
            // EXCLUDES: e.g. cache.get(foo.a).b = 0;
            case "CallExpression":
              if (parent.callee !== node2) {
                return false;
              }
              break;
            // EXCLUDES: e.g. cache[foo.a] = 0;
            case "MemberExpression":
              if (parent.property === node2) {
                return false;
              }
              break;
            // EXCLUDES: e.g. ({ [foo]: a }) = bar;
            case "Property":
              if (parent.key === node2) {
                return false;
              }
              break;
            // EXCLUDES: e.g. (foo ? a : b).c = bar;
            case "ConditionalExpression":
              if (parent.test === node2) {
                return false;
              }
              break;
          }
          node2 = parent;
          parent = node2.parent;
        }
        return false;
      }
      function isIgnoredPropertyAssignment(identifierName) {
        return ignoredPropertyAssignmentsFor.includes(identifierName) || ignoredPropertyAssignmentsForRegex.some(
          (ignored) => new RegExp(ignored, "u").test(identifierName)
        );
      }
      function checkReference(reference, index, references) {
        const identifier = reference.identifier;
        if (identifier && !reference.init && /*
        * Destructuring assignments can have multiple default value,
        * so possibly there are multiple writeable references for the same identifier.
        */
        (index === 0 || references[index - 1].identifier !== identifier)) {
          if (reference.isWrite()) {
            context.report({
              node: identifier,
              messageId: "assignmentToFunctionParam",
              data: { name: identifier.name }
            });
          } else if (props && isModifyingProp(reference) && !isIgnoredPropertyAssignment(identifier.name)) {
            context.report({
              node: identifier,
              messageId: "assignmentToFunctionParamProp",
              data: { name: identifier.name }
            });
          }
        }
      }
      function checkVariable(variable) {
        if (variable.defs[0].type === "Parameter") {
          variable.references.forEach(checkReference);
        }
      }
      function checkForFunction(node2) {
        sourceCode2.getDeclaredVariables(node2).forEach(checkVariable);
      }
      return {
        // `:exit` is needed for the `node.parent` property of identifier nodes.
        "FunctionDeclaration:exit": checkForFunction,
        "FunctionExpression:exit": checkForFunction,
        "ArrowFunctionExpression:exit": checkForFunction
      };
    }
  };
  return noParamReassign;
}
var noPathConcat;
var hasRequiredNoPathConcat;
function requireNoPathConcat() {
  if (hasRequiredNoPathConcat) return noPathConcat;
  hasRequiredNoPathConcat = 1;
  noPathConcat = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "no-path-concat",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow string concatenation with `__dirname` and `__filename`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-path-concat"
      },
      schema: [],
      messages: {
        usePathFunctions: "Use path.join() or path.resolve() instead of + to create paths."
      }
    },
    create(context) {
      const MATCHER = /^__(?:dir|file)name$/u;
      return {
        BinaryExpression(node2) {
          const left = node2.left, right = node2.right;
          if (node2.operator === "+" && (left.type === "Identifier" && MATCHER.test(left.name) || right.type === "Identifier" && MATCHER.test(right.name))) {
            context.report({
              node: node2,
              messageId: "usePathFunctions"
            });
          }
        }
      };
    }
  };
  return noPathConcat;
}
var noPlusplus;
var hasRequiredNoPlusplus;
function requireNoPlusplus() {
  if (hasRequiredNoPlusplus) return noPlusplus;
  hasRequiredNoPlusplus = 1;
  function isForStatementUpdate(node2) {
    const parent = node2.parent;
    return parent.type === "ForStatement" && parent.update === node2;
  }
  function isForLoopAfterthought(node2) {
    const parent = node2.parent;
    if (parent.type === "SequenceExpression") {
      return isForLoopAfterthought(parent);
    }
    return isForStatementUpdate(node2);
  }
  noPlusplus = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allowForLoopAfterthoughts: false
        }
      ],
      docs: {
        description: "Disallow the unary operators `++` and `--`",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-plusplus"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowForLoopAfterthoughts: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedUnaryOp: "Unary operator '{{operator}}' used."
      }
    },
    create(context) {
      const [{ allowForLoopAfterthoughts }] = context.options;
      return {
        UpdateExpression(node2) {
          if (allowForLoopAfterthoughts && isForLoopAfterthought(node2)) {
            return;
          }
          context.report({
            node: node2,
            messageId: "unexpectedUnaryOp",
            data: {
              operator: node2.operator
            }
          });
        }
      };
    }
  };
  return noPlusplus;
}
var noProcessEnv;
var hasRequiredNoProcessEnv;
function requireNoProcessEnv() {
  if (hasRequiredNoProcessEnv) return noProcessEnv;
  hasRequiredNoProcessEnv = 1;
  noProcessEnv = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "no-process-env",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow the use of `process.env`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-process-env"
      },
      schema: [],
      messages: {
        unexpectedProcessEnv: "Unexpected use of process.env."
      }
    },
    create(context) {
      return {
        MemberExpression(node2) {
          const objectName = node2.object.name, propertyName = node2.property.name;
          if (objectName === "process" && !node2.computed && propertyName && propertyName === "env") {
            context.report({ node: node2, messageId: "unexpectedProcessEnv" });
          }
        }
      };
    }
  };
  return noProcessEnv;
}
var noProcessExit;
var hasRequiredNoProcessExit;
function requireNoProcessExit() {
  if (hasRequiredNoProcessExit) return noProcessExit;
  hasRequiredNoProcessExit = 1;
  noProcessExit = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "no-process-exit",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow the use of `process.exit()`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-process-exit"
      },
      schema: [],
      messages: {
        noProcessExit: "Don't use process.exit(); throw an error instead."
      }
    },
    create(context) {
      return {
        "CallExpression > MemberExpression.callee[object.name = 'process'][property.name = 'exit']"(node2) {
          context.report({
            node: node2.parent,
            messageId: "noProcessExit"
          });
        }
      };
    }
  };
  return noProcessExit;
}
var noPromiseExecutorReturn;
var hasRequiredNoPromiseExecutorReturn;
function requireNoPromiseExecutorReturn() {
  if (hasRequiredNoPromiseExecutorReturn) return noPromiseExecutorReturn;
  hasRequiredNoPromiseExecutorReturn = 1;
  const astUtils2 = requireAstUtils();
  const functionTypesToCheck = /* @__PURE__ */ new Set([
    "ArrowFunctionExpression",
    "FunctionExpression"
  ]);
  function isPromiseExecutor(node2, sourceCode2) {
    const parent = node2.parent;
    return parent.type === "NewExpression" && parent.arguments[0] === node2 && parent.callee.type === "Identifier" && parent.callee.name === "Promise" && sourceCode2.isGlobalReference(parent.callee);
  }
  function expressionIsVoid(node2) {
    return node2.type === "UnaryExpression" && node2.operator === "void";
  }
  function voidPrependFixer(sourceCode2, node2, fixer) {
    const requiresParens = (
      // prepending `void ` will fail if the node has a lower precedence than void
      astUtils2.getPrecedence(node2) < astUtils2.getPrecedence({
        type: "UnaryExpression",
        operator: "void"
      }) && // check if there are parentheses around the node to avoid redundant parentheses
      !astUtils2.isParenthesised(sourceCode2, node2)
    );
    const returnOrArrowToken = sourceCode2.getTokenBefore(
      node2,
      node2.parent.type === "ArrowFunctionExpression" ? astUtils2.isArrowToken : (
        // isReturnToken
        ((token) => token.type === "Keyword" && token.value === "return")
      )
    );
    const firstToken = sourceCode2.getTokenAfter(returnOrArrowToken);
    const prependSpace = (
      // is return token, as => allows void to be adjacent
      returnOrArrowToken.value === "return" && // If two tokens (return and "(") are adjacent
      returnOrArrowToken.range[1] === firstToken.range[0]
    );
    return [
      fixer.insertTextBefore(
        firstToken,
        `${prependSpace ? " " : ""}void ${requiresParens ? "(" : ""}`
      ),
      fixer.insertTextAfter(node2, requiresParens ? ")" : "")
    ];
  }
  function curlyWrapFixer(sourceCode2, node2, fixer) {
    const arrowToken = sourceCode2.getTokenBefore(
      node2.body,
      astUtils2.isArrowToken
    );
    const firstToken = sourceCode2.getTokenAfter(arrowToken);
    const lastToken = sourceCode2.getLastToken(node2);
    return [
      fixer.insertTextBefore(firstToken, "{"),
      fixer.insertTextAfter(lastToken, "}")
    ];
  }
  noPromiseExecutorReturn = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          allowVoid: false
        }
      ],
      docs: {
        description: "Disallow returning values from Promise executor functions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-promise-executor-return"
      },
      hasSuggestions: true,
      schema: [
        {
          type: "object",
          properties: {
            allowVoid: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        returnsValue: "Return values from promise executor functions cannot be read.",
        // arrow and function suggestions
        prependVoid: "Prepend `void` to the expression.",
        // only arrow suggestions
        wrapBraces: "Wrap the expression in `{}`."
      }
    },
    create(context) {
      let funcInfo = null;
      const sourceCode2 = context.sourceCode;
      const [{ allowVoid }] = context.options;
      return {
        onCodePathStart(_, node2) {
          funcInfo = {
            upper: funcInfo,
            shouldCheck: functionTypesToCheck.has(node2.type) && isPromiseExecutor(node2, sourceCode2)
          };
          if (
            // Is a Promise executor
            funcInfo.shouldCheck && node2.type === "ArrowFunctionExpression" && node2.expression && // Except void
            !(allowVoid && expressionIsVoid(node2.body))
          ) {
            const suggest = [];
            if (allowVoid) {
              suggest.push({
                messageId: "prependVoid",
                fix(fixer) {
                  return voidPrependFixer(
                    sourceCode2,
                    node2.body,
                    fixer
                  );
                }
              });
            }
            if (!(node2.body.type === "FunctionExpression" && !node2.body.id)) {
              suggest.push({
                messageId: "wrapBraces",
                fix(fixer) {
                  return curlyWrapFixer(sourceCode2, node2, fixer);
                }
              });
            }
            context.report({
              node: node2.body,
              messageId: "returnsValue",
              suggest
            });
          }
        },
        onCodePathEnd() {
          funcInfo = funcInfo.upper;
        },
        ReturnStatement(node2) {
          if (!(funcInfo.shouldCheck && node2.argument)) {
            return;
          }
          if (!allowVoid) {
            context.report({ node: node2, messageId: "returnsValue" });
            return;
          }
          if (expressionIsVoid(node2.argument)) {
            return;
          }
          context.report({
            node: node2,
            messageId: "returnsValue",
            suggest: [
              {
                messageId: "prependVoid",
                fix(fixer) {
                  return voidPrependFixer(
                    sourceCode2,
                    node2.argument,
                    fixer
                  );
                }
              }
            ]
          });
        }
      };
    }
  };
  return noPromiseExecutorReturn;
}
var noProto;
var hasRequiredNoProto;
function requireNoProto() {
  if (hasRequiredNoProto) return noProto;
  hasRequiredNoProto = 1;
  const { getStaticPropertyName } = requireAstUtils();
  noProto = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow the use of the `__proto__` property",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-proto"
      },
      schema: [],
      messages: {
        unexpectedProto: "The '__proto__' property is deprecated."
      }
    },
    create(context) {
      return {
        MemberExpression(node2) {
          if (getStaticPropertyName(node2) === "__proto__") {
            context.report({ node: node2, messageId: "unexpectedProto" });
          }
        }
      };
    }
  };
  return noProto;
}
var noPrototypeBuiltins;
var hasRequiredNoPrototypeBuiltins;
function requireNoPrototypeBuiltins() {
  if (hasRequiredNoPrototypeBuiltins) return noPrototypeBuiltins;
  hasRequiredNoPrototypeBuiltins = 1;
  const astUtils2 = requireAstUtils();
  function isAfterOptional(node2) {
    let leftNode;
    if (node2.type === "MemberExpression") {
      leftNode = node2.object;
    } else if (node2.type === "CallExpression") {
      leftNode = node2.callee;
    } else {
      return false;
    }
    if (node2.optional) {
      return true;
    }
    return isAfterOptional(leftNode);
  }
  noPrototypeBuiltins = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow calling some `Object.prototype` methods directly on objects",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-prototype-builtins"
      },
      hasSuggestions: true,
      schema: [],
      messages: {
        prototypeBuildIn: "Do not access Object.prototype method '{{prop}}' from target object.",
        callObjectPrototype: "Call Object.prototype.{{prop}} explicitly."
      }
    },
    create(context) {
      const DISALLOWED_PROPS = /* @__PURE__ */ new Set([
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable"
      ]);
      function disallowBuiltIns(node2) {
        const callee = astUtils2.skipChainExpression(node2.callee);
        if (callee.type !== "MemberExpression") {
          return;
        }
        const propName = astUtils2.getStaticPropertyName(callee);
        if (propName !== null && DISALLOWED_PROPS.has(propName)) {
          context.report({
            messageId: "prototypeBuildIn",
            loc: callee.property.loc,
            data: { prop: propName },
            node: node2,
            suggest: [
              {
                messageId: "callObjectPrototype",
                data: { prop: propName },
                fix(fixer) {
                  const sourceCode2 = context.sourceCode;
                  if (isAfterOptional(node2)) {
                    return null;
                  }
                  if (node2.callee.type === "ChainExpression") {
                    return null;
                  }
                  const objectVariable = astUtils2.getVariableByName(
                    sourceCode2.getScope(node2),
                    "Object"
                  );
                  if (!objectVariable || objectVariable.scope.type !== "global" || objectVariable.defs.length > 0) {
                    return null;
                  }
                  let objectText = sourceCode2.getText(
                    callee.object
                  );
                  if (astUtils2.getPrecedence(callee.object) <= astUtils2.getPrecedence({
                    type: "SequenceExpression"
                  })) {
                    objectText = `(${objectText})`;
                  }
                  const openParenToken = sourceCode2.getTokenAfter(
                    node2.callee,
                    astUtils2.isOpeningParenToken
                  );
                  const isEmptyParameters = node2.arguments.length === 0;
                  const delim = isEmptyParameters ? "" : ", ";
                  const fixes = [
                    fixer.replaceText(
                      callee,
                      `Object.prototype.${propName}.call`
                    ),
                    fixer.insertTextAfter(
                      openParenToken,
                      objectText + delim
                    )
                  ];
                  return fixes;
                }
              }
            ]
          });
        }
      }
      return {
        CallExpression: disallowBuiltIns
      };
    }
  };
  return noPrototypeBuiltins;
}
var noRedeclare;
var hasRequiredNoRedeclare;
function requireNoRedeclare() {
  if (hasRequiredNoRedeclare) return noRedeclare;
  hasRequiredNoRedeclare = 1;
  const astUtils2 = requireAstUtils();
  noRedeclare = {
    meta: {
      type: "suggestion",
      defaultOptions: [{ builtinGlobals: true }],
      docs: {
        description: "Disallow variable redeclaration",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-redeclare"
      },
      messages: {
        redeclared: "'{{id}}' is already defined.",
        redeclaredAsBuiltin: "'{{id}}' is already defined as a built-in global variable.",
        redeclaredBySyntax: "'{{id}}' is already defined by a variable declaration."
      },
      schema: [
        {
          type: "object",
          properties: {
            builtinGlobals: { type: "boolean" }
          },
          additionalProperties: false
        }
      ]
    },
    create(context) {
      const [{ builtinGlobals }] = context.options;
      const sourceCode2 = context.sourceCode;
      function* iterateDeclarations(variable) {
        if (builtinGlobals && (variable.eslintImplicitGlobalSetting === "readonly" || variable.eslintImplicitGlobalSetting === "writable")) {
          yield { type: "builtin" };
        }
        for (const id2 of variable.identifiers) {
          yield { type: "syntax", node: id2, loc: id2.loc };
        }
        if (variable.eslintExplicitGlobalComments) {
          for (const comment2 of variable.eslintExplicitGlobalComments) {
            yield {
              type: "comment",
              node: comment2,
              loc: astUtils2.getNameLocationInGlobalDirectiveComment(
                sourceCode2,
                comment2,
                variable.name
              )
            };
          }
        }
      }
      function findVariablesInScope(scope) {
        for (const variable of scope.variables) {
          const [declaration, ...extraDeclarations] = iterateDeclarations(variable);
          if (extraDeclarations.length === 0) {
            continue;
          }
          const detailMessageId = declaration.type === "builtin" ? "redeclaredAsBuiltin" : "redeclaredBySyntax";
          const data2 = { id: variable.name };
          for (const { type: type2, node: node2, loc } of extraDeclarations) {
            const messageId = type2 === declaration.type ? "redeclared" : detailMessageId;
            context.report({ node: node2, loc, messageId, data: data2 });
          }
        }
      }
      function checkForBlock(node2) {
        const scope = sourceCode2.getScope(node2);
        if (scope.block === node2) {
          findVariablesInScope(scope);
        }
      }
      return {
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          findVariablesInScope(scope);
          if (scope.type === "global" && scope.childScopes[0] && // The special scope's block is the Program node.
          scope.block === scope.childScopes[0].block) {
            findVariablesInScope(scope.childScopes[0]);
          }
        },
        FunctionDeclaration: checkForBlock,
        FunctionExpression: checkForBlock,
        ArrowFunctionExpression: checkForBlock,
        StaticBlock: checkForBlock,
        BlockStatement: checkForBlock,
        ForStatement: checkForBlock,
        ForInStatement: checkForBlock,
        ForOfStatement: checkForBlock,
        SwitchStatement: checkForBlock
      };
    }
  };
  return noRedeclare;
}
var noRegexSpaces;
var hasRequiredNoRegexSpaces;
function requireNoRegexSpaces() {
  if (hasRequiredNoRegexSpaces) return noRegexSpaces;
  hasRequiredNoRegexSpaces = 1;
  const astUtils2 = requireAstUtils();
  const regexpp2 = requireRegexpp();
  const regExpParser = new regexpp2.RegExpParser();
  const DOUBLE_SPACE = / {2}/u;
  function isString2(node2) {
    return node2 && node2.type === "Literal" && typeof node2.value === "string";
  }
  noRegexSpaces = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow multiple spaces in regular expressions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-regex-spaces"
      },
      schema: [],
      fixable: "code",
      messages: {
        multipleSpaces: "Spaces are hard to count. Use {{{length}}}."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function checkRegex(nodeToReport, pattern2, rawPattern, rawPatternStartRange, flags2) {
        if (!DOUBLE_SPACE.test(rawPattern)) {
          return;
        }
        const characterClassNodes = [];
        let regExpAST;
        try {
          regExpAST = regExpParser.parsePattern(
            pattern2,
            0,
            pattern2.length,
            {
              unicode: flags2.includes("u"),
              unicodeSets: flags2.includes("v")
            }
          );
        } catch {
          return;
        }
        regexpp2.visitRegExpAST(regExpAST, {
          onCharacterClassEnter(ccNode) {
            characterClassNodes.push(ccNode);
          }
        });
        const spacesPattern = /( {2,})(?: [+*{?]|[^+*{?]|$)/gu;
        let match;
        while (match = spacesPattern.exec(pattern2)) {
          const {
            1: { length },
            index
          } = match;
          if (characterClassNodes.every(
            ({ start, end }) => index < start || end <= index
          )) {
            context.report({
              node: nodeToReport,
              messageId: "multipleSpaces",
              data: { length },
              fix(fixer) {
                if (pattern2 !== rawPattern) {
                  return null;
                }
                return fixer.replaceTextRange(
                  [
                    rawPatternStartRange + index,
                    rawPatternStartRange + index + length
                  ],
                  ` {${length}}`
                );
              }
            });
            return;
          }
        }
      }
      function checkLiteral(node2) {
        if (node2.regex) {
          const pattern2 = node2.regex.pattern;
          const rawPattern = node2.raw.slice(1, node2.raw.lastIndexOf("/"));
          const rawPatternStartRange = node2.range[0] + 1;
          const flags2 = node2.regex.flags;
          checkRegex(
            node2,
            pattern2,
            rawPattern,
            rawPatternStartRange,
            flags2
          );
        }
      }
      function checkFunction(node2) {
        const scope = sourceCode2.getScope(node2);
        const regExpVar = astUtils2.getVariableByName(scope, "RegExp");
        const shadowed = regExpVar && regExpVar.defs.length > 0;
        const patternNode = node2.arguments[0];
        if (node2.callee.type === "Identifier" && node2.callee.name === "RegExp" && isString2(patternNode) && !shadowed) {
          const pattern2 = patternNode.value;
          const rawPattern = patternNode.raw.slice(1, -1);
          const rawPatternStartRange = patternNode.range[0] + 1;
          let flags2;
          if (node2.arguments.length < 2) {
            flags2 = "";
          } else {
            const flagsNode = node2.arguments[1];
            if (isString2(flagsNode)) {
              flags2 = flagsNode.value;
            } else {
              return;
            }
          }
          checkRegex(
            node2,
            pattern2,
            rawPattern,
            rawPatternStartRange,
            flags2
          );
        }
      }
      return {
        Literal: checkLiteral,
        CallExpression: checkFunction,
        NewExpression: checkFunction
      };
    }
  };
  return noRegexSpaces;
}
var noRestrictedExports;
var hasRequiredNoRestrictedExports;
function requireNoRestrictedExports() {
  if (hasRequiredNoRestrictedExports) return noRestrictedExports;
  hasRequiredNoRestrictedExports = 1;
  const astUtils2 = requireAstUtils();
  noRestrictedExports = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow specified names in exports",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-restricted-exports"
      },
      schema: [
        {
          anyOf: [
            {
              type: "object",
              properties: {
                restrictedNamedExports: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  uniqueItems: true
                },
                restrictedNamedExportsPattern: { type: "string" }
              },
              additionalProperties: false
            },
            {
              type: "object",
              properties: {
                restrictedNamedExports: {
                  type: "array",
                  items: {
                    type: "string",
                    pattern: "^(?!default$)"
                  },
                  uniqueItems: true
                },
                restrictedNamedExportsPattern: { type: "string" },
                restrictDefaultExports: {
                  type: "object",
                  properties: {
                    // Allow/Disallow `export default foo; export default 42; export default function foo() {}` format
                    direct: {
                      type: "boolean"
                    },
                    // Allow/Disallow `export { foo as default };` declarations
                    named: {
                      type: "boolean"
                    },
                    //  Allow/Disallow `export { default } from "mod"; export { default as default } from "mod";` declarations
                    defaultFrom: {
                      type: "boolean"
                    },
                    //  Allow/Disallow `export { foo as default } from "mod";` declarations
                    namedFrom: {
                      type: "boolean"
                    },
                    //  Allow/Disallow `export * as default from "mod"`; declarations
                    namespaceFrom: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        restrictedNamed: "'{{name}}' is restricted from being used as an exported name.",
        restrictedDefault: "Exporting 'default' is restricted."
      }
    },
    create(context) {
      const restrictedNames = new Set(
        context.options[0] && context.options[0].restrictedNamedExports
      );
      const restrictedNamePattern = context.options[0] && context.options[0].restrictedNamedExportsPattern;
      const restrictDefaultExports = context.options[0] && context.options[0].restrictDefaultExports;
      const sourceCode2 = context.sourceCode;
      function checkExportedName(node2) {
        const name = astUtils2.getModuleExportName(node2);
        let matchesRestrictedNamePattern = false;
        if (restrictedNamePattern && name !== "default") {
          const patternRegex = new RegExp(restrictedNamePattern, "u");
          matchesRestrictedNamePattern = patternRegex.test(name);
        }
        if (matchesRestrictedNamePattern || restrictedNames.has(name)) {
          context.report({
            node: node2,
            messageId: "restrictedNamed",
            data: { name }
          });
          return;
        }
        if (name === "default") {
          if (node2.parent.type === "ExportAllDeclaration") {
            if (restrictDefaultExports && restrictDefaultExports.namespaceFrom) {
              context.report({
                node: node2,
                messageId: "restrictedDefault"
              });
            }
          } else {
            const isSourceSpecified = !!node2.parent.parent.source;
            const specifierLocalName = astUtils2.getModuleExportName(
              node2.parent.local
            );
            if (!isSourceSpecified && restrictDefaultExports && restrictDefaultExports.named) {
              context.report({
                node: node2,
                messageId: "restrictedDefault"
              });
              return;
            }
            if (isSourceSpecified && restrictDefaultExports) {
              if (specifierLocalName === "default" && restrictDefaultExports.defaultFrom || specifierLocalName !== "default" && restrictDefaultExports.namedFrom) {
                context.report({
                  node: node2,
                  messageId: "restrictedDefault"
                });
              }
            }
          }
        }
      }
      return {
        ExportAllDeclaration(node2) {
          if (node2.exported) {
            checkExportedName(node2.exported);
          }
        },
        ExportDefaultDeclaration(node2) {
          if (restrictDefaultExports && restrictDefaultExports.direct) {
            context.report({
              node: node2,
              messageId: "restrictedDefault"
            });
          }
        },
        ExportNamedDeclaration(node2) {
          const declaration = node2.declaration;
          if (declaration) {
            if (declaration.type === "FunctionDeclaration" || declaration.type === "ClassDeclaration") {
              checkExportedName(declaration.id);
            } else if (declaration.type === "VariableDeclaration") {
              sourceCode2.getDeclaredVariables(declaration).map(
                (v2) => v2.defs.find((d2) => d2.parent === declaration)
              ).map((d2) => d2.name).forEach(checkExportedName);
            }
          } else {
            node2.specifiers.map((s2) => s2.exported).forEach(checkExportedName);
          }
        }
      };
    }
  };
  return noRestrictedExports;
}
var noRestrictedGlobals;
var hasRequiredNoRestrictedGlobals;
function requireNoRestrictedGlobals() {
  if (hasRequiredNoRestrictedGlobals) return noRestrictedGlobals;
  hasRequiredNoRestrictedGlobals = 1;
  const astUtils2 = requireAstUtils();
  const TYPE_NODES = /* @__PURE__ */ new Set([
    "TSTypeReference",
    "TSInterfaceHeritage",
    "TSClassImplements",
    "TSTypeQuery",
    "TSQualifiedName"
  ]);
  const GLOBAL_OBJECTS = /* @__PURE__ */ new Set(["globalThis", "self", "window"]);
  const arrayOfGlobals = {
    type: "array",
    items: {
      oneOf: [
        {
          type: "string"
        },
        {
          type: "object",
          properties: {
            name: { type: "string" },
            message: { type: "string" }
          },
          required: ["name"],
          additionalProperties: false
        }
      ]
    },
    uniqueItems: true,
    minItems: 0
  };
  noRestrictedGlobals = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "suggestion",
      docs: {
        description: "Disallow specified global variables",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-restricted-globals"
      },
      schema: {
        anyOf: [
          arrayOfGlobals,
          {
            type: "array",
            items: [
              {
                type: "object",
                properties: {
                  globals: arrayOfGlobals,
                  checkGlobalObject: {
                    type: "boolean"
                  },
                  globalObjects: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    uniqueItems: true
                  }
                },
                required: ["globals"],
                additionalProperties: false
              }
            ],
            additionalItems: false
          }
        ]
      },
      messages: {
        defaultMessage: "Unexpected use of '{{name}}'.",
        // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
        customMessage: "Unexpected use of '{{name}}'. {{customMessage}}"
      }
    },
    create(context) {
      const { sourceCode: sourceCode2, options } = context;
      const isGlobalsObject = typeof options[0] === "object" && Object.hasOwn(options[0], "globals");
      const restrictedGlobals = isGlobalsObject ? options[0].globals : options;
      const checkGlobalObject = isGlobalsObject ? options[0].checkGlobalObject : false;
      const userGlobalObjects = isGlobalsObject ? options[0].globalObjects || [] : [];
      const globalObjects = /* @__PURE__ */ new Set([
        ...GLOBAL_OBJECTS,
        ...userGlobalObjects
      ]);
      if (restrictedGlobals.length === 0) {
        return {};
      }
      const restrictedGlobalMessages = restrictedGlobals.reduce(
        (memo, option) => {
          if (typeof option === "string") {
            memo[option] = null;
          } else {
            memo[option.name] = option.message;
          }
          return memo;
        },
        {}
      );
      function reportReference(reference) {
        const name = reference.identifier.name, customMessage = restrictedGlobalMessages[name], messageId = customMessage ? "customMessage" : "defaultMessage";
        context.report({
          node: reference.identifier,
          messageId,
          data: {
            name,
            customMessage
          }
        });
      }
      function isRestricted(name) {
        return Object.hasOwn(restrictedGlobalMessages, name);
      }
      function isInTypeContext(reference) {
        const parent = reference.identifier.parent;
        return TYPE_NODES.has(parent.type);
      }
      return {
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          scope.variables.forEach((variable) => {
            if (!variable.defs.length && isRestricted(variable.name)) {
              variable.references.forEach((reference) => {
                if (!isInTypeContext(reference)) {
                  reportReference(reference);
                }
              });
            }
          });
          scope.through.forEach((reference) => {
            if (isRestricted(reference.identifier.name) && !isInTypeContext(reference)) {
              reportReference(reference);
            }
          });
        },
        "Program:exit"(node2) {
          if (!checkGlobalObject) {
            return;
          }
          const globalScope = sourceCode2.getScope(node2);
          globalObjects.forEach((globalObjectName) => {
            const variable = astUtils2.getVariableByName(
              globalScope,
              globalObjectName
            );
            if (!variable) {
              return;
            }
            variable.references.forEach((reference) => {
              const identifier = reference.identifier;
              let parent = identifier.parent;
              while (astUtils2.isSpecificMemberAccess(
                parent,
                null,
                globalObjectName
              )) {
                parent = parent.parent;
              }
              const propertyName = astUtils2.getStaticPropertyName(parent);
              if (propertyName && isRestricted(propertyName)) {
                const customMessage = restrictedGlobalMessages[propertyName];
                const messageId = customMessage ? "customMessage" : "defaultMessage";
                context.report({
                  node: parent.property,
                  messageId,
                  data: {
                    name: propertyName,
                    customMessage
                  }
                });
              }
            });
          });
        }
      };
    }
  };
  return noRestrictedGlobals;
}
var ignore;
var hasRequiredIgnore;
function requireIgnore() {
  if (hasRequiredIgnore) return ignore;
  hasRequiredIgnore = 1;
  function makeArray(subject) {
    return Array.isArray(subject) ? subject : [subject];
  }
  const EMPTY = "";
  const SPACE = " ";
  const ESCAPE = "\\";
  const REGEX_TEST_BLANK_LINE = /^\s+$/;
  const REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\]|^)\\$/;
  const REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
  const REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
  const REGEX_SPLITALL_CRLF = /\r?\n/g;
  const REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
  const SLASH = "/";
  let TMP_KEY_IGNORE = "node-ignore";
  if (typeof Symbol !== "undefined") {
    TMP_KEY_IGNORE = Symbol.for("node-ignore");
  }
  const KEY_IGNORE = TMP_KEY_IGNORE;
  const define = (object, key, value) => Object.defineProperty(object, key, { value });
  const REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
  const RETURN_FALSE = () => false;
  const sanitizeRange = (range) => range.replace(
    REGEX_REGEXP_RANGE,
    (match, from2, to) => from2.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY
  );
  const cleanRangeBackSlash = (slashes) => {
    const { length } = slashes;
    return slashes.slice(0, length - length % 2);
  };
  const REPLACERS = [
    [
      // remove BOM
      // TODO:
      // Other similar zero-width characters?
      /^\uFEFF/,
      () => EMPTY
    ],
    // > Trailing spaces are ignored unless they are quoted with backslash ("\")
    [
      // (a\ ) -> (a )
      // (a  ) -> (a)
      // (a ) -> (a)
      // (a \ ) -> (a  )
      /((?:\\\\)*?)(\\?\s+)$/,
      (_, m1, m2) => m1 + (m2.indexOf("\\") === 0 ? SPACE : EMPTY)
    ],
    // replace (\ ) with ' '
    // (\ ) -> ' '
    // (\\ ) -> '\\ '
    // (\\\ ) -> '\\ '
    [
      /(\\+?)\s/g,
      (_, m1) => {
        const { length } = m1;
        return m1.slice(0, length - length % 2) + SPACE;
      }
    ],
    // Escape metacharacters
    // which is written down by users but means special for regular expressions.
    // > There are 12 characters with special meanings:
    // > - the backslash \,
    // > - the caret ^,
    // > - the dollar sign $,
    // > - the period or dot .,
    // > - the vertical bar or pipe symbol |,
    // > - the question mark ?,
    // > - the asterisk or star *,
    // > - the plus sign +,
    // > - the opening parenthesis (,
    // > - the closing parenthesis ),
    // > - and the opening square bracket [,
    // > - the opening curly brace {,
    // > These special characters are often called "metacharacters".
    [
      /[\\$.|*+(){^]/g,
      (match) => `\\${match}`
    ],
    [
      // > a question mark (?) matches a single character
      /(?!\\)\?/g,
      () => "[^/]"
    ],
    // leading slash
    [
      // > A leading slash matches the beginning of the pathname.
      // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
      // A leading slash matches the beginning of the pathname
      /^\//,
      () => "^"
    ],
    // replace special metacharacter slash after the leading slash
    [
      /\//g,
      () => "\\/"
    ],
    [
      // > A leading "**" followed by a slash means match in all directories.
      // > For example, "**/foo" matches file or directory "foo" anywhere,
      // > the same as pattern "foo".
      // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
      // >   under directory "foo".
      // Notice that the '*'s have been replaced as '\\*'
      /^\^*\\\*\\\*\\\//,
      // '**/foo' <-> 'foo'
      () => "^(?:.*\\/)?"
    ],
    // starting
    [
      // there will be no leading '/'
      //   (which has been replaced by section "leading slash")
      // If starts with '**', adding a '^' to the regular expression also works
      /^(?=[^^])/,
      function startingReplacer() {
        return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
      }
    ],
    // two globstars
    [
      // Use lookahead assertions so that we could match more than one `'/**'`
      /\\\/\\\*\\\*(?=\\\/|$)/g,
      // Zero, one or several directories
      // should not use '*', or it will be replaced by the next replacer
      // Check if it is not the last `'/**'`
      (_, index, str) => index + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
    ],
    // normal intermediate wildcards
    [
      // Never replace escaped '*'
      // ignore rule '\*' will match the path '*'
      // 'abc.*/' -> go
      // 'abc.*'  -> skip this rule,
      //    coz trailing single wildcard will be handed by [trailing wildcard]
      /(^|[^\\]+)(\\\*)+(?=.+)/g,
      // '*.js' matches '.js'
      // '*.js' doesn't match 'abc'
      (_, p1, p2) => {
        const unescaped = p2.replace(/\\\*/g, "[^\\/]*");
        return p1 + unescaped;
      }
    ],
    [
      // unescape, revert step 3 except for back slash
      // For example, if a user escape a '\\*',
      // after step 3, the result will be '\\\\\\*'
      /\\\\\\(?=[$.|*+(){^])/g,
      () => ESCAPE
    ],
    [
      // '\\\\' -> '\\'
      /\\\\/g,
      () => ESCAPE
    ],
    [
      // > The range notation, e.g. [a-zA-Z],
      // > can be used to match one of the characters in a range.
      // `\` is escaped by step 3
      /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
      (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
    ],
    // ending
    [
      // 'js' will not match 'js.'
      // 'ab' will not match 'abc'
      /(?:[^*])$/,
      // WTF!
      // https://git-scm.com/docs/gitignore
      // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
      // which re-fixes #24, #38
      // > If there is a separator at the end of the pattern then the pattern
      // > will only match directories, otherwise the pattern can match both
      // > files and directories.
      // 'js*' will not match 'a.js'
      // 'js/' will not match 'a.js'
      // 'js' will match 'a.js' and 'a.js/'
      (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
    ],
    // trailing wildcard
    [
      /(\^|\\\/)?\\\*$/,
      (_, p1) => {
        const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
        return `${prefix}(?=$|\\/$)`;
      }
    ]
  ];
  const regexCache = /* @__PURE__ */ Object.create(null);
  const makeRegex = (pattern2, ignoreCase) => {
    let source = regexCache[pattern2];
    if (!source) {
      source = REPLACERS.reduce(
        (prev, [matcher, replacer]) => prev.replace(matcher, replacer.bind(pattern2)),
        pattern2
      );
      regexCache[pattern2] = source;
    }
    return ignoreCase ? new RegExp(source, "i") : new RegExp(source);
  };
  const isString2 = (subject) => typeof subject === "string";
  const checkPattern = (pattern2) => pattern2 && isString2(pattern2) && !REGEX_TEST_BLANK_LINE.test(pattern2) && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern2) && pattern2.indexOf("#") !== 0;
  const splitPattern = (pattern2) => pattern2.split(REGEX_SPLITALL_CRLF);
  class IgnoreRule {
    constructor(origin, pattern2, negative, regex) {
      this.origin = origin;
      this.pattern = pattern2;
      this.negative = negative;
      this.regex = regex;
    }
  }
  const createRule = (pattern2, ignoreCase) => {
    const origin = pattern2;
    let negative = false;
    if (pattern2.indexOf("!") === 0) {
      negative = true;
      pattern2 = pattern2.substr(1);
    }
    pattern2 = pattern2.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
    const regex = makeRegex(pattern2, ignoreCase);
    return new IgnoreRule(
      origin,
      pattern2,
      negative,
      regex
    );
  };
  const throwError = (message, Ctor) => {
    throw new Ctor(message);
  };
  const checkPath = (path, originalPath, doThrow) => {
    if (!isString2(path)) {
      return doThrow(
        `path must be a string, but got \`${originalPath}\``,
        TypeError
      );
    }
    if (!path) {
      return doThrow(`path must not be empty`, TypeError);
    }
    if (checkPath.isNotRelative(path)) {
      const r2 = "`path.relative()`d";
      return doThrow(
        `path should be a ${r2} string, but got "${originalPath}"`,
        RangeError
      );
    }
    return true;
  };
  const isNotRelative = (path) => REGEX_TEST_INVALID_PATH.test(path);
  checkPath.isNotRelative = isNotRelative;
  checkPath.convert = (p2) => p2;
  class Ignore {
    constructor({
      ignorecase = true,
      ignoreCase = ignorecase,
      allowRelativePaths = false
    } = {}) {
      define(this, KEY_IGNORE, true);
      this._rules = [];
      this._ignoreCase = ignoreCase;
      this._allowRelativePaths = allowRelativePaths;
      this._initCache();
    }
    _initCache() {
      this._ignoreCache = /* @__PURE__ */ Object.create(null);
      this._testCache = /* @__PURE__ */ Object.create(null);
    }
    _addPattern(pattern2) {
      if (pattern2 && pattern2[KEY_IGNORE]) {
        this._rules = this._rules.concat(pattern2._rules);
        this._added = true;
        return;
      }
      if (checkPattern(pattern2)) {
        const rule = createRule(pattern2, this._ignoreCase);
        this._added = true;
        this._rules.push(rule);
      }
    }
    // @param {Array<string> | string | Ignore} pattern
    add(pattern2) {
      this._added = false;
      makeArray(
        isString2(pattern2) ? splitPattern(pattern2) : pattern2
      ).forEach(this._addPattern, this);
      if (this._added) {
        this._initCache();
      }
      return this;
    }
    // legacy
    addPattern(pattern2) {
      return this.add(pattern2);
    }
    //          |           ignored : unignored
    // negative |   0:0   |   0:1   |   1:0   |   1:1
    // -------- | ------- | ------- | ------- | --------
    //     0    |  TEST   |  TEST   |  SKIP   |    X
    //     1    |  TESTIF |  SKIP   |  TEST   |    X
    // - SKIP: always skip
    // - TEST: always test
    // - TESTIF: only test if checkUnignored
    // - X: that never happen
    // @param {boolean} whether should check if the path is unignored,
    //   setting `checkUnignored` to `false` could reduce additional
    //   path matching.
    // @returns {TestResult} true if a file is ignored
    _testOne(path, checkUnignored) {
      let ignored = false;
      let unignored = false;
      this._rules.forEach((rule) => {
        const { negative } = rule;
        if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
          return;
        }
        const matched = rule.regex.test(path);
        if (matched) {
          ignored = !negative;
          unignored = negative;
        }
      });
      return {
        ignored,
        unignored
      };
    }
    // @returns {TestResult}
    _test(originalPath, cache2, checkUnignored, slices) {
      const path = originalPath && checkPath.convert(originalPath);
      checkPath(
        path,
        originalPath,
        this._allowRelativePaths ? RETURN_FALSE : throwError
      );
      return this._t(path, cache2, checkUnignored, slices);
    }
    _t(path, cache2, checkUnignored, slices) {
      if (path in cache2) {
        return cache2[path];
      }
      if (!slices) {
        slices = path.split(SLASH);
      }
      slices.pop();
      if (!slices.length) {
        return cache2[path] = this._testOne(path, checkUnignored);
      }
      const parent = this._t(
        slices.join(SLASH) + SLASH,
        cache2,
        checkUnignored,
        slices
      );
      return cache2[path] = parent.ignored ? parent : this._testOne(path, checkUnignored);
    }
    ignores(path) {
      return this._test(path, this._ignoreCache, false).ignored;
    }
    createFilter() {
      return (path) => !this.ignores(path);
    }
    filter(paths) {
      return makeArray(paths).filter(this.createFilter());
    }
    // @returns {TestResult}
    test(path) {
      return this._test(path, this._testCache, true);
    }
  }
  const factory = (options) => new Ignore(options);
  const isPathValid = (path) => checkPath(path && checkPath.convert(path), path, RETURN_FALSE);
  factory.isPathValid = isPathValid;
  factory.default = factory;
  ignore = factory;
  if (
    // Detect `process` so that it can run in browsers.
    typeof browser$1$1 !== "undefined" && (browser$1$1.env && browser$1$1.env.IGNORE_TEST_WIN32 || browser$1$1.platform === "win32")
  ) {
    const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
    checkPath.convert = makePosix;
    const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
    checkPath.isNotRelative = (path) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path) || isNotRelative(path);
  }
  return ignore;
}
var noRestrictedImports;
var hasRequiredNoRestrictedImports;
function requireNoRestrictedImports() {
  if (hasRequiredNoRestrictedImports) return noRestrictedImports;
  hasRequiredNoRestrictedImports = 1;
  const astUtils2 = requireAstUtils();
  const ignore2 = requireIgnore();
  const arrayOfStringsOrObjects = {
    type: "array",
    items: {
      anyOf: [
        { type: "string" },
        {
          type: "object",
          properties: {
            name: { type: "string" },
            message: {
              type: "string",
              minLength: 1
            },
            importNames: {
              type: "array",
              items: {
                type: "string"
              }
            },
            allowImportNames: {
              type: "array",
              items: {
                type: "string"
              }
            }
          },
          additionalProperties: false,
          required: ["name"],
          not: { required: ["importNames", "allowImportNames"] }
        }
      ]
    },
    uniqueItems: true
  };
  const arrayOfStringsOrObjectPatterns = {
    anyOf: [
      {
        type: "array",
        items: {
          type: "string"
        },
        uniqueItems: true
      },
      {
        type: "array",
        items: {
          type: "object",
          properties: {
            importNames: {
              type: "array",
              items: {
                type: "string"
              },
              minItems: 1,
              uniqueItems: true
            },
            allowImportNames: {
              type: "array",
              items: {
                type: "string"
              },
              minItems: 1,
              uniqueItems: true
            },
            group: {
              type: "array",
              items: {
                type: "string"
              },
              minItems: 1,
              uniqueItems: true
            },
            regex: {
              type: "string"
            },
            importNamePattern: {
              type: "string"
            },
            allowImportNamePattern: {
              type: "string"
            },
            message: {
              type: "string",
              minLength: 1
            },
            caseSensitive: {
              type: "boolean"
            }
          },
          additionalProperties: false,
          not: {
            anyOf: [
              { required: ["importNames", "allowImportNames"] },
              {
                required: [
                  "importNamePattern",
                  "allowImportNamePattern"
                ]
              },
              { required: ["importNames", "allowImportNamePattern"] },
              { required: ["importNamePattern", "allowImportNames"] },
              {
                required: [
                  "allowImportNames",
                  "allowImportNamePattern"
                ]
              }
            ]
          },
          oneOf: [{ required: ["group"] }, { required: ["regex"] }]
        },
        uniqueItems: true
      }
    ]
  };
  noRestrictedImports = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow specified modules when loaded by `import`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-restricted-imports"
      },
      messages: {
        path: "'{{importSource}}' import is restricted from being used.",
        pathWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{importSource}}' import is restricted from being used. {{customMessage}}"
        ),
        patterns: "'{{importSource}}' import is restricted from being used by a pattern.",
        patternWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}"
        ),
        patternAndImportName: "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
        patternAndImportNameWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}"
        ),
        patternAndEverything: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
        patternAndEverythingWithRegexImportName: "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
        patternAndEverythingWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}"
        ),
        patternAndEverythingWithRegexImportNameAndCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}"
        ),
        everything: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
        everythingWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}"
        ),
        importName: "'{{importName}}' import from '{{importSource}}' is restricted.",
        importNameWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}"
        ),
        allowedImportName: "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
        allowedImportNameWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}"
        ),
        everythingWithAllowImportNames: "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
        everythingWithAllowImportNamesAndCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}"
        ),
        allowedImportNamePattern: "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
        allowedImportNamePatternWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}"
        ),
        everythingWithAllowedImportNamePattern: "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
        everythingWithAllowedImportNamePatternWithCustomMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}"
        )
      },
      schema: {
        anyOf: [
          arrayOfStringsOrObjects,
          {
            type: "array",
            items: [
              {
                type: "object",
                properties: {
                  paths: arrayOfStringsOrObjects,
                  patterns: arrayOfStringsOrObjectPatterns
                },
                additionalProperties: false
              }
            ],
            additionalItems: false
          }
        ]
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const options = Array.isArray(context.options) ? context.options : [];
      const isPathAndPatternsObject = typeof options[0] === "object" && (Object.hasOwn(options[0], "paths") || Object.hasOwn(options[0], "patterns"));
      const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];
      const groupedRestrictedPaths = restrictedPaths.reduce(
        (memo, importSource) => {
          const path = typeof importSource === "string" ? importSource : importSource.name;
          if (!memo[path]) {
            memo[path] = [];
          }
          if (typeof importSource === "string") {
            memo[path].push({});
          } else {
            memo[path].push({
              message: importSource.message,
              importNames: importSource.importNames,
              allowImportNames: importSource.allowImportNames
            });
          }
          return memo;
        },
        /* @__PURE__ */ Object.create(null)
      );
      let restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];
      if (restrictedPatterns.length > 0 && typeof restrictedPatterns[0] === "string") {
        restrictedPatterns = [{ group: restrictedPatterns }];
      }
      const restrictedPatternGroups = restrictedPatterns.map(
        ({
          group,
          regex,
          message,
          caseSensitive,
          importNames,
          importNamePattern,
          allowImportNames,
          allowImportNamePattern
        }) => ({
          ...group ? {
            matcher: ignore2({
              allowRelativePaths: true,
              ignorecase: !caseSensitive
            }).add(group)
          } : {},
          ...typeof regex === "string" ? {
            regexMatcher: new RegExp(
              regex,
              caseSensitive ? "u" : "iu"
            )
          } : {},
          customMessage: message,
          importNames,
          importNamePattern,
          allowImportNames,
          allowImportNamePattern
        })
      );
      if (Object.keys(restrictedPaths).length === 0 && restrictedPatternGroups.length === 0) {
        return {};
      }
      function checkRestrictedPathAndReport(importSource, importNames, node2) {
        if (!Object.hasOwn(groupedRestrictedPaths, importSource)) {
          return;
        }
        groupedRestrictedPaths[importSource].forEach(
          (restrictedPathEntry) => {
            const customMessage = restrictedPathEntry.message;
            const restrictedImportNames = restrictedPathEntry.importNames;
            const allowedImportNames = restrictedPathEntry.allowImportNames;
            if (!restrictedImportNames && !allowedImportNames) {
              context.report({
                node: node2,
                messageId: customMessage ? "pathWithCustomMessage" : "path",
                data: {
                  importSource,
                  customMessage
                }
              });
              return;
            }
            importNames.forEach((specifiers, importName) => {
              if (importName === "*") {
                const [specifier] = specifiers;
                if (restrictedImportNames) {
                  context.report({
                    node: node2,
                    messageId: customMessage ? "everythingWithCustomMessage" : "everything",
                    loc: specifier.loc,
                    data: {
                      importSource,
                      importNames: restrictedImportNames,
                      customMessage
                    }
                  });
                } else if (allowedImportNames) {
                  context.report({
                    node: node2,
                    messageId: customMessage ? "everythingWithAllowImportNamesAndCustomMessage" : "everythingWithAllowImportNames",
                    loc: specifier.loc,
                    data: {
                      importSource,
                      allowedImportNames,
                      customMessage
                    }
                  });
                }
                return;
              }
              if (restrictedImportNames && restrictedImportNames.includes(importName)) {
                specifiers.forEach((specifier) => {
                  context.report({
                    node: node2,
                    messageId: customMessage ? "importNameWithCustomMessage" : "importName",
                    loc: specifier.loc,
                    data: {
                      importSource,
                      customMessage,
                      importName
                    }
                  });
                });
              }
              if (allowedImportNames && !allowedImportNames.includes(importName)) {
                specifiers.forEach((specifier) => {
                  context.report({
                    node: node2,
                    loc: specifier.loc,
                    messageId: customMessage ? "allowedImportNameWithCustomMessage" : "allowedImportName",
                    data: {
                      importSource,
                      customMessage,
                      importName,
                      allowedImportNames
                    }
                  });
                });
              }
            });
          }
        );
      }
      function reportPathForPatterns(node2, group, importNames) {
        const importSource = node2.source.value.trim();
        const customMessage = group.customMessage;
        const restrictedImportNames = group.importNames;
        const restrictedImportNamePattern = group.importNamePattern ? new RegExp(group.importNamePattern, "u") : null;
        const allowedImportNames = group.allowImportNames;
        const allowedImportNamePattern = group.allowImportNamePattern ? new RegExp(group.allowImportNamePattern, "u") : null;
        if (!restrictedImportNames && !allowedImportNames && !restrictedImportNamePattern && !allowedImportNamePattern) {
          context.report({
            node: node2,
            messageId: customMessage ? "patternWithCustomMessage" : "patterns",
            data: {
              importSource,
              customMessage
            }
          });
          return;
        }
        importNames.forEach((specifiers, importName) => {
          if (importName === "*") {
            const [specifier] = specifiers;
            if (restrictedImportNames) {
              context.report({
                node: node2,
                messageId: customMessage ? "patternAndEverythingWithCustomMessage" : "patternAndEverything",
                loc: specifier.loc,
                data: {
                  importSource,
                  importNames: restrictedImportNames,
                  customMessage
                }
              });
            } else if (allowedImportNames) {
              context.report({
                node: node2,
                messageId: customMessage ? "everythingWithAllowImportNamesAndCustomMessage" : "everythingWithAllowImportNames",
                loc: specifier.loc,
                data: {
                  importSource,
                  allowedImportNames,
                  customMessage
                }
              });
            } else if (allowedImportNamePattern) {
              context.report({
                node: node2,
                messageId: customMessage ? "everythingWithAllowedImportNamePatternWithCustomMessage" : "everythingWithAllowedImportNamePattern",
                loc: specifier.loc,
                data: {
                  importSource,
                  allowedImportNamePattern,
                  customMessage
                }
              });
            } else {
              context.report({
                node: node2,
                messageId: customMessage ? "patternAndEverythingWithRegexImportNameAndCustomMessage" : "patternAndEverythingWithRegexImportName",
                loc: specifier.loc,
                data: {
                  importSource,
                  importNames: restrictedImportNamePattern,
                  customMessage
                }
              });
            }
            return;
          }
          if (restrictedImportNames && restrictedImportNames.includes(importName) || restrictedImportNamePattern && restrictedImportNamePattern.test(importName)) {
            specifiers.forEach((specifier) => {
              context.report({
                node: node2,
                messageId: customMessage ? "patternAndImportNameWithCustomMessage" : "patternAndImportName",
                loc: specifier.loc,
                data: {
                  importSource,
                  customMessage,
                  importName
                }
              });
            });
          }
          if (allowedImportNames && !allowedImportNames.includes(importName)) {
            specifiers.forEach((specifier) => {
              context.report({
                node: node2,
                messageId: customMessage ? "allowedImportNameWithCustomMessage" : "allowedImportName",
                loc: specifier.loc,
                data: {
                  importSource,
                  customMessage,
                  importName,
                  allowedImportNames
                }
              });
            });
          } else if (allowedImportNamePattern && !allowedImportNamePattern.test(importName)) {
            specifiers.forEach((specifier) => {
              context.report({
                node: node2,
                messageId: customMessage ? "allowedImportNamePatternWithCustomMessage" : "allowedImportNamePattern",
                loc: specifier.loc,
                data: {
                  importSource,
                  customMessage,
                  importName,
                  allowedImportNamePattern
                }
              });
            });
          }
        });
      }
      function isRestrictedPattern(importSource, group) {
        return group.regexMatcher ? group.regexMatcher.test(importSource) : group.matcher.ignores(importSource);
      }
      function checkNode(node2) {
        const importSource = node2.source.value.trim();
        const importNames = /* @__PURE__ */ new Map();
        if (node2.type === "ExportAllDeclaration") {
          const starToken = sourceCode2.getFirstToken(node2, 1);
          importNames.set("*", [{ loc: starToken.loc }]);
        } else if (node2.specifiers) {
          for (const specifier of node2.specifiers) {
            let name;
            const specifierData = { loc: specifier.loc };
            if (specifier.type === "ImportDefaultSpecifier") {
              name = "default";
            } else if (specifier.type === "ImportNamespaceSpecifier") {
              name = "*";
            } else if (specifier.imported) {
              name = astUtils2.getModuleExportName(specifier.imported);
            } else if (specifier.local) {
              name = astUtils2.getModuleExportName(specifier.local);
            }
            if (typeof name === "string") {
              if (importNames.has(name)) {
                importNames.get(name).push(specifierData);
              } else {
                importNames.set(name, [specifierData]);
              }
            }
          }
        }
        checkRestrictedPathAndReport(importSource, importNames, node2);
        restrictedPatternGroups.forEach((group) => {
          if (isRestrictedPattern(importSource, group)) {
            reportPathForPatterns(node2, group, importNames);
          }
        });
      }
      return {
        ImportDeclaration: checkNode,
        ExportNamedDeclaration(node2) {
          if (node2.source) {
            checkNode(node2);
          }
        },
        ExportAllDeclaration: checkNode
      };
    }
  };
  return noRestrictedImports;
}
var noRestrictedModules;
var hasRequiredNoRestrictedModules;
function requireNoRestrictedModules() {
  if (hasRequiredNoRestrictedModules) return noRestrictedModules;
  hasRequiredNoRestrictedModules = 1;
  const astUtils2 = requireAstUtils();
  const ignore2 = requireIgnore();
  const arrayOfStrings = {
    type: "array",
    items: { type: "string" },
    uniqueItems: true
  };
  const arrayOfStringsOrObjects = {
    type: "array",
    items: {
      anyOf: [
        { type: "string" },
        {
          type: "object",
          properties: {
            name: { type: "string" },
            message: {
              type: "string",
              minLength: 1
            }
          },
          additionalProperties: false,
          required: ["name"]
        }
      ]
    },
    uniqueItems: true
  };
  noRestrictedModules = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "no-restricted-require",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow specified modules when loaded by `require`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-restricted-modules"
      },
      schema: {
        anyOf: [
          arrayOfStringsOrObjects,
          {
            type: "array",
            items: {
              type: "object",
              properties: {
                paths: arrayOfStringsOrObjects,
                patterns: arrayOfStrings
              },
              additionalProperties: false
            },
            additionalItems: false
          }
        ]
      },
      messages: {
        defaultMessage: "'{{name}}' module is restricted from being used.",
        customMessage: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{name}}' module is restricted from being used. {{customMessage}}"
        ),
        patternMessage: "'{{name}}' module is restricted from being used by a pattern."
      }
    },
    create(context) {
      const options = Array.isArray(context.options) ? context.options : [];
      const isPathAndPatternsObject = typeof options[0] === "object" && (Object.hasOwn(options[0], "paths") || Object.hasOwn(options[0], "patterns"));
      const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];
      const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];
      const restrictedPathMessages = restrictedPaths.reduce(
        (memo, importName) => {
          if (typeof importName === "string") {
            memo[importName] = null;
          } else {
            memo[importName.name] = importName.message;
          }
          return memo;
        },
        {}
      );
      if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {
        return {};
      }
      const ig = ignore2({ allowRelativePaths: true }).add(restrictedPatterns);
      function isStringLiteral(node2) {
        return node2 && node2.type === "Literal" && typeof node2.value === "string";
      }
      function isRequireCall(node2) {
        return node2.callee.type === "Identifier" && node2.callee.name === "require";
      }
      function getFirstArgumentString(node2) {
        if (isStringLiteral(node2)) {
          return node2.value.trim();
        }
        if (astUtils2.isStaticTemplateLiteral(node2)) {
          return node2.quasis[0].value.cooked.trim();
        }
        return null;
      }
      function reportPath(node2, name) {
        const customMessage = restrictedPathMessages[name];
        const messageId = customMessage ? "customMessage" : "defaultMessage";
        context.report({
          node: node2,
          messageId,
          data: {
            name,
            customMessage
          }
        });
      }
      function isRestrictedPath(name) {
        return Object.hasOwn(restrictedPathMessages, name);
      }
      return {
        CallExpression(node2) {
          if (isRequireCall(node2)) {
            if (node2.arguments.length) {
              const name = getFirstArgumentString(node2.arguments[0]);
              if (name) {
                if (isRestrictedPath(name)) {
                  reportPath(node2, name);
                }
                if (restrictedPatterns.length > 0 && ig.ignores(name)) {
                  context.report({
                    node: node2,
                    messageId: "patternMessage",
                    data: { name }
                  });
                }
              }
            }
          }
        }
      };
    }
  };
  return noRestrictedModules;
}
var noRestrictedProperties;
var hasRequiredNoRestrictedProperties;
function requireNoRestrictedProperties() {
  if (hasRequiredNoRestrictedProperties) return noRestrictedProperties;
  hasRequiredNoRestrictedProperties = 1;
  const astUtils2 = requireAstUtils();
  noRestrictedProperties = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow certain properties on certain objects",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-restricted-properties"
      },
      schema: {
        type: "array",
        items: {
          type: "object",
          properties: {
            object: {
              type: "string"
            },
            property: {
              type: "string"
            },
            allowObjects: {
              type: "array",
              items: {
                type: "string"
              },
              uniqueItems: true
            },
            allowProperties: {
              type: "array",
              items: {
                type: "string"
              },
              uniqueItems: true
            },
            message: {
              type: "string"
            }
          },
          anyOf: [
            {
              required: ["object"]
            },
            {
              required: ["property"]
            }
          ],
          not: {
            anyOf: [
              { required: ["allowObjects", "object"] },
              { required: ["allowProperties", "property"] }
            ]
          },
          additionalProperties: false
        },
        uniqueItems: true
      },
      messages: {
        restrictedObjectProperty: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{objectName}}.{{propertyName}}' is restricted from being used.{{allowedPropertiesMessage}}{{message}}"
        ),
        restrictedProperty: (
          // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
          "'{{propertyName}}' is restricted from being used.{{allowedObjectsMessage}}{{message}}"
        )
      }
    },
    create(context) {
      const restrictedCalls = context.options;
      if (restrictedCalls.length === 0) {
        return {};
      }
      const restrictedProperties = /* @__PURE__ */ new Map();
      const globallyRestrictedObjects = /* @__PURE__ */ new Map();
      const globallyRestrictedProperties = /* @__PURE__ */ new Map();
      restrictedCalls.forEach((option) => {
        const objectName = option.object;
        const propertyName = option.property;
        if (typeof objectName === "undefined") {
          globallyRestrictedProperties.set(propertyName, {
            allowObjects: option.allowObjects,
            message: option.message
          });
        } else if (typeof propertyName === "undefined") {
          globallyRestrictedObjects.set(objectName, {
            allowProperties: option.allowProperties,
            message: option.message
          });
        } else {
          if (!restrictedProperties.has(objectName)) {
            restrictedProperties.set(objectName, /* @__PURE__ */ new Map());
          }
          restrictedProperties.get(objectName).set(propertyName, {
            message: option.message
          });
        }
      });
      function isAllowed(name, allowedList) {
        if (!allowedList) {
          return false;
        }
        return allowedList.includes(name);
      }
      function checkPropertyAccess(node2, objectName, propertyName) {
        if (propertyName === null) {
          return;
        }
        const matchedObject = restrictedProperties.get(objectName);
        const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);
        const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);
        if (matchedObjectProperty && !isAllowed(propertyName, matchedObjectProperty.allowProperties)) {
          const message = matchedObjectProperty.message ? ` ${matchedObjectProperty.message}` : "";
          const allowedPropertiesMessage = matchedObjectProperty.allowProperties ? ` Only these properties are allowed: ${matchedObjectProperty.allowProperties.join(", ")}.` : "";
          context.report({
            node: node2,
            messageId: "restrictedObjectProperty",
            data: {
              objectName,
              propertyName,
              message,
              allowedPropertiesMessage
            }
          });
        } else if (globalMatchedProperty && !isAllowed(objectName, globalMatchedProperty.allowObjects)) {
          const message = globalMatchedProperty.message ? ` ${globalMatchedProperty.message}` : "";
          const allowedObjectsMessage = globalMatchedProperty.allowObjects ? ` Property '${propertyName}' is only allowed on these objects: ${globalMatchedProperty.allowObjects.join(", ")}.` : "";
          context.report({
            node: node2,
            messageId: "restrictedProperty",
            data: {
              propertyName,
              message,
              allowedObjectsMessage
            }
          });
        }
      }
      return {
        MemberExpression(node2) {
          checkPropertyAccess(
            node2,
            node2.object && node2.object.name,
            astUtils2.getStaticPropertyName(node2)
          );
        },
        ObjectPattern(node2) {
          let objectName = null;
          if (node2.parent.type === "VariableDeclarator") {
            if (node2.parent.init && node2.parent.init.type === "Identifier") {
              objectName = node2.parent.init.name;
            }
          } else if (node2.parent.type === "AssignmentExpression" || node2.parent.type === "AssignmentPattern") {
            if (node2.parent.right.type === "Identifier") {
              objectName = node2.parent.right.name;
            }
          }
          node2.properties.forEach((property) => {
            checkPropertyAccess(
              node2,
              objectName,
              astUtils2.getStaticPropertyName(property)
            );
          });
        }
      };
    }
  };
  return noRestrictedProperties;
}
var noRestrictedSyntax;
var hasRequiredNoRestrictedSyntax;
function requireNoRestrictedSyntax() {
  if (hasRequiredNoRestrictedSyntax) return noRestrictedSyntax;
  hasRequiredNoRestrictedSyntax = 1;
  noRestrictedSyntax = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow specified syntax",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-restricted-syntax"
      },
      schema: {
        type: "array",
        items: {
          oneOf: [
            {
              type: "string"
            },
            {
              type: "object",
              properties: {
                selector: { type: "string" },
                message: { type: "string" }
              },
              required: ["selector"],
              additionalProperties: false
            }
          ]
        },
        uniqueItems: true,
        minItems: 0
      },
      messages: {
        // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
        restrictedSyntax: "{{message}}"
      }
    },
    create(context) {
      return context.options.reduce((result, selectorOrObject) => {
        const isStringFormat = typeof selectorOrObject === "string";
        const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);
        const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;
        const message = hasCustomMessage ? selectorOrObject.message : `Using '${selector}' is not allowed.`;
        return Object.assign(result, {
          [selector](node2) {
            context.report({
              node: node2,
              messageId: "restrictedSyntax",
              data: { message }
            });
          }
        });
      }, {});
    }
  };
  return noRestrictedSyntax;
}
var noReturnAssign;
var hasRequiredNoReturnAssign;
function requireNoReturnAssign() {
  if (hasRequiredNoReturnAssign) return noReturnAssign;
  hasRequiredNoReturnAssign = 1;
  const astUtils2 = requireAstUtils();
  const SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;
  noReturnAssign = {
    meta: {
      type: "suggestion",
      defaultOptions: ["except-parens"],
      docs: {
        description: "Disallow assignment operators in `return` statements",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-return-assign"
      },
      schema: [
        {
          enum: ["except-parens", "always"]
        }
      ],
      messages: {
        returnAssignment: "Return statement should not contain assignment.",
        arrowAssignment: "Arrow function should not return assignment."
      }
    },
    create(context) {
      const always = context.options[0] !== "except-parens";
      const sourceCode2 = context.sourceCode;
      return {
        AssignmentExpression(node2) {
          if (!always && astUtils2.isParenthesised(sourceCode2, node2)) {
            return;
          }
          let currentChild = node2;
          let parent = currentChild.parent;
          while (parent && !SENTINEL_TYPE.test(parent.type)) {
            currentChild = parent;
            parent = parent.parent;
          }
          if (parent && parent.type === "ReturnStatement") {
            context.report({
              node: parent,
              messageId: "returnAssignment"
            });
          } else if (parent && parent.type === "ArrowFunctionExpression" && parent.body === currentChild) {
            context.report({
              node: parent,
              messageId: "arrowAssignment"
            });
          }
        }
      };
    }
  };
  return noReturnAssign;
}
var noReturnAwait;
var hasRequiredNoReturnAwait;
function requireNoReturnAwait() {
  if (hasRequiredNoReturnAwait) return noReturnAwait;
  hasRequiredNoReturnAwait = 1;
  const astUtils2 = requireAstUtils();
  noReturnAwait = {
    meta: {
      hasSuggestions: true,
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary `return await`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-return-await"
      },
      fixable: null,
      deprecated: {
        message: "The original assumption of the rule no longer holds true because of engine optimization.",
        deprecatedSince: "8.46.0",
        availableUntil: null,
        replacedBy: []
      },
      schema: [],
      messages: {
        removeAwait: "Remove redundant `await`.",
        redundantUseOfAwait: "Redundant use of `await` on a return value."
      }
    },
    create(context) {
      function reportUnnecessaryAwait(node2) {
        context.report({
          node: context.sourceCode.getFirstToken(node2),
          loc: node2.loc,
          messageId: "redundantUseOfAwait",
          suggest: [
            {
              messageId: "removeAwait",
              fix(fixer) {
                const sourceCode2 = context.sourceCode;
                const [awaitToken, tokenAfterAwait] = sourceCode2.getFirstTokens(node2, 2);
                const areAwaitAndAwaitedExpressionOnTheSameLine = awaitToken.loc.start.line === tokenAfterAwait.loc.start.line;
                if (!areAwaitAndAwaitedExpressionOnTheSameLine) {
                  return null;
                }
                const [startOfAwait, endOfAwait] = awaitToken.range;
                const characterAfterAwait = sourceCode2.text[endOfAwait];
                const trimLength = characterAfterAwait === " " ? 1 : 0;
                const range = [
                  startOfAwait,
                  endOfAwait + trimLength
                ];
                return fixer.removeRange(range);
              }
            }
          ]
        });
      }
      function hasErrorHandler(node2) {
        let ancestor = node2;
        while (!astUtils2.isFunction(ancestor) && ancestor.type !== "Program") {
          if (ancestor.parent.type === "TryStatement" && (ancestor === ancestor.parent.block || ancestor === ancestor.parent.handler && ancestor.parent.finalizer)) {
            return true;
          }
          ancestor = ancestor.parent;
        }
        return false;
      }
      function isInTailCallPosition(node2) {
        if (node2.parent.type === "ArrowFunctionExpression") {
          return true;
        }
        if (node2.parent.type === "ReturnStatement") {
          return !hasErrorHandler(node2.parent);
        }
        if (node2.parent.type === "ConditionalExpression" && (node2 === node2.parent.consequent || node2 === node2.parent.alternate)) {
          return isInTailCallPosition(node2.parent);
        }
        if (node2.parent.type === "LogicalExpression" && node2 === node2.parent.right) {
          return isInTailCallPosition(node2.parent);
        }
        if (node2.parent.type === "SequenceExpression" && node2 === node2.parent.expressions.at(-1)) {
          return isInTailCallPosition(node2.parent);
        }
        return false;
      }
      return {
        AwaitExpression(node2) {
          if (isInTailCallPosition(node2) && !hasErrorHandler(node2)) {
            reportUnnecessaryAwait(node2);
          }
        }
      };
    }
  };
  return noReturnAwait;
}
var noScriptUrl;
var hasRequiredNoScriptUrl;
function requireNoScriptUrl() {
  if (hasRequiredNoScriptUrl) return noScriptUrl;
  hasRequiredNoScriptUrl = 1;
  const astUtils2 = requireAstUtils();
  noScriptUrl = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `javascript:` URLs",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-script-url"
      },
      schema: [],
      messages: {
        unexpectedScriptURL: "Script URL is a form of eval."
      }
    },
    create(context) {
      function check2(node2) {
        const value = astUtils2.getStaticStringValue(node2);
        if (typeof value === "string" && value.toLowerCase().indexOf("javascript:") === 0) {
          context.report({ node: node2, messageId: "unexpectedScriptURL" });
        }
      }
      return {
        Literal(node2) {
          if (node2.value && typeof node2.value === "string") {
            check2(node2);
          }
        },
        TemplateLiteral(node2) {
          if (!(node2.parent && node2.parent.type === "TaggedTemplateExpression")) {
            check2(node2);
          }
        }
      };
    }
  };
  return noScriptUrl;
}
var noSelfAssign;
var hasRequiredNoSelfAssign;
function requireNoSelfAssign() {
  if (hasRequiredNoSelfAssign) return noSelfAssign;
  hasRequiredNoSelfAssign = 1;
  const astUtils2 = requireAstUtils();
  const SPACES = /\s+/gu;
  function eachSelfAssignment(left, right, props, report) {
    if (!left || !right) ;
    else if (left.type === "Identifier" && right.type === "Identifier" && left.name === right.name) {
      report(right);
    } else if (left.type === "ArrayPattern" && right.type === "ArrayExpression") {
      const end = Math.min(left.elements.length, right.elements.length);
      for (let i2 = 0; i2 < end; ++i2) {
        const leftElement = left.elements[i2];
        const rightElement = right.elements[i2];
        if (leftElement && leftElement.type === "RestElement" && i2 < right.elements.length - 1) {
          break;
        }
        eachSelfAssignment(leftElement, rightElement, props, report);
        if (rightElement && rightElement.type === "SpreadElement") {
          break;
        }
      }
    } else if (left.type === "RestElement" && right.type === "SpreadElement") {
      eachSelfAssignment(left.argument, right.argument, props, report);
    } else if (left.type === "ObjectPattern" && right.type === "ObjectExpression" && right.properties.length >= 1) {
      let startJ = 0;
      for (let i2 = right.properties.length - 1; i2 >= 0; --i2) {
        const propType = right.properties[i2].type;
        if (propType === "SpreadElement" || propType === "ExperimentalSpreadProperty") {
          startJ = i2 + 1;
          break;
        }
      }
      for (let i2 = 0; i2 < left.properties.length; ++i2) {
        for (let j = startJ; j < right.properties.length; ++j) {
          eachSelfAssignment(
            left.properties[i2],
            right.properties[j],
            props,
            report
          );
        }
      }
    } else if (left.type === "Property" && right.type === "Property" && right.kind === "init" && !right.method) {
      const leftName = astUtils2.getStaticPropertyName(left);
      if (leftName !== null && leftName === astUtils2.getStaticPropertyName(right)) {
        eachSelfAssignment(left.value, right.value, props, report);
      }
    } else if (props && astUtils2.skipChainExpression(left).type === "MemberExpression" && astUtils2.skipChainExpression(right).type === "MemberExpression" && astUtils2.isSameReference(left, right)) {
      report(right);
    }
  }
  noSelfAssign = {
    meta: {
      type: "problem",
      defaultOptions: [{ props: true }],
      docs: {
        description: "Disallow assignments where both sides are exactly the same",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-self-assign"
      },
      schema: [
        {
          type: "object",
          properties: {
            props: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        selfAssignment: "'{{name}}' is assigned to itself."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ props }] = context.options;
      function report(node2) {
        context.report({
          node: node2,
          messageId: "selfAssignment",
          data: {
            name: sourceCode2.getText(node2).replace(SPACES, "")
          }
        });
      }
      return {
        AssignmentExpression(node2) {
          if (["=", "&&=", "||=", "??="].includes(node2.operator)) {
            eachSelfAssignment(node2.left, node2.right, props, report);
          }
        }
      };
    }
  };
  return noSelfAssign;
}
var noSelfCompare;
var hasRequiredNoSelfCompare;
function requireNoSelfCompare() {
  if (hasRequiredNoSelfCompare) return noSelfCompare;
  hasRequiredNoSelfCompare = 1;
  noSelfCompare = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow comparisons where both sides are exactly the same",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-self-compare"
      },
      schema: [],
      messages: {
        comparingToSelf: "Comparing to itself is potentially pointless."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function hasSameTokens(nodeA, nodeB) {
        const tokensA = sourceCode2.getTokens(nodeA);
        const tokensB = sourceCode2.getTokens(nodeB);
        return tokensA.length === tokensB.length && tokensA.every(
          (token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value
        );
      }
      return {
        BinaryExpression(node2) {
          const operators = /* @__PURE__ */ new Set([
            "===",
            "==",
            "!==",
            "!=",
            ">",
            "<",
            ">=",
            "<="
          ]);
          if (operators.has(node2.operator) && hasSameTokens(node2.left, node2.right)) {
            context.report({ node: node2, messageId: "comparingToSelf" });
          }
        }
      };
    }
  };
  return noSelfCompare;
}
var noSequences;
var hasRequiredNoSequences;
function requireNoSequences() {
  if (hasRequiredNoSequences) return noSequences;
  hasRequiredNoSequences = 1;
  const astUtils2 = requireAstUtils();
  noSequences = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow comma operators",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-sequences"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowInParentheses: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      defaultOptions: [
        {
          allowInParentheses: true
        }
      ],
      messages: {
        unexpectedCommaExpression: "Unexpected use of comma operator."
      }
    },
    create(context) {
      const [{ allowInParentheses }] = context.options;
      const sourceCode2 = context.sourceCode;
      const parenthesized = {
        DoWhileStatement: "test",
        IfStatement: "test",
        SwitchStatement: "discriminant",
        WhileStatement: "test",
        WithStatement: "object",
        ArrowFunctionExpression: "body"
        /*
         * Omitting CallExpression - commas are parsed as argument separators
         * Omitting NewExpression - commas are parsed as argument separators
         * Omitting ForInStatement - parts aren't individually parenthesised
         * Omitting ForStatement - parts aren't individually parenthesised
         */
      };
      function requiresExtraParens(node2) {
        return node2.parent && parenthesized[node2.parent.type] && node2 === node2.parent[parenthesized[node2.parent.type]];
      }
      function isParenthesised(node2) {
        return astUtils2.isParenthesised(sourceCode2, node2);
      }
      function isParenthesisedTwice(node2) {
        const previousToken = sourceCode2.getTokenBefore(node2, 1), nextToken = sourceCode2.getTokenAfter(node2, 1);
        return isParenthesised(node2) && previousToken && nextToken && astUtils2.isOpeningParenToken(previousToken) && previousToken.range[1] <= node2.range[0] && astUtils2.isClosingParenToken(nextToken) && nextToken.range[0] >= node2.range[1];
      }
      return {
        SequenceExpression(node2) {
          if (node2.parent.type === "ForStatement" && (node2 === node2.parent.init || node2 === node2.parent.update)) {
            return;
          }
          if (allowInParentheses) {
            if (requiresExtraParens(node2)) {
              if (isParenthesisedTwice(node2)) {
                return;
              }
            } else {
              if (isParenthesised(node2)) {
                return;
              }
            }
          }
          const firstCommaToken = sourceCode2.getTokenAfter(
            node2.expressions[0],
            astUtils2.isCommaToken
          );
          context.report({
            node: node2,
            loc: firstCommaToken.loc,
            messageId: "unexpectedCommaExpression"
          });
        }
      };
    }
  };
  return noSequences;
}
var noSetterReturn;
var hasRequiredNoSetterReturn;
function requireNoSetterReturn() {
  if (hasRequiredNoSetterReturn) return noSetterReturn;
  hasRequiredNoSetterReturn = 1;
  const astUtils2 = requireAstUtils();
  function isArgumentOfGlobalMethodCall(node2, sourceCode2, objectName, methodName, index) {
    const callNode = node2.parent;
    return callNode.type === "CallExpression" && callNode.arguments[index] === node2 && astUtils2.isSpecificMemberAccess(
      callNode.callee,
      objectName,
      methodName
    ) && sourceCode2.isGlobalReference(
      astUtils2.skipChainExpression(callNode.callee).object
    );
  }
  function isPropertyDescriptor(node2, sourceCode2) {
    if (isArgumentOfGlobalMethodCall(
      node2,
      sourceCode2,
      "Object",
      "defineProperty",
      2
    ) || isArgumentOfGlobalMethodCall(
      node2,
      sourceCode2,
      "Reflect",
      "defineProperty",
      2
    )) {
      return true;
    }
    const parent = node2.parent;
    if (parent.type === "Property" && parent.value === node2) {
      const grandparent = parent.parent;
      if (grandparent.type === "ObjectExpression" && (isArgumentOfGlobalMethodCall(
        grandparent,
        sourceCode2,
        "Object",
        "create",
        1
      ) || isArgumentOfGlobalMethodCall(
        grandparent,
        sourceCode2,
        "Object",
        "defineProperties",
        1
      ))) {
        return true;
      }
    }
    return false;
  }
  function isSetter(node2, sourceCode2) {
    const parent = node2.parent;
    if ((parent.type === "Property" || parent.type === "MethodDefinition") && parent.kind === "set" && parent.value === node2) {
      return true;
    }
    if (parent.type === "Property" && parent.value === node2 && astUtils2.getStaticPropertyName(parent) === "set" && parent.parent.type === "ObjectExpression" && isPropertyDescriptor(parent.parent, sourceCode2)) {
      return true;
    }
    return false;
  }
  noSetterReturn = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow returning values from setters",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-setter-return"
      },
      schema: [],
      messages: {
        returnsValue: "Setter cannot return a value."
      }
    },
    create(context) {
      let funcInfo = null;
      const sourceCode2 = context.sourceCode;
      function enterFunction(node2) {
        funcInfo = {
          upper: funcInfo,
          isSetter: isSetter(node2, sourceCode2)
        };
      }
      function exitFunction() {
        funcInfo = funcInfo.upper;
      }
      function report(node2) {
        context.report({ node: node2, messageId: "returnsValue" });
      }
      return {
        /*
         * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid
         * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.
         *
         * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,
         * but that's out of scope for this rule.
         */
        FunctionDeclaration: enterFunction,
        FunctionExpression: enterFunction,
        ArrowFunctionExpression(node2) {
          enterFunction(node2);
          if (funcInfo.isSetter && node2.expression) {
            report(node2.body);
          }
        },
        "FunctionDeclaration:exit": exitFunction,
        "FunctionExpression:exit": exitFunction,
        "ArrowFunctionExpression:exit": exitFunction,
        ReturnStatement(node2) {
          if (funcInfo && funcInfo.isSetter && node2.argument) {
            report(node2);
          }
        }
      };
    }
  };
  return noSetterReturn;
}
var noShadow;
var hasRequiredNoShadow;
function requireNoShadow() {
  if (hasRequiredNoShadow) return noShadow;
  hasRequiredNoShadow = 1;
  const astUtils2 = requireAstUtils();
  const FUNC_EXPR_NODE_TYPES = /* @__PURE__ */ new Set([
    "ArrowFunctionExpression",
    "FunctionExpression"
  ]);
  const CALL_EXPR_NODE_TYPE = /* @__PURE__ */ new Set(["CallExpression"]);
  const FOR_IN_OF_TYPE = /^For(?:In|Of)Statement$/u;
  const SENTINEL_TYPE = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/u;
  const TYPES_HOISTED_NODES = /* @__PURE__ */ new Set([
    "TSInterfaceDeclaration",
    "TSTypeAliasDeclaration"
  ]);
  const ALLOWED_FUNCTION_VARIABLE_DEF_TYPES = /* @__PURE__ */ new Set([
    "TSCallSignatureDeclaration",
    "TSFunctionType",
    "TSMethodSignature",
    "TSEmptyBodyFunctionExpression",
    "TSDeclareFunction",
    "TSConstructSignatureDeclaration",
    "TSConstructorType"
  ]);
  noShadow = {
    meta: {
      type: "suggestion",
      dialects: ["typescript", "javascript"],
      language: "javascript",
      defaultOptions: [
        {
          allow: [],
          builtinGlobals: false,
          hoist: "functions",
          ignoreOnInitialization: false,
          ignoreTypeValueShadow: true,
          ignoreFunctionTypeParameterNameValueShadow: true
        }
      ],
      docs: {
        description: "Disallow variable declarations from shadowing variables declared in the outer scope",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-shadow"
      },
      schema: [
        {
          type: "object",
          properties: {
            builtinGlobals: { type: "boolean" },
            hoist: {
              enum: [
                "all",
                "functions",
                "never",
                "types",
                "functions-and-types"
              ]
            },
            allow: {
              type: "array",
              items: {
                type: "string"
              }
            },
            ignoreOnInitialization: { type: "boolean" },
            ignoreTypeValueShadow: { type: "boolean" },
            ignoreFunctionTypeParameterNameValueShadow: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        noShadow: "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
        noShadowGlobal: "'{{name}}' is already a global variable."
      }
    },
    create(context) {
      const [
        {
          builtinGlobals,
          hoist,
          allow,
          ignoreOnInitialization,
          ignoreTypeValueShadow,
          ignoreFunctionTypeParameterNameValueShadow
        }
      ] = context.options;
      const sourceCode2 = context.sourceCode;
      function isGlobalAugmentation(scope) {
        return scope.block.kind === "global" || !!scope.upper && isGlobalAugmentation(scope.upper);
      }
      function isThisParam(variable) {
        return variable.name === "this";
      }
      function isTypeValueShadow(variable, shadowedVariable) {
        if (ignoreTypeValueShadow !== true) {
          return false;
        }
        if (!("isValueVariable" in variable)) {
          return false;
        }
        const firstDefinition = shadowedVariable.defs[0];
        const isTypeImport = firstDefinition && firstDefinition.parent?.type === "ImportDeclaration" && (firstDefinition.parent.importKind === "type" || firstDefinition.parent.specifiers.some(
          (s2) => s2.importKind === "type"
        ));
        const isShadowedValue = !firstDefinition || (isTypeImport ? false : shadowedVariable.isValueVariable);
        return variable.isValueVariable !== isShadowedValue;
      }
      function isFunctionTypeParameterNameValueShadow(variable) {
        if (ignoreFunctionTypeParameterNameValueShadow !== true) {
          return false;
        }
        return variable.defs.some(
          (def) => ALLOWED_FUNCTION_VARIABLE_DEF_TYPES.has(def.node.type)
        );
      }
      function isTypeParameterOfStaticMethod(variable) {
        const typeParameter = variable.identifiers[0].parent;
        const typeParameterDecl = typeParameter.parent;
        if (typeParameterDecl.type !== "TSTypeParameterDeclaration") {
          return false;
        }
        const functionExpr = typeParameterDecl.parent;
        const methodDefinition = functionExpr.parent;
        return methodDefinition.static;
      }
      function isGenericOfAStaticMethodShadow(variable) {
        return isTypeParameterOfStaticMethod(variable);
      }
      function isInRange(node2, location) {
        return node2 && node2.range[0] <= location && location <= node2.range[1];
      }
      function findSelfOrAncestor(node2, match) {
        let currentNode = node2;
        while (currentNode && !match(currentNode)) {
          currentNode = currentNode.parent;
        }
        return currentNode;
      }
      function getOuterScope(scope) {
        const upper = scope.upper;
        if (upper && upper.type === "function-expression-name") {
          return upper.upper;
        }
        return upper;
      }
      function isInitPatternNode(variable, shadowedVariable) {
        const outerDef = shadowedVariable.defs[0];
        if (!outerDef) {
          return false;
        }
        const { variableScope } = variable.scope;
        if (!(FUNC_EXPR_NODE_TYPES.has(variableScope.block.type) && getOuterScope(variableScope) === shadowedVariable.scope)) {
          return false;
        }
        const fun = variableScope.block;
        const { parent } = fun;
        const callExpression = findSelfOrAncestor(
          parent,
          (node3) => CALL_EXPR_NODE_TYPE.has(node3.type)
        );
        if (!callExpression) {
          return false;
        }
        let node2 = outerDef.name;
        const location = callExpression.range[1];
        while (node2) {
          if (node2.type === "VariableDeclarator") {
            if (isInRange(node2.init, location)) {
              return true;
            }
            if (FOR_IN_OF_TYPE.test(node2.parent.parent.type) && isInRange(node2.parent.parent.right, location)) {
              return true;
            }
            break;
          } else if (node2.type === "AssignmentPattern") {
            if (isInRange(node2.right, location)) {
              return true;
            }
          } else if (SENTINEL_TYPE.test(node2.type)) {
            break;
          }
          node2 = node2.parent;
        }
        return false;
      }
      function isAllowed(variable) {
        return allow.includes(variable.name);
      }
      function isDuplicatedClassNameVariable(variable) {
        const block = variable.scope.block;
        return block.type === "ClassDeclaration" && block.id === variable.identifiers[0];
      }
      function isOnInitializer(variable, scopeVar) {
        const outerScope = scopeVar.scope;
        const outerDef = scopeVar.defs[0];
        const outer = outerDef && outerDef.parent && outerDef.parent.range;
        const innerScope = variable.scope;
        const innerDef = variable.defs[0];
        const inner = innerDef && innerDef.name.range;
        return outer && inner && outer[0] < inner[0] && inner[1] < outer[1] && (innerDef.type === "FunctionName" && innerDef.node.type === "FunctionExpression" || innerDef.node.type === "ClassExpression") && outerScope === innerScope.upper;
      }
      function getNameRange(variable) {
        const def = variable.defs[0];
        return def && def.name.range;
      }
      function getDeclaredLocation(variable) {
        const identifier = variable.identifiers[0];
        let obj;
        if (identifier) {
          obj = {
            global: false,
            line: identifier.loc.start.line,
            column: identifier.loc.start.column + 1
          };
        } else {
          obj = {
            global: true
          };
        }
        return obj;
      }
      function isInTdz(variable, scopeVar) {
        const outerDef = scopeVar.defs[0];
        const inner = getNameRange(variable);
        const outer = getNameRange(scopeVar);
        if (!outer || inner[1] >= outer[0]) {
          return false;
        }
        if (hoist === "types") {
          return !TYPES_HOISTED_NODES.has(outerDef.node.type);
        }
        if (hoist === "functions-and-types") {
          return outerDef.node.type !== "FunctionDeclaration" && !TYPES_HOISTED_NODES.has(outerDef.node.type);
        }
        return inner && outer && inner[1] < outer[0] && // Excepts FunctionDeclaration if is {"hoist":"function"}.
        (hoist !== "functions" || !outerDef || outerDef.node.type !== "FunctionDeclaration");
      }
      function isDeclareInDTSFile(variable) {
        const fileName = context.filename;
        if (!fileName.endsWith(".d.ts") && !fileName.endsWith(".d.cts") && !fileName.endsWith(".d.mts")) {
          return false;
        }
        return variable.defs.some(
          (def) => def.type === "Variable" && def.parent.declare || def.type === "ClassName" && def.node.declare || def.type === "TSEnumName" && def.node.declare || def.type === "TSModuleName" && def.node.declare
        );
      }
      function isDuplicatedEnumNameVariable(variable) {
        const block = variable.scope.block;
        return block.type === "TSEnumDeclaration" && block.id === variable.identifiers[0];
      }
      function isExternalDeclarationMerging(scope, variable, shadowedVariable) {
        const firstDefinition = shadowedVariable.defs[0];
        if (!firstDefinition || !firstDefinition.parent) {
          return false;
        }
        const isTypeImport = firstDefinition.parent.type === "ImportDeclaration" && (firstDefinition.parent.importKind === "type" || firstDefinition.parent.specifiers?.some(
          (s2) => s2.type === "ImportSpecifier" && s2.importKind === "type" && s2.local.name === shadowedVariable.name
        ));
        if (!isTypeImport) {
          return false;
        }
        const moduleDecl = findSelfOrAncestor(
          variable.identifiers[0]?.parent,
          (node2) => node2.type === "TSModuleDeclaration"
        );
        if (!moduleDecl) {
          return false;
        }
        const importSource = firstDefinition.parent.source.value;
        const moduleName = moduleDecl.id.type === "Literal" ? moduleDecl.id.value : moduleDecl.id.name;
        return importSource === moduleName;
      }
      function checkForShadows(scope) {
        if (isGlobalAugmentation(scope)) {
          return;
        }
        const variables = scope.variables;
        for (let i2 = 0; i2 < variables.length; ++i2) {
          const variable = variables[i2];
          if (variable.identifiers.length === 0 || isDuplicatedClassNameVariable(variable) || isDuplicatedEnumNameVariable(variable) || isAllowed(variable) || isDeclareInDTSFile(variable) || isThisParam(variable)) {
            continue;
          }
          const shadowed = astUtils2.getVariableByName(
            scope.upper,
            variable.name
          );
          if (shadowed && (shadowed.identifiers.length > 0 || builtinGlobals && "writeable" in shadowed) && !isOnInitializer(variable, shadowed) && !(ignoreOnInitialization && isInitPatternNode(variable, shadowed)) && !(hoist !== "all" && isInTdz(variable, shadowed)) && !isTypeValueShadow(variable, shadowed) && !isFunctionTypeParameterNameValueShadow(variable) && !isGenericOfAStaticMethodShadow(variable) && !isExternalDeclarationMerging(scope, variable, shadowed)) {
            const location = getDeclaredLocation(shadowed);
            const messageId = location.global ? "noShadowGlobal" : "noShadow";
            const data2 = { name: variable.name };
            if (!location.global) {
              data2.shadowedLine = location.line;
              data2.shadowedColumn = location.column;
            }
            context.report({
              node: variable.identifiers[0],
              messageId,
              data: data2
            });
          }
        }
      }
      return {
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          const stack = globalScope.childScopes.slice();
          while (stack.length) {
            const scope = stack.pop();
            stack.push(...scope.childScopes);
            checkForShadows(scope);
          }
        }
      };
    }
  };
  return noShadow;
}
var noShadowRestrictedNames;
var hasRequiredNoShadowRestrictedNames;
function requireNoShadowRestrictedNames() {
  if (hasRequiredNoShadowRestrictedNames) return noShadowRestrictedNames;
  hasRequiredNoShadowRestrictedNames = 1;
  function safelyShadowsUndefined(variable) {
    return variable.name === "undefined" && variable.references.every((ref2) => !ref2.isWrite()) && variable.defs.every(
      (def) => def.node.type === "VariableDeclarator" && def.node.init === null
    );
  }
  noShadowRestrictedNames = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          reportGlobalThis: false
        }
      ],
      docs: {
        description: "Disallow identifiers from shadowing restricted names",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-shadow-restricted-names"
      },
      schema: [
        {
          type: "object",
          properties: {
            reportGlobalThis: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        shadowingRestrictedName: "Shadowing of global property '{{name}}'."
      }
    },
    create(context) {
      const [{ reportGlobalThis }] = context.options;
      const RESTRICTED = /* @__PURE__ */ new Set([
        "undefined",
        "NaN",
        "Infinity",
        "arguments",
        "eval"
      ]);
      if (reportGlobalThis) {
        RESTRICTED.add("globalThis");
      }
      const sourceCode2 = context.sourceCode;
      const reportedNodes = /* @__PURE__ */ new Set();
      return {
        "VariableDeclaration, :function, CatchClause, ImportDeclaration, ClassDeclaration, ClassExpression"(node2) {
          for (const variable of sourceCode2.getDeclaredVariables(node2)) {
            if (variable.defs.length > 0 && RESTRICTED.has(variable.name) && !safelyShadowsUndefined(variable)) {
              for (const def of variable.defs) {
                const nodeToReport = def.name;
                if (!reportedNodes.has(nodeToReport)) {
                  reportedNodes.add(nodeToReport);
                  context.report({
                    node: nodeToReport,
                    messageId: "shadowingRestrictedName",
                    data: {
                      name: variable.name
                    }
                  });
                }
              }
            }
          }
        }
      };
    }
  };
  return noShadowRestrictedNames;
}
var noSpacedFunc;
var hasRequiredNoSpacedFunc;
function requireNoSpacedFunc() {
  if (hasRequiredNoSpacedFunc) return noSpacedFunc;
  hasRequiredNoSpacedFunc = 1;
  noSpacedFunc = {
    meta: {
      type: "layout",
      docs: {
        description: "Disallow spacing between function identifiers and their applications (deprecated)",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-spaced-func"
      },
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        deprecatedSince: "3.3.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "function-call-spacing",
              url: "https://eslint.style/rules/function-call-spacing"
            }
          }
        ]
      },
      fixable: "whitespace",
      schema: [],
      messages: {
        noSpacedFunction: "Unexpected space between function name and paren."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function detectOpenSpaces(node2) {
        const lastCalleeToken = sourceCode2.getLastToken(node2.callee);
        let prevToken = lastCalleeToken, parenToken = sourceCode2.getTokenAfter(lastCalleeToken);
        while (parenToken && parenToken.range[1] < node2.range[1] && parenToken.value !== "(") {
          prevToken = parenToken;
          parenToken = sourceCode2.getTokenAfter(parenToken);
        }
        if (parenToken && parenToken.range[1] < node2.range[1] && sourceCode2.isSpaceBetweenTokens(prevToken, parenToken)) {
          context.report({
            node: node2,
            loc: lastCalleeToken.loc.start,
            messageId: "noSpacedFunction",
            fix(fixer) {
              return fixer.removeRange([
                prevToken.range[1],
                parenToken.range[0]
              ]);
            }
          });
        }
      }
      return {
        CallExpression: detectOpenSpaces,
        NewExpression: detectOpenSpaces
      };
    }
  };
  return noSpacedFunc;
}
var noSparseArrays;
var hasRequiredNoSparseArrays;
function requireNoSparseArrays() {
  if (hasRequiredNoSparseArrays) return noSparseArrays;
  hasRequiredNoSparseArrays = 1;
  const astUtils2 = requireAstUtils();
  noSparseArrays = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow sparse arrays",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-sparse-arrays"
      },
      schema: [],
      messages: {
        unexpectedSparseArray: "Unexpected comma in middle of array."
      }
    },
    create(context) {
      return {
        ArrayExpression(node2) {
          if (!node2.elements.includes(null)) {
            return;
          }
          const { sourceCode: sourceCode2 } = context;
          let commaToken;
          for (const [index, element] of node2.elements.entries()) {
            if (index === node2.elements.length - 1 && element) {
              return;
            }
            commaToken = sourceCode2.getTokenAfter(
              element ?? commaToken ?? sourceCode2.getFirstToken(node2),
              astUtils2.isCommaToken
            );
            if (element) {
              continue;
            }
            context.report({
              node: node2,
              loc: commaToken.loc,
              messageId: "unexpectedSparseArray"
            });
          }
        }
      };
    }
  };
  return noSparseArrays;
}
var noSync;
var hasRequiredNoSync;
function requireNoSync() {
  if (hasRequiredNoSync) return noSync;
  hasRequiredNoSync = 1;
  noSync = {
    meta: {
      deprecated: {
        message: "Node.js rules were moved out of ESLint core.",
        url: "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        deprecatedSince: "7.0.0",
        availableUntil: null,
        replacedBy: [
          {
            message: "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            plugin: {
              name: "eslint-plugin-n",
              url: "https://github.com/eslint-community/eslint-plugin-n"
            },
            rule: {
              name: "no-sync",
              url: "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Disallow synchronous methods",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-sync"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowAtRootLevel: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        noSync: "Unexpected sync method: '{{propertyName}}'."
      }
    },
    create(context) {
      const selector = context.options[0] && context.options[0].allowAtRootLevel ? ":function MemberExpression[property.name=/.*Sync$/]" : "MemberExpression[property.name=/.*Sync$/]";
      return {
        [selector](node2) {
          context.report({
            node: node2,
            messageId: "noSync",
            data: {
              propertyName: node2.property.name
            }
          });
        }
      };
    }
  };
  return noSync;
}
var noTabs;
var hasRequiredNoTabs;
function requireNoTabs() {
  if (hasRequiredNoTabs) return noTabs;
  hasRequiredNoTabs = 1;
  const tabRegex = /\t+/gu;
  const anyNonWhitespaceRegex = /\S/u;
  noTabs = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-tabs",
              url: "https://eslint.style/rules/no-tabs"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Disallow all tabs",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-tabs"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowIndentationTabs: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedTab: "Unexpected tab character."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;
      return {
        Program(node2) {
          sourceCode2.getLines().forEach((line, index) => {
            let match;
            while ((match = tabRegex.exec(line)) !== null) {
              if (allowIndentationTabs && !anyNonWhitespaceRegex.test(
                line.slice(0, match.index)
              )) {
                continue;
              }
              context.report({
                node: node2,
                loc: {
                  start: {
                    line: index + 1,
                    column: match.index
                  },
                  end: {
                    line: index + 1,
                    column: match.index + match[0].length
                  }
                },
                messageId: "unexpectedTab"
              });
            }
          });
        }
      };
    }
  };
  return noTabs;
}
var noTemplateCurlyInString;
var hasRequiredNoTemplateCurlyInString;
function requireNoTemplateCurlyInString() {
  if (hasRequiredNoTemplateCurlyInString) return noTemplateCurlyInString;
  hasRequiredNoTemplateCurlyInString = 1;
  noTemplateCurlyInString = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow template literal placeholder syntax in regular strings",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-template-curly-in-string"
      },
      schema: [],
      messages: {
        unexpectedTemplateExpression: "Unexpected template string expression."
      }
    },
    create(context) {
      const regex = /\$\{[^}]+\}/u;
      return {
        Literal(node2) {
          if (typeof node2.value === "string" && regex.test(node2.value)) {
            context.report({
              node: node2,
              messageId: "unexpectedTemplateExpression"
            });
          }
        }
      };
    }
  };
  return noTemplateCurlyInString;
}
var noTernary;
var hasRequiredNoTernary;
function requireNoTernary() {
  if (hasRequiredNoTernary) return noTernary;
  hasRequiredNoTernary = 1;
  noTernary = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow ternary operators",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-ternary"
      },
      schema: [],
      messages: {
        noTernaryOperator: "Ternary operator used."
      }
    },
    create(context) {
      return {
        ConditionalExpression(node2) {
          context.report({ node: node2, messageId: "noTernaryOperator" });
        }
      };
    }
  };
  return noTernary;
}
var noThisBeforeSuper;
var hasRequiredNoThisBeforeSuper;
function requireNoThisBeforeSuper() {
  if (hasRequiredNoThisBeforeSuper) return noThisBeforeSuper;
  hasRequiredNoThisBeforeSuper = 1;
  const astUtils2 = requireAstUtils();
  function isConstructorFunction(node2) {
    return node2.type === "FunctionExpression" && node2.parent.type === "MethodDefinition" && node2.parent.kind === "constructor";
  }
  class SegmentInfo {
    /**
     * Indicates whether `super()` is called in all code paths.
     * @type {boolean}
     */
    superCalled = false;
    /**
     * The array of invalid ThisExpression and Super nodes.
     * @type {ASTNode[]}
     */
    invalidNodes = [];
  }
  noThisBeforeSuper = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow `this`/`super` before calling `super()` in constructors",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-this-before-super"
      },
      schema: [],
      messages: {
        noBeforeSuper: "'{{kind}}' is not allowed before 'super()'."
      }
    },
    create(context) {
      let funcInfo = null;
      let segInfoMap = /* @__PURE__ */ Object.create(null);
      function isCalled(segment) {
        return !segment.reachable || segInfoMap[segment.id]?.superCalled;
      }
      function isInConstructorOfDerivedClass() {
        return Boolean(
          funcInfo && funcInfo.isConstructor && funcInfo.hasExtends
        );
      }
      function isEverySegmentCalled(segments) {
        for (const segment of segments) {
          if (!isCalled(segment)) {
            return false;
          }
        }
        return true;
      }
      function isBeforeCallOfSuper() {
        return isInConstructorOfDerivedClass() && !isEverySegmentCalled(funcInfo.currentSegments);
      }
      function setInvalid(node2) {
        const segments = funcInfo.currentSegments;
        for (const segment of segments) {
          if (segment.reachable) {
            segInfoMap[segment.id].invalidNodes.push(node2);
          }
        }
      }
      function setSuperCalled() {
        const segments = funcInfo.currentSegments;
        for (const segment of segments) {
          if (segment.reachable) {
            segInfoMap[segment.id].superCalled = true;
          }
        }
      }
      return {
        /**
         * Adds information of a constructor into the stack.
         * @param {CodePath} codePath A code path which was started.
         * @param {ASTNode} node The current node.
         * @returns {void}
         */
        onCodePathStart(codePath2, node2) {
          if (isConstructorFunction(node2)) {
            const classNode = node2.parent.parent.parent;
            funcInfo = {
              upper: funcInfo,
              isConstructor: true,
              hasExtends: Boolean(
                classNode.superClass && !astUtils2.isNullOrUndefined(
                  classNode.superClass
                )
              ),
              codePath: codePath2,
              currentSegments: /* @__PURE__ */ new Set()
            };
          } else {
            funcInfo = {
              upper: funcInfo,
              isConstructor: false,
              hasExtends: false,
              codePath: codePath2,
              currentSegments: /* @__PURE__ */ new Set()
            };
          }
        },
        /**
         * Removes the top of stack item.
         *
         * And this traverses all segments of this code path then reports every
         * invalid node.
         * @param {CodePath} codePath A code path which was ended.
         * @returns {void}
         */
        onCodePathEnd(codePath2) {
          const isDerivedClass = funcInfo.hasExtends;
          funcInfo = funcInfo.upper;
          if (!isDerivedClass) {
            return;
          }
          const reported = /* @__PURE__ */ new Set();
          codePath2.traverseSegments((segment, controller) => {
            const info = segInfoMap[segment.id];
            const invalidNodes = info.invalidNodes.filter(
              /*
               * Avoid duplicate reports.
               * When there is a `finally`, invalidNodes may contain already reported node.
               */
              (node2) => !reported.has(node2)
            );
            for (const invalidNode of invalidNodes) {
              reported.add(invalidNode);
              context.report({
                messageId: "noBeforeSuper",
                node: invalidNode,
                data: {
                  kind: invalidNode.type === "Super" ? "super" : "this"
                }
              });
            }
            if (info.superCalled) {
              controller.skip();
            }
          });
        },
        /**
         * Initialize information of a given code path segment.
         * @param {CodePathSegment} segment A code path segment to initialize.
         * @returns {void}
         */
        onCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
          if (!isInConstructorOfDerivedClass()) {
            return;
          }
          segInfoMap[segment.id] = {
            superCalled: segment.prevSegments.length > 0 && segment.prevSegments.every(isCalled),
            invalidNodes: []
          };
        },
        onUnreachableCodePathSegmentStart(segment) {
          funcInfo.currentSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        onCodePathSegmentEnd(segment) {
          funcInfo.currentSegments.delete(segment);
        },
        /**
         * Update information of the code path segment when a code path was
         * looped.
         * @param {CodePathSegment} fromSegment The code path segment of the
         *      end of a loop.
         * @param {CodePathSegment} toSegment A code path segment of the head
         *      of a loop.
         * @returns {void}
         */
        onCodePathSegmentLoop(fromSegment, toSegment) {
          if (!isInConstructorOfDerivedClass()) {
            return;
          }
          funcInfo.codePath.traverseSegments(
            { first: toSegment, last: fromSegment },
            (segment, controller) => {
              const info = segInfoMap[segment.id] ?? new SegmentInfo();
              if (info.superCalled) {
                controller.skip();
              } else if (segment.prevSegments.length > 0 && segment.prevSegments.every(isCalled)) {
                info.superCalled = true;
              }
              segInfoMap[segment.id] = info;
            }
          );
        },
        /**
         * Reports if this is before `super()`.
         * @param {ASTNode} node A target node.
         * @returns {void}
         */
        ThisExpression(node2) {
          if (isBeforeCallOfSuper()) {
            setInvalid(node2);
          }
        },
        /**
         * Reports if this is before `super()`.
         * @param {ASTNode} node A target node.
         * @returns {void}
         */
        Super(node2) {
          if (!astUtils2.isCallee(node2) && isBeforeCallOfSuper()) {
            setInvalid(node2);
          }
        },
        /**
         * Marks `super()` called.
         * @param {ASTNode} node A target node.
         * @returns {void}
         */
        "CallExpression:exit"(node2) {
          if (node2.callee.type === "Super" && isBeforeCallOfSuper()) {
            setSuperCalled();
          }
        },
        /**
         * Resets state.
         * @returns {void}
         */
        "Program:exit"() {
          segInfoMap = /* @__PURE__ */ Object.create(null);
        }
      };
    }
  };
  return noThisBeforeSuper;
}
var noThrowLiteral;
var hasRequiredNoThrowLiteral;
function requireNoThrowLiteral() {
  if (hasRequiredNoThrowLiteral) return noThrowLiteral;
  hasRequiredNoThrowLiteral = 1;
  const astUtils2 = requireAstUtils();
  noThrowLiteral = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow throwing literals as exceptions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-throw-literal"
      },
      schema: [],
      messages: {
        object: "Expected an error object to be thrown.",
        undef: "Do not throw undefined."
      }
    },
    create(context) {
      return {
        ThrowStatement(node2) {
          if (!astUtils2.couldBeError(node2.argument)) {
            context.report({ node: node2, messageId: "object" });
          } else if (node2.argument.type === "Identifier") {
            if (node2.argument.name === "undefined") {
              context.report({ node: node2, messageId: "undef" });
            }
          }
        }
      };
    }
  };
  return noThrowLiteral;
}
var noTrailingSpaces;
var hasRequiredNoTrailingSpaces;
function requireNoTrailingSpaces() {
  if (hasRequiredNoTrailingSpaces) return noTrailingSpaces;
  hasRequiredNoTrailingSpaces = 1;
  const astUtils2 = requireAstUtils();
  noTrailingSpaces = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-trailing-spaces",
              url: "https://eslint.style/rules/no-trailing-spaces"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Disallow trailing whitespace at the end of lines",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-trailing-spaces"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            skipBlankLines: {
              type: "boolean",
              default: false
            },
            ignoreComments: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        trailingSpace: "Trailing spaces not allowed."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const BLANK_CLASS = "[ 	            ​　]", SKIP_BLANK = `^${BLANK_CLASS}*$`, NONBLANK = `${BLANK_CLASS}+$`;
      const options = context.options[0] || {}, skipBlankLines = options.skipBlankLines || false, ignoreComments = options.ignoreComments || false;
      function report(node2, location, fixRange) {
        context.report({
          node: node2,
          loc: location,
          messageId: "trailingSpace",
          fix(fixer) {
            return fixer.removeRange(fixRange);
          }
        });
      }
      function getCommentLineNumbers(comments) {
        const lines = /* @__PURE__ */ new Set();
        comments.forEach((comment2) => {
          const endLine = comment2.type === "Block" ? comment2.loc.end.line - 1 : comment2.loc.end.line;
          for (let i2 = comment2.loc.start.line; i2 <= endLine; i2++) {
            lines.add(i2);
          }
        });
        return lines;
      }
      return {
        Program: function checkTrailingSpaces(node2) {
          const re = new RegExp(NONBLANK, "u"), skipMatch = new RegExp(SKIP_BLANK, "u"), lines = sourceCode2.lines, linebreaks = sourceCode2.getText().match(astUtils2.createGlobalLinebreakMatcher()), comments = sourceCode2.getAllComments(), commentLineNumbers = getCommentLineNumbers(comments);
          let totalLength = 0;
          for (let i2 = 0, ii = lines.length; i2 < ii; i2++) {
            const lineNumber = i2 + 1;
            const linebreakLength = linebreaks && linebreaks[i2] ? linebreaks[i2].length : 1;
            const lineLength = lines[i2].length + linebreakLength;
            const matches = re.exec(lines[i2]);
            if (matches) {
              const location = {
                start: {
                  line: lineNumber,
                  column: matches.index
                },
                end: {
                  line: lineNumber,
                  column: lineLength - linebreakLength
                }
              };
              const rangeStart = totalLength + location.start.column;
              const rangeEnd = totalLength + location.end.column;
              const containingNode = sourceCode2.getNodeByRangeIndex(rangeStart);
              if (containingNode && containingNode.type === "TemplateElement" && rangeStart > containingNode.parent.range[0] && rangeEnd < containingNode.parent.range[1]) {
                totalLength += lineLength;
                continue;
              }
              if (skipBlankLines && skipMatch.test(lines[i2])) {
                totalLength += lineLength;
                continue;
              }
              const fixRange = [rangeStart, rangeEnd];
              if (!ignoreComments || !commentLineNumbers.has(lineNumber)) {
                report(node2, location, fixRange);
              }
            }
            totalLength += lineLength;
          }
        }
      };
    }
  };
  return noTrailingSpaces;
}
var noUnassignedVars;
var hasRequiredNoUnassignedVars;
function requireNoUnassignedVars() {
  if (hasRequiredNoUnassignedVars) return noUnassignedVars;
  hasRequiredNoUnassignedVars = 1;
  noUnassignedVars = {
    meta: {
      type: "problem",
      dialects: ["typescript", "javascript"],
      language: "javascript",
      docs: {
        description: "Disallow `let` or `var` variables that are read but never assigned",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-unassigned-vars"
      },
      schema: [],
      messages: {
        unassigned: "'{{name}}' is always 'undefined' because it's never assigned."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let insideDeclareModule = false;
      return {
        "TSModuleDeclaration[declare=true]"() {
          insideDeclareModule = true;
        },
        "TSModuleDeclaration[declare=true]:exit"() {
          insideDeclareModule = false;
        },
        VariableDeclarator(node2) {
          const declaration = node2.parent;
          const shouldSkip = node2.init || node2.id.type !== "Identifier" || declaration.kind === "const" || declaration.declare || insideDeclareModule;
          if (shouldSkip) {
            return;
          }
          const [variable] = sourceCode2.getDeclaredVariables(node2);
          if (!variable) {
            return;
          }
          let hasRead = false;
          for (const reference of variable.references) {
            if (reference.isWrite()) {
              return;
            }
            if (reference.isRead()) {
              hasRead = true;
            }
          }
          if (!hasRead) {
            return;
          }
          context.report({
            node: node2,
            messageId: "unassigned",
            data: { name: node2.id.name }
          });
        }
      };
    }
  };
  return noUnassignedVars;
}
var noUndef;
var hasRequiredNoUndef;
function requireNoUndef() {
  if (hasRequiredNoUndef) return noUndef;
  hasRequiredNoUndef = 1;
  function hasTypeOfOperator(node2) {
    const parent = node2.parent;
    return parent.type === "UnaryExpression" && parent.operator === "typeof";
  }
  noUndef = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          typeof: false
        }
      ],
      docs: {
        description: "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-undef"
      },
      schema: [
        {
          type: "object",
          properties: {
            typeof: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        undef: "'{{name}}' is not defined."
      }
    },
    create(context) {
      const [{ typeof: considerTypeOf }] = context.options;
      const sourceCode2 = context.sourceCode;
      return {
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          globalScope.through.forEach((ref2) => {
            const identifier = ref2.identifier;
            if (!considerTypeOf && hasTypeOfOperator(identifier)) {
              return;
            }
            context.report({
              node: identifier,
              messageId: "undef",
              data: identifier
            });
          });
        }
      };
    }
  };
  return noUndef;
}
var noUndefInit;
var hasRequiredNoUndefInit;
function requireNoUndefInit() {
  if (hasRequiredNoUndefInit) return noUndefInit;
  hasRequiredNoUndefInit = 1;
  const astUtils2 = requireAstUtils();
  const CONSTANT_BINDINGS = /* @__PURE__ */ new Set(["const", "using", "await using"]);
  noUndefInit = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow initializing variables to `undefined`",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-undef-init"
      },
      schema: [],
      fixable: "code",
      messages: {
        unnecessaryUndefinedInit: "It's not necessary to initialize '{{name}}' to undefined."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        VariableDeclarator(node2) {
          const name = sourceCode2.getText(node2.id), init2 = node2.init && node2.init.name, scope = sourceCode2.getScope(node2), undefinedVar = astUtils2.getVariableByName(
            scope,
            "undefined"
          ), shadowed = undefinedVar && undefinedVar.defs.length > 0, lastToken = sourceCode2.getLastToken(node2);
          if (init2 === "undefined" && !CONSTANT_BINDINGS.has(node2.parent.kind) && !shadowed) {
            context.report({
              node: node2,
              messageId: "unnecessaryUndefinedInit",
              data: { name },
              fix(fixer) {
                if (node2.parent.kind === "var") {
                  return null;
                }
                if (node2.id.type === "ArrayPattern" || node2.id.type === "ObjectPattern") {
                  return null;
                }
                if (sourceCode2.commentsExistBetween(
                  node2.id,
                  lastToken
                )) {
                  return null;
                }
                return fixer.removeRange([
                  node2.id.range[1],
                  node2.range[1]
                ]);
              }
            });
          }
        }
      };
    }
  };
  return noUndefInit;
}
var noUndefined;
var hasRequiredNoUndefined;
function requireNoUndefined() {
  if (hasRequiredNoUndefined) return noUndefined;
  hasRequiredNoUndefined = 1;
  noUndefined = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow the use of `undefined` as an identifier",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-undefined"
      },
      schema: [],
      messages: {
        unexpectedUndefined: "Unexpected use of undefined."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function report(node2) {
        context.report({
          node: node2,
          messageId: "unexpectedUndefined"
        });
      }
      function checkScope(scope) {
        const undefinedVar = scope.set.get("undefined");
        if (!undefinedVar) {
          return;
        }
        const references = undefinedVar.references;
        const defs = undefinedVar.defs;
        references.filter((ref2) => !ref2.init).forEach((ref2) => report(ref2.identifier));
        defs.forEach((def) => report(def.name));
      }
      return {
        "Program:exit"(node2) {
          const globalScope = sourceCode2.getScope(node2);
          const stack = [globalScope];
          while (stack.length) {
            const scope = stack.pop();
            stack.push(...scope.childScopes);
            checkScope(scope);
          }
        }
      };
    }
  };
  return noUndefined;
}
var noUnderscoreDangle;
var hasRequiredNoUnderscoreDangle;
function requireNoUnderscoreDangle() {
  if (hasRequiredNoUnderscoreDangle) return noUnderscoreDangle;
  hasRequiredNoUnderscoreDangle = 1;
  noUnderscoreDangle = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allow: [],
          allowAfterSuper: false,
          allowAfterThis: false,
          allowAfterThisConstructor: false,
          allowFunctionParams: true,
          allowInArrayDestructuring: true,
          allowInObjectDestructuring: true,
          enforceInClassFields: false,
          enforceInMethodNames: false
        }
      ],
      docs: {
        description: "Disallow dangling underscores in identifiers",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-underscore-dangle"
      },
      schema: [
        {
          type: "object",
          properties: {
            allow: {
              type: "array",
              items: {
                type: "string"
              }
            },
            allowAfterThis: {
              type: "boolean"
            },
            allowAfterSuper: {
              type: "boolean"
            },
            allowAfterThisConstructor: {
              type: "boolean"
            },
            enforceInMethodNames: {
              type: "boolean"
            },
            allowFunctionParams: {
              type: "boolean"
            },
            enforceInClassFields: {
              type: "boolean"
            },
            allowInArrayDestructuring: {
              type: "boolean"
            },
            allowInObjectDestructuring: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedUnderscore: "Unexpected dangling '_' in '{{identifier}}'."
      }
    },
    create(context) {
      const [
        {
          allow,
          allowAfterSuper,
          allowAfterThis,
          allowAfterThisConstructor,
          allowFunctionParams,
          allowInArrayDestructuring,
          allowInObjectDestructuring,
          enforceInClassFields,
          enforceInMethodNames
        }
      ] = context.options;
      const sourceCode2 = context.sourceCode;
      function isAllowed(identifier) {
        return allow.includes(identifier);
      }
      function hasDanglingUnderscore(identifier) {
        const len = identifier.length;
        return identifier !== "_" && (identifier[0] === "_" || identifier[len - 1] === "_");
      }
      function isSpecialCaseIdentifierForMemberExpression(identifier) {
        return identifier === "__proto__";
      }
      function isSpecialCaseIdentifierInVariableExpression(identifier) {
        return identifier === "_";
      }
      function isThisConstructorReference(node2) {
        return node2.object.type === "MemberExpression" && node2.object.property.name === "constructor" && node2.object.object.type === "ThisExpression";
      }
      function checkForDanglingUnderscoreInFunctionParameters(node2) {
        if (!allowFunctionParams) {
          node2.params.forEach((param) => {
            const { type: type2 } = param;
            let nodeToCheck;
            if (type2 === "RestElement") {
              nodeToCheck = param.argument;
            } else if (type2 === "AssignmentPattern") {
              nodeToCheck = param.left;
            } else {
              nodeToCheck = param;
            }
            if (nodeToCheck.type === "Identifier") {
              const identifier = nodeToCheck.name;
              if (hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {
                context.report({
                  node: param,
                  messageId: "unexpectedUnderscore",
                  data: {
                    identifier
                  }
                });
              }
            }
          });
        }
      }
      function checkForDanglingUnderscoreInFunction(node2) {
        if (node2.type === "FunctionDeclaration" && node2.id) {
          const identifier = node2.id.name;
          if (typeof identifier !== "undefined" && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {
            context.report({
              node: node2,
              messageId: "unexpectedUnderscore",
              data: {
                identifier
              }
            });
          }
        }
        checkForDanglingUnderscoreInFunctionParameters(node2);
      }
      function checkForDanglingUnderscoreInVariableExpression(node2) {
        sourceCode2.getDeclaredVariables(node2).forEach((variable) => {
          const definition = variable.defs.find((def) => def.node === node2);
          const identifierNode = definition.name;
          const identifier = identifierNode.name;
          let parent = identifierNode.parent;
          while (![
            "VariableDeclarator",
            "ArrayPattern",
            "ObjectPattern"
          ].includes(parent.type)) {
            parent = parent.parent;
          }
          if (hasDanglingUnderscore(identifier) && !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier) && !(allowInArrayDestructuring && parent.type === "ArrayPattern") && !(allowInObjectDestructuring && parent.type === "ObjectPattern")) {
            context.report({
              node: node2,
              messageId: "unexpectedUnderscore",
              data: {
                identifier
              }
            });
          }
        });
      }
      function checkForDanglingUnderscoreInMemberExpression(node2) {
        const identifier = node2.property.name, isMemberOfThis = node2.object.type === "ThisExpression", isMemberOfSuper = node2.object.type === "Super", isMemberOfThisConstructor = isThisConstructorReference(node2);
        if (typeof identifier !== "undefined" && hasDanglingUnderscore(identifier) && !(isMemberOfThis && allowAfterThis) && !(isMemberOfSuper && allowAfterSuper) && !(isMemberOfThisConstructor && allowAfterThisConstructor) && !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {
          context.report({
            node: node2,
            messageId: "unexpectedUnderscore",
            data: {
              identifier
            }
          });
        }
      }
      function checkForDanglingUnderscoreInMethod(node2) {
        const identifier = node2.key.name;
        const isMethod = node2.type === "MethodDefinition" || node2.type === "Property" && node2.method;
        if (typeof identifier !== "undefined" && enforceInMethodNames && isMethod && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {
          context.report({
            node: node2,
            messageId: "unexpectedUnderscore",
            data: {
              identifier: node2.key.type === "PrivateIdentifier" ? `#${identifier}` : identifier
            }
          });
        }
      }
      function checkForDanglingUnderscoreInClassField(node2) {
        const identifier = node2.key.name;
        if (typeof identifier !== "undefined" && hasDanglingUnderscore(identifier) && enforceInClassFields && !isAllowed(identifier)) {
          context.report({
            node: node2,
            messageId: "unexpectedUnderscore",
            data: {
              identifier: node2.key.type === "PrivateIdentifier" ? `#${identifier}` : identifier
            }
          });
        }
      }
      return {
        FunctionDeclaration: checkForDanglingUnderscoreInFunction,
        VariableDeclarator: checkForDanglingUnderscoreInVariableExpression,
        MemberExpression: checkForDanglingUnderscoreInMemberExpression,
        MethodDefinition: checkForDanglingUnderscoreInMethod,
        PropertyDefinition: checkForDanglingUnderscoreInClassField,
        Property: checkForDanglingUnderscoreInMethod,
        FunctionExpression: checkForDanglingUnderscoreInFunction,
        ArrowFunctionExpression: checkForDanglingUnderscoreInFunction
      };
    }
  };
  return noUnderscoreDangle;
}
var noUnexpectedMultiline;
var hasRequiredNoUnexpectedMultiline;
function requireNoUnexpectedMultiline() {
  if (hasRequiredNoUnexpectedMultiline) return noUnexpectedMultiline;
  hasRequiredNoUnexpectedMultiline = 1;
  const astUtils2 = requireAstUtils();
  noUnexpectedMultiline = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow confusing multiline expressions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-unexpected-multiline"
      },
      schema: [],
      messages: {
        function: "Unexpected newline between function and ( of function call.",
        property: "Unexpected newline between object and [ of property access.",
        taggedTemplate: "Unexpected newline between template tag and template literal.",
        division: "Unexpected newline between numerator and division operator."
      }
    },
    create(context) {
      const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;
      const sourceCode2 = context.sourceCode;
      function checkForBreakAfter(node2, messageId) {
        const openParen = sourceCode2.getTokenAfter(
          node2,
          astUtils2.isNotClosingParenToken
        );
        const nodeExpressionEnd = sourceCode2.getTokenBefore(openParen);
        if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {
          context.report({
            node: node2,
            loc: openParen.loc,
            messageId
          });
        }
      }
      return {
        MemberExpression(node2) {
          if (!node2.computed || node2.optional) {
            return;
          }
          checkForBreakAfter(node2.object, "property");
        },
        TaggedTemplateExpression(node2) {
          const { quasi } = node2;
          const tokenBefore = sourceCode2.getTokenBefore(quasi);
          if (tokenBefore.loc.end.line !== quasi.loc.start.line) {
            context.report({
              node: node2,
              loc: {
                start: quasi.loc.start,
                end: {
                  line: quasi.loc.start.line,
                  column: quasi.loc.start.column + 1
                }
              },
              messageId: "taggedTemplate"
            });
          }
        },
        CallExpression(node2) {
          if (node2.arguments.length === 0 || node2.optional) {
            return;
          }
          checkForBreakAfter(node2.callee, "function");
        },
        "BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left"(node2) {
          const secondSlash = sourceCode2.getTokenAfter(
            node2,
            (token) => token.value === "/"
          );
          const tokenAfterOperator = sourceCode2.getTokenAfter(secondSlash);
          if (tokenAfterOperator.type === "Identifier" && REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) && secondSlash.range[1] === tokenAfterOperator.range[0]) {
            checkForBreakAfter(node2.left, "division");
          }
        }
      };
    }
  };
  return noUnexpectedMultiline;
}
var noUnmodifiedLoopCondition;
var hasRequiredNoUnmodifiedLoopCondition;
function requireNoUnmodifiedLoopCondition() {
  if (hasRequiredNoUnmodifiedLoopCondition) return noUnmodifiedLoopCondition;
  hasRequiredNoUnmodifiedLoopCondition = 1;
  const Traverser = requireTraverser(), astUtils2 = requireAstUtils();
  const SENTINEL_PATTERN = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/u;
  const LOOP_PATTERN = /^(?:DoWhile|For|While)Statement$/u;
  const GROUP_PATTERN = /^(?:BinaryExpression|ConditionalExpression)$/u;
  const SKIP_PATTERN = /^(?:ArrowFunction|Class|Function)Expression$/u;
  const DYNAMIC_PATTERN = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/u;
  function isWriteReference(reference) {
    if (reference.init) {
      const def = reference.resolved && reference.resolved.defs[0];
      if (!def || def.type !== "Variable" || def.parent.kind !== "var") {
        return false;
      }
    }
    return reference.isWrite();
  }
  function isUnmodified(condition) {
    return !condition.modified;
  }
  function isUnmodifiedAndNotBelongToGroup(condition) {
    return !(condition.modified || condition.group);
  }
  function isInRange(node2, reference) {
    const or = node2.range;
    const ir = reference.identifier.range;
    return or[0] <= ir[0] && ir[1] <= or[1];
  }
  const isInLoop = {
    WhileStatement: isInRange,
    DoWhileStatement: isInRange,
    ForStatement(node2, reference) {
      return isInRange(node2, reference) && !(node2.init && isInRange(node2.init, reference));
    }
  };
  function getEncloseFunctionDeclaration(reference) {
    let node2 = reference.identifier;
    while (node2) {
      if (node2.type === "FunctionDeclaration") {
        return node2.id ? node2 : null;
      }
      node2 = node2.parent;
    }
    return null;
  }
  function updateModifiedFlag(conditions, modifiers) {
    for (let i2 = 0; i2 < conditions.length; ++i2) {
      const condition = conditions[i2];
      for (let j = 0; !condition.modified && j < modifiers.length; ++j) {
        const modifier = modifiers[j];
        let funcNode, funcVar;
        const inLoop = condition.isInLoop(modifier) || Boolean(
          (funcNode = getEncloseFunctionDeclaration(modifier)) && (funcVar = astUtils2.getVariableByName(
            modifier.from.upper,
            funcNode.id.name
          )) && funcVar.references.some(condition.isInLoop)
        );
        condition.modified = inLoop;
      }
    }
  }
  noUnmodifiedLoopCondition = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow unmodified loop conditions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-unmodified-loop-condition"
      },
      schema: [],
      messages: {
        loopConditionNotModified: "'{{name}}' is not modified in this loop."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let groupMap = null;
      function report(condition) {
        const node2 = condition.reference.identifier;
        context.report({
          node: node2,
          messageId: "loopConditionNotModified",
          data: node2
        });
      }
      function registerConditionsToGroup(conditions) {
        for (let i2 = 0; i2 < conditions.length; ++i2) {
          const condition = conditions[i2];
          if (condition.group) {
            let group = groupMap.get(condition.group);
            if (!group) {
              group = [];
              groupMap.set(condition.group, group);
            }
            group.push(condition);
          }
        }
      }
      function checkConditionsInGroup(conditions) {
        if (conditions.every(isUnmodified)) {
          conditions.forEach(report);
        }
      }
      function hasDynamicExpressions(root) {
        let retv = false;
        Traverser.traverse(root, {
          visitorKeys: sourceCode2.visitorKeys,
          enter(node2) {
            if (DYNAMIC_PATTERN.test(node2.type)) {
              retv = true;
              this.break();
            } else if (SKIP_PATTERN.test(node2.type)) {
              this.skip();
            }
          }
        });
        return retv;
      }
      function toLoopCondition(reference) {
        if (reference.init) {
          return null;
        }
        let group = null;
        let child = reference.identifier;
        let node2 = child.parent;
        while (node2) {
          if (SENTINEL_PATTERN.test(node2.type)) {
            if (LOOP_PATTERN.test(node2.type) && node2.test === child) {
              return {
                reference,
                group,
                isInLoop: isInLoop[node2.type].bind(null, node2),
                modified: false
              };
            }
            break;
          }
          if (GROUP_PATTERN.test(node2.type)) {
            if (hasDynamicExpressions(node2)) {
              break;
            } else {
              group = node2;
            }
          }
          child = node2;
          node2 = node2.parent;
        }
        return null;
      }
      function checkReferences(variable) {
        const conditions = variable.references.map(toLoopCondition).filter(Boolean);
        if (conditions.length === 0) {
          return;
        }
        registerConditionsToGroup(conditions);
        const modifiers = variable.references.filter(isWriteReference);
        if (modifiers.length > 0) {
          updateModifiedFlag(conditions, modifiers);
        }
        conditions.filter(isUnmodifiedAndNotBelongToGroup).forEach(report);
      }
      return {
        "Program:exit"(node2) {
          const queue2 = [sourceCode2.getScope(node2)];
          groupMap = /* @__PURE__ */ new Map();
          let scope;
          while (scope = queue2.pop()) {
            queue2.push(...scope.childScopes);
            scope.variables.forEach(checkReferences);
          }
          groupMap.forEach(checkConditionsInGroup);
          groupMap = null;
        }
      };
    }
  };
  return noUnmodifiedLoopCondition;
}
var noUnneededTernary;
var hasRequiredNoUnneededTernary;
function requireNoUnneededTernary() {
  if (hasRequiredNoUnneededTernary) return noUnneededTernary;
  hasRequiredNoUnneededTernary = 1;
  const astUtils2 = requireAstUtils();
  const BOOLEAN_OPERATORS = /* @__PURE__ */ new Set([
    "==",
    "===",
    "!=",
    "!==",
    ">",
    ">=",
    "<",
    "<=",
    "in",
    "instanceof"
  ]);
  const OPERATOR_INVERSES = {
    "==": "!=",
    "!=": "==",
    "===": "!==",
    "!==": "==="
    // Operators like < and >= are not true inverses, since both will return false with NaN.
  };
  const OR_PRECEDENCE = astUtils2.getPrecedence({
    type: "LogicalExpression",
    operator: "||"
  });
  noUnneededTernary = {
    meta: {
      type: "suggestion",
      defaultOptions: [{ defaultAssignment: true }],
      docs: {
        description: "Disallow ternary operators when simpler alternatives exist",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-unneeded-ternary"
      },
      schema: [
        {
          type: "object",
          properties: {
            defaultAssignment: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        unnecessaryConditionalExpression: "Unnecessary use of boolean literals in conditional expression.",
        unnecessaryConditionalAssignment: "Unnecessary use of conditional expression for default assignment."
      }
    },
    create(context) {
      const [{ defaultAssignment }] = context.options;
      const sourceCode2 = context.sourceCode;
      function isBooleanLiteral(node2) {
        return node2.type === "Literal" && typeof node2.value === "boolean";
      }
      function invertExpression(node2) {
        if (node2.type === "BinaryExpression" && Object.hasOwn(OPERATOR_INVERSES, node2.operator)) {
          const operatorToken = sourceCode2.getFirstTokenBetween(
            node2.left,
            node2.right,
            (token) => token.value === node2.operator
          );
          const text = sourceCode2.getText();
          return text.slice(node2.range[0], operatorToken.range[0]) + OPERATOR_INVERSES[node2.operator] + text.slice(operatorToken.range[1], node2.range[1]);
        }
        if (astUtils2.getPrecedence(node2) < astUtils2.getPrecedence({ type: "UnaryExpression" })) {
          return `!(${astUtils2.getParenthesisedText(sourceCode2, node2)})`;
        }
        return `!${astUtils2.getParenthesisedText(sourceCode2, node2)}`;
      }
      function isBooleanExpression(node2) {
        return node2.type === "BinaryExpression" && BOOLEAN_OPERATORS.has(node2.operator) || node2.type === "UnaryExpression" && node2.operator === "!";
      }
      function matchesDefaultAssignment(node2) {
        return node2.test.type === "Identifier" && node2.consequent.type === "Identifier" && node2.test.name === node2.consequent.name;
      }
      return {
        ConditionalExpression(node2) {
          if (isBooleanLiteral(node2.alternate) && isBooleanLiteral(node2.consequent)) {
            context.report({
              node: node2,
              messageId: "unnecessaryConditionalExpression",
              fix(fixer) {
                if (node2.consequent.value === node2.alternate.value) {
                  return node2.test.type === "Identifier" ? fixer.replaceText(
                    node2,
                    node2.consequent.value.toString()
                  ) : null;
                }
                if (node2.alternate.value) {
                  return fixer.replaceText(
                    node2,
                    invertExpression(node2.test)
                  );
                }
                return fixer.replaceText(
                  node2,
                  isBooleanExpression(node2.test) ? astUtils2.getParenthesisedText(
                    sourceCode2,
                    node2.test
                  ) : `!${invertExpression(node2.test)}`
                );
              }
            });
          } else if (!defaultAssignment && matchesDefaultAssignment(node2)) {
            context.report({
              node: node2,
              messageId: "unnecessaryConditionalAssignment",
              fix(fixer) {
                const shouldParenthesizeAlternate = (astUtils2.getPrecedence(node2.alternate) < OR_PRECEDENCE || astUtils2.isCoalesceExpression(
                  node2.alternate
                )) && !astUtils2.isParenthesised(
                  sourceCode2,
                  node2.alternate
                );
                const alternateText = shouldParenthesizeAlternate ? `(${sourceCode2.getText(node2.alternate)})` : astUtils2.getParenthesisedText(
                  sourceCode2,
                  node2.alternate
                );
                const testText = astUtils2.getParenthesisedText(
                  sourceCode2,
                  node2.test
                );
                return fixer.replaceText(
                  node2,
                  `${testText} || ${alternateText}`
                );
              }
            });
          }
        }
      };
    }
  };
  return noUnneededTernary;
}
var noUnreachable;
var hasRequiredNoUnreachable;
function requireNoUnreachable() {
  if (hasRequiredNoUnreachable) return noUnreachable;
  hasRequiredNoUnreachable = 1;
  function isInitialized(node2) {
    return Boolean(node2.init);
  }
  function areAllSegmentsUnreachable(segments) {
    for (const segment of segments) {
      if (segment.reachable) {
        return false;
      }
    }
    return true;
  }
  class ConsecutiveRange {
    constructor(sourceCode2) {
      this.sourceCode = sourceCode2;
      this.startNode = null;
      this.endNode = null;
    }
    /**
     * The location object of this range.
     * @type {Object}
     */
    get location() {
      return {
        start: this.startNode.loc.start,
        end: this.endNode.loc.end
      };
    }
    /**
     * `true` if this range is empty.
     * @type {boolean}
     */
    get isEmpty() {
      return !(this.startNode && this.endNode);
    }
    /**
     * Checks whether the given node is inside of this range.
     * @param {ASTNode|Token} node The node to check.
     * @returns {boolean} `true` if the node is inside of this range.
     */
    contains(node2) {
      return node2.range[0] >= this.startNode.range[0] && node2.range[1] <= this.endNode.range[1];
    }
    /**
     * Checks whether the given node is consecutive to this range.
     * @param {ASTNode} node The node to check.
     * @returns {boolean} `true` if the node is consecutive to this range.
     */
    isConsecutive(node2) {
      return this.contains(this.sourceCode.getTokenBefore(node2));
    }
    /**
     * Merges the given node to this range.
     * @param {ASTNode} node The node to merge.
     * @returns {void}
     */
    merge(node2) {
      this.endNode = node2;
    }
    /**
     * Resets this range by the given node or null.
     * @param {ASTNode|null} node The node to reset, or null.
     * @returns {void}
     */
    reset(node2) {
      this.startNode = this.endNode = node2;
    }
  }
  noUnreachable = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-unreachable"
      },
      schema: [],
      messages: {
        unreachableCode: "Unreachable code."
      }
    },
    create(context) {
      let constructorInfo = null;
      const range = new ConsecutiveRange(context.sourceCode);
      const codePathSegments = [];
      let currentCodePathSegments = /* @__PURE__ */ new Set();
      function reportIfUnreachable(node2) {
        let nextNode = null;
        if (node2 && (node2.type === "PropertyDefinition" || areAllSegmentsUnreachable(currentCodePathSegments))) {
          if (range.isEmpty) {
            range.reset(node2);
            return;
          }
          if (range.contains(node2)) {
            return;
          }
          if (range.isConsecutive(node2)) {
            range.merge(node2);
            return;
          }
          nextNode = node2;
        }
        if (!range.isEmpty) {
          context.report({
            messageId: "unreachableCode",
            loc: range.location,
            node: range.startNode
          });
        }
        range.reset(nextNode);
      }
      return {
        // Manages the current code path.
        onCodePathStart() {
          codePathSegments.push(currentCodePathSegments);
          currentCodePathSegments = /* @__PURE__ */ new Set();
        },
        onCodePathEnd() {
          currentCodePathSegments = codePathSegments.pop();
        },
        onUnreachableCodePathSegmentStart(segment) {
          currentCodePathSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          currentCodePathSegments.delete(segment);
        },
        onCodePathSegmentEnd(segment) {
          currentCodePathSegments.delete(segment);
        },
        onCodePathSegmentStart(segment) {
          currentCodePathSegments.add(segment);
        },
        // Registers for all statement nodes (excludes FunctionDeclaration).
        BlockStatement: reportIfUnreachable,
        BreakStatement: reportIfUnreachable,
        ClassDeclaration: reportIfUnreachable,
        ContinueStatement: reportIfUnreachable,
        DebuggerStatement: reportIfUnreachable,
        DoWhileStatement: reportIfUnreachable,
        ExpressionStatement: reportIfUnreachable,
        ForInStatement: reportIfUnreachable,
        ForOfStatement: reportIfUnreachable,
        ForStatement: reportIfUnreachable,
        IfStatement: reportIfUnreachable,
        ImportDeclaration: reportIfUnreachable,
        LabeledStatement: reportIfUnreachable,
        ReturnStatement: reportIfUnreachable,
        SwitchStatement: reportIfUnreachable,
        ThrowStatement: reportIfUnreachable,
        TryStatement: reportIfUnreachable,
        VariableDeclaration(node2) {
          if (node2.kind !== "var" || node2.declarations.some(isInitialized)) {
            reportIfUnreachable(node2);
          }
        },
        WhileStatement: reportIfUnreachable,
        WithStatement: reportIfUnreachable,
        ExportNamedDeclaration: reportIfUnreachable,
        ExportDefaultDeclaration: reportIfUnreachable,
        ExportAllDeclaration: reportIfUnreachable,
        "Program:exit"() {
          reportIfUnreachable();
        },
        /*
         * Instance fields defined in a subclass are never created if the constructor of the subclass
         * doesn't call `super()`, so their definitions are unreachable code.
         */
        "MethodDefinition[kind='constructor']"() {
          constructorInfo = {
            upper: constructorInfo,
            hasSuperCall: false
          };
        },
        "MethodDefinition[kind='constructor']:exit"(node2) {
          const { hasSuperCall } = constructorInfo;
          constructorInfo = constructorInfo.upper;
          if (!node2.value.body) {
            return;
          }
          const classDefinition = node2.parent.parent;
          if (classDefinition.superClass && !hasSuperCall) {
            for (const element of classDefinition.body.body) {
              if (element.type === "PropertyDefinition" && !element.static) {
                reportIfUnreachable(element);
              }
            }
          }
        },
        "CallExpression > Super.callee"() {
          if (constructorInfo) {
            constructorInfo.hasSuperCall = true;
          }
        }
      };
    }
  };
  return noUnreachable;
}
var noUnreachableLoop;
var hasRequiredNoUnreachableLoop;
function requireNoUnreachableLoop() {
  if (hasRequiredNoUnreachableLoop) return noUnreachableLoop;
  hasRequiredNoUnreachableLoop = 1;
  const allLoopTypes = [
    "WhileStatement",
    "DoWhileStatement",
    "ForStatement",
    "ForInStatement",
    "ForOfStatement"
  ];
  function isAnySegmentReachable(segments) {
    for (const segment of segments) {
      if (segment.reachable) {
        return true;
      }
    }
    return false;
  }
  function isLoopingTarget(node2) {
    const parent = node2.parent;
    if (parent) {
      switch (parent.type) {
        case "WhileStatement":
          return node2 === parent.test;
        case "DoWhileStatement":
          return node2 === parent.body;
        case "ForStatement":
          return node2 === (parent.update || parent.test || parent.body);
        case "ForInStatement":
        case "ForOfStatement":
          return node2 === parent.left;
      }
    }
    return false;
  }
  function getDifference(arrA, arrB) {
    return arrA.filter((a2) => !arrB.includes(a2));
  }
  noUnreachableLoop = {
    meta: {
      type: "problem",
      defaultOptions: [{ ignore: [] }],
      docs: {
        description: "Disallow loops with a body that allows only one iteration",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-unreachable-loop"
      },
      schema: [
        {
          type: "object",
          properties: {
            ignore: {
              type: "array",
              items: {
                enum: allLoopTypes
              },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        invalid: "Invalid loop. Its body allows only one iteration."
      }
    },
    create(context) {
      const [{ ignore: ignoredLoopTypes }] = context.options;
      const loopTypesToCheck = getDifference(allLoopTypes, ignoredLoopTypes), loopSelector = loopTypesToCheck.join(","), loopsByTargetSegments = /* @__PURE__ */ new Map(), loopsToReport = /* @__PURE__ */ new Set();
      const codePathSegments = [];
      let currentCodePathSegments = /* @__PURE__ */ new Set();
      return {
        onCodePathStart() {
          codePathSegments.push(currentCodePathSegments);
          currentCodePathSegments = /* @__PURE__ */ new Set();
        },
        onCodePathEnd() {
          currentCodePathSegments = codePathSegments.pop();
        },
        onUnreachableCodePathSegmentStart(segment) {
          currentCodePathSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          currentCodePathSegments.delete(segment);
        },
        onCodePathSegmentEnd(segment) {
          currentCodePathSegments.delete(segment);
        },
        onCodePathSegmentStart(segment, node2) {
          currentCodePathSegments.add(segment);
          if (isLoopingTarget(node2)) {
            const loop = node2.parent;
            loopsByTargetSegments.set(segment, loop);
          }
        },
        onCodePathSegmentLoop(_, toSegment, node2) {
          const loop = loopsByTargetSegments.get(toSegment);
          if (node2 === loop || node2.type === "ContinueStatement") {
            loopsToReport.delete(loop);
          }
        },
        [loopSelector](node2) {
          if (isAnySegmentReachable(currentCodePathSegments)) {
            loopsToReport.add(node2);
          }
        },
        "Program:exit"() {
          loopsToReport.forEach(
            (node2) => context.report({ node: node2, messageId: "invalid" })
          );
        }
      };
    }
  };
  return noUnreachableLoop;
}
var noUnsafeFinally;
var hasRequiredNoUnsafeFinally;
function requireNoUnsafeFinally() {
  if (hasRequiredNoUnsafeFinally) return noUnsafeFinally;
  hasRequiredNoUnsafeFinally = 1;
  const SENTINEL_NODE_TYPE_RETURN_THROW = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/u;
  const SENTINEL_NODE_TYPE_BREAK = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/u;
  const SENTINEL_NODE_TYPE_CONTINUE = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/u;
  noUnsafeFinally = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow control flow statements in `finally` blocks",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-unsafe-finally"
      },
      schema: [],
      messages: {
        unsafeUsage: "Unsafe usage of {{nodeType}}."
      }
    },
    create(context) {
      function isFinallyBlock(node2) {
        return node2.parent.type === "TryStatement" && node2.parent.finalizer === node2;
      }
      function isInFinallyBlock(node2, label) {
        let labelInside = false;
        let sentinelNodeType;
        if (node2.type === "BreakStatement" && !node2.label) {
          sentinelNodeType = SENTINEL_NODE_TYPE_BREAK;
        } else if (node2.type === "ContinueStatement") {
          sentinelNodeType = SENTINEL_NODE_TYPE_CONTINUE;
        } else {
          sentinelNodeType = SENTINEL_NODE_TYPE_RETURN_THROW;
        }
        for (let currentNode = node2; currentNode && !sentinelNodeType.test(currentNode.type); currentNode = currentNode.parent) {
          if (currentNode.parent.label && label && currentNode.parent.label.name === label.name) {
            labelInside = true;
          }
          if (isFinallyBlock(currentNode)) {
            if (label && labelInside) {
              return false;
            }
            return true;
          }
        }
        return false;
      }
      function check2(node2) {
        if (isInFinallyBlock(node2, node2.label)) {
          context.report({
            messageId: "unsafeUsage",
            data: {
              nodeType: node2.type
            },
            node: node2,
            line: node2.loc.line,
            column: node2.loc.column
          });
        }
      }
      return {
        ReturnStatement: check2,
        ThrowStatement: check2,
        BreakStatement: check2,
        ContinueStatement: check2
      };
    }
  };
  return noUnsafeFinally;
}
var noUnsafeNegation;
var hasRequiredNoUnsafeNegation;
function requireNoUnsafeNegation() {
  if (hasRequiredNoUnsafeNegation) return noUnsafeNegation;
  hasRequiredNoUnsafeNegation = 1;
  const astUtils2 = requireAstUtils();
  function isInOrInstanceOfOperator(op) {
    return op === "in" || op === "instanceof";
  }
  function isOrderingRelationalOperator(op) {
    return op === "<" || op === ">" || op === ">=" || op === "<=";
  }
  function isNegation(node2) {
    return node2.type === "UnaryExpression" && node2.operator === "!";
  }
  noUnsafeNegation = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          enforceForOrderingRelations: false
        }
      ],
      docs: {
        description: "Disallow negating the left operand of relational operators",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-unsafe-negation"
      },
      hasSuggestions: true,
      schema: [
        {
          type: "object",
          properties: {
            enforceForOrderingRelations: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: null,
      messages: {
        unexpected: "Unexpected negating the left operand of '{{operator}}' operator.",
        suggestNegatedExpression: "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
        suggestParenthesisedNegation: "Wrap negation in '()' to make the intention explicit. This preserves the current behavior."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ enforceForOrderingRelations }] = context.options;
      return {
        BinaryExpression(node2) {
          const operator = node2.operator;
          const orderingRelationRuleApplies = enforceForOrderingRelations && isOrderingRelationalOperator(operator);
          if ((isInOrInstanceOfOperator(operator) || orderingRelationRuleApplies) && isNegation(node2.left) && !astUtils2.isParenthesised(sourceCode2, node2.left)) {
            context.report({
              node: node2,
              loc: node2.left.loc,
              messageId: "unexpected",
              data: { operator },
              suggest: [
                {
                  messageId: "suggestNegatedExpression",
                  data: { operator },
                  fix(fixer) {
                    const negationToken = sourceCode2.getFirstToken(node2.left);
                    const fixRange = [
                      negationToken.range[1],
                      node2.range[1]
                    ];
                    const text = sourceCode2.text.slice(
                      fixRange[0],
                      fixRange[1]
                    );
                    return fixer.replaceTextRange(
                      fixRange,
                      `(${text})`
                    );
                  }
                },
                {
                  messageId: "suggestParenthesisedNegation",
                  fix(fixer) {
                    return fixer.replaceText(
                      node2.left,
                      `(${sourceCode2.getText(node2.left)})`
                    );
                  }
                }
              ]
            });
          }
        }
      };
    }
  };
  return noUnsafeNegation;
}
var noUnsafeOptionalChaining;
var hasRequiredNoUnsafeOptionalChaining;
function requireNoUnsafeOptionalChaining() {
  if (hasRequiredNoUnsafeOptionalChaining) return noUnsafeOptionalChaining;
  hasRequiredNoUnsafeOptionalChaining = 1;
  const UNSAFE_ARITHMETIC_OPERATORS = /* @__PURE__ */ new Set(["+", "-", "/", "*", "%", "**"]);
  const UNSAFE_ASSIGNMENT_OPERATORS = /* @__PURE__ */ new Set([
    "+=",
    "-=",
    "/=",
    "*=",
    "%=",
    "**="
  ]);
  const UNSAFE_RELATIONAL_OPERATORS = /* @__PURE__ */ new Set(["in", "instanceof"]);
  function isDestructuringPattern(node2) {
    return node2.type === "ObjectPattern" || node2.type === "ArrayPattern";
  }
  noUnsafeOptionalChaining = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          disallowArithmeticOperators: false
        }
      ],
      docs: {
        description: "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining"
      },
      schema: [
        {
          type: "object",
          properties: {
            disallowArithmeticOperators: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: null,
      messages: {
        unsafeOptionalChain: "Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.",
        unsafeArithmetic: "Unsafe arithmetic operation on optional chaining. It can result in NaN."
      }
    },
    create(context) {
      const [{ disallowArithmeticOperators }] = context.options;
      function reportUnsafeUsage(node2) {
        context.report({
          messageId: "unsafeOptionalChain",
          node: node2
        });
      }
      function reportUnsafeArithmetic(node2) {
        context.report({
          messageId: "unsafeArithmetic",
          node: node2
        });
      }
      function checkUndefinedShortCircuit(node2, reportFunc) {
        if (!node2) {
          return;
        }
        switch (node2.type) {
          case "LogicalExpression":
            if (node2.operator === "||" || node2.operator === "??") {
              checkUndefinedShortCircuit(node2.right, reportFunc);
            } else if (node2.operator === "&&") {
              checkUndefinedShortCircuit(node2.left, reportFunc);
              checkUndefinedShortCircuit(node2.right, reportFunc);
            }
            break;
          case "SequenceExpression":
            checkUndefinedShortCircuit(
              node2.expressions.at(-1),
              reportFunc
            );
            break;
          case "ConditionalExpression":
            checkUndefinedShortCircuit(node2.consequent, reportFunc);
            checkUndefinedShortCircuit(node2.alternate, reportFunc);
            break;
          case "AwaitExpression":
            checkUndefinedShortCircuit(node2.argument, reportFunc);
            break;
          case "ChainExpression":
            reportFunc(node2);
            break;
        }
      }
      function checkUnsafeUsage(node2) {
        checkUndefinedShortCircuit(node2, reportUnsafeUsage);
      }
      function checkUnsafeArithmetic(node2) {
        checkUndefinedShortCircuit(node2, reportUnsafeArithmetic);
      }
      return {
        "AssignmentExpression, AssignmentPattern"(node2) {
          if (isDestructuringPattern(node2.left)) {
            checkUnsafeUsage(node2.right);
          }
        },
        "ClassDeclaration, ClassExpression"(node2) {
          checkUnsafeUsage(node2.superClass);
        },
        CallExpression(node2) {
          if (!node2.optional) {
            checkUnsafeUsage(node2.callee);
          }
        },
        NewExpression(node2) {
          checkUnsafeUsage(node2.callee);
        },
        VariableDeclarator(node2) {
          if (isDestructuringPattern(node2.id)) {
            checkUnsafeUsage(node2.init);
          }
        },
        MemberExpression(node2) {
          if (!node2.optional) {
            checkUnsafeUsage(node2.object);
          }
        },
        TaggedTemplateExpression(node2) {
          checkUnsafeUsage(node2.tag);
        },
        ForOfStatement(node2) {
          checkUnsafeUsage(node2.right);
        },
        SpreadElement(node2) {
          if (node2.parent && node2.parent.type !== "ObjectExpression") {
            checkUnsafeUsage(node2.argument);
          }
        },
        BinaryExpression(node2) {
          if (UNSAFE_RELATIONAL_OPERATORS.has(node2.operator)) {
            checkUnsafeUsage(node2.right);
          }
          if (disallowArithmeticOperators && UNSAFE_ARITHMETIC_OPERATORS.has(node2.operator)) {
            checkUnsafeArithmetic(node2.right);
            checkUnsafeArithmetic(node2.left);
          }
        },
        WithStatement(node2) {
          checkUnsafeUsage(node2.object);
        },
        UnaryExpression(node2) {
          if (disallowArithmeticOperators && UNSAFE_ARITHMETIC_OPERATORS.has(node2.operator)) {
            checkUnsafeArithmetic(node2.argument);
          }
        },
        AssignmentExpression(node2) {
          if (disallowArithmeticOperators && UNSAFE_ASSIGNMENT_OPERATORS.has(node2.operator)) {
            checkUnsafeArithmetic(node2.right);
          }
        }
      };
    }
  };
  return noUnsafeOptionalChaining;
}
var noUnusedExpressions;
var hasRequiredNoUnusedExpressions;
function requireNoUnusedExpressions() {
  if (hasRequiredNoUnusedExpressions) return noUnusedExpressions;
  hasRequiredNoUnusedExpressions = 1;
  const astUtils2 = requireAstUtils();
  function alwaysTrue() {
    return true;
  }
  function alwaysFalse() {
    return false;
  }
  noUnusedExpressions = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "suggestion",
      docs: {
        description: "Disallow unused expressions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-unused-expressions"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowShortCircuit: {
              type: "boolean"
            },
            allowTernary: {
              type: "boolean"
            },
            allowTaggedTemplates: {
              type: "boolean"
            },
            enforceForJSX: {
              type: "boolean"
            },
            ignoreDirectives: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      defaultOptions: [
        {
          allowShortCircuit: false,
          allowTernary: false,
          allowTaggedTemplates: false,
          enforceForJSX: false,
          ignoreDirectives: false
        }
      ],
      messages: {
        unusedExpression: "Expected an assignment or function call and instead saw an expression."
      }
    },
    create(context) {
      const [
        {
          allowShortCircuit,
          allowTernary,
          allowTaggedTemplates,
          enforceForJSX,
          ignoreDirectives
        }
      ] = context.options;
      function looksLikeDirective(node2) {
        return node2.type === "ExpressionStatement" && node2.expression.type === "Literal" && typeof node2.expression.value === "string";
      }
      function takeWhile(predicate, list) {
        for (let i2 = 0; i2 < list.length; ++i2) {
          if (!predicate(list[i2])) {
            return list.slice(0, i2);
          }
        }
        return list.slice();
      }
      function directives2(node2) {
        return takeWhile(looksLikeDirective, node2.body);
      }
      function isDirective(node2) {
        return astUtils2.isTopLevelExpressionStatement(node2) && directives2(node2.parent).includes(node2);
      }
      const Checker = Object.assign(/* @__PURE__ */ Object.create(null), {
        isDisallowed(node2) {
          return (Checker[node2.type] || alwaysFalse)(node2);
        },
        ArrayExpression: alwaysTrue,
        ArrowFunctionExpression: alwaysTrue,
        BinaryExpression: alwaysTrue,
        ChainExpression(node2) {
          return Checker.isDisallowed(node2.expression);
        },
        ClassExpression: alwaysTrue,
        ConditionalExpression(node2) {
          if (allowTernary) {
            return Checker.isDisallowed(node2.consequent) || Checker.isDisallowed(node2.alternate);
          }
          return true;
        },
        FunctionExpression: alwaysTrue,
        Identifier: alwaysTrue,
        JSXElement() {
          return enforceForJSX;
        },
        JSXFragment() {
          return enforceForJSX;
        },
        Literal: alwaysTrue,
        LogicalExpression(node2) {
          if (allowShortCircuit) {
            return Checker.isDisallowed(node2.right);
          }
          return true;
        },
        MemberExpression: alwaysTrue,
        MetaProperty: alwaysTrue,
        ObjectExpression: alwaysTrue,
        SequenceExpression: alwaysTrue,
        TaggedTemplateExpression() {
          return !allowTaggedTemplates;
        },
        TemplateLiteral: alwaysTrue,
        ThisExpression: alwaysTrue,
        UnaryExpression(node2) {
          return node2.operator !== "void" && node2.operator !== "delete";
        },
        // TypeScript-specific node types
        TSAsExpression(node2) {
          return Checker.isDisallowed(node2.expression);
        },
        TSTypeAssertion(node2) {
          return Checker.isDisallowed(node2.expression);
        },
        TSNonNullExpression(node2) {
          return Checker.isDisallowed(node2.expression);
        },
        TSInstantiationExpression(node2) {
          return Checker.isDisallowed(node2.expression);
        }
      });
      return {
        ExpressionStatement(node2) {
          if (Checker.isDisallowed(node2.expression) && !astUtils2.isDirective(node2) && !(ignoreDirectives && isDirective(node2))) {
            context.report({ node: node2, messageId: "unusedExpression" });
          }
        }
      };
    }
  };
  return noUnusedExpressions;
}
var noUnusedLabels;
var hasRequiredNoUnusedLabels;
function requireNoUnusedLabels() {
  if (hasRequiredNoUnusedLabels) return noUnusedLabels;
  hasRequiredNoUnusedLabels = 1;
  const astUtils2 = requireAstUtils();
  noUnusedLabels = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow unused labels",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-unused-labels"
      },
      schema: [],
      fixable: "code",
      messages: {
        unused: "'{{name}}:' is defined but never used."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let scopeInfo = null;
      function enterLabeledScope(node2) {
        scopeInfo = {
          label: node2.label.name,
          used: false,
          upper: scopeInfo
        };
      }
      function isFixable(node2) {
        if (sourceCode2.getTokenAfter(node2.label, {
          includeComments: true
        }) !== sourceCode2.getTokenBefore(node2.body, { includeComments: true })) {
          return false;
        }
        let ancestor = node2.parent;
        while (ancestor.type === "LabeledStatement") {
          ancestor = ancestor.parent;
        }
        if (ancestor.type === "Program" || ancestor.type === "BlockStatement" && astUtils2.isFunction(ancestor.parent)) {
          const { body } = node2;
          if (body.type === "ExpressionStatement" && (body.expression.type === "Literal" && typeof body.expression.value === "string" || astUtils2.isStaticTemplateLiteral(body.expression))) {
            return false;
          }
        }
        return true;
      }
      function exitLabeledScope(node2) {
        if (!scopeInfo.used) {
          context.report({
            node: node2.label,
            messageId: "unused",
            data: node2.label,
            fix: isFixable(node2) ? (fixer) => fixer.removeRange([
              node2.range[0],
              node2.body.range[0]
            ]) : null
          });
        }
        scopeInfo = scopeInfo.upper;
      }
      function markAsUsed(node2) {
        if (!node2.label) {
          return;
        }
        const label = node2.label.name;
        let info = scopeInfo;
        while (info) {
          if (info.label === label) {
            info.used = true;
            break;
          }
          info = info.upper;
        }
      }
      return {
        LabeledStatement: enterLabeledScope,
        "LabeledStatement:exit": exitLabeledScope,
        BreakStatement: markAsUsed,
        ContinueStatement: markAsUsed
      };
    }
  };
  return noUnusedLabels;
}
var noUnusedPrivateClassMembers;
var hasRequiredNoUnusedPrivateClassMembers;
function requireNoUnusedPrivateClassMembers() {
  if (hasRequiredNoUnusedPrivateClassMembers) return noUnusedPrivateClassMembers;
  hasRequiredNoUnusedPrivateClassMembers = 1;
  noUnusedPrivateClassMembers = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow unused private class members",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-unused-private-class-members"
      },
      schema: [],
      messages: {
        unusedPrivateClassMember: "'{{classMemberName}}' is defined but never used."
      }
    },
    create(context) {
      const trackedClasses = [];
      function isWriteOnlyAssignment(privateIdentifierNode) {
        const parentStatement = privateIdentifierNode.parent.parent;
        const isAssignmentExpression = parentStatement.type === "AssignmentExpression";
        if (!isAssignmentExpression && parentStatement.type !== "ForInStatement" && parentStatement.type !== "ForOfStatement" && parentStatement.type !== "AssignmentPattern") {
          return false;
        }
        if (parentStatement.left !== privateIdentifierNode.parent) {
          return false;
        }
        if (isAssignmentExpression && parentStatement.operator !== "=") {
          return parentStatement.parent.type === "ExpressionStatement";
        }
        return true;
      }
      return {
        // Collect all declared members up front and assume they are all unused
        ClassBody(classBodyNode) {
          const privateMembers = /* @__PURE__ */ new Map();
          trackedClasses.unshift(privateMembers);
          for (const bodyMember of classBodyNode.body) {
            if (bodyMember.type === "PropertyDefinition" || bodyMember.type === "MethodDefinition") {
              if (bodyMember.key.type === "PrivateIdentifier") {
                privateMembers.set(bodyMember.key.name, {
                  declaredNode: bodyMember,
                  isAccessor: bodyMember.type === "MethodDefinition" && (bodyMember.kind === "set" || bodyMember.kind === "get")
                });
              }
            }
          }
        },
        /*
         * Process all usages of the private identifier and remove a member from
         * `declaredAndUnusedPrivateMembers` if we deem it used.
         */
        PrivateIdentifier(privateIdentifierNode) {
          const classBody = trackedClasses.find(
            (classProperties) => classProperties.has(privateIdentifierNode.name)
          );
          if (!classBody) {
            return;
          }
          const memberDefinition = classBody.get(
            privateIdentifierNode.name
          );
          if (memberDefinition.isUsed) {
            return;
          }
          if (privateIdentifierNode.parent.type === "PropertyDefinition" || privateIdentifierNode.parent.type === "MethodDefinition") {
            return;
          }
          if (memberDefinition.isAccessor) {
            memberDefinition.isUsed = true;
            return;
          }
          if (isWriteOnlyAssignment(privateIdentifierNode)) {
            return;
          }
          const wrappingExpressionType = privateIdentifierNode.parent.parent.type;
          const parentOfWrappingExpressionType = privateIdentifierNode.parent.parent.parent.type;
          if (wrappingExpressionType === "UpdateExpression" && parentOfWrappingExpressionType === "ExpressionStatement") {
            return;
          }
          if (wrappingExpressionType === "Property" && parentOfWrappingExpressionType === "ObjectPattern" && privateIdentifierNode.parent.parent.value === privateIdentifierNode.parent) {
            return;
          }
          if (wrappingExpressionType === "RestElement") {
            return;
          }
          if (wrappingExpressionType === "ArrayPattern") {
            return;
          }
          memberDefinition.isUsed = true;
        },
        /*
         * Post-process the class members and report any remaining members.
         * Since private members can only be accessed in the current class context,
         * we can safely assume that all usages are within the current class body.
         */
        "ClassBody:exit"() {
          const unusedPrivateMembers = trackedClasses.shift();
          for (const [
            classMemberName,
            { declaredNode, isUsed }
          ] of unusedPrivateMembers.entries()) {
            if (isUsed) {
              continue;
            }
            context.report({
              node: declaredNode,
              loc: declaredNode.key.loc,
              messageId: "unusedPrivateClassMember",
              data: {
                classMemberName: `#${classMemberName}`
              }
            });
          }
        }
      };
    }
  };
  return noUnusedPrivateClassMembers;
}
var noUnusedVars;
var hasRequiredNoUnusedVars;
function requireNoUnusedVars() {
  if (hasRequiredNoUnusedVars) return noUnusedVars;
  hasRequiredNoUnusedVars = 1;
  const astUtils2 = requireAstUtils();
  noUnusedVars = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow unused variables",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-unused-vars"
      },
      hasSuggestions: true,
      schema: [
        {
          oneOf: [
            {
              enum: ["all", "local"]
            },
            {
              type: "object",
              properties: {
                vars: {
                  enum: ["all", "local"]
                },
                varsIgnorePattern: {
                  type: "string"
                },
                args: {
                  enum: ["all", "after-used", "none"]
                },
                ignoreRestSiblings: {
                  type: "boolean"
                },
                argsIgnorePattern: {
                  type: "string"
                },
                caughtErrors: {
                  enum: ["all", "none"]
                },
                caughtErrorsIgnorePattern: {
                  type: "string"
                },
                destructuredArrayIgnorePattern: {
                  type: "string"
                },
                ignoreClassWithStaticInitBlock: {
                  type: "boolean"
                },
                ignoreUsingDeclarations: {
                  type: "boolean"
                },
                reportUsedIgnorePattern: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        unusedVar: "'{{varName}}' is {{action}} but never used{{additional}}.",
        usedIgnoredVar: "'{{varName}}' is marked as ignored but is used{{additional}}.",
        removeVar: "Remove unused variable '{{varName}}'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const REST_PROPERTY_TYPE = /^(?:RestElement|(?:Experimental)?RestProperty)$/u;
      const config2 = {
        vars: "all",
        args: "after-used",
        ignoreRestSiblings: false,
        caughtErrors: "all",
        ignoreClassWithStaticInitBlock: false,
        ignoreUsingDeclarations: false,
        reportUsedIgnorePattern: false
      };
      const firstOption = context.options[0];
      if (firstOption) {
        if (typeof firstOption === "string") {
          config2.vars = firstOption;
        } else {
          config2.vars = firstOption.vars || config2.vars;
          config2.args = firstOption.args || config2.args;
          config2.ignoreRestSiblings = firstOption.ignoreRestSiblings || config2.ignoreRestSiblings;
          config2.caughtErrors = firstOption.caughtErrors || config2.caughtErrors;
          config2.ignoreClassWithStaticInitBlock = firstOption.ignoreClassWithStaticInitBlock || config2.ignoreClassWithStaticInitBlock;
          config2.ignoreUsingDeclarations = firstOption.ignoreUsingDeclarations || config2.ignoreUsingDeclarations;
          config2.reportUsedIgnorePattern = firstOption.reportUsedIgnorePattern || config2.reportUsedIgnorePattern;
          if (firstOption.varsIgnorePattern) {
            config2.varsIgnorePattern = new RegExp(
              firstOption.varsIgnorePattern,
              "u"
            );
          }
          if (firstOption.argsIgnorePattern) {
            config2.argsIgnorePattern = new RegExp(
              firstOption.argsIgnorePattern,
              "u"
            );
          }
          if (firstOption.caughtErrorsIgnorePattern) {
            config2.caughtErrorsIgnorePattern = new RegExp(
              firstOption.caughtErrorsIgnorePattern,
              "u"
            );
          }
          if (firstOption.destructuredArrayIgnorePattern) {
            config2.destructuredArrayIgnorePattern = new RegExp(
              firstOption.destructuredArrayIgnorePattern,
              "u"
            );
          }
        }
      }
      function defToVariableType(def) {
        if (config2.destructuredArrayIgnorePattern && def.name.parent.type === "ArrayPattern") {
          return "array-destructure";
        }
        switch (def.type) {
          case "CatchClause":
            return "catch-clause";
          case "Parameter":
            return "parameter";
          default:
            return "variable";
        }
      }
      function getVariableDescription(variableType) {
        let pattern2;
        let variableDescription;
        switch (variableType) {
          case "array-destructure":
            pattern2 = config2.destructuredArrayIgnorePattern;
            variableDescription = "elements of array destructuring";
            break;
          case "catch-clause":
            pattern2 = config2.caughtErrorsIgnorePattern;
            variableDescription = "caught errors";
            break;
          case "parameter":
            pattern2 = config2.argsIgnorePattern;
            variableDescription = "args";
            break;
          case "variable":
            pattern2 = config2.varsIgnorePattern;
            variableDescription = "vars";
            break;
          default:
            throw new Error(
              `Unexpected variable type: ${variableType}`
            );
        }
        if (pattern2) {
          pattern2 = pattern2.toString();
        }
        return [variableDescription, pattern2];
      }
      function getDefinedMessageData(unusedVar) {
        const def = unusedVar.defs && unusedVar.defs[0];
        let additionalMessageData = "";
        if (def) {
          const [variableDescription, pattern2] = getVariableDescription(
            defToVariableType(def)
          );
          if (pattern2 && variableDescription) {
            additionalMessageData = `. Allowed unused ${variableDescription} must match ${pattern2}`;
          }
        }
        return {
          varName: unusedVar.name,
          action: "defined",
          additional: additionalMessageData
        };
      }
      function getAssignedMessageData(unusedVar) {
        const def = unusedVar.defs && unusedVar.defs[0];
        let additionalMessageData = "";
        if (def) {
          const [variableDescription, pattern2] = getVariableDescription(
            defToVariableType(def)
          );
          if (pattern2 && variableDescription) {
            additionalMessageData = `. Allowed unused ${variableDescription} must match ${pattern2}`;
          }
        }
        return {
          varName: unusedVar.name,
          action: "assigned a value",
          additional: additionalMessageData
        };
      }
      function getUsedIgnoredMessageData(variable, variableType) {
        const [variableDescription, pattern2] = getVariableDescription(variableType);
        let additionalMessageData = "";
        if (pattern2 && variableDescription) {
          additionalMessageData = `. Used ${variableDescription} must not match ${pattern2}`;
        }
        return {
          varName: variable.name,
          additional: additionalMessageData
        };
      }
      const STATEMENT_TYPE = /(?:Statement|Declaration)$/u;
      function isExported(variable) {
        const definition = variable.defs[0];
        if (definition) {
          let node2 = definition.node;
          if (node2.type === "VariableDeclarator") {
            node2 = node2.parent;
          } else if (definition.type === "Parameter") {
            return false;
          }
          return node2.parent.type.indexOf("Export") === 0;
        }
        return false;
      }
      function usesExplicitResourceManagement(variable) {
        const [definition] = variable.defs;
        return definition?.type === "Variable" && (definition.parent.kind === "using" || definition.parent.kind === "await using");
      }
      function hasRestSibling(node2) {
        return node2.type === "Property" && node2.parent.type === "ObjectPattern" && REST_PROPERTY_TYPE.test(node2.parent.properties.at(-1).type);
      }
      function hasRestSpreadSibling(variable) {
        if (config2.ignoreRestSiblings) {
          const hasRestSiblingDefinition = variable.defs.some(
            (def) => hasRestSibling(def.name.parent)
          );
          const hasRestSiblingReference = variable.references.some(
            (ref2) => hasRestSibling(ref2.identifier.parent)
          );
          return hasRestSiblingDefinition || hasRestSiblingReference;
        }
        return false;
      }
      function isReadRef(ref2) {
        return ref2.isRead();
      }
      function isSelfReference(ref2, nodes) {
        let scope = ref2.from;
        while (scope) {
          if (nodes.includes(scope.block)) {
            return true;
          }
          scope = scope.upper;
        }
        return false;
      }
      function getFunctionDefinitions(variable) {
        const functionDefinitions = [];
        variable.defs.forEach((def) => {
          const { type: type2, node: node2 } = def;
          if (type2 === "FunctionName") {
            functionDefinitions.push(node2);
          }
          if (type2 === "Variable" && node2.init && (node2.init.type === "FunctionExpression" || node2.init.type === "ArrowFunctionExpression")) {
            functionDefinitions.push(node2.init);
          }
        });
        return functionDefinitions;
      }
      function isInside(inner, outer) {
        return inner.range[0] >= outer.range[0] && inner.range[1] <= outer.range[1];
      }
      function isUnusedExpression(node2) {
        const parent = node2.parent;
        if (parent.type === "ExpressionStatement") {
          return true;
        }
        if (parent.type === "SequenceExpression") {
          const isLastExpression = parent.expressions.at(-1) === node2;
          if (!isLastExpression) {
            return true;
          }
          return isUnusedExpression(parent);
        }
        return false;
      }
      function getRhsNode(ref2, prevRhsNode) {
        const id2 = ref2.identifier;
        const parent = id2.parent;
        const refScope = ref2.from.variableScope;
        const varScope = ref2.resolved.scope.variableScope;
        const canBeUsedLater = refScope !== varScope || astUtils2.isInLoop(id2);
        if (prevRhsNode && isInside(id2, prevRhsNode)) {
          return prevRhsNode;
        }
        if (parent.type === "AssignmentExpression" && isUnusedExpression(parent) && id2 === parent.left && !canBeUsedLater) {
          return parent.right;
        }
        return null;
      }
      function isStorableFunction(funcNode, rhsNode) {
        let node2 = funcNode;
        let parent = funcNode.parent;
        while (parent && isInside(parent, rhsNode)) {
          switch (parent.type) {
            case "SequenceExpression":
              if (parent.expressions.at(-1) !== node2) {
                return false;
              }
              break;
            case "CallExpression":
            case "NewExpression":
              return parent.callee !== node2;
            case "AssignmentExpression":
            case "TaggedTemplateExpression":
            case "YieldExpression":
              return true;
            default:
              if (STATEMENT_TYPE.test(parent.type)) {
                return true;
              }
          }
          node2 = parent;
          parent = parent.parent;
        }
        return false;
      }
      function isInsideOfStorableFunction(id2, rhsNode) {
        const funcNode = astUtils2.getUpperFunction(id2);
        return funcNode && isInside(funcNode, rhsNode) && isStorableFunction(funcNode, rhsNode);
      }
      function isReadForItself(ref2, rhsNode) {
        const id2 = ref2.identifier;
        const parent = id2.parent;
        return ref2.isRead() && // self update. e.g. `a += 1`, `a++`
        (parent.type === "AssignmentExpression" && parent.left === id2 && isUnusedExpression(parent) && !astUtils2.isLogicalAssignmentOperator(parent.operator) || parent.type === "UpdateExpression" && isUnusedExpression(parent) || // in RHS of an assignment for itself. e.g. `a = a + 1`
        rhsNode && isInside(id2, rhsNode) && !isInsideOfStorableFunction(id2, rhsNode));
      }
      function isForInOfRef(ref2) {
        let target = ref2.identifier.parent;
        if (target.type === "VariableDeclarator") {
          target = target.parent.parent;
        }
        if (target.type !== "ForInStatement" && target.type !== "ForOfStatement") {
          return false;
        }
        if (target.body.type === "BlockStatement") {
          target = target.body.body[0];
        } else {
          target = target.body;
        }
        if (!target) {
          return false;
        }
        return target.type === "ReturnStatement";
      }
      function isUsedVariable(variable) {
        if (variable.eslintUsed) {
          return true;
        }
        const functionNodes = getFunctionDefinitions(variable);
        const isFunctionDefinition = functionNodes.length > 0;
        let rhsNode = null;
        return variable.references.some((ref2) => {
          if (isForInOfRef(ref2)) {
            return true;
          }
          const forItself = isReadForItself(ref2, rhsNode);
          rhsNode = getRhsNode(ref2, rhsNode);
          return isReadRef(ref2) && !forItself && !(isFunctionDefinition && isSelfReference(ref2, functionNodes));
        });
      }
      function isAfterLastUsedArg(variable) {
        const def = variable.defs[0];
        const params = sourceCode2.getDeclaredVariables(def.node);
        const posteriorParams = params.slice(params.indexOf(variable) + 1);
        return !posteriorParams.some(
          (v2) => v2.references.length > 0 || v2.eslintUsed
        );
      }
      function collectUnusedVariables(scope, unusedVars) {
        const variables = scope.variables;
        const childScopes = scope.childScopes;
        let i2, l2;
        if (scope.type !== "global" || config2.vars === "all") {
          for (i2 = 0, l2 = variables.length; i2 < l2; ++i2) {
            const variable = variables[i2];
            if (scope.type === "class" && scope.block.id === variable.identifiers[0]) {
              continue;
            }
            if (scope.functionExpressionScope) {
              continue;
            }
            if (!config2.reportUsedIgnorePattern && variable.eslintUsed) {
              continue;
            }
            if (scope.type === "function" && variable.name === "arguments" && variable.identifiers.length === 0) {
              continue;
            }
            const def = variable.defs[0];
            if (def) {
              const type2 = def.type;
              const refUsedInArrayPatterns = variable.references.some(
                (ref2) => ref2.identifier.parent.type === "ArrayPattern"
              );
              if ((def.name.parent.type === "ArrayPattern" || refUsedInArrayPatterns) && config2.destructuredArrayIgnorePattern && config2.destructuredArrayIgnorePattern.test(
                def.name.name
              )) {
                if (config2.reportUsedIgnorePattern && isUsedVariable(variable)) {
                  context.report({
                    node: def.name,
                    messageId: "usedIgnoredVar",
                    data: getUsedIgnoredMessageData(
                      variable,
                      "array-destructure"
                    )
                  });
                }
                continue;
              }
              if (type2 === "ClassName") {
                const hasStaticBlock = def.node.body.body.some(
                  (node2) => node2.type === "StaticBlock"
                );
                if (config2.ignoreClassWithStaticInitBlock && hasStaticBlock) {
                  continue;
                }
              }
              if (type2 === "CatchClause") {
                if (config2.caughtErrors === "none") {
                  continue;
                }
                if (config2.caughtErrorsIgnorePattern && config2.caughtErrorsIgnorePattern.test(
                  def.name.name
                )) {
                  if (config2.reportUsedIgnorePattern && isUsedVariable(variable)) {
                    context.report({
                      node: def.name,
                      messageId: "usedIgnoredVar",
                      data: getUsedIgnoredMessageData(
                        variable,
                        "catch-clause"
                      )
                    });
                  }
                  continue;
                }
              } else if (type2 === "Parameter") {
                if ((def.node.parent.type === "Property" || def.node.parent.type === "MethodDefinition") && def.node.parent.kind === "set") {
                  continue;
                }
                if (config2.args === "none") {
                  continue;
                }
                if (config2.argsIgnorePattern && config2.argsIgnorePattern.test(def.name.name)) {
                  if (config2.reportUsedIgnorePattern && isUsedVariable(variable)) {
                    context.report({
                      node: def.name,
                      messageId: "usedIgnoredVar",
                      data: getUsedIgnoredMessageData(
                        variable,
                        "parameter"
                      )
                    });
                  }
                  continue;
                }
                if (config2.args === "after-used" && astUtils2.isFunction(def.name.parent) && !isAfterLastUsedArg(variable)) {
                  continue;
                }
              } else {
                if (config2.varsIgnorePattern && config2.varsIgnorePattern.test(def.name.name)) {
                  if (config2.reportUsedIgnorePattern && isUsedVariable(variable)) {
                    context.report({
                      node: def.name,
                      messageId: "usedIgnoredVar",
                      data: getUsedIgnoredMessageData(
                        variable,
                        "variable"
                      )
                    });
                  }
                  continue;
                }
              }
            }
            if (!isUsedVariable(variable) && !isExported(variable) && !(config2.ignoreUsingDeclarations && usesExplicitResourceManagement(variable)) && !hasRestSpreadSibling(variable)) {
              unusedVars.push(variable);
            }
          }
        }
        for (i2 = 0, l2 = childScopes.length; i2 < l2; ++i2) {
          collectUnusedVariables(childScopes[i2], unusedVars);
        }
        return unusedVars;
      }
      function handleFixes(fixer, unusedVar) {
        const id2 = unusedVar.identifiers[0];
        const parent = id2.parent;
        const parentType = parent.type;
        const tokenBefore = sourceCode2.getTokenBefore(id2);
        const tokenAfter = sourceCode2.getTokenAfter(id2);
        const isFunction2 = astUtils2.isFunction;
        const isLoop = astUtils2.isLoop;
        const allWriteReferences = unusedVar.references.filter(
          (ref2) => ref2.isWrite()
        );
        function getPreviousTokenStart(node2, skips) {
          return sourceCode2.getTokenBefore(node2, skips).range[0];
        }
        function getNextTokenEnd(node2, skips) {
          return sourceCode2.getTokenAfter(node2, skips).range[1];
        }
        function getTokenBeforeValue(node2) {
          return sourceCode2.getTokenBefore(node2).value;
        }
        function getTokenAfterValue(node2) {
          return sourceCode2.getTokenAfter(node2).value;
        }
        function hasSingleElement(node2) {
          return node2.elements.filter((e2) => e2 !== null).length === 1;
        }
        function hasImportOfCertainType(node2, type2) {
          return node2.specifiers.some((e2) => e2.type === type2);
        }
        function isDeclarationNotSafeToRemove(nextToken, prevToken) {
          return nextToken.type === "String" || prevToken && !astUtils2.isSemicolonToken(prevToken) && !astUtils2.isOpeningBraceToken(prevToken);
        }
        function fixFunctionParameters(node2) {
          const parentNode = node2.parent;
          if (isFunction2(parentNode)) {
            if (parentNode.params.length === 1) {
              return fixer.removeRange(node2.range);
            }
            if (getTokenBeforeValue(node2) === "(" && getTokenAfterValue(node2) === ",") {
              return fixer.removeRange([
                node2.range[0],
                getNextTokenEnd(node2)
              ]);
            }
            return fixer.removeRange([
              getPreviousTokenStart(node2),
              node2.range[1]
            ]);
          }
          return null;
        }
        function fixVariables(node2) {
          const parentNode = node2.parent;
          if (parentNode.type === "VariableDeclarator") {
            if (isLoop(parentNode.parent.parent)) {
              return null;
            }
            if (parentNode.parent.declarations.length === 1) {
              const nextToken = sourceCode2.getTokenAfter(
                parentNode.parent
              );
              const prevToken = sourceCode2.getTokenBefore(
                parentNode.parent
              );
              if (nextToken && isDeclarationNotSafeToRemove(nextToken, prevToken)) {
                return null;
              }
              return fixer.removeRange(parentNode.parent.range);
            }
            if (getTokenBeforeValue(parentNode) === ",") {
              return fixer.removeRange([
                getPreviousTokenStart(parentNode),
                parentNode.range[1]
              ]);
            }
            return fixer.removeRange([
              parentNode.range[0],
              getNextTokenEnd(parentNode)
            ]);
          }
          if (getTokenBeforeValue(node2) === ":") {
            if (parentNode.parent.type === "ObjectPattern") {
              return fixObjectWithValueSeparator(node2);
            }
          }
          return fixFunctionParameters(node2);
        }
        function fixNestedObjectVariable(node2) {
          const parentNode = node2.parent;
          if (parentNode.parent.parent.parent.type === "ObjectPattern" && parentNode.parent.properties.length === 1) {
            return fixNestedObjectVariable(parentNode.parent);
          }
          if (parentNode.parent.type === "ObjectPattern") {
            if (parentNode.parent.properties.length === 1) {
              return fixVariables(parentNode.parent);
            }
            if (getTokenBeforeValue(parentNode) === "{") {
              return fixer.removeRange([
                parentNode.range[0],
                getNextTokenEnd(parentNode)
              ]);
            }
            return fixer.removeRange([
              getPreviousTokenStart(parentNode),
              parentNode.range[1]
            ]);
          }
          return null;
        }
        function fixNestedArrayVariable(node2) {
          const parentNode = node2.parent;
          if (parentNode.parent.type === "ArrayPattern" && hasSingleElement(parentNode)) {
            return fixNestedArrayVariable(parentNode);
          }
          if (hasSingleElement(parentNode)) {
            if (getTokenBeforeValue(parentNode) === ":") {
              return fixVariables(parentNode);
            }
            if (parentNode.parent.type === "RestElement") {
              return fixRestInPattern(parentNode.parent);
            }
            return fixVariables(parentNode);
          }
          if (getTokenBeforeValue(node2) === "," && getTokenAfterValue(node2) === "]") {
            return fixer.removeRange([
              getPreviousTokenStart(node2),
              node2.range[1]
            ]);
          }
          return fixer.removeRange(node2.range);
        }
        function fixObjectWithValueSeparator(node2) {
          const parentNode = node2.parent.parent;
          if (parentNode.parent.type === "ArrayPattern" && parentNode.properties.length === 1) {
            return fixNestedArrayVariable(parentNode);
          }
          return fixNestedObjectVariable(node2);
        }
        function fixRestInPattern(node2) {
          const parentNode = node2.parent;
          if (isFunction2(parentNode)) {
            if (parentNode.params.length === 1) {
              return fixer.removeRange(node2.range);
            }
            return fixer.removeRange([
              getPreviousTokenStart(node2),
              node2.range[1]
            ]);
          }
          if (parentNode.type === "ArrayPattern") {
            if (hasSingleElement(parentNode)) {
              if (parentNode.parent.type === "ArrayPattern") {
                return fixNestedArrayVariable(parentNode);
              }
              return fixVariables(parentNode);
            }
            return fixer.removeRange([
              getPreviousTokenStart(node2),
              node2.range[1]
            ]);
          }
          return null;
        }
        if (allWriteReferences.some(
          (ref2) => ref2.identifier.range[0] !== id2.range[0]
        )) {
          return null;
        }
        if (parentType === "VariableDeclarator") {
          if (parent.parent.declarations.length === 1) {
            if (isLoop(parent.parent.parent) && parent.parent.parent.body !== parent.parent) {
              return null;
            }
            if (parent.parent.parent.type === "IfStatement" || isLoop(parent.parent.parent) || parent.parent.parent.type === "WithStatement" && parent.parent.parent.body === parent.parent) {
              return fixer.replaceText(parent.parent, ";");
            }
            const nextToken = sourceCode2.getTokenAfter(parent.parent);
            const prevToken = sourceCode2.getTokenBefore(parent.parent);
            if (nextToken && isDeclarationNotSafeToRemove(nextToken, prevToken)) {
              return null;
            }
            return fixer.removeRange(parent.parent.range);
          }
          if (tokenBefore.value === ",") {
            return fixer.removeRange([
              tokenBefore.range[0],
              parent.range[1]
            ]);
          }
          return fixer.removeRange([
            parent.range[0],
            getNextTokenEnd(parent)
          ]);
        }
        if (parent.parent.type === "ObjectPattern") {
          if (parent.parent.properties.length === 1) {
            if (parent.parent.parent.type === "RestElement") {
              return fixRestInPattern(parent.parent.parent);
            }
            if (parent.parent.parent.type === "ArrayPattern") {
              return fixNestedArrayVariable(parent.parent);
            }
            return fixVariables(parent.parent);
          }
          if (tokenBefore.value === ":") {
            if (getTokenBeforeValue(parent) === "{" && getTokenAfterValue(parent) === ",") {
              return fixer.removeRange([
                parent.range[0],
                getNextTokenEnd(parent)
              ]);
            }
            return fixer.removeRange([
              getPreviousTokenStart(parent),
              id2.range[1]
            ]);
          }
        }
        if (parentType === "ArrayPattern") {
          if (hasSingleElement(parent)) {
            if (parent.parent.type === "RestElement") {
              return fixRestInPattern(parent.parent);
            }
            if (parent.parent.type === "ArrayPattern") {
              return fixNestedArrayVariable(parent);
            }
            return fixVariables(parent);
          }
          if (tokenBefore.value === "," && tokenAfter.value === ",") {
            return fixer.removeRange(id2.range);
          }
        }
        if (parentType === "RestElement") {
          if (parent.parent.type === "ArrayPattern") {
            if (hasSingleElement(parent.parent)) {
              if (parent.parent.parent.type === "ArrayPattern") {
                return fixNestedArrayVariable(parent.parent);
              }
              return fixVariables(parent.parent);
            }
            return fixer.removeRange([
              getPreviousTokenStart(id2, 1),
              id2.range[1]
            ]);
          }
          if (parent.parent.type === "ObjectPattern") {
            if (parent.parent.properties.length === 1) {
              return fixVariables(parent.parent);
            }
            return fixer.removeRange([
              getPreviousTokenStart(id2, 1),
              id2.range[1]
            ]);
          }
          if (isFunction2(parent.parent)) {
            if (parent.parent.params.length === 1) {
              return fixer.removeRange(parent.range);
            }
            return fixer.removeRange([
              getPreviousTokenStart(parent),
              parent.range[1]
            ]);
          }
        }
        if (parentType === "AssignmentPattern") {
          if (parent.parent.type === "ArrayPattern") {
            return fixNestedArrayVariable(parent);
          }
          if (parent.parent.parent.type === "ObjectPattern") {
            if (parent.parent.parent.properties.length === 1) {
              if (parent.parent.parent.parent.type === "ArrayPattern") {
                return fixNestedArrayVariable(parent.parent.parent);
              }
              return fixVariables(parent.parent.parent);
            }
            if (getTokenBeforeValue(parent.parent) === "{" && getTokenAfterValue(parent.parent) === ",") {
              return fixer.removeRange([
                parent.parent.range[0],
                getNextTokenEnd(parent.parent)
              ]);
            }
            return fixer.removeRange([
              getPreviousTokenStart(parent.parent),
              parent.parent.range[1]
            ]);
          }
          if (isFunction2(parent.parent)) {
            return fixFunctionParameters(parent);
          }
        }
        if (parentType === "FunctionDeclaration" && parent.id === id2) {
          return fixer.removeRange(parent.range);
        }
        if (parentType === "ImportDefaultSpecifier") {
          if (!hasImportOfCertainType(parent.parent, "ImportSpecifier") && !hasImportOfCertainType(
            parent.parent,
            "ImportNamespaceSpecifier"
          )) {
            return fixer.removeRange([
              parent.range[0],
              parent.parent.source.range[0]
            ]);
          }
          return fixer.removeRange([id2.range[0], tokenAfter.range[1]]);
        }
        if (parentType === "ImportSpecifier") {
          if (parent.parent.specifiers.filter(
            (e2) => e2.type === "ImportSpecifier"
          ).length === 1) {
            if (!hasImportOfCertainType(
              parent.parent,
              "ImportDefaultSpecifier"
            )) {
              return fixer.removeRange(parent.parent.range);
            }
            return fixer.removeRange([
              getPreviousTokenStart(parent, 1),
              tokenAfter.range[1]
            ]);
          }
          if (getTokenBeforeValue(parent) === "{") {
            return fixer.removeRange([
              parent.range[0],
              getNextTokenEnd(parent)
            ]);
          }
          return fixer.removeRange([
            getPreviousTokenStart(parent),
            parent.range[1]
          ]);
        }
        if (parentType === "ImportNamespaceSpecifier") {
          if (hasImportOfCertainType(
            parent.parent,
            "ImportDefaultSpecifier"
          )) {
            return fixer.removeRange([
              getPreviousTokenStart(parent),
              parent.range[1]
            ]);
          }
          return fixer.removeRange([
            parent.range[0],
            parent.parent.source.range[0]
          ]);
        }
        if (parentType === "CatchClause") {
          return null;
        }
        if (parentType === "ClassDeclaration") {
          return fixer.removeRange(parent.range);
        }
        if (tokenBefore?.value === ",") {
          return fixer.removeRange([tokenBefore.range[0], id2.range[1]]);
        }
        if (tokenAfter.value === ",") {
          if (tokenBefore.value === "(") {
            return fixer.removeRange([
              id2.range[0],
              tokenAfter.range[1]
            ]);
          }
          if (tokenBefore.value === "{") {
            return fixer.removeRange([
              id2.range[0],
              tokenAfter.range[1]
            ]);
          }
        }
        if (parentType === "ArrowFunctionExpression" && parent.params.length === 1 && tokenAfter?.value !== ")") {
          return fixer.replaceText(id2, "()");
        }
        return fixer.removeRange(id2.range);
      }
      return {
        "Program:exit"(programNode) {
          const unusedVars = collectUnusedVariables(
            sourceCode2.getScope(programNode),
            []
          );
          for (let i2 = 0, l2 = unusedVars.length; i2 < l2; ++i2) {
            const unusedVar = unusedVars[i2];
            if (unusedVar.defs.length > 0) {
              const writeReferences = unusedVar.references.filter(
                (ref2) => ref2.isWrite() && ref2.from.variableScope === unusedVar.scope.variableScope
              );
              let referenceToReport;
              if (writeReferences.length > 0) {
                referenceToReport = writeReferences.at(-1);
              }
              context.report({
                node: referenceToReport ? referenceToReport.identifier : unusedVar.identifiers[0],
                messageId: "unusedVar",
                data: unusedVar.references.some(
                  (ref2) => ref2.isWrite()
                ) ? getAssignedMessageData(unusedVar) : getDefinedMessageData(unusedVar),
                suggest: [
                  {
                    messageId: "removeVar",
                    data: {
                      varName: unusedVar.name
                    },
                    fix(fixer) {
                      return handleFixes(fixer, unusedVar);
                    }
                  }
                ]
              });
            } else if (unusedVar.eslintExplicitGlobalComments) {
              const directiveComment = unusedVar.eslintExplicitGlobalComments[0];
              context.report({
                node: programNode,
                loc: astUtils2.getNameLocationInGlobalDirectiveComment(
                  sourceCode2,
                  directiveComment,
                  unusedVar.name
                ),
                messageId: "unusedVar",
                data: getDefinedMessageData(unusedVar)
              });
            }
          }
        }
      };
    }
  };
  return noUnusedVars;
}
var noUseBeforeDefine;
var hasRequiredNoUseBeforeDefine;
function requireNoUseBeforeDefine() {
  if (hasRequiredNoUseBeforeDefine) return noUseBeforeDefine;
  hasRequiredNoUseBeforeDefine = 1;
  const SENTINEL_TYPE = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/u;
  const FOR_IN_OF_TYPE = /^For(?:In|Of)Statement$/u;
  function parseOptions(options) {
    if (typeof options === "object" && options !== null) {
      return options;
    }
    const functions = typeof options === "string" ? options !== "nofunc" : true;
    return {
      functions,
      classes: true,
      variables: true,
      allowNamedExports: false,
      enums: true,
      typedefs: true,
      ignoreTypeReferences: true
    };
  }
  function isInRange(node2, location) {
    return node2 && node2.range[0] <= location && location <= node2.range[1];
  }
  function isInClassStaticInitializerRange(node2, location) {
    return node2.body.some(
      (classMember) => classMember.type === "StaticBlock" && isInRange(classMember, location) || classMember.type === "PropertyDefinition" && classMember.static && classMember.value && isInRange(classMember.value, location)
    );
  }
  function isClassStaticInitializerScope(scope) {
    if (scope.type === "class-static-block") {
      return true;
    }
    if (scope.type === "class-field-initializer") {
      const propertyDefinition = scope.block.parent;
      return propertyDefinition.static;
    }
    return false;
  }
  function isFromSeparateExecutionContext(reference) {
    const variable = reference.resolved;
    let scope = reference.from;
    while (variable.scope.variableScope !== scope.variableScope) {
      if (isClassStaticInitializerScope(scope.variableScope)) {
        scope = scope.variableScope.upper;
      } else {
        return true;
      }
    }
    return false;
  }
  function isEvaluatedDuringInitialization(reference) {
    if (isFromSeparateExecutionContext(reference)) {
      return false;
    }
    const location = reference.identifier.range[1];
    const definition = reference.resolved.defs[0];
    if (definition.type === "ClassName") {
      const classDefinition = definition.node;
      return isInRange(classDefinition, location) && /*
      * Class binding is initialized before running static initializers.
      * For example, `class C { static foo = C; static { bar = C; } }` is valid.
      */
      !isInClassStaticInitializerRange(classDefinition.body, location);
    }
    let node2 = definition.name.parent;
    while (node2) {
      if (node2.type === "VariableDeclarator") {
        if (isInRange(node2.init, location)) {
          return true;
        }
        if (FOR_IN_OF_TYPE.test(node2.parent.parent.type) && isInRange(node2.parent.parent.right, location)) {
          return true;
        }
        break;
      } else if (node2.type === "AssignmentPattern") {
        if (isInRange(node2.right, location)) {
          return true;
        }
      } else if (SENTINEL_TYPE.test(node2.type)) {
        break;
      }
      node2 = node2.parent;
    }
    return false;
  }
  function referenceContainsTypeQuery(node2) {
    switch (node2.type) {
      case "TSTypeQuery":
        return true;
      case "TSQualifiedName":
      case "Identifier":
        return referenceContainsTypeQuery(node2.parent);
      default:
        return false;
    }
  }
  function isClassRefInClassDecorator(variable, reference) {
    if (variable.defs[0].type !== "ClassName") {
      return false;
    }
    if (!variable.defs[0].node.decorators || variable.defs[0].node.decorators.length === 0) {
      return false;
    }
    for (const deco of variable.defs[0].node.decorators) {
      if (reference.identifier.range[0] >= deco.range[0] && reference.identifier.range[1] <= deco.range[1]) {
        return true;
      }
    }
    return false;
  }
  noUseBeforeDefine = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "problem",
      docs: {
        description: "Disallow the use of variables before they are defined",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-use-before-define"
      },
      schema: [
        {
          oneOf: [
            {
              enum: ["nofunc"]
            },
            {
              type: "object",
              properties: {
                functions: { type: "boolean" },
                classes: { type: "boolean" },
                variables: { type: "boolean" },
                allowNamedExports: { type: "boolean" },
                enums: { type: "boolean" },
                typedefs: { type: "boolean" },
                ignoreTypeReferences: { type: "boolean" }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      defaultOptions: [
        {
          classes: true,
          functions: true,
          variables: true,
          allowNamedExports: false,
          enums: true,
          typedefs: true,
          ignoreTypeReferences: true
        }
      ],
      messages: {
        usedBeforeDefined: "'{{name}}' was used before it was defined."
      }
    },
    create(context) {
      const options = parseOptions(context.options[0]);
      const sourceCode2 = context.sourceCode;
      function shouldCheck(reference) {
        if (reference.init) {
          return false;
        }
        const { identifier } = reference;
        if (options.allowNamedExports && identifier.parent.type === "ExportSpecifier" && identifier.parent.local === identifier) {
          return false;
        }
        const variable = reference.resolved;
        if (!variable || variable.defs.length === 0) {
          return false;
        }
        const definitionType = variable.defs[0].type;
        if (!options.functions && definitionType === "FunctionName") {
          return false;
        }
        if ((!options.variables && definitionType === "Variable" || !options.classes && definitionType === "ClassName") && // don't skip checking the reference if it's in the same execution context, because of TDZ
        isFromSeparateExecutionContext(reference)) {
          return false;
        }
        if (!options.enums && definitionType === "TSEnumName") {
          return false;
        }
        if (!options.typedefs && definitionType === "Type") {
          return false;
        }
        if (options.ignoreTypeReferences && (referenceContainsTypeQuery(identifier) || identifier.parent.type === "TSTypeReference")) {
          return false;
        }
        if (identifier.parent.type === "TSQualifiedName") {
          let currentNode = identifier.parent;
          while (currentNode.type === "TSQualifiedName") {
            currentNode = currentNode.left;
          }
          if (currentNode === identifier) {
            return true;
          }
          return false;
        }
        if (isClassRefInClassDecorator(variable, reference)) {
          return false;
        }
        return true;
      }
      function checkReferencesInScope(scope) {
        scope.references.filter(shouldCheck).forEach((reference) => {
          const variable = reference.resolved;
          const definitionIdentifier = variable.defs[0].name;
          if (reference.identifier.range[1] < definitionIdentifier.range[1] || isEvaluatedDuringInitialization(reference) && reference.identifier.parent.type !== "TSTypeReference") {
            context.report({
              node: reference.identifier,
              messageId: "usedBeforeDefined",
              data: reference.identifier
            });
          }
        });
        scope.childScopes.forEach(checkReferencesInScope);
      }
      return {
        Program(node2) {
          checkReferencesInScope(sourceCode2.getScope(node2));
        }
      };
    }
  };
  return noUseBeforeDefine;
}
var noUselessAssignment;
var hasRequiredNoUselessAssignment;
function requireNoUselessAssignment() {
  if (hasRequiredNoUselessAssignment) return noUselessAssignment;
  hasRequiredNoUselessAssignment = 1;
  const { findVariable } = /* @__PURE__ */ requireEslintUtils();
  function* extractIdentifiersFromPattern(pattern2) {
    switch (pattern2.type) {
      case "Identifier":
        yield pattern2;
        return;
      case "ObjectPattern":
        for (const property of pattern2.properties) {
          yield* extractIdentifiersFromPattern(
            property.type === "Property" ? property.value : property
          );
        }
        return;
      case "ArrayPattern":
        for (const element of pattern2.elements) {
          if (!element) {
            continue;
          }
          yield* extractIdentifiersFromPattern(element);
        }
        return;
      case "RestElement":
        yield* extractIdentifiersFromPattern(pattern2.argument);
        return;
      case "AssignmentPattern":
        yield* extractIdentifiersFromPattern(pattern2.left);
    }
  }
  function isIdentifierEvaluatedAfterAssignment(assignment, identifier) {
    if (identifier.range[0] < assignment.identifier.range[1]) {
      return false;
    }
    if (assignment.expression && assignment.expression.range[0] <= identifier.range[0] && identifier.range[1] <= assignment.expression.range[1]) {
      return false;
    }
    return true;
  }
  function isIdentifierUsedBetweenAssignedAndEqualSign(assignment, identifier) {
    if (!assignment.expression) {
      return false;
    }
    return assignment.identifier.range[1] <= identifier.range[0] && identifier.range[1] <= assignment.expression.range[0];
  }
  noUselessAssignment = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow variable assignments when the value is not used",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-useless-assignment"
      },
      schema: [],
      messages: {
        unnecessaryAssignment: "This assigned value is not used in subsequent statements."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let scopeStack = null;
      const codePathStartScopes = /* @__PURE__ */ new Set();
      function getCodePathStartScope(scope) {
        let target = scope;
        while (target) {
          if (codePathStartScopes.has(target)) {
            return target;
          }
          target = target.upper;
        }
        return null;
      }
      function verify(target) {
        function isIdentifierUsedInSegment(segment, identifier) {
          const segmentInfo = target.segments[segment.id];
          return segmentInfo.first && segmentInfo.last && segmentInfo.first.range[0] <= identifier.range[0] && identifier.range[1] <= segmentInfo.last.range[1];
        }
        function verifyAssignmentIsUsed(targetAssignment, allAssignments) {
          const isAssignmentInTryBlock = target.tryStatementBlocks.some(
            (tryBlock) => tryBlock.range[0] <= targetAssignment.identifier.range[0] && targetAssignment.identifier.range[1] <= tryBlock.range[1]
          );
          if (isAssignmentInTryBlock) {
            return;
          }
          const subsequentSegmentData = {
            /**
             * Cache of subsequent segment information list that have already been iterated.
             * @type {SubsequentSegmentData[]}
             */
            results: [],
            /**
             * Subsequent segments that have already been iterated on. Used to avoid infinite loops.
             * @type {Set<CodePathSegment>}
             */
            subsequentSegments: /* @__PURE__ */ new Set(),
            /**
             * Unexplored code path segment.
             * If additional iterations are needed, consume this information and iterate.
             * @type {CodePathSegment[]}
             */
            queueSegments: targetAssignment.segments.flatMap(
              (segment) => segment.nextSegments
            )
          };
          function* getSubsequentSegments() {
            yield* subsequentSegmentData.results;
            while (subsequentSegmentData.queueSegments.length > 0) {
              const nextSegment = subsequentSegmentData.queueSegments.shift();
              if (subsequentSegmentData.subsequentSegments.has(
                nextSegment
              )) {
                continue;
              }
              subsequentSegmentData.subsequentSegments.add(
                nextSegment
              );
              const assignmentInSegment = allAssignments.find(
                (otherAssignment) => otherAssignment.segments.includes(
                  nextSegment
                ) && !isIdentifierUsedBetweenAssignedAndEqualSign(
                  otherAssignment,
                  targetAssignment.identifier
                )
              );
              if (!assignmentInSegment) {
                subsequentSegmentData.queueSegments.push(
                  ...nextSegment.nextSegments
                );
              }
              const result = {
                segment: nextSegment,
                assignment: assignmentInSegment
              };
              subsequentSegmentData.results.push(result);
              yield result;
            }
          }
          if (targetAssignment.variable.references.some(
            (ref2) => ref2.identifier.type !== "Identifier"
          )) {
            return;
          }
          const readReferences = targetAssignment.variable.references.filter(
            (reference) => reference.isRead()
          );
          if (!readReferences.length) {
            return;
          }
          const otherAssignmentAfterTargetAssignment = allAssignments.find((assignment) => {
            if (assignment === targetAssignment || assignment.segments.length && assignment.segments.every(
              (segment) => !targetAssignment.segments.includes(
                segment
              )
            )) {
              return false;
            }
            if (isIdentifierEvaluatedAfterAssignment(
              targetAssignment,
              assignment.identifier
            )) {
              return true;
            }
            if (assignment.expression && assignment.expression.range[0] <= targetAssignment.identifier.range[0] && targetAssignment.identifier.range[1] <= assignment.expression.range[1]) {
              return true;
            }
            return false;
          });
          for (const reference of readReferences) {
            if (target.scope !== getCodePathStartScope(reference.from)) {
              return;
            }
            if (isIdentifierEvaluatedAfterAssignment(
              targetAssignment,
              reference.identifier
            ) && (isIdentifierUsedBetweenAssignedAndEqualSign(
              targetAssignment,
              reference.identifier
            ) || targetAssignment.segments.some(
              (segment) => isIdentifierUsedInSegment(
                segment,
                reference.identifier
              )
            ))) {
              if (otherAssignmentAfterTargetAssignment && isIdentifierEvaluatedAfterAssignment(
                otherAssignmentAfterTargetAssignment,
                reference.identifier
              )) {
                continue;
              }
              return;
            }
            if (otherAssignmentAfterTargetAssignment) {
              continue;
            }
            for (const subsequentSegment of getSubsequentSegments()) {
              if (isIdentifierUsedInSegment(
                subsequentSegment.segment,
                reference.identifier
              )) {
                if (subsequentSegment.assignment && isIdentifierEvaluatedAfterAssignment(
                  subsequentSegment.assignment,
                  reference.identifier
                )) {
                  continue;
                }
                return;
              }
            }
          }
          context.report({
            node: targetAssignment.identifier,
            messageId: "unnecessaryAssignment"
          });
        }
        for (const assignments of target.assignments.values()) {
          assignments.sort(
            (a2, b) => a2.identifier.range[0] - b.identifier.range[0]
          );
          for (const assignment of assignments) {
            verifyAssignmentIsUsed(assignment, assignments);
          }
        }
      }
      return {
        onCodePathStart(codePath2, node2) {
          const scope = sourceCode2.getScope(node2);
          scopeStack = {
            upper: scopeStack,
            codePath: codePath2,
            scope,
            segments: /* @__PURE__ */ Object.create(null),
            currentSegments: /* @__PURE__ */ new Set(),
            assignments: /* @__PURE__ */ new Map(),
            tryStatementBlocks: []
          };
          codePathStartScopes.add(scopeStack.scope);
        },
        onCodePathEnd() {
          verify(scopeStack);
          scopeStack = scopeStack.upper;
        },
        onCodePathSegmentStart(segment) {
          const segmentInfo = { segment, first: null, last: null };
          scopeStack.segments[segment.id] = segmentInfo;
          scopeStack.currentSegments.add(segment);
        },
        onCodePathSegmentEnd(segment) {
          scopeStack.currentSegments.delete(segment);
        },
        TryStatement(node2) {
          scopeStack.tryStatementBlocks.push(node2.block);
        },
        Identifier(node2) {
          for (const segment of scopeStack.currentSegments) {
            const segmentInfo = scopeStack.segments[segment.id];
            if (!segmentInfo.first) {
              segmentInfo.first = node2;
            }
            segmentInfo.last = node2;
          }
        },
        ":matches(VariableDeclarator[init!=null], AssignmentExpression, UpdateExpression):exit"(node2) {
          if (scopeStack.currentSegments.size === 0) {
            return;
          }
          const assignments = scopeStack.assignments;
          let pattern2;
          let expression = null;
          if (node2.type === "VariableDeclarator") {
            pattern2 = node2.id;
            expression = node2.init;
          } else if (node2.type === "AssignmentExpression") {
            pattern2 = node2.left;
            expression = node2.right;
          } else {
            pattern2 = node2.argument;
          }
          for (const identifier of extractIdentifiersFromPattern(
            pattern2
          )) {
            const scope = sourceCode2.getScope(identifier);
            const variable = findVariable(scope, identifier);
            if (!variable) {
              continue;
            }
            if (variable.scope.type === "global" && variable.defs.length === 0) {
              continue;
            }
            if (scopeStack.scope !== getCodePathStartScope(variable.scope)) {
              continue;
            }
            if (variable.eslintUsed) {
              continue;
            }
            if (variable.scope.type === "module") {
              if (variable.defs.some(
                (def) => def.type === "Variable" && def.parent.parent.type === "ExportNamedDeclaration" || def.type === "FunctionName" && (def.node.parent.type === "ExportNamedDeclaration" || def.node.parent.type === "ExportDefaultDeclaration") || def.type === "ClassName" && (def.node.parent.type === "ExportNamedDeclaration" || def.node.parent.type === "ExportDefaultDeclaration")
              )) {
                continue;
              }
              if (variable.references.some(
                (reference) => reference.identifier.parent.type === "ExportSpecifier"
              )) {
                continue;
              }
            }
            let list = assignments.get(variable);
            if (!list) {
              list = [];
              assignments.set(variable, list);
            }
            list.push({
              variable,
              identifier,
              node: node2,
              expression,
              segments: [...scopeStack.currentSegments]
            });
          }
        }
      };
    }
  };
  return noUselessAssignment;
}
var noUselessBackreference;
var hasRequiredNoUselessBackreference;
function requireNoUselessBackreference() {
  if (hasRequiredNoUselessBackreference) return noUselessBackreference;
  hasRequiredNoUselessBackreference = 1;
  const {
    CALL,
    CONSTRUCT,
    ReferenceTracker,
    getStringIfConstant
  } = /* @__PURE__ */ requireEslintUtils();
  const { RegExpParser, visitRegExpAST } = requireRegexpp();
  const parser = new RegExpParser();
  function getPathToRoot(node2) {
    const path = [];
    let current = node2;
    do {
      path.push(current);
      current = current.parent;
    } while (current);
    return path;
  }
  function isLookaround(node2) {
    return node2.type === "Assertion" && (node2.kind === "lookahead" || node2.kind === "lookbehind");
  }
  function isNegativeLookaround(node2) {
    return isLookaround(node2) && node2.negate;
  }
  noUselessBackreference = {
    meta: {
      type: "problem",
      docs: {
        description: "Disallow useless backreferences in regular expressions",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-useless-backreference"
      },
      schema: [],
      messages: {
        nested: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}'{{ otherGroups }} from within that group.",
        forward: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}'{{ otherGroups }} which appears later in the pattern.",
        backward: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}'{{ otherGroups }} which appears before in the same lookbehind.",
        disjunctive: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}'{{ otherGroups }} which is in another alternative.",
        intoNegativeLookaround: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}'{{ otherGroups }} which is in a negative lookaround."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function checkRegex(node2, pattern2, flags2) {
        let regExpAST;
        try {
          regExpAST = parser.parsePattern(pattern2, 0, pattern2.length, {
            unicode: flags2.includes("u"),
            unicodeSets: flags2.includes("v")
          });
        } catch {
          return;
        }
        visitRegExpAST(regExpAST, {
          onBackreferenceEnter(bref) {
            const groups = [bref.resolved].flat(), brefPath = getPathToRoot(bref);
            const problems = groups.map((group2) => {
              const groupPath = getPathToRoot(group2);
              if (brefPath.includes(group2)) {
                return {
                  messageId: "nested",
                  group: group2
                };
              }
              let i2 = brefPath.length - 1, j = groupPath.length - 1;
              do {
                i2--;
                j--;
              } while (brefPath[i2] === groupPath[j]);
              const indexOfLowestCommonAncestor = j + 1, groupCut = groupPath.slice(
                0,
                indexOfLowestCommonAncestor
              ), commonPath = groupPath.slice(
                indexOfLowestCommonAncestor
              ), lowestCommonLookaround = commonPath.find(isLookaround), isMatchingBackward = lowestCommonLookaround && lowestCommonLookaround.kind === "lookbehind";
              if (groupCut.at(-1).type === "Alternative") {
                return {
                  messageId: "disjunctive",
                  group: group2
                };
              }
              if (!isMatchingBackward && bref.end <= group2.start) {
                return {
                  messageId: "forward",
                  group: group2
                };
              }
              if (isMatchingBackward && group2.end <= bref.start) {
                return {
                  messageId: "backward",
                  group: group2
                };
              }
              if (groupCut.some(isNegativeLookaround)) {
                return {
                  messageId: "intoNegativeLookaround",
                  group: group2
                };
              }
              return null;
            });
            if (problems.length === 0 || problems.some((problem) => !problem)) {
              return;
            }
            let problemsToReport;
            const problemsInSameDisjunction = problems.filter(
              (problem) => problem.messageId !== "disjunctive"
            );
            if (problemsInSameDisjunction.length) {
              problemsToReport = problemsInSameDisjunction;
            } else {
              problemsToReport = problems;
            }
            const [{ messageId, group }, ...other] = problemsToReport;
            let otherGroups = "";
            if (other.length === 1) {
              otherGroups = " and another group";
            } else if (other.length > 1) {
              otherGroups = ` and other ${other.length} groups`;
            }
            context.report({
              node: node2,
              messageId,
              data: {
                bref: bref.raw,
                group: group.raw,
                otherGroups
              }
            });
          }
        });
      }
      return {
        "Literal[regex]"(node2) {
          const { pattern: pattern2, flags: flags2 } = node2.regex;
          checkRegex(node2, pattern2, flags2);
        },
        Program(node2) {
          const scope = sourceCode2.getScope(node2), tracker = new ReferenceTracker(scope), traceMap = {
            RegExp: {
              [CALL]: true,
              [CONSTRUCT]: true
            }
          };
          for (const { node: refNode } of tracker.iterateGlobalReferences(
            traceMap
          )) {
            const [patternNode, flagsNode] = refNode.arguments, pattern2 = getStringIfConstant(patternNode, scope), flags2 = getStringIfConstant(flagsNode, scope);
            if (typeof pattern2 === "string") {
              checkRegex(refNode, pattern2, flags2 || "");
            }
          }
        }
      };
    }
  };
  return noUselessBackreference;
}
var noUselessCall;
var hasRequiredNoUselessCall;
function requireNoUselessCall() {
  if (hasRequiredNoUselessCall) return noUselessCall;
  hasRequiredNoUselessCall = 1;
  const astUtils2 = requireAstUtils();
  function isCallOrNonVariadicApply(node2) {
    const callee = astUtils2.skipChainExpression(node2.callee);
    return callee.type === "MemberExpression" && callee.property.type === "Identifier" && callee.computed === false && (callee.property.name === "call" && node2.arguments.length >= 1 || callee.property.name === "apply" && node2.arguments.length === 2 && node2.arguments[1].type === "ArrayExpression");
  }
  function isValidThisArg(expectedThis, thisArg, sourceCode2) {
    if (!expectedThis) {
      return astUtils2.isNullOrUndefined(thisArg);
    }
    return astUtils2.equalTokens(expectedThis, thisArg, sourceCode2);
  }
  noUselessCall = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary calls to `.call()` and `.apply()`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-useless-call"
      },
      schema: [],
      messages: {
        unnecessaryCall: "Unnecessary '.{{name}}()'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        CallExpression(node2) {
          if (!isCallOrNonVariadicApply(node2)) {
            return;
          }
          const callee = astUtils2.skipChainExpression(node2.callee);
          const applied = astUtils2.skipChainExpression(callee.object);
          const expectedThis = applied.type === "MemberExpression" ? applied.object : null;
          const thisArg = node2.arguments[0];
          if (isValidThisArg(expectedThis, thisArg, sourceCode2)) {
            context.report({
              node: node2,
              messageId: "unnecessaryCall",
              data: { name: callee.property.name }
            });
          }
        }
      };
    }
  };
  return noUselessCall;
}
var noUselessCatch;
var hasRequiredNoUselessCatch;
function requireNoUselessCatch() {
  if (hasRequiredNoUselessCatch) return noUselessCatch;
  hasRequiredNoUselessCatch = 1;
  noUselessCatch = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary `catch` clauses",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-useless-catch"
      },
      schema: [],
      messages: {
        unnecessaryCatchClause: "Unnecessary catch clause.",
        unnecessaryCatch: "Unnecessary try/catch wrapper."
      }
    },
    create(context) {
      return {
        CatchClause(node2) {
          if (node2.param && node2.param.type === "Identifier" && node2.body.body.length && node2.body.body[0].type === "ThrowStatement" && node2.body.body[0].argument.type === "Identifier" && node2.body.body[0].argument.name === node2.param.name) {
            if (node2.parent.finalizer) {
              context.report({
                node: node2,
                messageId: "unnecessaryCatchClause"
              });
            } else {
              context.report({
                node: node2.parent,
                messageId: "unnecessaryCatch"
              });
            }
          }
        }
      };
    }
  };
  return noUselessCatch;
}
var noUselessComputedKey;
var hasRequiredNoUselessComputedKey;
function requireNoUselessComputedKey() {
  if (hasRequiredNoUselessComputedKey) return noUselessComputedKey;
  hasRequiredNoUselessComputedKey = 1;
  const astUtils2 = requireAstUtils();
  function hasUselessComputedKey(node2) {
    if (!node2.computed) {
      return false;
    }
    const { key } = node2;
    if (key.type !== "Literal") {
      return false;
    }
    const { value } = key;
    if (typeof value !== "number" && typeof value !== "string") {
      return false;
    }
    switch (node2.type) {
      case "Property":
        if (node2.parent.type === "ObjectExpression") {
          return value !== "__proto__";
        }
        return true;
      case "PropertyDefinition":
        if (node2.static) {
          return value !== "constructor" && value !== "prototype";
        }
        return value !== "constructor";
      case "MethodDefinition":
        if (node2.static) {
          return value !== "prototype";
        }
        return value !== "constructor";
      /* c8 ignore next */
      default:
        throw new Error(`Unexpected node type: ${node2.type}`);
    }
  }
  noUselessComputedKey = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          enforceForClassMembers: true
        }
      ],
      docs: {
        description: "Disallow unnecessary computed property keys in objects and classes",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-useless-computed-key"
      },
      schema: [
        {
          type: "object",
          properties: {
            enforceForClassMembers: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        unnecessarilyComputedProperty: "Unnecessarily computed property [{{property}}] found."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ enforceForClassMembers }] = context.options;
      function check2(node2) {
        if (hasUselessComputedKey(node2)) {
          const { key } = node2;
          context.report({
            node: node2,
            messageId: "unnecessarilyComputedProperty",
            data: { property: sourceCode2.getText(key) },
            fix(fixer) {
              const leftSquareBracket = sourceCode2.getTokenBefore(
                key,
                astUtils2.isOpeningBracketToken
              );
              const rightSquareBracket = sourceCode2.getTokenAfter(
                key,
                astUtils2.isClosingBracketToken
              );
              if (sourceCode2.commentsExistBetween(
                leftSquareBracket,
                rightSquareBracket
              )) {
                return null;
              }
              const tokenBeforeLeftBracket = sourceCode2.getTokenBefore(leftSquareBracket);
              const needsSpaceBeforeKey = tokenBeforeLeftBracket.range[1] === leftSquareBracket.range[0] && !astUtils2.canTokensBeAdjacent(
                tokenBeforeLeftBracket,
                sourceCode2.getFirstToken(key)
              );
              const replacementKey = (needsSpaceBeforeKey ? " " : "") + key.raw;
              return fixer.replaceTextRange(
                [
                  leftSquareBracket.range[0],
                  rightSquareBracket.range[1]
                ],
                replacementKey
              );
            }
          });
        }
      }
      function noop2() {
      }
      return {
        Property: check2,
        MethodDefinition: enforceForClassMembers ? check2 : noop2,
        PropertyDefinition: enforceForClassMembers ? check2 : noop2
      };
    }
  };
  return noUselessComputedKey;
}
var noUselessConcat;
var hasRequiredNoUselessConcat;
function requireNoUselessConcat() {
  if (hasRequiredNoUselessConcat) return noUselessConcat;
  hasRequiredNoUselessConcat = 1;
  const astUtils2 = requireAstUtils();
  function isConcatenation(node2) {
    return node2.type === "BinaryExpression" && node2.operator === "+";
  }
  function isConcatOperatorToken(token) {
    return token.value === "+" && token.type === "Punctuator";
  }
  function getLeft(node2) {
    let left = node2.left;
    while (isConcatenation(left)) {
      left = left.right;
    }
    return left;
  }
  function getRight(node2) {
    let right = node2.right;
    while (isConcatenation(right)) {
      right = right.left;
    }
    return right;
  }
  noUselessConcat = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary concatenation of literals or template literals",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-useless-concat"
      },
      schema: [],
      messages: {
        unexpectedConcat: "Unexpected string concatenation of literals."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        BinaryExpression(node2) {
          if (node2.operator !== "+") {
            return;
          }
          const left = getLeft(node2);
          const right = getRight(node2);
          if (astUtils2.isStringLiteral(left) && astUtils2.isStringLiteral(right) && astUtils2.isTokenOnSameLine(left, right)) {
            const operatorToken = sourceCode2.getFirstTokenBetween(
              left,
              right,
              isConcatOperatorToken
            );
            context.report({
              node: node2,
              loc: operatorToken.loc,
              messageId: "unexpectedConcat"
            });
          }
        }
      };
    }
  };
  return noUselessConcat;
}
var noUselessConstructor;
var hasRequiredNoUselessConstructor;
function requireNoUselessConstructor() {
  if (hasRequiredNoUselessConstructor) return noUselessConstructor;
  hasRequiredNoUselessConstructor = 1;
  const astUtils2 = requireAstUtils();
  function hasDecoratorsOrParameterProperty(node2) {
    return node2.value.params.some(
      (param) => param.decorators?.length || param.type === "TSParameterProperty"
    );
  }
  function hasUsefulAccessibility(node2) {
    switch (node2.accessibility) {
      case "protected":
      case "private":
        return true;
      case "public":
        return !!node2.parent.parent.superClass;
      default:
        return false;
    }
  }
  function isSingleSuperCall(body) {
    return body.length === 1 && body[0].type === "ExpressionStatement" && body[0].expression.type === "CallExpression" && body[0].expression.callee.type === "Super";
  }
  function isSimple(node2) {
    return node2.type === "Identifier" || node2.type === "RestElement";
  }
  function isSpreadArguments(superArgs) {
    return superArgs.length === 1 && superArgs[0].type === "SpreadElement" && superArgs[0].argument.type === "Identifier" && superArgs[0].argument.name === "arguments";
  }
  function isValidIdentifierPair(ctorParam, superArg) {
    return ctorParam.type === "Identifier" && superArg.type === "Identifier" && ctorParam.name === superArg.name;
  }
  function isValidRestSpreadPair(ctorParam, superArg) {
    return ctorParam.type === "RestElement" && superArg.type === "SpreadElement" && isValidIdentifierPair(ctorParam.argument, superArg.argument);
  }
  function isValidPair(ctorParam, superArg) {
    return isValidIdentifierPair(ctorParam, superArg) || isValidRestSpreadPair(ctorParam, superArg);
  }
  function isPassingThrough(ctorParams, superArgs) {
    if (ctorParams.length !== superArgs.length) {
      return false;
    }
    for (let i2 = 0; i2 < ctorParams.length; ++i2) {
      if (!isValidPair(ctorParams[i2], superArgs[i2])) {
        return false;
      }
    }
    return true;
  }
  function isRedundantSuperCall(body, ctorParams) {
    return isSingleSuperCall(body) && ctorParams.every(isSimple) && (isSpreadArguments(body[0].expression.arguments) || isPassingThrough(ctorParams, body[0].expression.arguments));
  }
  noUselessConstructor = {
    meta: {
      dialects: ["javascript", "typescript"],
      language: "javascript",
      type: "suggestion",
      docs: {
        description: "Disallow unnecessary constructors",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-useless-constructor"
      },
      hasSuggestions: true,
      schema: [],
      messages: {
        noUselessConstructor: "Useless constructor.",
        removeConstructor: "Remove the constructor."
      }
    },
    create(context) {
      function checkForConstructor(node2) {
        if (node2.kind !== "constructor" || node2.value.type !== "FunctionExpression" || hasDecoratorsOrParameterProperty(node2) || hasUsefulAccessibility(node2)) {
          return;
        }
        if (!node2.value.body) {
          return;
        }
        const body = node2.value.body.body;
        const ctorParams = node2.value.params;
        const superClass = node2.parent.parent.superClass;
        if (superClass ? isRedundantSuperCall(body, ctorParams) : body.length === 0) {
          context.report({
            node: node2,
            messageId: "noUselessConstructor",
            suggest: [
              {
                messageId: "removeConstructor",
                *fix(fixer) {
                  const nextToken = context.sourceCode.getTokenAfter(node2);
                  const addSemiColon = nextToken.type === "Punctuator" && nextToken.value === "[" && astUtils2.needsPrecedingSemicolon(
                    context.sourceCode,
                    node2
                  );
                  yield fixer.replaceText(
                    node2,
                    addSemiColon ? ";" : ""
                  );
                }
              }
            ]
          });
        }
      }
      return {
        MethodDefinition: checkForConstructor
      };
    }
  };
  return noUselessConstructor;
}
var noUselessEscape;
var hasRequiredNoUselessEscape;
function requireNoUselessEscape() {
  if (hasRequiredNoUselessEscape) return noUselessEscape;
  hasRequiredNoUselessEscape = 1;
  const astUtils2 = requireAstUtils();
  const { RegExpParser, visitRegExpAST } = requireRegexpp();
  function union(setA, setB) {
    return new Set(
      (function* () {
        yield* setA;
        yield* setB;
      })()
    );
  }
  const VALID_STRING_ESCAPES = union(new Set("\\nrvtbfux"), astUtils2.LINEBREAKS);
  const REGEX_GENERAL_ESCAPES = new Set("\\bcdDfnpPrsStvwWxu0123456789]");
  const REGEX_NON_CHARCLASS_ESCAPES = union(
    REGEX_GENERAL_ESCAPES,
    new Set("^/.$*+?[{}|()Bk")
  );
  const REGEX_CLASSSET_CHARACTER_ESCAPES = union(
    REGEX_GENERAL_ESCAPES,
    new Set("q/[{}|()-")
  );
  const REGEX_CLASS_SET_RESERVED_DOUBLE_PUNCTUATOR = new Set(
    "!#$%&*+,.:;<=>?@^`~"
  );
  noUselessEscape = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allowRegexCharacters: []
        }
      ],
      docs: {
        description: "Disallow unnecessary escape characters",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-useless-escape"
      },
      hasSuggestions: true,
      messages: {
        unnecessaryEscape: "Unnecessary escape character: \\{{character}}.",
        removeEscape: "Remove the `\\`. This maintains the current functionality.",
        removeEscapeDoNotKeepSemantics: "Remove the `\\` if it was inserted by mistake.",
        escapeBackslash: "Replace the `\\` with `\\\\` to include the actual backslash character."
      },
      schema: [
        {
          type: "object",
          properties: {
            allowRegexCharacters: {
              type: "array",
              items: {
                type: "string"
              },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ]
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ allowRegexCharacters }] = context.options;
      const parser = new RegExpParser();
      function report(node2, startOffset, character, disableEscapeBackslashSuggest) {
        const rangeStart = node2.range[0] + startOffset;
        const range = [rangeStart, rangeStart + 1];
        const start = sourceCode2.getLocFromIndex(rangeStart);
        context.report({
          node: node2,
          loc: {
            start,
            end: { line: start.line, column: start.column + 1 }
          },
          messageId: "unnecessaryEscape",
          data: { character },
          suggest: [
            {
              // Removing unnecessary `\` characters in a directive is not guaranteed to maintain functionality.
              messageId: astUtils2.isDirective(node2.parent) ? "removeEscapeDoNotKeepSemantics" : "removeEscape",
              fix(fixer) {
                return fixer.removeRange(range);
              }
            },
            ...disableEscapeBackslashSuggest ? [] : [
              {
                messageId: "escapeBackslash",
                fix(fixer) {
                  return fixer.insertTextBeforeRange(
                    range,
                    "\\"
                  );
                }
              }
            ]
          ]
        });
      }
      function validateString(node2, match) {
        const isTemplateElement = node2.type === "TemplateElement";
        const escapedChar = match[0][1];
        let isUnnecessaryEscape = !VALID_STRING_ESCAPES.has(escapedChar);
        let isQuoteEscape;
        if (isTemplateElement) {
          isQuoteEscape = escapedChar === "`";
          if (escapedChar === "$") {
            isUnnecessaryEscape = match.input[match.index + 2] !== "{";
          } else if (escapedChar === "{") {
            isUnnecessaryEscape = match.input[match.index - 1] !== "$";
          }
        } else {
          isQuoteEscape = escapedChar === node2.raw[0];
        }
        if (isUnnecessaryEscape && !isQuoteEscape) {
          report(node2, match.index, match[0].slice(1));
        }
      }
      function validateRegExp(node2) {
        const { pattern: pattern2, flags: flags2 } = node2.regex;
        let patternNode;
        const unicode2 = flags2.includes("u");
        const unicodeSets = flags2.includes("v");
        try {
          patternNode = parser.parsePattern(pattern2, 0, pattern2.length, {
            unicode: unicode2,
            unicodeSets
          });
        } catch {
          return;
        }
        const characterClassStack = [];
        visitRegExpAST(patternNode, {
          onCharacterClassEnter: (characterClassNode) => characterClassStack.unshift(characterClassNode),
          onCharacterClassLeave: () => characterClassStack.shift(),
          onExpressionCharacterClassEnter: (characterClassNode) => characterClassStack.unshift(characterClassNode),
          onExpressionCharacterClassLeave: () => characterClassStack.shift(),
          onCharacterEnter(characterNode) {
            if (!characterNode.raw.startsWith("\\")) {
              return;
            }
            const escapedChar = characterNode.raw.slice(1);
            if (escapedChar !== String.fromCodePoint(characterNode.value) || allowRegexCharacters.includes(escapedChar)) {
              return;
            }
            let allowedEscapes;
            if (characterClassStack.length) {
              allowedEscapes = unicodeSets ? REGEX_CLASSSET_CHARACTER_ESCAPES : REGEX_GENERAL_ESCAPES;
            } else {
              allowedEscapes = REGEX_NON_CHARCLASS_ESCAPES;
            }
            if (allowedEscapes.has(escapedChar)) {
              return;
            }
            const reportedIndex = characterNode.start + 1;
            let disableEscapeBackslashSuggest = false;
            if (characterClassStack.length) {
              const characterClassNode = characterClassStack[0];
              if (escapedChar === "^") {
                if (characterClassNode.start + 1 === characterNode.start) {
                  return;
                }
              }
              if (!unicodeSets) {
                if (escapedChar === "-") {
                  if (characterClassNode.start + 1 !== characterNode.start && characterNode.end !== characterClassNode.end - 1) {
                    return;
                  }
                }
              } else {
                if (REGEX_CLASS_SET_RESERVED_DOUBLE_PUNCTUATOR.has(
                  escapedChar
                )) {
                  if (pattern2[characterNode.end] === escapedChar) {
                    return;
                  }
                  if (pattern2[characterNode.start - 1] === escapedChar) {
                    if (escapedChar !== "^") {
                      return;
                    }
                    if (!characterClassNode.negate) {
                      return;
                    }
                    const negateCaretIndex = characterClassNode.start + 1;
                    if (negateCaretIndex < characterNode.start - 1) {
                      return;
                    }
                  }
                }
                if (characterNode.parent.type === "ClassIntersection" || characterNode.parent.type === "ClassSubtraction") {
                  disableEscapeBackslashSuggest = true;
                }
              }
            }
            report(
              node2,
              reportedIndex,
              escapedChar,
              disableEscapeBackslashSuggest
            );
          }
        });
      }
      function check2(node2) {
        const isTemplateElement = node2.type === "TemplateElement";
        if (isTemplateElement && node2.parent && node2.parent.parent && node2.parent.parent.type === "TaggedTemplateExpression" && node2.parent === node2.parent.parent.quasi) {
          return;
        }
        if (typeof node2.value === "string" || isTemplateElement) {
          if (node2.parent.type === "JSXAttribute" || node2.parent.type === "JSXElement" || node2.parent.type === "JSXFragment") {
            return;
          }
          const value = isTemplateElement ? sourceCode2.getText(node2) : node2.raw;
          const pattern2 = /\\\D/gu;
          let match;
          while (match = pattern2.exec(value)) {
            validateString(node2, match);
          }
        } else if (node2.regex) {
          validateRegExp(node2);
        }
      }
      return {
        Literal: check2,
        TemplateElement: check2
      };
    }
  };
  return noUselessEscape;
}
var noUselessRename;
var hasRequiredNoUselessRename;
function requireNoUselessRename() {
  if (hasRequiredNoUselessRename) return noUselessRename;
  hasRequiredNoUselessRename = 1;
  const astUtils2 = requireAstUtils();
  noUselessRename = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          ignoreDestructuring: false,
          ignoreImport: false,
          ignoreExport: false
        }
      ],
      docs: {
        description: "Disallow renaming import, export, and destructured assignments to the same name",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-useless-rename"
      },
      fixable: "code",
      schema: [
        {
          type: "object",
          properties: {
            ignoreDestructuring: { type: "boolean" },
            ignoreImport: { type: "boolean" },
            ignoreExport: { type: "boolean" }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unnecessarilyRenamed: "{{type}} {{name}} unnecessarily renamed."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ ignoreDestructuring, ignoreImport, ignoreExport }] = context.options;
      function reportError(node2, initial, type2) {
        const name = initial.type === "Identifier" ? initial.name : initial.value;
        return context.report({
          node: node2,
          messageId: "unnecessarilyRenamed",
          data: {
            name,
            type: type2
          },
          fix(fixer) {
            const replacementNode = node2.type === "Property" ? node2.value : node2.local;
            if (sourceCode2.getCommentsInside(node2).length > sourceCode2.getCommentsInside(replacementNode).length) {
              return null;
            }
            if (replacementNode.type === "AssignmentPattern" && astUtils2.isParenthesised(
              sourceCode2,
              replacementNode.left
            )) {
              return null;
            }
            return fixer.replaceText(
              node2,
              sourceCode2.getText(replacementNode)
            );
          }
        });
      }
      function checkDestructured(node2) {
        if (ignoreDestructuring) {
          return;
        }
        for (const property of node2.properties) {
          if (property.type !== "Property" || property.shorthand || property.computed) {
            continue;
          }
          const key = property.key.type === "Identifier" && property.key.name || property.key.type === "Literal" && property.key.value;
          const renamedKey = property.value.type === "AssignmentPattern" ? property.value.left.name : property.value.name;
          if (key === renamedKey) {
            reportError(
              property,
              property.key,
              "Destructuring assignment"
            );
          }
        }
      }
      function checkImport(node2) {
        if (ignoreImport) {
          return;
        }
        if (node2.imported.range[0] !== node2.local.range[0] && astUtils2.getModuleExportName(node2.imported) === node2.local.name) {
          reportError(node2, node2.imported, "Import");
        }
      }
      function checkExport(node2) {
        if (ignoreExport) {
          return;
        }
        if (node2.local.range[0] !== node2.exported.range[0] && astUtils2.getModuleExportName(node2.local) === astUtils2.getModuleExportName(node2.exported)) {
          reportError(node2, node2.local, "Export");
        }
      }
      return {
        ObjectPattern: checkDestructured,
        ImportSpecifier: checkImport,
        ExportSpecifier: checkExport
      };
    }
  };
  return noUselessRename;
}
var noUselessReturn;
var hasRequiredNoUselessReturn;
function requireNoUselessReturn() {
  if (hasRequiredNoUselessReturn) return noUselessReturn;
  hasRequiredNoUselessReturn = 1;
  const astUtils2 = requireAstUtils(), FixTracker = requireFixTracker();
  function remove(array, element) {
    const index = array.indexOf(element);
    if (index !== -1) {
      array.splice(index, 1);
    }
  }
  function isRemovable(node2) {
    return astUtils2.STATEMENT_LIST_PARENTS.has(node2.parent.type);
  }
  function isInFinally(node2) {
    for (let currentNode = node2; currentNode && currentNode.parent && !astUtils2.isFunction(currentNode); currentNode = currentNode.parent) {
      if (currentNode.parent.type === "TryStatement" && currentNode.parent.finalizer === currentNode) {
        return true;
      }
    }
    return false;
  }
  function isAnySegmentReachable(segments) {
    for (const segment of segments) {
      if (segment.reachable) {
        return true;
      }
    }
    return false;
  }
  noUselessReturn = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow redundant return statements",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-useless-return"
      },
      fixable: "code",
      schema: [],
      messages: {
        unnecessaryReturn: "Unnecessary return statement."
      }
    },
    create(context) {
      const segmentInfoMap = /* @__PURE__ */ new WeakMap();
      const sourceCode2 = context.sourceCode;
      let scopeInfo = null;
      function isReturned(segment) {
        const info = segmentInfoMap.get(segment);
        return !info || info.returned;
      }
      function getUselessReturns(uselessReturns, prevSegments, providedTraversedSegments) {
        const traversedSegments = providedTraversedSegments || /* @__PURE__ */ new WeakSet();
        for (const segment of prevSegments) {
          if (!segment.reachable) {
            if (!traversedSegments.has(segment)) {
              traversedSegments.add(segment);
              getUselessReturns(
                uselessReturns,
                segment.allPrevSegments.filter(isReturned),
                traversedSegments
              );
            }
            continue;
          }
          if (segmentInfoMap.has(segment)) {
            uselessReturns.push(
              ...segmentInfoMap.get(segment).uselessReturns
            );
          }
        }
        return uselessReturns;
      }
      function markReturnStatementsOnSegmentAsUsed(segment, usedUnreachableSegments) {
        if (!segment.reachable) {
          usedUnreachableSegments.add(segment);
          segment.allPrevSegments.filter(isReturned).filter(
            (prevSegment) => !usedUnreachableSegments.has(prevSegment)
          ).forEach(
            (prevSegment) => markReturnStatementsOnSegmentAsUsed(
              prevSegment,
              usedUnreachableSegments
            )
          );
          return;
        }
        const info = segmentInfoMap.get(segment);
        if (!info) {
          return;
        }
        info.uselessReturns = info.uselessReturns.filter((node2) => {
          if (scopeInfo.traversedTryBlockStatements && scopeInfo.traversedTryBlockStatements.length > 0) {
            const returnInitialRange = node2.range[0];
            const returnFinalRange = node2.range[1];
            const areBlocksInRange = scopeInfo.traversedTryBlockStatements.some(
              (tryBlockStatement) => {
                const blockInitialRange = tryBlockStatement.range[0];
                const blockFinalRange = tryBlockStatement.range[1];
                return returnInitialRange >= blockInitialRange && returnFinalRange <= blockFinalRange;
              }
            );
            if (areBlocksInRange) {
              return true;
            }
          }
          remove(scopeInfo.uselessReturns, node2);
          return false;
        });
      }
      function markReturnStatementsOnCurrentSegmentsAsUsed() {
        scopeInfo.currentSegments.forEach(
          (segment) => markReturnStatementsOnSegmentAsUsed(segment, /* @__PURE__ */ new Set())
        );
      }
      return {
        // Makes and pushes a new scope information.
        onCodePathStart(codePath2) {
          scopeInfo = {
            upper: scopeInfo,
            uselessReturns: [],
            traversedTryBlockStatements: [],
            codePath: codePath2,
            currentSegments: /* @__PURE__ */ new Set()
          };
        },
        // Reports useless return statements if exist.
        onCodePathEnd() {
          for (const node2 of scopeInfo.uselessReturns) {
            context.report({
              node: node2,
              loc: node2.loc,
              messageId: "unnecessaryReturn",
              fix(fixer) {
                if (isRemovable(node2) && !sourceCode2.getCommentsInside(node2).length) {
                  return new FixTracker(fixer, sourceCode2).retainEnclosingFunction(node2).remove(node2);
                }
                return null;
              }
            });
          }
          scopeInfo = scopeInfo.upper;
        },
        /*
         * Initializes segments.
         * NOTE: This event is notified for only reachable segments.
         */
        onCodePathSegmentStart(segment) {
          scopeInfo.currentSegments.add(segment);
          const info = {
            uselessReturns: getUselessReturns(
              [],
              segment.allPrevSegments
            ),
            returned: false
          };
          segmentInfoMap.set(segment, info);
        },
        onUnreachableCodePathSegmentStart(segment) {
          scopeInfo.currentSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          scopeInfo.currentSegments.delete(segment);
        },
        onCodePathSegmentEnd(segment) {
          scopeInfo.currentSegments.delete(segment);
        },
        // Adds ReturnStatement node to check whether it's useless or not.
        ReturnStatement(node2) {
          if (node2.argument) {
            markReturnStatementsOnCurrentSegmentsAsUsed();
          }
          if (node2.argument || astUtils2.isInLoop(node2) || isInFinally(node2) || // Ignore `return` statements in unreachable places (https://github.com/eslint/eslint/issues/11647).
          !isAnySegmentReachable(scopeInfo.currentSegments)) {
            return;
          }
          for (const segment of scopeInfo.currentSegments) {
            const info = segmentInfoMap.get(segment);
            if (info) {
              info.uselessReturns.push(node2);
              info.returned = true;
            }
          }
          scopeInfo.uselessReturns.push(node2);
        },
        "TryStatement > BlockStatement.block:exit"(node2) {
          scopeInfo.traversedTryBlockStatements.push(node2);
        },
        "TryStatement:exit"() {
          scopeInfo.traversedTryBlockStatements.pop();
        },
        /*
         * Registers for all statement nodes except FunctionDeclaration, BlockStatement, BreakStatement.
         * Removes return statements of the current segments from the useless return statement list.
         */
        ClassDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
        ContinueStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        DebuggerStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        DoWhileStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        EmptyStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        ExpressionStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        ForInStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        ForOfStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        ForStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        IfStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        ImportDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
        LabeledStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        SwitchStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        ThrowStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        TryStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        VariableDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
        WhileStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        WithStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
        ExportNamedDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
        ExportDefaultDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
        ExportAllDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed
      };
    }
  };
  return noUselessReturn;
}
var noVar;
var hasRequiredNoVar;
function requireNoVar() {
  if (hasRequiredNoVar) return noVar;
  hasRequiredNoVar = 1;
  const astUtils2 = requireAstUtils();
  function isGlobal(variable) {
    return Boolean(variable.scope) && variable.scope.type === "global";
  }
  function getEnclosingFunctionScope(scope) {
    let currentScope = scope;
    while (currentScope.type !== "function" && currentScope.type !== "global") {
      currentScope = currentScope.upper;
    }
    return currentScope;
  }
  function isReferencedInClosure(variable) {
    const enclosingFunctionScope = getEnclosingFunctionScope(variable.scope);
    return variable.references.some(
      (reference) => getEnclosingFunctionScope(reference.from) !== enclosingFunctionScope
    );
  }
  function isLoopAssignee(node2) {
    return (node2.parent.type === "ForOfStatement" || node2.parent.type === "ForInStatement") && node2 === node2.parent.left;
  }
  function isDeclarationInitialized(node2) {
    return node2.declarations.every((declarator) => declarator.init !== null);
  }
  const SCOPE_NODE_TYPE = /^(?:Program|BlockStatement|SwitchStatement|ForStatement|ForInStatement|ForOfStatement)$/u;
  function getScopeNode(node2) {
    for (let currentNode = node2; currentNode; currentNode = currentNode.parent) {
      if (SCOPE_NODE_TYPE.test(currentNode.type)) {
        return currentNode;
      }
    }
    return null;
  }
  function isRedeclared(variable) {
    return variable.defs.length >= 2;
  }
  function isUsedFromOutsideOf(scopeNode) {
    function isOutsideOfScope(reference) {
      const scope = scopeNode.range;
      const id2 = reference.identifier.range;
      return id2[0] < scope[0] || id2[1] > scope[1];
    }
    return function(variable) {
      return variable.references.some(isOutsideOfScope);
    };
  }
  function hasReferenceInTDZ(node2) {
    const initStart = node2.range[0];
    const initEnd = node2.range[1];
    return (variable) => {
      const id2 = variable.defs[0].name;
      const idStart = id2.range[0];
      const defaultValue = id2.parent.type === "AssignmentPattern" ? id2.parent.right : null;
      const defaultStart = defaultValue && defaultValue.range[0];
      const defaultEnd = defaultValue && defaultValue.range[1];
      return variable.references.some((reference) => {
        const start = reference.identifier.range[0];
        const end = reference.identifier.range[1];
        return !reference.init && (start < idStart || defaultValue !== null && start >= defaultStart && end <= defaultEnd || !astUtils2.isFunction(node2) && start >= initStart && end <= initEnd);
      });
    };
  }
  function hasNameDisallowedForLetDeclarations(variable) {
    return variable.name === "let";
  }
  noVar = {
    meta: {
      type: "suggestion",
      dialects: ["typescript", "javascript"],
      language: "javascript",
      docs: {
        description: "Require `let` or `const` instead of `var`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-var"
      },
      schema: [],
      fixable: "code",
      messages: {
        unexpectedVar: "Unexpected var, use let or const instead."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function hasSelfReferenceInTDZ(declarator) {
        if (!declarator.init) {
          return false;
        }
        const variables = sourceCode2.getDeclaredVariables(declarator);
        return variables.some(hasReferenceInTDZ(declarator.init));
      }
      function canFix(node2) {
        const variables = sourceCode2.getDeclaredVariables(node2);
        const scopeNode = getScopeNode(node2);
        if (node2.parent.type === "SwitchCase" || node2.declarations.some(hasSelfReferenceInTDZ) || variables.some(isGlobal) || variables.some(isRedeclared) || variables.some(isUsedFromOutsideOf(scopeNode)) || variables.some(hasNameDisallowedForLetDeclarations)) {
          return false;
        }
        if (astUtils2.isInLoop(node2)) {
          if (variables.some(isReferencedInClosure)) {
            return false;
          }
          if (!isLoopAssignee(node2) && !isDeclarationInitialized(node2)) {
            return false;
          }
        }
        if (!isLoopAssignee(node2) && !(node2.parent.type === "ForStatement" && node2.parent.init === node2) && !astUtils2.STATEMENT_LIST_PARENTS.has(node2.parent.type)) {
          return false;
        }
        return true;
      }
      function report(node2) {
        context.report({
          node: node2,
          messageId: "unexpectedVar",
          fix(fixer) {
            const varToken = sourceCode2.getFirstToken(node2, {
              filter: (t2) => t2.value === "var"
            });
            return canFix(node2) ? fixer.replaceText(varToken, "let") : null;
          }
        });
      }
      return {
        "VariableDeclaration:exit"(node2) {
          if (node2.kind !== "var") {
            return;
          }
          if (node2.parent.type === "TSModuleBlock" && node2.parent.parent.type === "TSModuleDeclaration" && node2.parent.parent.global) {
            return;
          }
          report(node2);
        }
      };
    }
  };
  return noVar;
}
var noVoid;
var hasRequiredNoVoid;
function requireNoVoid() {
  if (hasRequiredNoVoid) return noVoid;
  hasRequiredNoVoid = 1;
  noVoid = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allowAsStatement: false
        }
      ],
      docs: {
        description: "Disallow `void` operators",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-void"
      },
      messages: {
        noVoid: "Expected 'undefined' and instead saw 'void'."
      },
      schema: [
        {
          type: "object",
          properties: {
            allowAsStatement: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ]
    },
    create(context) {
      const [{ allowAsStatement }] = context.options;
      return {
        'UnaryExpression[operator="void"]'(node2) {
          if (allowAsStatement && node2.parent && node2.parent.type === "ExpressionStatement") {
            return;
          }
          context.report({
            node: node2,
            messageId: "noVoid"
          });
        }
      };
    }
  };
  return noVoid;
}
var noWarningComments;
var hasRequiredNoWarningComments;
function requireNoWarningComments() {
  if (hasRequiredNoWarningComments) return noWarningComments;
  hasRequiredNoWarningComments = 1;
  const escapeRegExp = requireEscapeStringRegexp();
  const astUtils2 = requireAstUtils();
  const CHAR_LIMIT = 40;
  noWarningComments = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          location: "start",
          terms: ["todo", "fixme", "xxx"]
        }
      ],
      docs: {
        description: "Disallow specified warning terms in comments",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/no-warning-comments"
      },
      schema: [
        {
          type: "object",
          properties: {
            terms: {
              type: "array",
              items: {
                type: "string"
              }
            },
            location: {
              enum: ["start", "anywhere"]
            },
            decoration: {
              type: "array",
              items: {
                type: "string",
                pattern: "^\\S$"
              },
              minItems: 1,
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedComment: "Unexpected '{{matchedTerm}}' comment: '{{comment}}'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ decoration, location, terms: warningTerms }] = context.options;
      const escapedDecoration = escapeRegExp(
        decoration ? decoration.join("") : ""
      );
      const selfConfigRegEx = /\bno-warning-comments\b/u;
      function convertToRegExp(term) {
        const escaped = escapeRegExp(term);
        const wordBoundary = "\\b";
        let prefix = "";
        if (location === "start") {
          prefix = `^[\\s${escapedDecoration}]*`;
        } else if (/^\w/u.test(term)) {
          prefix = wordBoundary;
        }
        const suffix = /\w$/u.test(term) ? wordBoundary : "";
        const flags2 = "iu";
        return new RegExp(`${prefix}${escaped}${suffix}`, flags2);
      }
      const warningRegExps = warningTerms.map(convertToRegExp);
      function commentContainsWarningTerm(comment2) {
        const matches = [];
        warningRegExps.forEach((regex, index) => {
          if (regex.test(comment2)) {
            matches.push(warningTerms[index]);
          }
        });
        return matches;
      }
      function checkComment(node2) {
        const comment2 = node2.value;
        if (astUtils2.isDirectiveComment(node2) && selfConfigRegEx.test(comment2)) {
          return;
        }
        const matches = commentContainsWarningTerm(comment2);
        matches.forEach((matchedTerm) => {
          let commentToDisplay = "";
          let truncated = false;
          for (const c2 of comment2.trim().split(/\s+/u)) {
            const tmp = commentToDisplay ? `${commentToDisplay} ${c2}` : c2;
            if (tmp.length <= CHAR_LIMIT) {
              commentToDisplay = tmp;
            } else {
              truncated = true;
              break;
            }
          }
          context.report({
            node: node2,
            messageId: "unexpectedComment",
            data: {
              matchedTerm,
              comment: `${commentToDisplay}${truncated ? "..." : ""}`
            }
          });
        });
      }
      return {
        Program() {
          const comments = sourceCode2.getAllComments();
          comments.filter((token) => token.type !== "Shebang").forEach(checkComment);
        }
      };
    }
  };
  return noWarningComments;
}
var noWhitespaceBeforeProperty;
var hasRequiredNoWhitespaceBeforeProperty;
function requireNoWhitespaceBeforeProperty() {
  if (hasRequiredNoWhitespaceBeforeProperty) return noWhitespaceBeforeProperty;
  hasRequiredNoWhitespaceBeforeProperty = 1;
  const astUtils2 = requireAstUtils();
  noWhitespaceBeforeProperty = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "no-whitespace-before-property",
              url: "https://eslint.style/rules/no-whitespace-before-property"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Disallow whitespace before properties",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/no-whitespace-before-property"
      },
      fixable: "whitespace",
      schema: [],
      messages: {
        unexpectedWhitespace: "Unexpected whitespace before property {{propName}}."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function reportError(node2, leftToken, rightToken) {
        context.report({
          node: node2,
          messageId: "unexpectedWhitespace",
          data: {
            propName: sourceCode2.getText(node2.property)
          },
          fix(fixer) {
            let replacementText = "";
            if (!node2.computed && !node2.optional && astUtils2.isDecimalInteger(node2.object)) {
              return null;
            }
            if (sourceCode2.commentsExistBetween(leftToken, rightToken)) {
              return null;
            }
            if (node2.optional) {
              replacementText = "?.";
            } else if (!node2.computed) {
              replacementText = ".";
            }
            return fixer.replaceTextRange(
              [leftToken.range[1], rightToken.range[0]],
              replacementText
            );
          }
        });
      }
      return {
        MemberExpression(node2) {
          let rightToken;
          let leftToken;
          if (!astUtils2.isTokenOnSameLine(node2.object, node2.property)) {
            return;
          }
          if (node2.computed) {
            rightToken = sourceCode2.getTokenBefore(
              node2.property,
              astUtils2.isOpeningBracketToken
            );
            leftToken = sourceCode2.getTokenBefore(
              rightToken,
              node2.optional ? 1 : 0
            );
          } else {
            rightToken = sourceCode2.getFirstToken(node2.property);
            leftToken = sourceCode2.getTokenBefore(rightToken, 1);
          }
          if (sourceCode2.isSpaceBetweenTokens(leftToken, rightToken)) {
            reportError(node2, leftToken, rightToken);
          }
        }
      };
    }
  };
  return noWhitespaceBeforeProperty;
}
var noWith;
var hasRequiredNoWith;
function requireNoWith() {
  if (hasRequiredNoWith) return noWith;
  hasRequiredNoWith = 1;
  noWith = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `with` statements",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/no-with"
      },
      schema: [],
      messages: {
        unexpectedWith: "Unexpected use of 'with' statement."
      }
    },
    create(context) {
      return {
        WithStatement(node2) {
          context.report({ node: node2, messageId: "unexpectedWith" });
        }
      };
    }
  };
  return noWith;
}
var nonblockStatementBodyPosition;
var hasRequiredNonblockStatementBodyPosition;
function requireNonblockStatementBodyPosition() {
  if (hasRequiredNonblockStatementBodyPosition) return nonblockStatementBodyPosition;
  hasRequiredNonblockStatementBodyPosition = 1;
  const POSITION_SCHEMA = { enum: ["beside", "below", "any"] };
  nonblockStatementBodyPosition = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "nonblock-statement-body-position",
              url: "https://eslint.style/rules/nonblock-statement-body-position"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce the location of single-line statements",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/nonblock-statement-body-position"
      },
      fixable: "whitespace",
      schema: [
        POSITION_SCHEMA,
        {
          properties: {
            overrides: {
              properties: {
                if: POSITION_SCHEMA,
                else: POSITION_SCHEMA,
                while: POSITION_SCHEMA,
                do: POSITION_SCHEMA,
                for: POSITION_SCHEMA
              },
              additionalProperties: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        expectNoLinebreak: "Expected no linebreak before this statement.",
        expectLinebreak: "Expected a linebreak before this statement."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function getOption(keywordName) {
        return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] || context.options[0] || "beside";
      }
      function validateStatement(node2, keywordName) {
        const option = getOption(keywordName);
        if (node2.type === "BlockStatement" || option === "any") {
          return;
        }
        const tokenBefore = sourceCode2.getTokenBefore(node2);
        if (tokenBefore.loc.end.line === node2.loc.start.line && option === "below") {
          context.report({
            node: node2,
            messageId: "expectLinebreak",
            fix: (fixer) => fixer.insertTextBefore(node2, "\n")
          });
        } else if (tokenBefore.loc.end.line !== node2.loc.start.line && option === "beside") {
          context.report({
            node: node2,
            messageId: "expectNoLinebreak",
            fix(fixer) {
              if (sourceCode2.getText().slice(tokenBefore.range[1], node2.range[0]).trim()) {
                return null;
              }
              return fixer.replaceTextRange(
                [tokenBefore.range[1], node2.range[0]],
                " "
              );
            }
          });
        }
      }
      return {
        IfStatement(node2) {
          validateStatement(node2.consequent, "if");
          if (node2.alternate && node2.alternate.type !== "IfStatement") {
            validateStatement(node2.alternate, "else");
          }
        },
        WhileStatement: (node2) => validateStatement(node2.body, "while"),
        DoWhileStatement: (node2) => validateStatement(node2.body, "do"),
        ForStatement: (node2) => validateStatement(node2.body, "for"),
        ForInStatement: (node2) => validateStatement(node2.body, "for"),
        ForOfStatement: (node2) => validateStatement(node2.body, "for")
      };
    }
  };
  return nonblockStatementBodyPosition;
}
var objectCurlyNewline;
var hasRequiredObjectCurlyNewline;
function requireObjectCurlyNewline() {
  if (hasRequiredObjectCurlyNewline) return objectCurlyNewline;
  hasRequiredObjectCurlyNewline = 1;
  const astUtils2 = requireAstUtils();
  const OPTION_VALUE = {
    oneOf: [
      {
        enum: ["always", "never"]
      },
      {
        type: "object",
        properties: {
          multiline: {
            type: "boolean"
          },
          minProperties: {
            type: "integer",
            minimum: 0
          },
          consistent: {
            type: "boolean"
          }
        },
        additionalProperties: false,
        minProperties: 1
      }
    ]
  };
  function normalizeOptionValue(value) {
    let multiline = false;
    let minProperties = Number.POSITIVE_INFINITY;
    let consistent = false;
    if (value) {
      if (value === "always") {
        minProperties = 0;
      } else if (value === "never") {
        minProperties = Number.POSITIVE_INFINITY;
      } else {
        multiline = Boolean(value.multiline);
        minProperties = value.minProperties || Number.POSITIVE_INFINITY;
        consistent = Boolean(value.consistent);
      }
    } else {
      consistent = true;
    }
    return { multiline, minProperties, consistent };
  }
  function isObject2(value) {
    return typeof value === "object" && value !== null;
  }
  function isNodeSpecificOption(option) {
    return isObject2(option) || typeof option === "string";
  }
  function normalizeOptions(options) {
    if (isObject2(options) && Object.values(options).some(isNodeSpecificOption)) {
      return {
        ObjectExpression: normalizeOptionValue(options.ObjectExpression),
        ObjectPattern: normalizeOptionValue(options.ObjectPattern),
        ImportDeclaration: normalizeOptionValue(options.ImportDeclaration),
        ExportNamedDeclaration: normalizeOptionValue(
          options.ExportDeclaration
        )
      };
    }
    const value = normalizeOptionValue(options);
    return {
      ObjectExpression: value,
      ObjectPattern: value,
      ImportDeclaration: value,
      ExportNamedDeclaration: value
    };
  }
  function areLineBreaksRequired(node2, options, first, last) {
    let objectProperties;
    if (node2.type === "ObjectExpression" || node2.type === "ObjectPattern") {
      objectProperties = node2.properties;
    } else {
      objectProperties = node2.specifiers.filter(
        (s2) => s2.type === "ImportSpecifier" || s2.type === "ExportSpecifier"
      );
    }
    return objectProperties.length >= options.minProperties || options.multiline && objectProperties.length > 0 && first.loc.start.line !== last.loc.end.line;
  }
  objectCurlyNewline = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "object-curly-newline",
              url: "https://eslint.style/rules/object-curly-newline"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent line breaks after opening and before closing braces",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/object-curly-newline"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            OPTION_VALUE,
            {
              type: "object",
              properties: {
                ObjectExpression: OPTION_VALUE,
                ObjectPattern: OPTION_VALUE,
                ImportDeclaration: OPTION_VALUE,
                ExportDeclaration: OPTION_VALUE
              },
              additionalProperties: false,
              minProperties: 1
            }
          ]
        }
      ],
      messages: {
        unexpectedLinebreakBeforeClosingBrace: "Unexpected line break before this closing brace.",
        unexpectedLinebreakAfterOpeningBrace: "Unexpected line break after this opening brace.",
        expectedLinebreakBeforeClosingBrace: "Expected a line break before this closing brace.",
        expectedLinebreakAfterOpeningBrace: "Expected a line break after this opening brace."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const normalizedOptions = normalizeOptions(context.options[0]);
      function check2(node2) {
        const options = normalizedOptions[node2.type];
        if (node2.type === "ImportDeclaration" && !node2.specifiers.some(
          (specifier) => specifier.type === "ImportSpecifier"
        ) || node2.type === "ExportNamedDeclaration" && !node2.specifiers.some(
          (specifier) => specifier.type === "ExportSpecifier"
        )) {
          return;
        }
        const openBrace = sourceCode2.getFirstToken(
          node2,
          (token) => token.value === "{"
        );
        let closeBrace;
        if (node2.typeAnnotation) {
          closeBrace = sourceCode2.getTokenBefore(node2.typeAnnotation);
        } else {
          closeBrace = sourceCode2.getLastToken(
            node2,
            (token) => token.value === "}"
          );
        }
        let first = sourceCode2.getTokenAfter(openBrace, {
          includeComments: true
        });
        let last = sourceCode2.getTokenBefore(closeBrace, {
          includeComments: true
        });
        const needsLineBreaks = areLineBreaksRequired(
          node2,
          options,
          first,
          last
        );
        const hasCommentsFirstToken = astUtils2.isCommentToken(first);
        const hasCommentsLastToken = astUtils2.isCommentToken(last);
        first = sourceCode2.getTokenAfter(openBrace);
        last = sourceCode2.getTokenBefore(closeBrace);
        if (needsLineBreaks) {
          if (astUtils2.isTokenOnSameLine(openBrace, first)) {
            context.report({
              messageId: "expectedLinebreakAfterOpeningBrace",
              node: node2,
              loc: openBrace.loc,
              fix(fixer) {
                if (hasCommentsFirstToken) {
                  return null;
                }
                return fixer.insertTextAfter(openBrace, "\n");
              }
            });
          }
          if (astUtils2.isTokenOnSameLine(last, closeBrace)) {
            context.report({
              messageId: "expectedLinebreakBeforeClosingBrace",
              node: node2,
              loc: closeBrace.loc,
              fix(fixer) {
                if (hasCommentsLastToken) {
                  return null;
                }
                return fixer.insertTextBefore(closeBrace, "\n");
              }
            });
          }
        } else {
          const consistent = options.consistent;
          const hasLineBreakBetweenOpenBraceAndFirst = !astUtils2.isTokenOnSameLine(openBrace, first);
          const hasLineBreakBetweenCloseBraceAndLast = !astUtils2.isTokenOnSameLine(last, closeBrace);
          if (!consistent && hasLineBreakBetweenOpenBraceAndFirst || consistent && hasLineBreakBetweenOpenBraceAndFirst && !hasLineBreakBetweenCloseBraceAndLast) {
            context.report({
              messageId: "unexpectedLinebreakAfterOpeningBrace",
              node: node2,
              loc: openBrace.loc,
              fix(fixer) {
                if (hasCommentsFirstToken) {
                  return null;
                }
                return fixer.removeRange([
                  openBrace.range[1],
                  first.range[0]
                ]);
              }
            });
          }
          if (!consistent && hasLineBreakBetweenCloseBraceAndLast || consistent && !hasLineBreakBetweenOpenBraceAndFirst && hasLineBreakBetweenCloseBraceAndLast) {
            context.report({
              messageId: "unexpectedLinebreakBeforeClosingBrace",
              node: node2,
              loc: closeBrace.loc,
              fix(fixer) {
                if (hasCommentsLastToken) {
                  return null;
                }
                return fixer.removeRange([
                  last.range[1],
                  closeBrace.range[0]
                ]);
              }
            });
          }
        }
      }
      return {
        ObjectExpression: check2,
        ObjectPattern: check2,
        ImportDeclaration: check2,
        ExportNamedDeclaration: check2
      };
    }
  };
  return objectCurlyNewline;
}
var objectCurlySpacing;
var hasRequiredObjectCurlySpacing;
function requireObjectCurlySpacing() {
  if (hasRequiredObjectCurlySpacing) return objectCurlySpacing;
  hasRequiredObjectCurlySpacing = 1;
  const astUtils2 = requireAstUtils();
  objectCurlySpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "object-curly-spacing",
              url: "https://eslint.style/rules/object-curly-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing inside braces",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/object-curly-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never"]
        },
        {
          type: "object",
          properties: {
            arraysInObjects: {
              type: "boolean"
            },
            objectsInObjects: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        requireSpaceBefore: "A space is required before '{{token}}'.",
        requireSpaceAfter: "A space is required after '{{token}}'.",
        unexpectedSpaceBefore: "There should be no space before '{{token}}'.",
        unexpectedSpaceAfter: "There should be no space after '{{token}}'."
      }
    },
    create(context) {
      const spaced = context.options[0] === "always", sourceCode2 = context.sourceCode;
      function isOptionSet(option) {
        return context.options[1] ? context.options[1][option] === !spaced : false;
      }
      const options = {
        spaced,
        arraysInObjectsException: isOptionSet("arraysInObjects"),
        objectsInObjectsException: isOptionSet("objectsInObjects")
      };
      function reportNoBeginningSpace(node2, token) {
        const nextToken = context.sourceCode.getTokenAfter(token, {
          includeComments: true
        });
        context.report({
          node: node2,
          loc: { start: token.loc.end, end: nextToken.loc.start },
          messageId: "unexpectedSpaceAfter",
          data: {
            token: token.value
          },
          fix(fixer) {
            return fixer.removeRange([
              token.range[1],
              nextToken.range[0]
            ]);
          }
        });
      }
      function reportNoEndingSpace(node2, token) {
        const previousToken = context.sourceCode.getTokenBefore(token, {
          includeComments: true
        });
        context.report({
          node: node2,
          loc: { start: previousToken.loc.end, end: token.loc.start },
          messageId: "unexpectedSpaceBefore",
          data: {
            token: token.value
          },
          fix(fixer) {
            return fixer.removeRange([
              previousToken.range[1],
              token.range[0]
            ]);
          }
        });
      }
      function reportRequiredBeginningSpace(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "requireSpaceAfter",
          data: {
            token: token.value
          },
          fix(fixer) {
            return fixer.insertTextAfter(token, " ");
          }
        });
      }
      function reportRequiredEndingSpace(node2, token) {
        context.report({
          node: node2,
          loc: token.loc,
          messageId: "requireSpaceBefore",
          data: {
            token: token.value
          },
          fix(fixer) {
            return fixer.insertTextBefore(token, " ");
          }
        });
      }
      function validateBraceSpacing(node2, first, second, penultimate, last) {
        if (astUtils2.isTokenOnSameLine(first, second)) {
          const firstSpaced = sourceCode2.isSpaceBetweenTokens(
            first,
            second
          );
          if (options.spaced && !firstSpaced) {
            reportRequiredBeginningSpace(node2, first);
          }
          if (!options.spaced && firstSpaced && second.type !== "Line") {
            reportNoBeginningSpace(node2, first);
          }
        }
        if (astUtils2.isTokenOnSameLine(penultimate, last)) {
          const shouldCheckPenultimate = options.arraysInObjectsException && astUtils2.isClosingBracketToken(penultimate) || options.objectsInObjectsException && astUtils2.isClosingBraceToken(penultimate);
          const penultimateType = shouldCheckPenultimate && sourceCode2.getNodeByRangeIndex(penultimate.range[0]).type;
          const closingCurlyBraceMustBeSpaced = options.arraysInObjectsException && penultimateType === "ArrayExpression" || options.objectsInObjectsException && (penultimateType === "ObjectExpression" || penultimateType === "ObjectPattern") ? !options.spaced : options.spaced;
          const lastSpaced = sourceCode2.isSpaceBetweenTokens(
            penultimate,
            last
          );
          if (closingCurlyBraceMustBeSpaced && !lastSpaced) {
            reportRequiredEndingSpace(node2, last);
          }
          if (!closingCurlyBraceMustBeSpaced && lastSpaced) {
            reportNoEndingSpace(node2, last);
          }
        }
      }
      function getClosingBraceOfObject(node2) {
        const lastProperty = node2.properties.at(-1);
        return sourceCode2.getTokenAfter(
          lastProperty,
          astUtils2.isClosingBraceToken
        );
      }
      function checkForObject(node2) {
        if (node2.properties.length === 0) {
          return;
        }
        const first = sourceCode2.getFirstToken(node2), last = getClosingBraceOfObject(node2), second = sourceCode2.getTokenAfter(first, {
          includeComments: true
        }), penultimate = sourceCode2.getTokenBefore(last, {
          includeComments: true
        });
        validateBraceSpacing(node2, first, second, penultimate, last);
      }
      function checkForImport(node2) {
        if (node2.specifiers.length === 0) {
          return;
        }
        let firstSpecifier = node2.specifiers[0];
        const lastSpecifier = node2.specifiers.at(-1);
        if (lastSpecifier.type !== "ImportSpecifier") {
          return;
        }
        if (firstSpecifier.type !== "ImportSpecifier") {
          firstSpecifier = node2.specifiers[1];
        }
        const first = sourceCode2.getTokenBefore(firstSpecifier), last = sourceCode2.getTokenAfter(
          lastSpecifier,
          astUtils2.isNotCommaToken
        ), second = sourceCode2.getTokenAfter(first, {
          includeComments: true
        }), penultimate = sourceCode2.getTokenBefore(last, {
          includeComments: true
        });
        validateBraceSpacing(node2, first, second, penultimate, last);
      }
      function checkForExport(node2) {
        if (node2.specifiers.length === 0) {
          return;
        }
        const firstSpecifier = node2.specifiers[0], lastSpecifier = node2.specifiers.at(-1), first = sourceCode2.getTokenBefore(firstSpecifier), last = sourceCode2.getTokenAfter(
          lastSpecifier,
          astUtils2.isNotCommaToken
        ), second = sourceCode2.getTokenAfter(first, {
          includeComments: true
        }), penultimate = sourceCode2.getTokenBefore(last, {
          includeComments: true
        });
        validateBraceSpacing(node2, first, second, penultimate, last);
      }
      return {
        // var {x} = y;
        ObjectPattern: checkForObject,
        // var y = {x: 'y'}
        ObjectExpression: checkForObject,
        // import {y} from 'x';
        ImportDeclaration: checkForImport,
        // export {name} from 'yo';
        ExportNamedDeclaration: checkForExport
      };
    }
  };
  return objectCurlySpacing;
}
var objectPropertyNewline;
var hasRequiredObjectPropertyNewline;
function requireObjectPropertyNewline() {
  if (hasRequiredObjectPropertyNewline) return objectPropertyNewline;
  hasRequiredObjectPropertyNewline = 1;
  objectPropertyNewline = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "object-property-newline",
              url: "https://eslint.style/rules/object-property-newline"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce placing object properties on separate lines",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/object-property-newline"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowAllPropertiesOnSameLine: {
              type: "boolean",
              default: false
            },
            allowMultiplePropertiesPerLine: {
              // Deprecated
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "whitespace",
      messages: {
        propertiesOnNewlineAll: "Object properties must go on a new line if they aren't all on the same line.",
        propertiesOnNewline: "Object properties must go on a new line."
      }
    },
    create(context) {
      const allowSameLine = context.options[0] && (context.options[0].allowAllPropertiesOnSameLine || context.options[0].allowMultiplePropertiesPerLine);
      const messageId = allowSameLine ? "propertiesOnNewlineAll" : "propertiesOnNewline";
      const sourceCode2 = context.sourceCode;
      return {
        ObjectExpression(node2) {
          if (allowSameLine) {
            if (node2.properties.length > 1) {
              const firstTokenOfFirstProperty = sourceCode2.getFirstToken(node2.properties[0]);
              const lastTokenOfLastProperty = sourceCode2.getLastToken(
                node2.properties.at(-1)
              );
              if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {
                return;
              }
            }
          }
          for (let i2 = 1; i2 < node2.properties.length; i2++) {
            const lastTokenOfPreviousProperty = sourceCode2.getLastToken(
              node2.properties[i2 - 1]
            );
            const firstTokenOfCurrentProperty = sourceCode2.getFirstToken(node2.properties[i2]);
            if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {
              context.report({
                node: node2,
                loc: firstTokenOfCurrentProperty.loc,
                messageId,
                fix(fixer) {
                  const comma = sourceCode2.getTokenBefore(
                    firstTokenOfCurrentProperty
                  );
                  const rangeAfterComma = [
                    comma.range[1],
                    firstTokenOfCurrentProperty.range[0]
                  ];
                  if (sourceCode2.text.slice(
                    rangeAfterComma[0],
                    rangeAfterComma[1]
                  ).trim()) {
                    return null;
                  }
                  return fixer.replaceTextRange(
                    rangeAfterComma,
                    "\n"
                  );
                }
              });
            }
          }
        }
      };
    }
  };
  return objectPropertyNewline;
}
var objectShorthand;
var hasRequiredObjectShorthand;
function requireObjectShorthand() {
  if (hasRequiredObjectShorthand) return objectShorthand;
  hasRequiredObjectShorthand = 1;
  const OPTIONS = {
    always: "always",
    never: "never",
    methods: "methods",
    properties: "properties",
    consistent: "consistent",
    consistentAsNeeded: "consistent-as-needed"
  };
  const astUtils2 = requireAstUtils();
  objectShorthand = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require or disallow method and property shorthand syntax for object literals",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/object-shorthand"
      },
      fixable: "code",
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: [
                  "always",
                  "methods",
                  "properties",
                  "never",
                  "consistent",
                  "consistent-as-needed"
                ]
              }
            ],
            minItems: 0,
            maxItems: 1
          },
          {
            type: "array",
            items: [
              {
                enum: ["always", "methods", "properties"]
              },
              {
                type: "object",
                properties: {
                  avoidQuotes: {
                    type: "boolean"
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          },
          {
            type: "array",
            items: [
              {
                enum: ["always", "methods"]
              },
              {
                type: "object",
                properties: {
                  ignoreConstructors: {
                    type: "boolean"
                  },
                  methodsIgnorePattern: {
                    type: "string"
                  },
                  avoidQuotes: {
                    type: "boolean"
                  },
                  avoidExplicitReturnArrows: {
                    type: "boolean"
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          }
        ]
      },
      messages: {
        expectedAllPropertiesShorthanded: "Expected shorthand for all properties.",
        expectedLiteralMethodLongform: "Expected longform method syntax for string literal keys.",
        expectedPropertyShorthand: "Expected property shorthand.",
        expectedPropertyLongform: "Expected longform property syntax.",
        expectedMethodShorthand: "Expected method shorthand.",
        expectedMethodLongform: "Expected longform method syntax.",
        unexpectedMix: "Unexpected mix of shorthand and non-shorthand properties."
      }
    },
    create(context) {
      const APPLY = context.options[0] || OPTIONS.always;
      const APPLY_TO_METHODS = APPLY === OPTIONS.methods || APPLY === OPTIONS.always;
      const APPLY_TO_PROPS = APPLY === OPTIONS.properties || APPLY === OPTIONS.always;
      const APPLY_NEVER = APPLY === OPTIONS.never;
      const APPLY_CONSISTENT = APPLY === OPTIONS.consistent;
      const APPLY_CONSISTENT_AS_NEEDED = APPLY === OPTIONS.consistentAsNeeded;
      const PARAMS = context.options[1] || {};
      const IGNORE_CONSTRUCTORS = PARAMS.ignoreConstructors;
      const METHODS_IGNORE_PATTERN = PARAMS.methodsIgnorePattern ? new RegExp(PARAMS.methodsIgnorePattern, "u") : null;
      const AVOID_QUOTES = PARAMS.avoidQuotes;
      const AVOID_EXPLICIT_RETURN_ARROWS = !!PARAMS.avoidExplicitReturnArrows;
      const sourceCode2 = context.sourceCode;
      const CTOR_PREFIX_REGEX = /[^_$0-9]/u;
      function isConstructor(name) {
        const match = CTOR_PREFIX_REGEX.exec(name);
        if (!match) {
          return false;
        }
        const firstChar = name.charAt(match.index);
        return firstChar === firstChar.toUpperCase();
      }
      function canHaveShorthand(property) {
        return property.kind !== "set" && property.kind !== "get" && property.type !== "SpreadElement" && property.type !== "SpreadProperty" && property.type !== "ExperimentalSpreadProperty";
      }
      function isStringLiteral(node2) {
        return node2.type === "Literal" && typeof node2.value === "string";
      }
      function isShorthand(property) {
        return property.shorthand || property.method;
      }
      function isRedundant(property) {
        const value = property.value;
        if (value.type === "FunctionExpression") {
          return !value.id;
        }
        if (value.type === "Identifier") {
          return astUtils2.getStaticPropertyName(property) === value.name;
        }
        return false;
      }
      function checkConsistency(node2, checkRedundancy) {
        const properties2 = node2.properties.filter(canHaveShorthand);
        if (properties2.length > 0) {
          const shorthandProperties = properties2.filter(isShorthand);
          if (shorthandProperties.length !== properties2.length) {
            if (shorthandProperties.length > 0) {
              context.report({ node: node2, messageId: "unexpectedMix" });
            } else if (checkRedundancy) {
              const canAlwaysUseShorthand = properties2.every(isRedundant);
              if (canAlwaysUseShorthand) {
                context.report({
                  node: node2,
                  messageId: "expectedAllPropertiesShorthanded"
                });
              }
            }
          }
        }
      }
      function makeFunctionShorthand(fixer, node2) {
        const firstKeyToken = node2.computed ? sourceCode2.getFirstToken(node2, astUtils2.isOpeningBracketToken) : sourceCode2.getFirstToken(node2.key);
        const lastKeyToken = node2.computed ? sourceCode2.getFirstTokenBetween(
          node2.key,
          node2.value,
          astUtils2.isClosingBracketToken
        ) : sourceCode2.getLastToken(node2.key);
        const keyText = sourceCode2.text.slice(
          firstKeyToken.range[0],
          lastKeyToken.range[1]
        );
        let keyPrefix = "";
        if (sourceCode2.commentsExistBetween(lastKeyToken, node2.value)) {
          return null;
        }
        if (node2.value.async) {
          keyPrefix += "async ";
        }
        if (node2.value.generator) {
          keyPrefix += "*";
        }
        const fixRange = [firstKeyToken.range[0], node2.range[1]];
        const methodPrefix = keyPrefix + keyText;
        if (node2.value.type === "FunctionExpression") {
          const functionToken = sourceCode2.getTokens(node2.value).find(
            (token) => token.type === "Keyword" && token.value === "function"
          );
          const tokenBeforeParams = node2.value.generator ? sourceCode2.getTokenAfter(functionToken) : functionToken;
          return fixer.replaceTextRange(
            fixRange,
            methodPrefix + sourceCode2.text.slice(
              tokenBeforeParams.range[1],
              node2.value.range[1]
            )
          );
        }
        const arrowToken = sourceCode2.getTokenBefore(
          node2.value.body,
          astUtils2.isArrowToken
        );
        const fnBody = sourceCode2.text.slice(
          arrowToken.range[1],
          node2.value.range[1]
        );
        const firstValueToken = sourceCode2.getFirstToken(node2.value, {
          skip: node2.value.async ? 1 : 0
        });
        const sliceStart = firstValueToken.range[0];
        const sliceEnd = sourceCode2.getTokenBefore(arrowToken).range[1];
        const shouldAddParens = node2.value.params.length === 1 && node2.value.params[0].range[0] === sliceStart;
        const oldParamText = sourceCode2.text.slice(sliceStart, sliceEnd);
        const newParamText = shouldAddParens ? `(${oldParamText})` : oldParamText;
        return fixer.replaceTextRange(
          fixRange,
          methodPrefix + newParamText + fnBody
        );
      }
      function makeFunctionLongform(fixer, node2) {
        const firstKeyToken = node2.computed ? sourceCode2.getTokens(node2).find((token) => token.value === "[") : sourceCode2.getFirstToken(node2.key);
        const lastKeyToken = node2.computed ? sourceCode2.getTokensBetween(node2.key, node2.value).find((token) => token.value === "]") : sourceCode2.getLastToken(node2.key);
        const keyText = sourceCode2.text.slice(
          firstKeyToken.range[0],
          lastKeyToken.range[1]
        );
        let functionHeader = "function";
        if (node2.value.async) {
          functionHeader = `async ${functionHeader}`;
        }
        if (node2.value.generator) {
          functionHeader = `${functionHeader}*`;
        }
        return fixer.replaceTextRange(
          [node2.range[0], lastKeyToken.range[1]],
          `${keyText}: ${functionHeader}`
        );
      }
      const lexicalScopeStack = [];
      const arrowsWithLexicalIdentifiers = /* @__PURE__ */ new WeakSet();
      const argumentsIdentifiers = /* @__PURE__ */ new WeakSet();
      function enterFunction(node2) {
        lexicalScopeStack.unshift(/* @__PURE__ */ new Set());
        sourceCode2.getScope(node2).variables.filter((variable) => variable.name === "arguments").forEach((variable) => {
          variable.references.map((ref2) => ref2.identifier).forEach(
            (identifier) => argumentsIdentifiers.add(identifier)
          );
        });
      }
      function exitFunction() {
        lexicalScopeStack.shift();
      }
      function reportLexicalIdentifier() {
        lexicalScopeStack[0].forEach(
          (arrowFunction) => arrowsWithLexicalIdentifiers.add(arrowFunction)
        );
      }
      return {
        Program: enterFunction,
        FunctionDeclaration: enterFunction,
        FunctionExpression: enterFunction,
        "Program:exit": exitFunction,
        "FunctionDeclaration:exit": exitFunction,
        "FunctionExpression:exit": exitFunction,
        ArrowFunctionExpression(node2) {
          lexicalScopeStack[0].add(node2);
        },
        "ArrowFunctionExpression:exit"(node2) {
          lexicalScopeStack[0].delete(node2);
        },
        ThisExpression: reportLexicalIdentifier,
        Super: reportLexicalIdentifier,
        MetaProperty(node2) {
          if (node2.meta.name === "new" && node2.property.name === "target") {
            reportLexicalIdentifier();
          }
        },
        Identifier(node2) {
          if (argumentsIdentifiers.has(node2)) {
            reportLexicalIdentifier();
          }
        },
        ObjectExpression(node2) {
          if (APPLY_CONSISTENT) {
            checkConsistency(node2, false);
          } else if (APPLY_CONSISTENT_AS_NEEDED) {
            checkConsistency(node2, true);
          }
        },
        "Property:exit"(node2) {
          const isConciseProperty = node2.method || node2.shorthand;
          if (node2.parent.type === "ObjectPattern") {
            return;
          }
          if (node2.kind === "get" || node2.kind === "set") {
            return;
          }
          if (node2.computed && node2.value.type !== "FunctionExpression" && node2.value.type !== "ArrowFunctionExpression") {
            return;
          }
          if (isConciseProperty) {
            if (node2.method && (APPLY_NEVER || AVOID_QUOTES && isStringLiteral(node2.key))) {
              const messageId = APPLY_NEVER ? "expectedMethodLongform" : "expectedLiteralMethodLongform";
              context.report({
                node: node2,
                messageId,
                fix: (fixer) => makeFunctionLongform(fixer, node2)
              });
            } else if (APPLY_NEVER) {
              context.report({
                node: node2,
                messageId: "expectedPropertyLongform",
                fix: (fixer) => fixer.insertTextAfter(
                  node2.key,
                  `: ${node2.key.name}`
                )
              });
            }
          } else if (APPLY_TO_METHODS && !node2.value.id && (node2.value.type === "FunctionExpression" || node2.value.type === "ArrowFunctionExpression")) {
            if (IGNORE_CONSTRUCTORS && node2.key.type === "Identifier" && isConstructor(node2.key.name)) {
              return;
            }
            if (METHODS_IGNORE_PATTERN) {
              const propertyName = astUtils2.getStaticPropertyName(node2);
              if (propertyName !== null && METHODS_IGNORE_PATTERN.test(propertyName)) {
                return;
              }
            }
            if (AVOID_QUOTES && isStringLiteral(node2.key)) {
              return;
            }
            if (node2.value.type === "FunctionExpression" || node2.value.type === "ArrowFunctionExpression" && node2.value.body.type === "BlockStatement" && AVOID_EXPLICIT_RETURN_ARROWS && !arrowsWithLexicalIdentifiers.has(node2.value)) {
              context.report({
                node: node2,
                messageId: "expectedMethodShorthand",
                fix: (fixer) => makeFunctionShorthand(fixer, node2)
              });
            }
          } else if (node2.value.type === "Identifier" && node2.key.name === node2.value.name && APPLY_TO_PROPS) {
            context.report({
              node: node2,
              messageId: "expectedPropertyShorthand",
              fix(fixer) {
                if (sourceCode2.getCommentsInside(node2).length > 0) {
                  return null;
                }
                return fixer.replaceText(node2, node2.value.name);
              }
            });
          } else if (node2.value.type === "Identifier" && node2.key.type === "Literal" && node2.key.value === node2.value.name && APPLY_TO_PROPS) {
            if (AVOID_QUOTES) {
              return;
            }
            context.report({
              node: node2,
              messageId: "expectedPropertyShorthand",
              fix(fixer) {
                if (sourceCode2.getCommentsInside(node2).length > 0) {
                  return null;
                }
                return fixer.replaceText(node2, node2.value.name);
              }
            });
          }
        }
      };
    }
  };
  return objectShorthand;
}
var oneVar;
var hasRequiredOneVar;
function requireOneVar() {
  if (hasRequiredOneVar) return oneVar;
  hasRequiredOneVar = 1;
  const astUtils2 = requireAstUtils();
  function isInStatementList(node2) {
    return astUtils2.STATEMENT_LIST_PARENTS.has(node2.parent.type);
  }
  oneVar = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce variables to be declared either together or separately in functions",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/one-var"
      },
      fixable: "code",
      schema: [
        {
          oneOf: [
            {
              enum: ["always", "never", "consecutive"]
            },
            {
              type: "object",
              properties: {
                separateRequires: {
                  type: "boolean"
                },
                var: {
                  enum: ["always", "never", "consecutive"]
                },
                let: {
                  enum: ["always", "never", "consecutive"]
                },
                const: {
                  enum: ["always", "never", "consecutive"]
                },
                using: {
                  enum: ["always", "never", "consecutive"]
                },
                awaitUsing: {
                  enum: ["always", "never", "consecutive"]
                }
              },
              additionalProperties: false
            },
            {
              type: "object",
              properties: {
                initialized: {
                  enum: ["always", "never", "consecutive"]
                },
                uninitialized: {
                  enum: ["always", "never", "consecutive"]
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        combineUninitialized: "Combine this with the previous '{{type}}' statement with uninitialized variables.",
        combineInitialized: "Combine this with the previous '{{type}}' statement with initialized variables.",
        splitUninitialized: "Split uninitialized '{{type}}' declarations into multiple statements.",
        splitInitialized: "Split initialized '{{type}}' declarations into multiple statements.",
        splitRequires: "Split requires to be separated into a single block.",
        combine: "Combine this with the previous '{{type}}' statement.",
        split: "Split '{{type}}' declarations into multiple statements."
      }
    },
    create(context) {
      const MODE_ALWAYS = "always";
      const MODE_NEVER = "never";
      const MODE_CONSECUTIVE = "consecutive";
      const mode = context.options[0] || MODE_ALWAYS;
      const options = {};
      if (typeof mode === "string") {
        options.var = { uninitialized: mode, initialized: mode };
        options.let = { uninitialized: mode, initialized: mode };
        options.const = { uninitialized: mode, initialized: mode };
        options.using = { uninitialized: mode, initialized: mode };
        options.awaitUsing = { uninitialized: mode, initialized: mode };
      } else if (typeof mode === "object") {
        options.separateRequires = !!mode.separateRequires;
        options.var = { uninitialized: mode.var, initialized: mode.var };
        options.let = { uninitialized: mode.let, initialized: mode.let };
        options.const = {
          uninitialized: mode.const,
          initialized: mode.const
        };
        options.using = {
          uninitialized: mode.using,
          initialized: mode.using
        };
        options.awaitUsing = {
          uninitialized: mode.awaitUsing,
          initialized: mode.awaitUsing
        };
        if (Object.hasOwn(mode, "uninitialized")) {
          options.var.uninitialized = mode.uninitialized;
          options.let.uninitialized = mode.uninitialized;
          options.const.uninitialized = mode.uninitialized;
          options.using.uninitialized = mode.uninitialized;
          options.awaitUsing.uninitialized = mode.uninitialized;
        }
        if (Object.hasOwn(mode, "initialized")) {
          options.var.initialized = mode.initialized;
          options.let.initialized = mode.initialized;
          options.const.initialized = mode.initialized;
          options.using.initialized = mode.initialized;
          options.awaitUsing.initialized = mode.initialized;
        }
      }
      const sourceCode2 = context.sourceCode;
      const functionStack = [];
      const blockStack = [];
      function startBlock() {
        blockStack.push({
          let: { initialized: false, uninitialized: false },
          const: { initialized: false, uninitialized: false },
          using: { initialized: false, uninitialized: false },
          awaitUsing: { initialized: false, uninitialized: false }
        });
      }
      function startFunction() {
        functionStack.push({ initialized: false, uninitialized: false });
        startBlock();
      }
      function endBlock() {
        blockStack.pop();
      }
      function endFunction() {
        functionStack.pop();
        endBlock();
      }
      function isRequire(decl) {
        return decl.init && decl.init.type === "CallExpression" && decl.init.callee.name === "require";
      }
      function recordTypes(statementType, declarations, currentScope) {
        for (let i2 = 0; i2 < declarations.length; i2++) {
          if (declarations[i2].init === null) {
            if (options[statementType] && options[statementType].uninitialized === MODE_ALWAYS) {
              currentScope.uninitialized = true;
            }
          } else {
            if (options[statementType] && options[statementType].initialized === MODE_ALWAYS) {
              if (options.separateRequires && isRequire(declarations[i2])) {
                currentScope.required = true;
              } else {
                currentScope.initialized = true;
              }
            }
          }
        }
      }
      function getCurrentScope(statementType) {
        let currentScope;
        if (statementType === "var") {
          currentScope = functionStack.at(-1);
        } else if (statementType === "let") {
          currentScope = blockStack.at(-1).let;
        } else if (statementType === "const") {
          currentScope = blockStack.at(-1).const;
        } else if (statementType === "using") {
          currentScope = blockStack.at(-1).using;
        } else if (statementType === "awaitUsing") {
          currentScope = blockStack.at(-1).awaitUsing;
        }
        return currentScope;
      }
      function countDeclarations(declarations) {
        const counts = { uninitialized: 0, initialized: 0 };
        for (let i2 = 0; i2 < declarations.length; i2++) {
          if (declarations[i2].init === null) {
            counts.uninitialized++;
          } else {
            counts.initialized++;
          }
        }
        return counts;
      }
      function hasOnlyOneStatement(statementType, declarations) {
        const declarationCounts = countDeclarations(declarations);
        const currentOptions = options[statementType] || {};
        const currentScope = getCurrentScope(statementType);
        const hasRequires = declarations.some(isRequire);
        if (currentOptions.uninitialized === MODE_ALWAYS && currentOptions.initialized === MODE_ALWAYS) {
          if (currentScope.uninitialized || currentScope.initialized) {
            if (!hasRequires) {
              return false;
            }
          }
        }
        if (declarationCounts.uninitialized > 0) {
          if (currentOptions.uninitialized === MODE_ALWAYS && currentScope.uninitialized) {
            return false;
          }
        }
        if (declarationCounts.initialized > 0) {
          if (currentOptions.initialized === MODE_ALWAYS && currentScope.initialized) {
            if (!hasRequires) {
              return false;
            }
          }
        }
        if (currentScope.required && hasRequires) {
          return false;
        }
        recordTypes(statementType, declarations, currentScope);
        return true;
      }
      function joinDeclarations(declarations) {
        const declaration = declarations[0];
        const body = Array.isArray(declaration.parent.parent.body) ? declaration.parent.parent.body : [];
        const currentIndex = body.findIndex(
          (node2) => node2.range[0] === declaration.parent.range[0]
        );
        const previousNode = body[currentIndex - 1];
        return function* joinDeclarationsFixer(fixer) {
          const type2 = sourceCode2.getFirstToken(declaration.parent);
          const beforeType = sourceCode2.getTokenBefore(type2);
          if (previousNode && previousNode.kind === declaration.parent.kind) {
            if (beforeType.value === ";") {
              yield fixer.replaceText(beforeType, ",");
            } else {
              yield fixer.insertTextAfter(beforeType, ",");
            }
            if (declaration.parent.kind === "await using") {
              const usingToken = sourceCode2.getTokenAfter(type2);
              yield fixer.remove(usingToken);
            }
            yield fixer.replaceText(type2, "");
          }
        };
      }
      function splitDeclarations(declaration) {
        const { parent } = declaration;
        if (!isInStatementList(
          parent.type === "ExportNamedDeclaration" ? parent : declaration
        )) {
          return null;
        }
        return (fixer) => declaration.declarations.map((declarator) => {
          const tokenAfterDeclarator = sourceCode2.getTokenAfter(declarator);
          if (tokenAfterDeclarator === null) {
            return null;
          }
          const afterComma = sourceCode2.getTokenAfter(
            tokenAfterDeclarator,
            { includeComments: true }
          );
          if (tokenAfterDeclarator.value !== ",") {
            return null;
          }
          const exportPlacement = declaration.parent.type === "ExportNamedDeclaration" ? "export " : "";
          if (afterComma.range[0] === tokenAfterDeclarator.range[1]) {
            return fixer.replaceText(
              tokenAfterDeclarator,
              `; ${exportPlacement}${declaration.kind} `
            );
          }
          if (afterComma.loc.start.line > tokenAfterDeclarator.loc.end.line || afterComma.type === "Line" || afterComma.type === "Block") {
            let lastComment = afterComma;
            while (lastComment.type === "Line" || lastComment.type === "Block") {
              lastComment = sourceCode2.getTokenAfter(
                lastComment,
                { includeComments: true }
              );
            }
            return fixer.replaceTextRange(
              [
                tokenAfterDeclarator.range[0],
                lastComment.range[0]
              ],
              `;${sourceCode2.text.slice(
                tokenAfterDeclarator.range[1],
                lastComment.range[0]
              )}${exportPlacement}${declaration.kind} `
            );
          }
          return fixer.replaceText(
            tokenAfterDeclarator,
            `; ${exportPlacement}${declaration.kind}`
          );
        }).filter((x2) => x2);
      }
      function checkVariableDeclaration(node2) {
        const parent = node2.parent;
        const type2 = node2.kind;
        const key = type2 === "await using" ? "awaitUsing" : type2;
        if (!options[key]) {
          return;
        }
        const declarations = node2.declarations;
        const declarationCounts = countDeclarations(declarations);
        const mixedRequires = declarations.some(isRequire) && !declarations.every(isRequire);
        if (options[key].initialized === MODE_ALWAYS) {
          if (options.separateRequires && mixedRequires) {
            context.report({
              node: node2,
              messageId: "splitRequires"
            });
          }
        }
        const nodeIndex = parent.body && parent.body.length > 0 && parent.body.indexOf(node2) || 0;
        if (nodeIndex > 0) {
          const previousNode = parent.body[nodeIndex - 1];
          const isPreviousNodeDeclaration = previousNode.type === "VariableDeclaration";
          const declarationsWithPrevious = declarations.concat(
            previousNode.declarations || []
          );
          if (isPreviousNodeDeclaration && previousNode.kind === type2 && !(declarationsWithPrevious.some(isRequire) && !declarationsWithPrevious.every(isRequire))) {
            const previousDeclCounts = countDeclarations(
              previousNode.declarations
            );
            if (options[key].initialized === MODE_CONSECUTIVE && options[key].uninitialized === MODE_CONSECUTIVE) {
              context.report({
                node: node2,
                messageId: "combine",
                data: {
                  type: type2
                },
                fix: joinDeclarations(declarations)
              });
            } else if (options[key].initialized === MODE_CONSECUTIVE && declarationCounts.initialized > 0 && previousDeclCounts.initialized > 0) {
              context.report({
                node: node2,
                messageId: "combineInitialized",
                data: {
                  type: type2
                },
                fix: joinDeclarations(declarations)
              });
            } else if (options[key].uninitialized === MODE_CONSECUTIVE && declarationCounts.uninitialized > 0 && previousDeclCounts.uninitialized > 0) {
              context.report({
                node: node2,
                messageId: "combineUninitialized",
                data: {
                  type: type2
                },
                fix: joinDeclarations(declarations)
              });
            }
          }
        }
        if (!hasOnlyOneStatement(key, declarations)) {
          if (options[key].initialized === MODE_ALWAYS && options[key].uninitialized === MODE_ALWAYS) {
            context.report({
              node: node2,
              messageId: "combine",
              data: {
                type: type2
              },
              fix: joinDeclarations(declarations)
            });
          } else {
            if (options[key].initialized === MODE_ALWAYS && declarationCounts.initialized > 0) {
              context.report({
                node: node2,
                messageId: "combineInitialized",
                data: {
                  type: type2
                },
                fix: joinDeclarations(declarations)
              });
            }
            if (options[key].uninitialized === MODE_ALWAYS && declarationCounts.uninitialized > 0) {
              if (node2.parent.left === node2 && (node2.parent.type === "ForInStatement" || node2.parent.type === "ForOfStatement")) {
                return;
              }
              context.report({
                node: node2,
                messageId: "combineUninitialized",
                data: {
                  type: type2
                },
                fix: joinDeclarations(declarations)
              });
            }
          }
        }
        if (parent.type !== "ForStatement" || parent.init !== node2) {
          const totalDeclarations = declarationCounts.uninitialized + declarationCounts.initialized;
          if (totalDeclarations > 1) {
            if (options[key].initialized === MODE_NEVER && options[key].uninitialized === MODE_NEVER) {
              context.report({
                node: node2,
                messageId: "split",
                data: {
                  type: type2
                },
                fix: splitDeclarations(node2)
              });
            } else if (options[key].initialized === MODE_NEVER && declarationCounts.initialized > 0) {
              context.report({
                node: node2,
                messageId: "splitInitialized",
                data: {
                  type: type2
                },
                fix: splitDeclarations(node2)
              });
            } else if (options[key].uninitialized === MODE_NEVER && declarationCounts.uninitialized > 0) {
              context.report({
                node: node2,
                messageId: "splitUninitialized",
                data: {
                  type: type2
                },
                fix: splitDeclarations(node2)
              });
            }
          }
        }
      }
      return {
        Program: startFunction,
        FunctionDeclaration: startFunction,
        FunctionExpression: startFunction,
        ArrowFunctionExpression: startFunction,
        StaticBlock: startFunction,
        // StaticBlock creates a new scope for `var` variables
        BlockStatement: startBlock,
        ForStatement: startBlock,
        ForInStatement: startBlock,
        ForOfStatement: startBlock,
        SwitchStatement: startBlock,
        VariableDeclaration: checkVariableDeclaration,
        "ForStatement:exit": endBlock,
        "ForOfStatement:exit": endBlock,
        "ForInStatement:exit": endBlock,
        "SwitchStatement:exit": endBlock,
        "BlockStatement:exit": endBlock,
        "Program:exit": endFunction,
        "FunctionDeclaration:exit": endFunction,
        "FunctionExpression:exit": endFunction,
        "ArrowFunctionExpression:exit": endFunction,
        "StaticBlock:exit": endFunction
      };
    }
  };
  return oneVar;
}
var oneVarDeclarationPerLine;
var hasRequiredOneVarDeclarationPerLine;
function requireOneVarDeclarationPerLine() {
  if (hasRequiredOneVarDeclarationPerLine) return oneVarDeclarationPerLine;
  hasRequiredOneVarDeclarationPerLine = 1;
  oneVarDeclarationPerLine = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "one-var-declaration-per-line",
              url: "https://eslint.style/rules/one-var-declaration-per-line"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Require or disallow newlines around variable declarations",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/one-var-declaration-per-line"
      },
      schema: [
        {
          enum: ["always", "initializations"]
        }
      ],
      fixable: "whitespace",
      messages: {
        expectVarOnNewline: "Expected variable declaration to be on a new line."
      }
    },
    create(context) {
      const always = context.options[0] === "always";
      function isForTypeSpecifier(keyword2) {
        return keyword2 === "ForStatement" || keyword2 === "ForInStatement" || keyword2 === "ForOfStatement";
      }
      function checkForNewLine(node2) {
        if (isForTypeSpecifier(node2.parent.type)) {
          return;
        }
        const declarations = node2.declarations;
        let prev;
        declarations.forEach((current) => {
          if (prev && prev.loc.end.line === current.loc.start.line) {
            if (always || prev.init || current.init) {
              context.report({
                node: node2,
                messageId: "expectVarOnNewline",
                loc: current.loc,
                fix: (fixer) => fixer.insertTextBefore(current, "\n")
              });
            }
          }
          prev = current;
        });
      }
      return {
        VariableDeclaration: checkForNewLine
      };
    }
  };
  return oneVarDeclarationPerLine;
}
var operatorAssignment;
var hasRequiredOperatorAssignment;
function requireOperatorAssignment() {
  if (hasRequiredOperatorAssignment) return operatorAssignment;
  hasRequiredOperatorAssignment = 1;
  const astUtils2 = requireAstUtils();
  function isCommutativeOperatorWithShorthand(operator) {
    return ["*", "&", "^", "|"].includes(operator);
  }
  function isNonCommutativeOperatorWithShorthand(operator) {
    return ["+", "-", "/", "%", "<<", ">>", ">>>", "**"].includes(operator);
  }
  function canBeFixed(node2) {
    return node2.type === "Identifier" || node2.type === "MemberExpression" && (node2.object.type === "Identifier" || node2.object.type === "ThisExpression") && (!node2.computed || node2.property.type === "Literal");
  }
  operatorAssignment = {
    meta: {
      type: "suggestion",
      defaultOptions: ["always"],
      docs: {
        description: "Require or disallow assignment operator shorthand where possible",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/operator-assignment"
      },
      schema: [
        {
          enum: ["always", "never"]
        }
      ],
      fixable: "code",
      messages: {
        replaced: "Assignment (=) can be replaced with operator assignment ({{operator}}).",
        unexpected: "Unexpected operator assignment ({{operator}}) shorthand."
      }
    },
    create(context) {
      const never = context.options[0] === "never";
      const sourceCode2 = context.sourceCode;
      function getOperatorToken(node2) {
        return sourceCode2.getFirstTokenBetween(
          node2.left,
          node2.right,
          (token) => token.value === node2.operator
        );
      }
      function verify(node2) {
        if (node2.operator !== "=" || node2.right.type !== "BinaryExpression") {
          return;
        }
        const left = node2.left;
        const expr = node2.right;
        const operator = expr.operator;
        if (isCommutativeOperatorWithShorthand(operator) || isNonCommutativeOperatorWithShorthand(operator)) {
          const replacementOperator = `${operator}=`;
          if (astUtils2.isSameReference(left, expr.left, true)) {
            context.report({
              node: node2,
              messageId: "replaced",
              data: { operator: replacementOperator },
              fix(fixer) {
                if (canBeFixed(left) && canBeFixed(expr.left)) {
                  const equalsToken = getOperatorToken(node2);
                  const operatorToken = getOperatorToken(expr);
                  const leftText = sourceCode2.getText().slice(node2.range[0], equalsToken.range[0]);
                  const rightText = sourceCode2.getText().slice(
                    operatorToken.range[1],
                    node2.right.range[1]
                  );
                  if (sourceCode2.commentsExistBetween(
                    equalsToken,
                    operatorToken
                  )) {
                    return null;
                  }
                  return fixer.replaceText(
                    node2,
                    `${leftText}${replacementOperator}${rightText}`
                  );
                }
                return null;
              }
            });
          } else if (astUtils2.isSameReference(left, expr.right, true) && isCommutativeOperatorWithShorthand(operator)) {
            context.report({
              node: node2,
              messageId: "replaced",
              data: { operator: replacementOperator }
            });
          }
        }
      }
      function prohibit(node2) {
        if (node2.operator !== "=" && !astUtils2.isLogicalAssignmentOperator(node2.operator)) {
          context.report({
            node: node2,
            messageId: "unexpected",
            data: { operator: node2.operator },
            fix(fixer) {
              if (canBeFixed(node2.left)) {
                const firstToken = sourceCode2.getFirstToken(node2);
                const operatorToken = getOperatorToken(node2);
                const leftText = sourceCode2.getText().slice(node2.range[0], operatorToken.range[0]);
                const newOperator = node2.operator.slice(0, -1);
                let rightText;
                if (sourceCode2.commentsExistBetween(
                  firstToken,
                  operatorToken
                )) {
                  return null;
                }
                if (astUtils2.getPrecedence(node2.right) <= astUtils2.getPrecedence({
                  type: "BinaryExpression",
                  operator: newOperator
                }) && !astUtils2.isParenthesised(
                  sourceCode2,
                  node2.right
                )) {
                  rightText = `${sourceCode2.text.slice(operatorToken.range[1], node2.right.range[0])}(${sourceCode2.getText(node2.right)})`;
                } else {
                  const tokenAfterOperator = sourceCode2.getTokenAfter(operatorToken, {
                    includeComments: true
                  });
                  let rightTextPrefix = "";
                  if (operatorToken.range[1] === tokenAfterOperator.range[0] && !astUtils2.canTokensBeAdjacent(
                    {
                      type: "Punctuator",
                      value: newOperator
                    },
                    tokenAfterOperator
                  )) {
                    rightTextPrefix = " ";
                  }
                  rightText = `${rightTextPrefix}${sourceCode2.text.slice(operatorToken.range[1], node2.range[1])}`;
                }
                return fixer.replaceText(
                  node2,
                  `${leftText}= ${leftText}${newOperator}${rightText}`
                );
              }
              return null;
            }
          });
        }
      }
      return {
        AssignmentExpression: !never ? verify : prohibit
      };
    }
  };
  return operatorAssignment;
}
var operatorLinebreak;
var hasRequiredOperatorLinebreak;
function requireOperatorLinebreak() {
  if (hasRequiredOperatorLinebreak) return operatorLinebreak;
  hasRequiredOperatorLinebreak = 1;
  const astUtils2 = requireAstUtils();
  operatorLinebreak = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "operator-linebreak",
              url: "https://eslint.style/rules/operator-linebreak"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent linebreak style for operators",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/operator-linebreak"
      },
      schema: [
        {
          enum: ["after", "before", "none", null]
        },
        {
          type: "object",
          properties: {
            overrides: {
              type: "object",
              additionalProperties: {
                enum: ["after", "before", "none", "ignore"]
              }
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        operatorAtBeginning: "'{{operator}}' should be placed at the beginning of the line.",
        operatorAtEnd: "'{{operator}}' should be placed at the end of the line.",
        badLinebreak: "Bad line breaking before and after '{{operator}}'.",
        noLinebreak: "There should be no line break before or after '{{operator}}'."
      }
    },
    create(context) {
      const usedDefaultGlobal = !context.options[0];
      const globalStyle = context.options[0] || "after";
      const options = context.options[1] || {};
      const styleOverrides = options.overrides ? Object.assign({}, options.overrides) : {};
      if (usedDefaultGlobal && !styleOverrides["?"]) {
        styleOverrides["?"] = "before";
      }
      if (usedDefaultGlobal && !styleOverrides[":"]) {
        styleOverrides[":"] = "before";
      }
      const sourceCode2 = context.sourceCode;
      function getFixer(operatorToken, desiredStyle) {
        return (fixer) => {
          const tokenBefore = sourceCode2.getTokenBefore(operatorToken);
          const tokenAfter = sourceCode2.getTokenAfter(operatorToken);
          const textBefore = sourceCode2.text.slice(
            tokenBefore.range[1],
            operatorToken.range[0]
          );
          const textAfter = sourceCode2.text.slice(
            operatorToken.range[1],
            tokenAfter.range[0]
          );
          const hasLinebreakBefore = !astUtils2.isTokenOnSameLine(
            tokenBefore,
            operatorToken
          );
          const hasLinebreakAfter = !astUtils2.isTokenOnSameLine(
            operatorToken,
            tokenAfter
          );
          let newTextBefore, newTextAfter;
          if (hasLinebreakBefore !== hasLinebreakAfter && desiredStyle !== "none") {
            if (sourceCode2.getTokenBefore(operatorToken, {
              includeComments: true
            }) !== tokenBefore && sourceCode2.getTokenAfter(operatorToken, {
              includeComments: true
            }) !== tokenAfter) {
              return null;
            }
            newTextBefore = textAfter;
            newTextAfter = textBefore;
          } else {
            const LINEBREAK_REGEX = astUtils2.createGlobalLinebreakMatcher();
            newTextBefore = desiredStyle === "before" || textBefore.trim() ? textBefore : textBefore.replace(LINEBREAK_REGEX, "");
            newTextAfter = desiredStyle === "after" || textAfter.trim() ? textAfter : textAfter.replace(LINEBREAK_REGEX, "");
            if (newTextBefore === textBefore && newTextAfter === textAfter) {
              return null;
            }
          }
          if (newTextAfter === "" && tokenAfter.type === "Punctuator" && "+-".includes(operatorToken.value) && tokenAfter.value === operatorToken.value) {
            newTextAfter += " ";
          }
          return fixer.replaceTextRange(
            [tokenBefore.range[1], tokenAfter.range[0]],
            newTextBefore + operatorToken.value + newTextAfter
          );
        };
      }
      function validateNode(node2, rightSide, operator) {
        const operatorToken = sourceCode2.getTokenBefore(
          rightSide,
          (token) => token.value === operator
        );
        const leftToken = sourceCode2.getTokenBefore(operatorToken);
        const rightToken = sourceCode2.getTokenAfter(operatorToken);
        const operatorStyleOverride = styleOverrides[operator];
        const style = operatorStyleOverride || globalStyle;
        const fix = getFixer(operatorToken, style);
        if (astUtils2.isTokenOnSameLine(leftToken, operatorToken) && astUtils2.isTokenOnSameLine(operatorToken, rightToken)) ;
        else if (operatorStyleOverride !== "ignore" && !astUtils2.isTokenOnSameLine(leftToken, operatorToken) && !astUtils2.isTokenOnSameLine(operatorToken, rightToken)) {
          context.report({
            node: node2,
            loc: operatorToken.loc,
            messageId: "badLinebreak",
            data: {
              operator
            },
            fix
          });
        } else if (style === "before" && astUtils2.isTokenOnSameLine(leftToken, operatorToken)) {
          context.report({
            node: node2,
            loc: operatorToken.loc,
            messageId: "operatorAtBeginning",
            data: {
              operator
            },
            fix
          });
        } else if (style === "after" && astUtils2.isTokenOnSameLine(operatorToken, rightToken)) {
          context.report({
            node: node2,
            loc: operatorToken.loc,
            messageId: "operatorAtEnd",
            data: {
              operator
            },
            fix
          });
        } else if (style === "none") {
          context.report({
            node: node2,
            loc: operatorToken.loc,
            messageId: "noLinebreak",
            data: {
              operator
            },
            fix
          });
        }
      }
      function validateBinaryExpression(node2) {
        validateNode(node2, node2.right, node2.operator);
      }
      return {
        BinaryExpression: validateBinaryExpression,
        LogicalExpression: validateBinaryExpression,
        AssignmentExpression: validateBinaryExpression,
        VariableDeclarator(node2) {
          if (node2.init) {
            validateNode(node2, node2.init, "=");
          }
        },
        PropertyDefinition(node2) {
          if (node2.value) {
            validateNode(node2, node2.value, "=");
          }
        },
        ConditionalExpression(node2) {
          validateNode(node2, node2.consequent, "?");
          validateNode(node2, node2.alternate, ":");
        }
      };
    }
  };
  return operatorLinebreak;
}
var paddedBlocks;
var hasRequiredPaddedBlocks;
function requirePaddedBlocks() {
  if (hasRequiredPaddedBlocks) return paddedBlocks;
  hasRequiredPaddedBlocks = 1;
  const astUtils2 = requireAstUtils();
  paddedBlocks = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "padded-blocks",
              url: "https://eslint.style/rules/padded-blocks"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow padding within blocks",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/padded-blocks"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: ["always", "never"]
            },
            {
              type: "object",
              properties: {
                blocks: {
                  enum: ["always", "never"]
                },
                switches: {
                  enum: ["always", "never"]
                },
                classes: {
                  enum: ["always", "never"]
                }
              },
              additionalProperties: false,
              minProperties: 1
            }
          ]
        },
        {
          type: "object",
          properties: {
            allowSingleLineBlocks: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        alwaysPadBlock: "Block must be padded by blank lines.",
        neverPadBlock: "Block must not be padded by blank lines."
      }
    },
    create(context) {
      const options = {};
      const typeOptions = context.options[0] || "always";
      const exceptOptions = context.options[1] || {};
      if (typeof typeOptions === "string") {
        const shouldHavePadding = typeOptions === "always";
        options.blocks = shouldHavePadding;
        options.switches = shouldHavePadding;
        options.classes = shouldHavePadding;
      } else {
        if (Object.hasOwn(typeOptions, "blocks")) {
          options.blocks = typeOptions.blocks === "always";
        }
        if (Object.hasOwn(typeOptions, "switches")) {
          options.switches = typeOptions.switches === "always";
        }
        if (Object.hasOwn(typeOptions, "classes")) {
          options.classes = typeOptions.classes === "always";
        }
      }
      if (Object.hasOwn(exceptOptions, "allowSingleLineBlocks")) {
        options.allowSingleLineBlocks = exceptOptions.allowSingleLineBlocks === true;
      }
      const sourceCode2 = context.sourceCode;
      function getOpenBrace(node2) {
        if (node2.type === "SwitchStatement") {
          return sourceCode2.getTokenBefore(node2.cases[0]);
        }
        if (node2.type === "StaticBlock") {
          return sourceCode2.getFirstToken(node2, { skip: 1 });
        }
        return sourceCode2.getFirstToken(node2);
      }
      function isComment(node2) {
        return node2.type === "Line" || node2.type === "Block";
      }
      function isPaddingBetweenTokens(first, second) {
        return second.loc.start.line - first.loc.end.line >= 2;
      }
      function getFirstBlockToken(token) {
        let prev, first = token;
        do {
          prev = first;
          first = sourceCode2.getTokenAfter(first, {
            includeComments: true
          });
        } while (isComment(first) && first.loc.start.line === prev.loc.end.line);
        return first;
      }
      function getLastBlockToken(token) {
        let last = token, next;
        do {
          next = last;
          last = sourceCode2.getTokenBefore(last, {
            includeComments: true
          });
        } while (isComment(last) && last.loc.end.line === next.loc.start.line);
        return last;
      }
      function requirePaddingFor(node2) {
        switch (node2.type) {
          case "BlockStatement":
          case "StaticBlock":
            return options.blocks;
          case "SwitchStatement":
            return options.switches;
          case "ClassBody":
            return options.classes;
          /* c8 ignore next */
          default:
            throw new Error("unreachable");
        }
      }
      function checkPadding(node2) {
        const openBrace = getOpenBrace(node2), firstBlockToken = getFirstBlockToken(openBrace), tokenBeforeFirst = sourceCode2.getTokenBefore(firstBlockToken, {
          includeComments: true
        }), closeBrace = sourceCode2.getLastToken(node2), lastBlockToken = getLastBlockToken(closeBrace), tokenAfterLast = sourceCode2.getTokenAfter(lastBlockToken, {
          includeComments: true
        }), blockHasTopPadding = isPaddingBetweenTokens(
          tokenBeforeFirst,
          firstBlockToken
        ), blockHasBottomPadding = isPaddingBetweenTokens(
          lastBlockToken,
          tokenAfterLast
        );
        if (options.allowSingleLineBlocks && astUtils2.isTokenOnSameLine(tokenBeforeFirst, tokenAfterLast)) {
          return;
        }
        if (requirePaddingFor(node2)) {
          if (!blockHasTopPadding) {
            context.report({
              node: node2,
              loc: {
                start: tokenBeforeFirst.loc.start,
                end: firstBlockToken.loc.start
              },
              fix(fixer) {
                return fixer.insertTextAfter(
                  tokenBeforeFirst,
                  "\n"
                );
              },
              messageId: "alwaysPadBlock"
            });
          }
          if (!blockHasBottomPadding) {
            context.report({
              node: node2,
              loc: {
                end: tokenAfterLast.loc.start,
                start: lastBlockToken.loc.end
              },
              fix(fixer) {
                return fixer.insertTextBefore(tokenAfterLast, "\n");
              },
              messageId: "alwaysPadBlock"
            });
          }
        } else {
          if (blockHasTopPadding) {
            context.report({
              node: node2,
              loc: {
                start: tokenBeforeFirst.loc.start,
                end: firstBlockToken.loc.start
              },
              fix(fixer) {
                return fixer.replaceTextRange(
                  [
                    tokenBeforeFirst.range[1],
                    firstBlockToken.range[0] - firstBlockToken.loc.start.column
                  ],
                  "\n"
                );
              },
              messageId: "neverPadBlock"
            });
          }
          if (blockHasBottomPadding) {
            context.report({
              node: node2,
              loc: {
                end: tokenAfterLast.loc.start,
                start: lastBlockToken.loc.end
              },
              messageId: "neverPadBlock",
              fix(fixer) {
                return fixer.replaceTextRange(
                  [
                    lastBlockToken.range[1],
                    tokenAfterLast.range[0] - tokenAfterLast.loc.start.column
                  ],
                  "\n"
                );
              }
            });
          }
        }
      }
      const rule = {};
      if (Object.hasOwn(options, "switches")) {
        rule.SwitchStatement = function(node2) {
          if (node2.cases.length === 0) {
            return;
          }
          checkPadding(node2);
        };
      }
      if (Object.hasOwn(options, "blocks")) {
        rule.BlockStatement = function(node2) {
          if (node2.body.length === 0) {
            return;
          }
          checkPadding(node2);
        };
        rule.StaticBlock = rule.BlockStatement;
      }
      if (Object.hasOwn(options, "classes")) {
        rule.ClassBody = function(node2) {
          if (node2.body.length === 0) {
            return;
          }
          checkPadding(node2);
        };
      }
      return rule;
    }
  };
  return paddedBlocks;
}
var paddingLineBetweenStatements;
var hasRequiredPaddingLineBetweenStatements;
function requirePaddingLineBetweenStatements() {
  if (hasRequiredPaddingLineBetweenStatements) return paddingLineBetweenStatements;
  hasRequiredPaddingLineBetweenStatements = 1;
  const astUtils2 = requireAstUtils();
  const LT = `[${Array.from(astUtils2.LINEBREAKS).join("")}]`;
  const PADDING_LINE_SEQUENCE = new RegExp(
    String.raw`^(\s*?${LT})\s*${LT}(\s*;?)$`,
    "u"
  );
  const CJS_EXPORT = /^(?:module\s*\.\s*)?exports(?:\s*\.|\s*\[|$)/u;
  const CJS_IMPORT = /^require\(/u;
  function newKeywordTester(keyword2) {
    return {
      test: (node2, sourceCode2) => sourceCode2.getFirstToken(node2).value === keyword2
    };
  }
  function newSinglelineKeywordTester(keyword2) {
    return {
      test: (node2, sourceCode2) => node2.loc.start.line === node2.loc.end.line && sourceCode2.getFirstToken(node2).value === keyword2
    };
  }
  function newMultilineKeywordTester(keyword2) {
    return {
      test: (node2, sourceCode2) => node2.loc.start.line !== node2.loc.end.line && sourceCode2.getFirstToken(node2).value === keyword2
    };
  }
  function newNodeTypeTester(type2) {
    return {
      test: (node2) => node2.type === type2
    };
  }
  function isIIFEStatement(node2) {
    if (node2.type === "ExpressionStatement") {
      let call = astUtils2.skipChainExpression(node2.expression);
      if (call.type === "UnaryExpression") {
        call = astUtils2.skipChainExpression(call.argument);
      }
      return call.type === "CallExpression" && astUtils2.isFunction(call.callee);
    }
    return false;
  }
  function isBlockLikeStatement(sourceCode2, node2) {
    if (node2.type === "DoWhileStatement" && node2.body.type === "BlockStatement") {
      return true;
    }
    if (isIIFEStatement(node2)) {
      return true;
    }
    const lastToken = sourceCode2.getLastToken(
      node2,
      astUtils2.isNotSemicolonToken
    );
    const belongingNode = lastToken && astUtils2.isClosingBraceToken(lastToken) ? sourceCode2.getNodeByRangeIndex(lastToken.range[0]) : null;
    return Boolean(belongingNode) && (belongingNode.type === "BlockStatement" || belongingNode.type === "SwitchStatement");
  }
  function getActualLastToken(sourceCode2, node2) {
    const semiToken = sourceCode2.getLastToken(node2);
    const prevToken = sourceCode2.getTokenBefore(semiToken);
    const nextToken = sourceCode2.getTokenAfter(semiToken);
    const isSemicolonLessStyle = Boolean(
      prevToken && nextToken && prevToken.range[0] >= node2.range[0] && astUtils2.isSemicolonToken(semiToken) && semiToken.loc.start.line !== prevToken.loc.end.line && semiToken.loc.end.line === nextToken.loc.start.line
    );
    return isSemicolonLessStyle ? prevToken : semiToken;
  }
  function replacerToRemovePaddingLines(_, trailingSpaces, indentSpaces) {
    return trailingSpaces + indentSpaces;
  }
  function verifyForAny() {
  }
  function verifyForNever(context, _, nextNode, paddingLines) {
    if (paddingLines.length === 0) {
      return;
    }
    context.report({
      node: nextNode,
      messageId: "unexpectedBlankLine",
      fix(fixer) {
        if (paddingLines.length >= 2) {
          return null;
        }
        const prevToken = paddingLines[0][0];
        const nextToken = paddingLines[0][1];
        const start = prevToken.range[1];
        const end = nextToken.range[0];
        const text = context.sourceCode.text.slice(start, end).replace(PADDING_LINE_SEQUENCE, replacerToRemovePaddingLines);
        return fixer.replaceTextRange([start, end], text);
      }
    });
  }
  function verifyForAlways(context, prevNode, nextNode, paddingLines) {
    if (paddingLines.length > 0) {
      return;
    }
    context.report({
      node: nextNode,
      messageId: "expectedBlankLine",
      fix(fixer) {
        const sourceCode2 = context.sourceCode;
        let prevToken = getActualLastToken(sourceCode2, prevNode);
        const nextToken = sourceCode2.getFirstTokenBetween(prevToken, nextNode, {
          includeComments: true,
          /**
           * Skip the trailing comments of the previous node.
           * This inserts a blank line after the last trailing comment.
           *
           * For example:
           *
           *     foo(); // trailing comment.
           *     // comment.
           *     bar();
           *
           * Get fixed to:
           *
           *     foo(); // trailing comment.
           *
           *     // comment.
           *     bar();
           * @param {Token} token The token to check.
           * @returns {boolean} `true` if the token is not a trailing comment.
           * @private
           */
          filter(token) {
            if (astUtils2.isTokenOnSameLine(prevToken, token)) {
              prevToken = token;
              return false;
            }
            return true;
          }
        }) || nextNode;
        const insertText = astUtils2.isTokenOnSameLine(prevToken, nextToken) ? "\n\n" : "\n";
        return fixer.insertTextAfter(prevToken, insertText);
      }
    });
  }
  const PaddingTypes = {
    any: { verify: verifyForAny },
    never: { verify: verifyForNever },
    always: { verify: verifyForAlways }
  };
  const StatementTypes = {
    "*": { test: () => true },
    "block-like": {
      test: (node2, sourceCode2) => isBlockLikeStatement(sourceCode2, node2)
    },
    "cjs-export": {
      test: (node2, sourceCode2) => node2.type === "ExpressionStatement" && node2.expression.type === "AssignmentExpression" && CJS_EXPORT.test(sourceCode2.getText(node2.expression.left))
    },
    "cjs-import": {
      test: (node2, sourceCode2) => node2.type === "VariableDeclaration" && node2.declarations.length > 0 && Boolean(node2.declarations[0].init) && CJS_IMPORT.test(sourceCode2.getText(node2.declarations[0].init))
    },
    directive: {
      test: astUtils2.isDirective
    },
    expression: {
      test: (node2) => node2.type === "ExpressionStatement" && !astUtils2.isDirective(node2)
    },
    iife: {
      test: isIIFEStatement
    },
    "multiline-block-like": {
      test: (node2, sourceCode2) => node2.loc.start.line !== node2.loc.end.line && isBlockLikeStatement(sourceCode2, node2)
    },
    "multiline-expression": {
      test: (node2) => node2.loc.start.line !== node2.loc.end.line && node2.type === "ExpressionStatement" && !astUtils2.isDirective(node2)
    },
    "multiline-const": newMultilineKeywordTester("const"),
    "multiline-let": newMultilineKeywordTester("let"),
    "multiline-var": newMultilineKeywordTester("var"),
    "singleline-const": newSinglelineKeywordTester("const"),
    "singleline-let": newSinglelineKeywordTester("let"),
    "singleline-var": newSinglelineKeywordTester("var"),
    block: newNodeTypeTester("BlockStatement"),
    empty: newNodeTypeTester("EmptyStatement"),
    function: newNodeTypeTester("FunctionDeclaration"),
    break: newKeywordTester("break"),
    case: newKeywordTester("case"),
    class: newKeywordTester("class"),
    const: newKeywordTester("const"),
    continue: newKeywordTester("continue"),
    debugger: newKeywordTester("debugger"),
    default: newKeywordTester("default"),
    do: newKeywordTester("do"),
    export: newKeywordTester("export"),
    for: newKeywordTester("for"),
    if: newKeywordTester("if"),
    import: newKeywordTester("import"),
    let: newKeywordTester("let"),
    return: newKeywordTester("return"),
    switch: newKeywordTester("switch"),
    throw: newKeywordTester("throw"),
    try: newKeywordTester("try"),
    var: newKeywordTester("var"),
    while: newKeywordTester("while"),
    with: newKeywordTester("with")
  };
  paddingLineBetweenStatements = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "padding-line-between-statements",
              url: "https://eslint.style/rules/padding-line-between-statements"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow padding lines between statements",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/padding-line-between-statements"
      },
      fixable: "whitespace",
      schema: {
        definitions: {
          paddingType: {
            enum: Object.keys(PaddingTypes)
          },
          statementType: {
            anyOf: [
              { enum: Object.keys(StatementTypes) },
              {
                type: "array",
                items: { enum: Object.keys(StatementTypes) },
                minItems: 1,
                uniqueItems: true
              }
            ]
          }
        },
        type: "array",
        items: {
          type: "object",
          properties: {
            blankLine: { $ref: "#/definitions/paddingType" },
            prev: { $ref: "#/definitions/statementType" },
            next: { $ref: "#/definitions/statementType" }
          },
          additionalProperties: false,
          required: ["blankLine", "prev", "next"]
        }
      },
      messages: {
        unexpectedBlankLine: "Unexpected blank line before this statement.",
        expectedBlankLine: "Expected blank line before this statement."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const configureList = context.options || [];
      let scopeInfo = null;
      function enterScope() {
        scopeInfo = {
          upper: scopeInfo,
          prevNode: null
        };
      }
      function exitScope() {
        scopeInfo = scopeInfo.upper;
      }
      function match(node2, type2) {
        let innerStatementNode = node2;
        while (innerStatementNode.type === "LabeledStatement") {
          innerStatementNode = innerStatementNode.body;
        }
        if (Array.isArray(type2)) {
          return type2.some(match.bind(null, innerStatementNode));
        }
        return StatementTypes[type2].test(innerStatementNode, sourceCode2);
      }
      function getPaddingType(prevNode, nextNode) {
        for (let i2 = configureList.length - 1; i2 >= 0; --i2) {
          const configure = configureList[i2];
          const matched = match(prevNode, configure.prev) && match(nextNode, configure.next);
          if (matched) {
            return PaddingTypes[configure.blankLine];
          }
        }
        return PaddingTypes.any;
      }
      function getPaddingLineSequences(prevNode, nextNode) {
        const pairs = [];
        let prevToken = getActualLastToken(sourceCode2, prevNode);
        if (nextNode.loc.start.line - prevToken.loc.end.line >= 2) {
          do {
            const token = sourceCode2.getTokenAfter(prevToken, {
              includeComments: true
            });
            if (token.loc.start.line - prevToken.loc.end.line >= 2) {
              pairs.push([prevToken, token]);
            }
            prevToken = token;
          } while (prevToken.range[0] < nextNode.range[0]);
        }
        return pairs;
      }
      function verify(node2) {
        const parentType = node2.parent.type;
        const validParent = astUtils2.STATEMENT_LIST_PARENTS.has(parentType) || parentType === "SwitchStatement";
        if (!validParent) {
          return;
        }
        const prevNode = scopeInfo.prevNode;
        if (prevNode) {
          const type2 = getPaddingType(prevNode, node2);
          const paddingLines = getPaddingLineSequences(prevNode, node2);
          type2.verify(context, prevNode, node2, paddingLines);
        }
        scopeInfo.prevNode = node2;
      }
      function verifyThenEnterScope(node2) {
        verify(node2);
        enterScope();
      }
      return {
        Program: enterScope,
        BlockStatement: enterScope,
        SwitchStatement: enterScope,
        StaticBlock: enterScope,
        "Program:exit": exitScope,
        "BlockStatement:exit": exitScope,
        "SwitchStatement:exit": exitScope,
        "StaticBlock:exit": exitScope,
        ":statement": verify,
        SwitchCase: verifyThenEnterScope,
        "SwitchCase:exit": exitScope
      };
    }
  };
  return paddingLineBetweenStatements;
}
var preferArrowCallback;
var hasRequiredPreferArrowCallback;
function requirePreferArrowCallback() {
  if (hasRequiredPreferArrowCallback) return preferArrowCallback;
  hasRequiredPreferArrowCallback = 1;
  const astUtils2 = requireAstUtils();
  function isFunctionName(variable) {
    return variable && variable.defs[0].type === "FunctionName";
  }
  function checkMetaProperty(node2, metaName, propertyName) {
    return node2.meta.name === metaName && node2.property.name === propertyName;
  }
  function getVariableOfArguments(scope) {
    const variables = scope.variables;
    for (let i2 = 0; i2 < variables.length; ++i2) {
      const variable = variables[i2];
      if (variable.name === "arguments") {
        return variable.identifiers.length === 0 ? variable : null;
      }
    }
    return null;
  }
  function getCallbackInfo(node2) {
    const retv = { isCallback: false, isLexicalThis: false };
    let currentNode = node2;
    let parent = node2.parent;
    let bound = false;
    while (currentNode) {
      switch (parent.type) {
        // Checks parents recursively.
        case "LogicalExpression":
        case "ChainExpression":
        case "ConditionalExpression":
          break;
        // Checks whether the parent node is `.bind(this)` call.
        case "MemberExpression":
          if (parent.object === currentNode && !parent.property.computed && parent.property.type === "Identifier" && parent.property.name === "bind") {
            const maybeCallee = parent.parent.type === "ChainExpression" ? parent.parent : parent;
            if (astUtils2.isCallee(maybeCallee)) {
              if (!bound) {
                bound = true;
                retv.isLexicalThis = maybeCallee.parent.arguments.length === 1 && maybeCallee.parent.arguments[0].type === "ThisExpression";
              }
              parent = maybeCallee.parent;
            } else {
              return retv;
            }
          } else {
            return retv;
          }
          break;
        // Checks whether the node is a callback.
        case "CallExpression":
        case "NewExpression":
          if (parent.callee !== currentNode) {
            retv.isCallback = true;
          }
          return retv;
        default:
          return retv;
      }
      currentNode = parent;
      parent = parent.parent;
    }
    throw new Error("unreachable");
  }
  function hasDuplicateParams(paramsList) {
    return paramsList.every((param) => param.type === "Identifier") && paramsList.length !== new Set(paramsList.map((param) => param.name)).size;
  }
  preferArrowCallback = {
    meta: {
      type: "suggestion",
      dialects: ["javascript", "typescript"],
      language: "javascript",
      defaultOptions: [
        { allowNamedFunctions: false, allowUnboundThis: true }
      ],
      docs: {
        description: "Require using arrow functions for callbacks",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/prefer-arrow-callback"
      },
      schema: [
        {
          type: "object",
          properties: {
            allowNamedFunctions: {
              type: "boolean"
            },
            allowUnboundThis: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        preferArrowCallback: "Unexpected function expression."
      }
    },
    create(context) {
      const [{ allowNamedFunctions, allowUnboundThis }] = context.options;
      const sourceCode2 = context.sourceCode;
      let stack = [];
      function enterScope() {
        stack.push({ this: false, super: false, meta: false });
      }
      function exitScope() {
        return stack.pop();
      }
      return {
        // Reset internal state.
        Program() {
          stack = [];
        },
        // If there are below, it cannot replace with arrow functions merely.
        ThisExpression() {
          const info = stack.at(-1);
          if (info) {
            info.this = true;
          }
        },
        Super() {
          const info = stack.at(-1);
          if (info) {
            info.super = true;
          }
        },
        MetaProperty(node2) {
          const info = stack.at(-1);
          if (info && checkMetaProperty(node2, "new", "target")) {
            info.meta = true;
          }
        },
        // To skip nested scopes.
        FunctionDeclaration: enterScope,
        "FunctionDeclaration:exit": exitScope,
        // Main.
        FunctionExpression: enterScope,
        "FunctionExpression:exit"(node2) {
          const scopeInfo = exitScope();
          if (allowNamedFunctions && node2.id && node2.id.name) {
            return;
          }
          if (node2.generator) {
            return;
          }
          const nameVar = sourceCode2.getDeclaredVariables(node2)[0];
          if (isFunctionName(nameVar) && nameVar.references.length > 0) {
            return;
          }
          const variable = getVariableOfArguments(
            sourceCode2.getScope(node2)
          );
          if (variable && variable.references.length > 0) {
            return;
          }
          const callbackInfo = getCallbackInfo(node2);
          if (callbackInfo.isCallback && (!allowUnboundThis || !scopeInfo.this || callbackInfo.isLexicalThis) && !scopeInfo.super && !scopeInfo.meta) {
            context.report({
              node: node2,
              messageId: "preferArrowCallback",
              *fix(fixer) {
                if (!callbackInfo.isLexicalThis && scopeInfo.this || hasDuplicateParams(node2.params)) {
                  return;
                }
                if (node2.params.length && node2.params[0].name === "this") {
                  return;
                }
                if (callbackInfo.isLexicalThis) {
                  const memberNode = node2.parent;
                  if (memberNode.type !== "MemberExpression") {
                    return;
                  }
                  const callNode = memberNode.parent;
                  const firstTokenToRemove = sourceCode2.getTokenAfter(
                    memberNode.object,
                    astUtils2.isNotClosingParenToken
                  );
                  const lastTokenToRemove = sourceCode2.getLastToken(callNode);
                  if (astUtils2.isParenthesised(
                    sourceCode2,
                    memberNode
                  )) {
                    return;
                  }
                  if (sourceCode2.commentsExistBetween(
                    firstTokenToRemove,
                    lastTokenToRemove
                  )) {
                    return;
                  }
                  yield fixer.removeRange([
                    firstTokenToRemove.range[0],
                    lastTokenToRemove.range[1]
                  ]);
                }
                const functionToken = sourceCode2.getFirstToken(
                  node2,
                  node2.async ? 1 : 0
                );
                const leftParenToken = sourceCode2.getTokenAfter(
                  functionToken,
                  astUtils2.isOpeningParenToken
                );
                const tokenBeforeBody = sourceCode2.getTokenBefore(
                  node2.body
                );
                if (sourceCode2.commentsExistBetween(
                  functionToken,
                  leftParenToken
                )) {
                  yield fixer.remove(functionToken);
                  if (node2.id) {
                    yield fixer.remove(node2.id);
                  }
                } else {
                  yield fixer.removeRange([
                    functionToken.range[0],
                    leftParenToken.range[0]
                  ]);
                }
                yield fixer.insertTextAfter(tokenBeforeBody, " =>");
                let replacedNode = callbackInfo.isLexicalThis ? node2.parent.parent : node2;
                if (replacedNode.type === "ChainExpression") {
                  replacedNode = replacedNode.parent;
                }
                if (replacedNode.parent.type !== "CallExpression" && replacedNode.parent.type !== "ConditionalExpression" && !astUtils2.isParenthesised(
                  sourceCode2,
                  replacedNode
                ) && !astUtils2.isParenthesised(sourceCode2, node2)) {
                  yield fixer.insertTextBefore(replacedNode, "(");
                  yield fixer.insertTextAfter(replacedNode, ")");
                }
              }
            });
          }
        }
      };
    }
  };
  return preferArrowCallback;
}
var preferConst;
var hasRequiredPreferConst;
function requirePreferConst() {
  if (hasRequiredPreferConst) return preferConst;
  hasRequiredPreferConst = 1;
  const FixTracker = requireFixTracker();
  const astUtils2 = requireAstUtils();
  const PATTERN_TYPE = /^(?:.+?Pattern|RestElement|SpreadProperty|ExperimentalRestProperty|Property)$/u;
  const DECLARATION_HOST_TYPE = /^(?:Program|BlockStatement|StaticBlock|SwitchCase)$/u;
  const DESTRUCTURING_HOST_TYPE = /^(?:VariableDeclarator|AssignmentExpression)$/u;
  function isInitOfForStatement(node2) {
    return node2.parent.type === "ForStatement" && node2.parent.init === node2;
  }
  function canBecomeVariableDeclaration(identifier) {
    let node2 = identifier.parent;
    while (PATTERN_TYPE.test(node2.type)) {
      node2 = node2.parent;
    }
    return node2.type === "VariableDeclarator" || node2.type === "AssignmentExpression" && node2.parent.type === "ExpressionStatement" && DECLARATION_HOST_TYPE.test(node2.parent.parent.type);
  }
  function isOuterVariableInDestructing(name, initScope) {
    if (initScope.through.some(
      (ref2) => ref2.resolved && ref2.resolved.name === name
    )) {
      return true;
    }
    const variable = astUtils2.getVariableByName(initScope, name);
    if (variable !== null) {
      return variable.defs.some((def) => def.type === "Parameter");
    }
    return false;
  }
  function getDestructuringHost(reference) {
    if (!reference.isWrite()) {
      return null;
    }
    let node2 = reference.identifier.parent;
    while (PATTERN_TYPE.test(node2.type)) {
      node2 = node2.parent;
    }
    if (!DESTRUCTURING_HOST_TYPE.test(node2.type)) {
      return null;
    }
    return node2;
  }
  function hasMemberExpressionAssignment(node2) {
    switch (node2.type) {
      case "ObjectPattern":
        return node2.properties.some((prop) => {
          if (prop) {
            return hasMemberExpressionAssignment(
              prop.argument || prop.value
            );
          }
          return false;
        });
      case "ArrayPattern":
        return node2.elements.some((element) => {
          if (element) {
            return hasMemberExpressionAssignment(element);
          }
          return false;
        });
      case "AssignmentPattern":
        return hasMemberExpressionAssignment(node2.left);
      case "MemberExpression":
        return true;
    }
    return false;
  }
  function getIdentifierIfShouldBeConst(variable, ignoreReadBeforeAssign) {
    if (variable.eslintUsed && variable.scope.type === "global") {
      return null;
    }
    let writer = null;
    let isReadBeforeInit = false;
    const references = variable.references;
    for (let i2 = 0; i2 < references.length; ++i2) {
      const reference = references[i2];
      if (reference.isWrite()) {
        const isReassigned = writer !== null && writer.identifier !== reference.identifier;
        if (isReassigned) {
          return null;
        }
        const destructuringHost = getDestructuringHost(reference);
        if (destructuringHost !== null && destructuringHost.left !== void 0) {
          const leftNode = destructuringHost.left;
          let hasOuterVariables = false, hasNonIdentifiers = false;
          if (leftNode.type === "ObjectPattern") {
            const properties2 = leftNode.properties;
            hasOuterVariables = properties2.filter((prop) => prop.value).map((prop) => prop.value.name).some(
              (name) => isOuterVariableInDestructing(name, variable.scope)
            );
            hasNonIdentifiers = hasMemberExpressionAssignment(leftNode);
          } else if (leftNode.type === "ArrayPattern") {
            const elements = leftNode.elements;
            hasOuterVariables = elements.map((element) => element && element.name).some(
              (name) => isOuterVariableInDestructing(name, variable.scope)
            );
            hasNonIdentifiers = hasMemberExpressionAssignment(leftNode);
          }
          if (hasOuterVariables || hasNonIdentifiers) {
            return null;
          }
        }
        writer = reference;
      } else if (reference.isRead() && writer === null) {
        if (ignoreReadBeforeAssign) {
          return null;
        }
        isReadBeforeInit = true;
      }
    }
    const shouldBeConst = writer !== null && writer.from === variable.scope && canBecomeVariableDeclaration(writer.identifier);
    if (!shouldBeConst) {
      return null;
    }
    if (isReadBeforeInit) {
      return variable.defs[0].name;
    }
    return writer.identifier;
  }
  function groupByDestructuring(variables, ignoreReadBeforeAssign) {
    const identifierMap = /* @__PURE__ */ new Map();
    for (let i2 = 0; i2 < variables.length; ++i2) {
      const variable = variables[i2];
      const references = variable.references;
      const identifier = getIdentifierIfShouldBeConst(
        variable,
        ignoreReadBeforeAssign
      );
      let prevId = null;
      for (let j = 0; j < references.length; ++j) {
        const reference = references[j];
        const id2 = reference.identifier;
        if (id2 === prevId) {
          continue;
        }
        prevId = id2;
        const group = getDestructuringHost(reference);
        if (group) {
          if (identifierMap.has(group)) {
            identifierMap.get(group).push(identifier);
          } else {
            identifierMap.set(group, [identifier]);
          }
        }
      }
    }
    return identifierMap;
  }
  function findUp(node2, type2, shouldStop) {
    if (!node2 || shouldStop(node2)) {
      return null;
    }
    if (node2.type === type2) {
      return node2;
    }
    return findUp(node2.parent, type2, shouldStop);
  }
  preferConst = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          destructuring: "any",
          ignoreReadBeforeAssign: false
        }
      ],
      docs: {
        description: "Require `const` declarations for variables that are never reassigned after declared",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/prefer-const"
      },
      fixable: "code",
      schema: [
        {
          type: "object",
          properties: {
            destructuring: { enum: ["any", "all"] },
            ignoreReadBeforeAssign: { type: "boolean" }
          },
          additionalProperties: false
        }
      ],
      messages: {
        useConst: "'{{name}}' is never reassigned. Use 'const' instead."
      }
    },
    create(context) {
      const [{ destructuring, ignoreReadBeforeAssign }] = context.options;
      const shouldMatchAnyDestructuredVariable = destructuring !== "all";
      const sourceCode2 = context.sourceCode;
      const variables = [];
      let reportCount = 0;
      let checkedId = null;
      let checkedName = "";
      function checkGroup(nodes) {
        const nodesToReport = nodes.filter(Boolean);
        if (nodes.length && (shouldMatchAnyDestructuredVariable || nodesToReport.length === nodes.length)) {
          const varDeclParent = findUp(
            nodes[0],
            "VariableDeclaration",
            (parentNode) => parentNode.type.endsWith("Statement")
          );
          const isVarDecParentNull = varDeclParent === null;
          if (!isVarDecParentNull && varDeclParent.declarations.length > 0) {
            const firstDeclaration = varDeclParent.declarations[0];
            if (firstDeclaration.init) {
              const firstDecParent = firstDeclaration.init.parent;
              if (firstDecParent.type === "VariableDeclarator") {
                if (firstDecParent.id.name !== checkedName) {
                  checkedName = firstDecParent.id.name;
                  reportCount = 0;
                }
                if (firstDecParent.id.type === "ObjectPattern") {
                  if (firstDecParent.init.name !== checkedName) {
                    checkedName = firstDecParent.init.name;
                    reportCount = 0;
                  }
                }
                if (firstDecParent.id !== checkedId) {
                  checkedId = firstDecParent.id;
                  reportCount = 0;
                }
              }
            }
          }
          let shouldFix = varDeclParent && // Don't do a fix unless all variables in the declarations are initialized (or it's in a for-in or for-of loop)
          (varDeclParent.parent.type === "ForInStatement" || varDeclParent.parent.type === "ForOfStatement" || varDeclParent.declarations.every(
            (declaration) => declaration.init
          )) && /*
          * If options.destructuring is "all", then this warning will not occur unless
          * every assignment in the destructuring should be const. In that case, it's safe
          * to apply the fix.
          */
          nodesToReport.length === nodes.length;
          if (!isVarDecParentNull && varDeclParent.declarations && varDeclParent.declarations.length !== 1) {
            if (varDeclParent && varDeclParent.declarations && varDeclParent.declarations.length >= 1) {
              reportCount += nodesToReport.length;
              let totalDeclarationsCount = 0;
              varDeclParent.declarations.forEach((declaration) => {
                if (declaration.id.type === "ObjectPattern") {
                  totalDeclarationsCount += declaration.id.properties.length;
                } else if (declaration.id.type === "ArrayPattern") {
                  totalDeclarationsCount += declaration.id.elements.length;
                } else {
                  totalDeclarationsCount += 1;
                }
              });
              shouldFix = shouldFix && reportCount === totalDeclarationsCount;
            }
          }
          nodesToReport.forEach((node2) => {
            context.report({
              node: node2,
              messageId: "useConst",
              data: node2,
              fix: shouldFix ? (fixer) => {
                const letKeywordToken = sourceCode2.getFirstToken(
                  varDeclParent,
                  (t2) => t2.value === varDeclParent.kind
                );
                return new FixTracker(fixer, sourceCode2).retainRange(varDeclParent.range).replaceTextRange(
                  letKeywordToken.range,
                  "const"
                );
              } : null
            });
          });
        }
      }
      return {
        "Program:exit"() {
          groupByDestructuring(variables, ignoreReadBeforeAssign).forEach(
            checkGroup
          );
        },
        VariableDeclaration(node2) {
          if (node2.kind === "let" && !isInitOfForStatement(node2)) {
            variables.push(...sourceCode2.getDeclaredVariables(node2));
          }
        }
      };
    }
  };
  return preferConst;
}
var preferDestructuring;
var hasRequiredPreferDestructuring;
function requirePreferDestructuring() {
  if (hasRequiredPreferDestructuring) return preferDestructuring;
  hasRequiredPreferDestructuring = 1;
  const astUtils2 = requireAstUtils();
  const PRECEDENCE_OF_ASSIGNMENT_EXPR = astUtils2.getPrecedence({
    type: "AssignmentExpression"
  });
  preferDestructuring = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require destructuring from arrays and/or objects",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/prefer-destructuring"
      },
      fixable: "code",
      schema: [
        {
          /*
           * old support {array: Boolean, object: Boolean}
           * new support {VariableDeclarator: {}, AssignmentExpression: {}}
           */
          oneOf: [
            {
              type: "object",
              properties: {
                VariableDeclarator: {
                  type: "object",
                  properties: {
                    array: {
                      type: "boolean"
                    },
                    object: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                },
                AssignmentExpression: {
                  type: "object",
                  properties: {
                    array: {
                      type: "boolean"
                    },
                    object: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                }
              },
              additionalProperties: false
            },
            {
              type: "object",
              properties: {
                array: {
                  type: "boolean"
                },
                object: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }
          ]
        },
        {
          type: "object",
          properties: {
            enforceForRenamedProperties: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        preferDestructuring: "Use {{type}} destructuring."
      }
    },
    create(context) {
      const enabledTypes = context.options[0];
      const enforceForRenamedProperties = context.options[1] && context.options[1].enforceForRenamedProperties;
      let normalizedOptions = {
        VariableDeclarator: { array: true, object: true },
        AssignmentExpression: { array: true, object: true }
      };
      if (enabledTypes) {
        normalizedOptions = typeof enabledTypes.array !== "undefined" || typeof enabledTypes.object !== "undefined" ? {
          VariableDeclarator: enabledTypes,
          AssignmentExpression: enabledTypes
        } : enabledTypes;
      }
      function shouldCheck(nodeType, destructuringType) {
        return normalizedOptions && normalizedOptions[nodeType] && normalizedOptions[nodeType][destructuringType];
      }
      function isArrayIndexAccess(node2) {
        return Number.isInteger(node2.property.value);
      }
      function report(reportNode, type2, fix) {
        context.report({
          node: reportNode,
          messageId: "preferDestructuring",
          data: { type: type2 },
          fix
        });
      }
      function shouldFix(node2) {
        return node2.type === "VariableDeclarator" && node2.id.type === "Identifier" && node2.init.type === "MemberExpression" && !node2.init.computed && node2.init.property.type === "Identifier" && node2.id.name === node2.init.property.name;
      }
      function fixIntoObjectDestructuring(fixer, node2) {
        const rightNode = node2.init;
        const sourceCode2 = context.sourceCode;
        if (sourceCode2.getCommentsInside(node2).length > sourceCode2.getCommentsInside(rightNode.object).length) {
          return null;
        }
        let objectText = sourceCode2.getText(rightNode.object);
        if (astUtils2.getPrecedence(rightNode.object) < PRECEDENCE_OF_ASSIGNMENT_EXPR) {
          objectText = `(${objectText})`;
        }
        return fixer.replaceText(
          node2,
          `{${rightNode.property.name}} = ${objectText}`
        );
      }
      function performCheck(leftNode, rightNode, reportNode) {
        if (rightNode.type !== "MemberExpression" || rightNode.object.type === "Super" || rightNode.property.type === "PrivateIdentifier") {
          return;
        }
        if (isArrayIndexAccess(rightNode)) {
          if (shouldCheck(reportNode.type, "array")) {
            report(reportNode, "array", null);
          }
          return;
        }
        const fix = shouldFix(reportNode) ? (fixer) => fixIntoObjectDestructuring(fixer, reportNode) : null;
        if (shouldCheck(reportNode.type, "object") && enforceForRenamedProperties) {
          report(reportNode, "object", fix);
          return;
        }
        if (shouldCheck(reportNode.type, "object")) {
          const property = rightNode.property;
          if (property.type === "Literal" && leftNode.name === property.value || property.type === "Identifier" && leftNode.name === property.name && !rightNode.computed) {
            report(reportNode, "object", fix);
          }
        }
      }
      function checkVariableDeclarator(node2) {
        if (!node2.init) {
          return;
        }
        if (node2.parent.kind === "using" || node2.parent.kind === "await using") {
          return;
        }
        if (node2.init.type !== "MemberExpression") {
          return;
        }
        performCheck(node2.id, node2.init, node2);
      }
      function checkAssignmentExpression(node2) {
        if (node2.operator === "=") {
          performCheck(node2.left, node2.right, node2);
        }
      }
      return {
        VariableDeclarator: checkVariableDeclarator,
        AssignmentExpression: checkAssignmentExpression
      };
    }
  };
  return preferDestructuring;
}
var preferExponentiationOperator;
var hasRequiredPreferExponentiationOperator;
function requirePreferExponentiationOperator() {
  if (hasRequiredPreferExponentiationOperator) return preferExponentiationOperator;
  hasRequiredPreferExponentiationOperator = 1;
  const astUtils2 = requireAstUtils();
  const { CALL, ReferenceTracker } = /* @__PURE__ */ requireEslintUtils();
  const PRECEDENCE_OF_EXPONENTIATION_EXPR = astUtils2.getPrecedence({
    type: "BinaryExpression",
    operator: "**"
  });
  function doesBaseNeedParens(base) {
    return (
      // '**' is right-associative, parens are needed when Math.pow(a ** b, c) is converted to (a ** b) ** c
      astUtils2.getPrecedence(base) <= PRECEDENCE_OF_EXPONENTIATION_EXPR || // An unary operator cannot be used immediately before an exponentiation expression
      base.type === "AwaitExpression" || base.type === "UnaryExpression"
    );
  }
  function doesExponentNeedParens(exponent) {
    return astUtils2.getPrecedence(exponent) < PRECEDENCE_OF_EXPONENTIATION_EXPR;
  }
  function doesExponentiationExpressionNeedParens(node2, sourceCode2) {
    const parent = node2.parent.type === "ChainExpression" ? node2.parent.parent : node2.parent;
    const parentPrecedence = astUtils2.getPrecedence(parent);
    const needsParens = parent.type === "ClassDeclaration" || parent.type.endsWith("Expression") && (parentPrecedence === -1 || parentPrecedence >= PRECEDENCE_OF_EXPONENTIATION_EXPR) && !(parent.type === "BinaryExpression" && parent.operator === "**" && parent.right === node2) && !((parent.type === "CallExpression" || parent.type === "NewExpression") && parent.arguments.includes(node2)) && !(parent.type === "MemberExpression" && parent.computed && parent.property === node2) && !(parent.type === "ArrayExpression");
    return needsParens && !astUtils2.isParenthesised(sourceCode2, node2);
  }
  function parenthesizeIfShould(text, shouldParenthesize) {
    return shouldParenthesize ? `(${text})` : text;
  }
  preferExponentiationOperator = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow the use of `Math.pow` in favor of the `**` operator",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/prefer-exponentiation-operator"
      },
      schema: [],
      fixable: "code",
      messages: {
        useExponentiation: "Use the '**' operator instead of 'Math.pow'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function report(node2) {
        context.report({
          node: node2,
          messageId: "useExponentiation",
          fix(fixer) {
            if (node2.arguments.length !== 2 || node2.arguments.some(
              (arg) => arg.type === "SpreadElement"
            ) || sourceCode2.getCommentsInside(node2).length > 0) {
              return null;
            }
            const base = node2.arguments[0], exponent = node2.arguments[1], baseText = sourceCode2.getText(base), exponentText = sourceCode2.getText(exponent), shouldParenthesizeBase = doesBaseNeedParens(base), shouldParenthesizeExponent = doesExponentNeedParens(exponent), shouldParenthesizeAll = doesExponentiationExpressionNeedParens(
              node2,
              sourceCode2
            );
            let prefix = "", suffix = "";
            if (!shouldParenthesizeAll) {
              if (!shouldParenthesizeBase) {
                const firstReplacementToken = sourceCode2.getFirstToken(base), tokenBefore = sourceCode2.getTokenBefore(node2);
                if (tokenBefore && tokenBefore.range[1] === node2.range[0] && !astUtils2.canTokensBeAdjacent(
                  tokenBefore,
                  firstReplacementToken
                )) {
                  prefix = " ";
                }
              }
              if (!shouldParenthesizeExponent) {
                const lastReplacementToken = sourceCode2.getLastToken(exponent), tokenAfter = sourceCode2.getTokenAfter(node2);
                if (tokenAfter && node2.range[1] === tokenAfter.range[0] && !astUtils2.canTokensBeAdjacent(
                  lastReplacementToken,
                  tokenAfter
                )) {
                  suffix = " ";
                }
              }
            }
            const baseReplacement = parenthesizeIfShould(
              baseText,
              shouldParenthesizeBase
            ), exponentReplacement = parenthesizeIfShould(
              exponentText,
              shouldParenthesizeExponent
            ), replacement = parenthesizeIfShould(
              `${baseReplacement}**${exponentReplacement}`,
              shouldParenthesizeAll
            );
            return fixer.replaceText(
              node2,
              `${prefix}${replacement}${suffix}`
            );
          }
        });
      }
      return {
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          const tracker = new ReferenceTracker(scope);
          const trackMap = {
            Math: {
              pow: { [CALL]: true }
            }
          };
          for (const { node: refNode } of tracker.iterateGlobalReferences(
            trackMap
          )) {
            report(refNode);
          }
        }
      };
    }
  };
  return preferExponentiationOperator;
}
var preferNamedCaptureGroup;
var hasRequiredPreferNamedCaptureGroup;
function requirePreferNamedCaptureGroup() {
  if (hasRequiredPreferNamedCaptureGroup) return preferNamedCaptureGroup;
  hasRequiredPreferNamedCaptureGroup = 1;
  const {
    CALL,
    CONSTRUCT,
    ReferenceTracker,
    getStringIfConstant
  } = /* @__PURE__ */ requireEslintUtils();
  const regexpp2 = requireRegexpp();
  const parser = new regexpp2.RegExpParser();
  function suggestIfPossible(groupStart, pattern2, rawText, regexNode) {
    switch (regexNode.type) {
      case "Literal":
        if (typeof regexNode.value === "string" && rawText.includes("\\")) {
          return null;
        }
        break;
      case "TemplateLiteral":
        if (regexNode.expressions.length || rawText.slice(1, -1) !== pattern2) {
          return null;
        }
        break;
      default:
        return null;
    }
    const start = regexNode.range[0] + groupStart + 2;
    return [
      {
        fix(fixer) {
          const existingTemps = pattern2.match(/temp\d+/gu) || [];
          const highestTempCount = existingTemps.reduce(
            (previous, next) => Math.max(previous, Number(next.slice("temp".length))),
            0
          );
          return fixer.insertTextBeforeRange(
            [start, start],
            `?<temp${highestTempCount + 1}>`
          );
        },
        messageId: "addGroupName"
      },
      {
        fix(fixer) {
          return fixer.insertTextBeforeRange([start, start], "?:");
        },
        messageId: "addNonCapture"
      }
    ];
  }
  preferNamedCaptureGroup = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Enforce using named capture group in regular expression",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/prefer-named-capture-group"
      },
      hasSuggestions: true,
      schema: [],
      messages: {
        addGroupName: "Add name to capture group.",
        addNonCapture: "Convert group to non-capturing.",
        required: "Capture group '{{group}}' should be converted to a named or non-capturing group."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function checkRegex(pattern2, node2, regexNode, flags2) {
        let ast2;
        try {
          ast2 = parser.parsePattern(pattern2, 0, pattern2.length, {
            unicode: Boolean(flags2 && flags2.includes("u")),
            unicodeSets: Boolean(flags2 && flags2.includes("v"))
          });
        } catch {
          return;
        }
        regexpp2.visitRegExpAST(ast2, {
          onCapturingGroupEnter(group) {
            if (!group.name) {
              const rawText = sourceCode2.getText(regexNode);
              const suggest = suggestIfPossible(
                group.start,
                pattern2,
                rawText,
                regexNode
              );
              context.report({
                node: node2,
                messageId: "required",
                data: {
                  group: group.raw
                },
                suggest
              });
            }
          }
        });
      }
      return {
        Literal(node2) {
          if (node2.regex) {
            checkRegex(
              node2.regex.pattern,
              node2,
              node2,
              node2.regex.flags
            );
          }
        },
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          const tracker = new ReferenceTracker(scope);
          const traceMap = {
            RegExp: {
              [CALL]: true,
              [CONSTRUCT]: true
            }
          };
          for (const { node: refNode } of tracker.iterateGlobalReferences(
            traceMap
          )) {
            const regex = getStringIfConstant(refNode.arguments[0]);
            const flags2 = getStringIfConstant(refNode.arguments[1]);
            if (regex) {
              checkRegex(regex, refNode, refNode.arguments[0], flags2);
            }
          }
        }
      };
    }
  };
  return preferNamedCaptureGroup;
}
var preferNumericLiterals;
var hasRequiredPreferNumericLiterals;
function requirePreferNumericLiterals() {
  if (hasRequiredPreferNumericLiterals) return preferNumericLiterals;
  hasRequiredPreferNumericLiterals = 1;
  const astUtils2 = requireAstUtils();
  const radixMap = /* @__PURE__ */ new Map([
    [2, { system: "binary", literalPrefix: "0b" }],
    [8, { system: "octal", literalPrefix: "0o" }],
    [16, { system: "hexadecimal", literalPrefix: "0x" }]
  ]);
  function isParseInt(calleeNode) {
    return astUtils2.isSpecificId(calleeNode, "parseInt") || astUtils2.isSpecificMemberAccess(calleeNode, "Number", "parseInt");
  }
  preferNumericLiterals = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/prefer-numeric-literals"
      },
      schema: [],
      messages: {
        useLiteral: "Use {{system}} literals instead of {{functionName}}()."
      },
      fixable: "code"
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        "CallExpression[arguments.length=2]"(node2) {
          const [strNode, radixNode] = node2.arguments, str = astUtils2.getStaticStringValue(strNode), radix2 = radixNode.value;
          if (str !== null && astUtils2.isStringLiteral(strNode) && radixNode.type === "Literal" && typeof radix2 === "number" && radixMap.has(radix2) && isParseInt(node2.callee)) {
            const { system, literalPrefix } = radixMap.get(radix2);
            context.report({
              node: node2,
              messageId: "useLiteral",
              data: {
                system,
                functionName: sourceCode2.getText(node2.callee)
              },
              fix(fixer) {
                if (sourceCode2.getCommentsInside(node2).length) {
                  return null;
                }
                const replacement = `${literalPrefix}${str}`;
                if (+replacement !== parseInt(str, radix2)) {
                  return null;
                }
                const tokenBefore = sourceCode2.getTokenBefore(node2), tokenAfter = sourceCode2.getTokenAfter(node2);
                let prefix = "", suffix = "";
                if (tokenBefore && tokenBefore.range[1] === node2.range[0] && !astUtils2.canTokensBeAdjacent(
                  tokenBefore,
                  replacement
                )) {
                  prefix = " ";
                }
                if (tokenAfter && node2.range[1] === tokenAfter.range[0] && !astUtils2.canTokensBeAdjacent(
                  replacement,
                  tokenAfter
                )) {
                  suffix = " ";
                }
                return fixer.replaceText(
                  node2,
                  `${prefix}${replacement}${suffix}`
                );
              }
            });
          }
        }
      };
    }
  };
  return preferNumericLiterals;
}
var preferObjectHasOwn;
var hasRequiredPreferObjectHasOwn;
function requirePreferObjectHasOwn() {
  if (hasRequiredPreferObjectHasOwn) return preferObjectHasOwn;
  hasRequiredPreferObjectHasOwn = 1;
  const astUtils2 = requireAstUtils();
  function hasLeftHandObject(node2) {
    if (node2.object.type === "ObjectExpression" && node2.object.properties.length === 0) {
      return true;
    }
    const objectNodeToCheck = node2.object.type === "MemberExpression" && astUtils2.getStaticPropertyName(node2.object) === "prototype" ? node2.object.object : node2.object;
    if (objectNodeToCheck.type === "Identifier" && objectNodeToCheck.name === "Object") {
      return true;
    }
    return false;
  }
  preferObjectHasOwn = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/prefer-object-has-own"
      },
      schema: [],
      messages: {
        useHasOwn: "Use 'Object.hasOwn()' instead of 'Object.prototype.hasOwnProperty.call()'."
      },
      fixable: "code"
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        CallExpression(node2) {
          if (!(node2.callee.type === "MemberExpression" && node2.callee.object.type === "MemberExpression")) {
            return;
          }
          const calleePropertyName = astUtils2.getStaticPropertyName(
            node2.callee
          );
          const objectPropertyName = astUtils2.getStaticPropertyName(
            node2.callee.object
          );
          const isObject2 = hasLeftHandObject(node2.callee.object);
          const scope = sourceCode2.getScope(node2);
          const variable = astUtils2.getVariableByName(scope, "Object");
          if (calleePropertyName === "call" && objectPropertyName === "hasOwnProperty" && isObject2 && variable && variable.scope.type === "global") {
            context.report({
              node: node2,
              messageId: "useHasOwn",
              fix(fixer) {
                if (sourceCode2.getCommentsInside(node2.callee).length > 0) {
                  return null;
                }
                const tokenJustBeforeNode = sourceCode2.getTokenBefore(node2.callee, {
                  includeComments: true
                });
                if (tokenJustBeforeNode && tokenJustBeforeNode.range[1] === node2.callee.range[0] && !astUtils2.canTokensBeAdjacent(
                  tokenJustBeforeNode,
                  "Object.hasOwn"
                )) {
                  return fixer.replaceText(
                    node2.callee,
                    " Object.hasOwn"
                  );
                }
                return fixer.replaceText(
                  node2.callee,
                  "Object.hasOwn"
                );
              }
            });
          }
        }
      };
    }
  };
  return preferObjectHasOwn;
}
var preferObjectSpread;
var hasRequiredPreferObjectSpread;
function requirePreferObjectSpread() {
  if (hasRequiredPreferObjectSpread) return preferObjectSpread;
  hasRequiredPreferObjectSpread = 1;
  const { CALL, ReferenceTracker } = /* @__PURE__ */ requireEslintUtils();
  const {
    isCommaToken,
    isOpeningParenToken,
    isClosingParenToken,
    isParenthesised
  } = requireAstUtils();
  const ANY_SPACE = /\s/u;
  function hasArraySpread(node2) {
    return node2.arguments.some((arg) => arg.type === "SpreadElement");
  }
  function isAccessorProperty(node2) {
    return node2.type === "Property" && (node2.kind === "get" || node2.kind === "set");
  }
  function hasAccessors(node2) {
    return node2.properties.some(isAccessorProperty);
  }
  function hasArgumentsWithAccessors(node2) {
    return node2.arguments.filter((arg) => arg.type === "ObjectExpression").some(hasAccessors);
  }
  function needsParens(node2, sourceCode2) {
    const parent = node2.parent;
    switch (parent.type) {
      case "VariableDeclarator":
      case "ArrayExpression":
      case "ReturnStatement":
      case "CallExpression":
      case "Property":
        return false;
      case "AssignmentExpression":
        return parent.left === node2 && !isParenthesised(sourceCode2, node2);
      default:
        return !isParenthesised(sourceCode2, node2);
    }
  }
  function argNeedsParens(node2, sourceCode2) {
    switch (node2.type) {
      case "AssignmentExpression":
      case "ArrowFunctionExpression":
      case "ConditionalExpression":
        return !isParenthesised(sourceCode2, node2);
      default:
        return false;
    }
  }
  function getParenTokens(node2, leftArgumentListParen, sourceCode2) {
    const parens = [
      sourceCode2.getFirstToken(node2),
      sourceCode2.getLastToken(node2)
    ];
    let leftNext = sourceCode2.getTokenBefore(node2);
    let rightNext = sourceCode2.getTokenAfter(node2);
    while (leftNext && rightNext && leftNext.range[0] > leftArgumentListParen.range[0] && isOpeningParenToken(leftNext) && isClosingParenToken(rightNext)) {
      parens.push(leftNext, rightNext);
      leftNext = sourceCode2.getTokenBefore(leftNext);
      rightNext = sourceCode2.getTokenAfter(rightNext);
    }
    return parens.sort((a2, b) => a2.range[0] - b.range[0]);
  }
  function getStartWithSpaces(token, sourceCode2) {
    const text = sourceCode2.text;
    let start = token.range[0];
    {
      const prevToken = sourceCode2.getTokenBefore(token, {
        includeComments: true
      });
      if (prevToken && prevToken.type === "Line") {
        return start;
      }
    }
    while (ANY_SPACE.test(text[start - 1] || "")) {
      start -= 1;
    }
    return start;
  }
  function getEndWithSpaces(token, sourceCode2) {
    const text = sourceCode2.text;
    let end = token.range[1];
    while (ANY_SPACE.test(text[end] || "")) {
      end += 1;
    }
    return end;
  }
  function defineFixer(node2, sourceCode2) {
    return function* (fixer) {
      const leftParen = sourceCode2.getTokenAfter(
        node2.callee,
        isOpeningParenToken
      );
      const rightParen = sourceCode2.getLastToken(node2);
      yield fixer.removeRange([node2.range[0], leftParen.range[0]]);
      if (needsParens(node2, sourceCode2)) {
        yield fixer.replaceText(leftParen, "({");
        yield fixer.replaceText(rightParen, "})");
      } else {
        yield fixer.replaceText(leftParen, "{");
        yield fixer.replaceText(rightParen, "}");
      }
      for (const argNode of node2.arguments) {
        const innerParens = getParenTokens(argNode, leftParen, sourceCode2);
        const left = innerParens.shift();
        const right = innerParens.pop();
        if (argNode.type === "ObjectExpression") {
          const maybeTrailingComma = sourceCode2.getLastToken(argNode, 1);
          const maybeArgumentComma = sourceCode2.getTokenAfter(right);
          for (const innerParen of innerParens) {
            yield fixer.remove(innerParen);
          }
          const leftRange = [
            left.range[0],
            getEndWithSpaces(left, sourceCode2)
          ];
          const rightRange = [
            Math.max(
              getStartWithSpaces(right, sourceCode2),
              leftRange[1]
            ),
            // Ensure ranges don't overlap
            right.range[1]
          ];
          yield fixer.removeRange(leftRange);
          yield fixer.removeRange(rightRange);
          if ((argNode.properties.length === 0 || isCommaToken(maybeTrailingComma)) && isCommaToken(maybeArgumentComma)) {
            yield fixer.remove(maybeArgumentComma);
          }
        } else {
          if (argNeedsParens(argNode, sourceCode2)) {
            yield fixer.insertTextBefore(left, "...(");
            yield fixer.insertTextAfter(right, ")");
          } else {
            yield fixer.insertTextBefore(left, "...");
          }
        }
      }
    };
  }
  preferObjectSpread = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow using `Object.assign` with an object literal as the first argument and prefer the use of object spread instead",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/prefer-object-spread"
      },
      schema: [],
      fixable: "code",
      messages: {
        useSpreadMessage: "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",
        useLiteralMessage: "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          const tracker = new ReferenceTracker(scope);
          const trackMap = {
            Object: {
              assign: { [CALL]: true }
            }
          };
          for (const { node: refNode } of tracker.iterateGlobalReferences(
            trackMap
          )) {
            if (refNode.arguments.length >= 1 && refNode.arguments[0].type === "ObjectExpression" && !hasArraySpread(refNode) && !(refNode.arguments.length > 1 && hasArgumentsWithAccessors(refNode))) {
              const messageId = refNode.arguments.length === 1 ? "useLiteralMessage" : "useSpreadMessage";
              const fix = defineFixer(refNode, sourceCode2);
              context.report({ node: refNode, messageId, fix });
            }
          }
        }
      };
    }
  };
  return preferObjectSpread;
}
var preferPromiseRejectErrors;
var hasRequiredPreferPromiseRejectErrors;
function requirePreferPromiseRejectErrors() {
  if (hasRequiredPreferPromiseRejectErrors) return preferPromiseRejectErrors;
  hasRequiredPreferPromiseRejectErrors = 1;
  const astUtils2 = requireAstUtils();
  preferPromiseRejectErrors = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allowEmptyReject: false
        }
      ],
      docs: {
        description: "Require using Error objects as Promise rejection reasons",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/prefer-promise-reject-errors"
      },
      fixable: null,
      schema: [
        {
          type: "object",
          properties: {
            allowEmptyReject: { type: "boolean" }
          },
          additionalProperties: false
        }
      ],
      messages: {
        rejectAnError: "Expected the Promise rejection reason to be an Error."
      }
    },
    create(context) {
      const [{ allowEmptyReject }] = context.options;
      const sourceCode2 = context.sourceCode;
      function checkRejectCall(callExpression) {
        if (!callExpression.arguments.length && allowEmptyReject) {
          return;
        }
        if (!callExpression.arguments.length || !astUtils2.couldBeError(callExpression.arguments[0]) || callExpression.arguments[0].type === "Identifier" && callExpression.arguments[0].name === "undefined") {
          context.report({
            node: callExpression,
            messageId: "rejectAnError"
          });
        }
      }
      function isPromiseRejectCall(node2) {
        return astUtils2.isSpecificMemberAccess(
          node2.callee,
          "Promise",
          "reject"
        );
      }
      return {
        // Check `Promise.reject(value)` calls.
        CallExpression(node2) {
          if (isPromiseRejectCall(node2)) {
            checkRejectCall(node2);
          }
        },
        /*
         * Check for `new Promise((resolve, reject) => {})`, and check for reject() calls.
         * This function is run on "NewExpression:exit" instead of "NewExpression" to ensure that
         * the nodes in the expression already have the `parent` property.
         */
        "NewExpression:exit"(node2) {
          if (node2.callee.type === "Identifier" && node2.callee.name === "Promise" && node2.arguments.length && astUtils2.isFunction(node2.arguments[0]) && node2.arguments[0].params.length > 1 && node2.arguments[0].params[1].type === "Identifier") {
            sourceCode2.getDeclaredVariables(node2.arguments[0]).find(
              (variable) => variable.name === node2.arguments[0].params[1].name
            ).references.filter((ref2) => ref2.isRead()).filter(
              (ref2) => ref2.identifier.parent.type === "CallExpression" && ref2.identifier === ref2.identifier.parent.callee
            ).forEach((ref2) => checkRejectCall(ref2.identifier.parent));
          }
        }
      };
    }
  };
  return preferPromiseRejectErrors;
}
var preferReflect;
var hasRequiredPreferReflect;
function requirePreferReflect() {
  if (hasRequiredPreferReflect) return preferReflect;
  hasRequiredPreferReflect = 1;
  preferReflect = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require `Reflect` methods where applicable",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/prefer-reflect"
      },
      deprecated: {
        message: "The original intention of this rule was misguided.",
        deprecatedSince: "3.9.0",
        availableUntil: null,
        replacedBy: []
      },
      schema: [
        {
          type: "object",
          properties: {
            exceptions: {
              type: "array",
              items: {
                enum: [
                  "apply",
                  "call",
                  "delete",
                  "defineProperty",
                  "getOwnPropertyDescriptor",
                  "getPrototypeOf",
                  "setPrototypeOf",
                  "isExtensible",
                  "getOwnPropertyNames",
                  "preventExtensions"
                ]
              },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        preferReflect: "Avoid using {{existing}}, instead use {{substitute}}."
      }
    },
    create(context) {
      const existingNames = {
        apply: "Function.prototype.apply",
        call: "Function.prototype.call",
        defineProperty: "Object.defineProperty",
        getOwnPropertyDescriptor: "Object.getOwnPropertyDescriptor",
        getPrototypeOf: "Object.getPrototypeOf",
        setPrototypeOf: "Object.setPrototypeOf",
        isExtensible: "Object.isExtensible",
        getOwnPropertyNames: "Object.getOwnPropertyNames",
        preventExtensions: "Object.preventExtensions"
      };
      const reflectSubstitutes = {
        apply: "Reflect.apply",
        call: "Reflect.apply",
        defineProperty: "Reflect.defineProperty",
        getOwnPropertyDescriptor: "Reflect.getOwnPropertyDescriptor",
        getPrototypeOf: "Reflect.getPrototypeOf",
        setPrototypeOf: "Reflect.setPrototypeOf",
        isExtensible: "Reflect.isExtensible",
        getOwnPropertyNames: "Reflect.getOwnPropertyNames",
        preventExtensions: "Reflect.preventExtensions"
      };
      const exceptions = (context.options[0] || {}).exceptions || [];
      function report(node2, existing, substitute) {
        context.report({
          node: node2,
          messageId: "preferReflect",
          data: {
            existing,
            substitute
          }
        });
      }
      return {
        CallExpression(node2) {
          const methodName = (node2.callee.property || {}).name;
          const isReflectCall = (node2.callee.object || {}).name === "Reflect";
          const hasReflectSubstitute = Object.hasOwn(
            reflectSubstitutes,
            methodName
          );
          const userConfiguredException = exceptions.includes(methodName);
          if (hasReflectSubstitute && !isReflectCall && !userConfiguredException) {
            report(
              node2,
              existingNames[methodName],
              reflectSubstitutes[methodName]
            );
          }
        },
        UnaryExpression(node2) {
          const isDeleteOperator = node2.operator === "delete";
          const targetsIdentifier = node2.argument.type === "Identifier";
          const userConfiguredException = exceptions.includes("delete");
          if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {
            report(
              node2,
              "the delete keyword",
              "Reflect.deleteProperty"
            );
          }
        }
      };
    }
  };
  return preferReflect;
}
var preferRegexLiterals;
var hasRequiredPreferRegexLiterals;
function requirePreferRegexLiterals() {
  if (hasRequiredPreferRegexLiterals) return preferRegexLiterals;
  hasRequiredPreferRegexLiterals = 1;
  const astUtils2 = requireAstUtils();
  const {
    CALL,
    CONSTRUCT,
    ReferenceTracker
  } = /* @__PURE__ */ requireEslintUtils();
  const {
    RegExpValidator,
    visitRegExpAST,
    RegExpParser
  } = requireRegexpp();
  const { canTokensBeAdjacent } = requireAstUtils();
  const { REGEXPP_LATEST_ECMA_VERSION } = requireRegularExpressions();
  function isStringLiteral(node2) {
    return node2.type === "Literal" && typeof node2.value === "string";
  }
  function isRegexLiteral(node2) {
    return node2.type === "Literal" && Object.hasOwn(node2, "regex");
  }
  const validPrecedingTokens = /* @__PURE__ */ new Set([
    "(",
    ";",
    "[",
    ",",
    "=",
    "+",
    "*",
    "-",
    "?",
    "~",
    "%",
    "**",
    "!",
    "typeof",
    "instanceof",
    "&&",
    "||",
    "??",
    "return",
    "...",
    "delete",
    "void",
    "in",
    "<",
    ">",
    "<=",
    ">=",
    "==",
    "===",
    "!=",
    "!==",
    "<<",
    ">>",
    ">>>",
    "&",
    "|",
    "^",
    ":",
    "{",
    "=>",
    "*=",
    "<<=",
    ">>=",
    ">>>=",
    "^=",
    "|=",
    "&=",
    "??=",
    "||=",
    "&&=",
    "**=",
    "+=",
    "-=",
    "/=",
    "%=",
    "/",
    "do",
    "break",
    "continue",
    "debugger",
    "case",
    "throw"
  ]);
  preferRegexLiterals = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          disallowRedundantWrapping: false
        }
      ],
      docs: {
        description: "Disallow use of the `RegExp` constructor in favor of regular expression literals",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/prefer-regex-literals"
      },
      hasSuggestions: true,
      schema: [
        {
          type: "object",
          properties: {
            disallowRedundantWrapping: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedRegExp: "Use a regular expression literal instead of the 'RegExp' constructor.",
        replaceWithLiteral: "Replace with an equivalent regular expression literal.",
        replaceWithLiteralAndFlags: "Replace with an equivalent regular expression literal with flags '{{ flags }}'.",
        replaceWithIntendedLiteralAndFlags: "Replace with a regular expression literal with flags '{{ flags }}'.",
        unexpectedRedundantRegExp: "Regular expression literal is unnecessarily wrapped within a 'RegExp' constructor.",
        unexpectedRedundantRegExpWithFlags: "Use regular expression literal with flags instead of the 'RegExp' constructor."
      }
    },
    create(context) {
      const [{ disallowRedundantWrapping }] = context.options;
      const sourceCode2 = context.sourceCode;
      function isStringRawTaggedStaticTemplateLiteral(node2) {
        return node2.type === "TaggedTemplateExpression" && astUtils2.isSpecificMemberAccess(node2.tag, "String", "raw") && sourceCode2.isGlobalReference(
          astUtils2.skipChainExpression(node2.tag).object
        ) && astUtils2.isStaticTemplateLiteral(node2.quasi);
      }
      function getStringValue(node2) {
        if (isStringLiteral(node2)) {
          return node2.value;
        }
        if (astUtils2.isStaticTemplateLiteral(node2)) {
          return node2.quasis[0].value.cooked;
        }
        if (isStringRawTaggedStaticTemplateLiteral(node2)) {
          return node2.quasi.quasis[0].value.raw;
        }
        return null;
      }
      function isStaticString(node2) {
        return isStringLiteral(node2) || astUtils2.isStaticTemplateLiteral(node2) || isStringRawTaggedStaticTemplateLiteral(node2);
      }
      function hasOnlyStaticStringArguments(node2) {
        const args = node2.arguments;
        if ((args.length === 1 || args.length === 2) && args.every(isStaticString)) {
          return true;
        }
        return false;
      }
      function isUnnecessarilyWrappedRegexLiteral(node2) {
        const args = node2.arguments;
        if (args.length === 1 && isRegexLiteral(args[0])) {
          return true;
        }
        if (args.length === 2 && isRegexLiteral(args[0]) && isStaticString(args[1])) {
          return true;
        }
        return false;
      }
      function getRegexppEcmaVersion(ecmaVersion2) {
        if (ecmaVersion2 <= 5) {
          return 5;
        }
        return Math.min(ecmaVersion2, REGEXPP_LATEST_ECMA_VERSION);
      }
      const regexppEcmaVersion = getRegexppEcmaVersion(
        context.languageOptions.ecmaVersion
      );
      function resolveEscapes(character) {
        switch (character) {
          case "\n":
          case "\\\n":
            return "\\n";
          case "\r":
          case "\\\r":
            return "\\r";
          case "	":
          case "\\	":
            return "\\t";
          case "\v":
          case "\\\v":
            return "\\v";
          case "\f":
          case "\\\f":
            return "\\f";
          case "/":
            return "\\/";
          default:
            return null;
        }
      }
      function isValidRegexForEcmaVersion(pattern2, flags2) {
        const validator = new RegExpValidator({
          ecmaVersion: regexppEcmaVersion
        });
        try {
          validator.validatePattern(pattern2, 0, pattern2.length, {
            unicode: flags2 ? flags2.includes("u") : false,
            unicodeSets: flags2 ? flags2.includes("v") : false
          });
          if (flags2) {
            validator.validateFlags(flags2);
          }
          return true;
        } catch {
          return false;
        }
      }
      function areFlagsEqual(flagsA, flagsB) {
        return [...flagsA].sort().join("") === [...flagsB].sort().join("");
      }
      function mergeRegexFlags(flagsA, flagsB) {
        const flagsSet = /* @__PURE__ */ new Set([...flagsA, ...flagsB]);
        return [...flagsSet].join("");
      }
      function canFixTo(node2, pattern2, flags2) {
        const tokenBefore = sourceCode2.getTokenBefore(node2);
        return sourceCode2.getCommentsInside(node2).length === 0 && (!tokenBefore || validPrecedingTokens.has(tokenBefore.value)) && isValidRegexForEcmaVersion(pattern2, flags2);
      }
      function getSafeOutput(node2, newRegExpValue) {
        const tokenBefore = sourceCode2.getTokenBefore(node2);
        const tokenAfter = sourceCode2.getTokenAfter(node2);
        return (tokenBefore && !canTokensBeAdjacent(tokenBefore, newRegExpValue) && tokenBefore.range[1] === node2.range[0] ? " " : "") + newRegExpValue + (tokenAfter && !canTokensBeAdjacent(newRegExpValue, tokenAfter) && node2.range[1] === tokenAfter.range[0] ? " " : "");
      }
      return {
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          const tracker = new ReferenceTracker(scope);
          const traceMap = {
            RegExp: {
              [CALL]: true,
              [CONSTRUCT]: true
            }
          };
          for (const { node: refNode } of tracker.iterateGlobalReferences(
            traceMap
          )) {
            if (disallowRedundantWrapping && isUnnecessarilyWrappedRegexLiteral(refNode)) {
              const regexNode = refNode.arguments[0];
              if (refNode.arguments.length === 2) {
                const suggests = [];
                const argFlags = getStringValue(refNode.arguments[1]) || "";
                if (canFixTo(
                  refNode,
                  regexNode.regex.pattern,
                  argFlags
                )) {
                  suggests.push({
                    messageId: "replaceWithLiteralAndFlags",
                    pattern: regexNode.regex.pattern,
                    flags: argFlags
                  });
                }
                const literalFlags = regexNode.regex.flags || "";
                const mergedFlags = mergeRegexFlags(
                  literalFlags,
                  argFlags
                );
                if (!areFlagsEqual(mergedFlags, argFlags) && canFixTo(
                  refNode,
                  regexNode.regex.pattern,
                  mergedFlags
                )) {
                  suggests.push({
                    messageId: "replaceWithIntendedLiteralAndFlags",
                    pattern: regexNode.regex.pattern,
                    flags: mergedFlags
                  });
                }
                context.report({
                  node: refNode,
                  messageId: "unexpectedRedundantRegExpWithFlags",
                  suggest: suggests.map(
                    ({ flags: flags2, pattern: pattern2, messageId }) => ({
                      messageId,
                      data: {
                        flags: flags2
                      },
                      fix(fixer) {
                        return fixer.replaceText(
                          refNode,
                          getSafeOutput(
                            refNode,
                            `/${pattern2}/${flags2}`
                          )
                        );
                      }
                    })
                  )
                });
              } else {
                const outputs = [];
                if (canFixTo(
                  refNode,
                  regexNode.regex.pattern,
                  regexNode.regex.flags
                )) {
                  outputs.push(sourceCode2.getText(regexNode));
                }
                context.report({
                  node: refNode,
                  messageId: "unexpectedRedundantRegExp",
                  suggest: outputs.map((output) => ({
                    messageId: "replaceWithLiteral",
                    fix(fixer) {
                      return fixer.replaceText(
                        refNode,
                        getSafeOutput(refNode, output)
                      );
                    }
                  }))
                });
              }
            } else if (hasOnlyStaticStringArguments(refNode)) {
              let regexContent = getStringValue(refNode.arguments[0]);
              let noFix = false;
              let flags2;
              if (refNode.arguments[1]) {
                flags2 = getStringValue(refNode.arguments[1]);
              }
              if (!canFixTo(refNode, regexContent, flags2)) {
                noFix = true;
              }
              if (!/^[-\w\\[\](){} \t\r\n\v\f!@#$%^&*+=/~`.><?,'"|:;]*$/u.test(
                regexContent
              )) {
                noFix = true;
              }
              if (regexContent && !noFix) {
                let charIncrease = 0;
                const ast2 = new RegExpParser({
                  ecmaVersion: regexppEcmaVersion
                }).parsePattern(
                  regexContent,
                  0,
                  regexContent.length,
                  {
                    unicode: flags2 ? flags2.includes("u") : false,
                    unicodeSets: flags2 ? flags2.includes("v") : false
                  }
                );
                visitRegExpAST(ast2, {
                  onCharacterEnter(characterNode) {
                    const escaped = resolveEscapes(
                      characterNode.raw
                    );
                    if (escaped) {
                      regexContent = regexContent.slice(
                        0,
                        characterNode.start + charIncrease
                      ) + escaped + regexContent.slice(
                        characterNode.end + charIncrease
                      );
                      if (characterNode.raw.length === 1) {
                        charIncrease += 1;
                      }
                    }
                  }
                });
              }
              const newRegExpValue = `/${regexContent || "(?:)"}/${flags2 || ""}`;
              context.report({
                node: refNode,
                messageId: "unexpectedRegExp",
                suggest: noFix ? [] : [
                  {
                    messageId: "replaceWithLiteral",
                    fix(fixer) {
                      return fixer.replaceText(
                        refNode,
                        getSafeOutput(
                          refNode,
                          newRegExpValue
                        )
                      );
                    }
                  }
                ]
              });
            }
          }
        }
      };
    }
  };
  return preferRegexLiterals;
}
var preferRestParams;
var hasRequiredPreferRestParams;
function requirePreferRestParams() {
  if (hasRequiredPreferRestParams) return preferRestParams;
  hasRequiredPreferRestParams = 1;
  function getVariableOfArguments(scope) {
    const variables = scope.variables;
    for (let i2 = 0; i2 < variables.length; ++i2) {
      const variable = variables[i2];
      if (variable.name === "arguments") {
        return variable.identifiers.length === 0 ? variable : null;
      }
    }
    return null;
  }
  function isNotNormalMemberAccess(reference) {
    const id2 = reference.identifier;
    const parent = id2.parent;
    return !(parent.type === "MemberExpression" && parent.object === id2 && !parent.computed);
  }
  preferRestParams = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require rest parameters instead of `arguments`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/prefer-rest-params"
      },
      schema: [],
      messages: {
        preferRestParams: "Use the rest parameters instead of 'arguments'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function report(reference) {
        context.report({
          node: reference.identifier,
          loc: reference.identifier.loc,
          messageId: "preferRestParams"
        });
      }
      function checkForArguments(node2) {
        const argumentsVar = getVariableOfArguments(
          sourceCode2.getScope(node2)
        );
        if (argumentsVar) {
          argumentsVar.references.filter(isNotNormalMemberAccess).forEach(report);
        }
      }
      return {
        "FunctionDeclaration:exit": checkForArguments,
        "FunctionExpression:exit": checkForArguments
      };
    }
  };
  return preferRestParams;
}
var preferSpread;
var hasRequiredPreferSpread;
function requirePreferSpread() {
  if (hasRequiredPreferSpread) return preferSpread;
  hasRequiredPreferSpread = 1;
  const astUtils2 = requireAstUtils();
  function isVariadicApplyCalling(node2) {
    return astUtils2.isSpecificMemberAccess(node2.callee, null, "apply") && node2.arguments.length === 2 && node2.arguments[1].type !== "ArrayExpression" && node2.arguments[1].type !== "SpreadElement";
  }
  function isValidThisArg(expectedThis, thisArg, context) {
    if (!expectedThis) {
      return astUtils2.isNullOrUndefined(thisArg);
    }
    return astUtils2.equalTokens(expectedThis, thisArg, context);
  }
  preferSpread = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require spread operators instead of `.apply()`",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/prefer-spread"
      },
      schema: [],
      fixable: null,
      messages: {
        preferSpread: "Use the spread operator instead of '.apply()'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        CallExpression(node2) {
          if (!isVariadicApplyCalling(node2)) {
            return;
          }
          const applied = astUtils2.skipChainExpression(
            astUtils2.skipChainExpression(node2.callee).object
          );
          const expectedThis = applied.type === "MemberExpression" ? applied.object : null;
          const thisArg = node2.arguments[0];
          if (isValidThisArg(expectedThis, thisArg, sourceCode2)) {
            context.report({
              node: node2,
              messageId: "preferSpread"
            });
          }
        }
      };
    }
  };
  return preferSpread;
}
var preferTemplate;
var hasRequiredPreferTemplate;
function requirePreferTemplate() {
  if (hasRequiredPreferTemplate) return preferTemplate;
  hasRequiredPreferTemplate = 1;
  const astUtils2 = requireAstUtils();
  function isConcatenation(node2) {
    return node2.type === "BinaryExpression" && node2.operator === "+";
  }
  function getTopConcatBinaryExpression(node2) {
    let currentNode = node2;
    while (isConcatenation(currentNode.parent)) {
      currentNode = currentNode.parent;
    }
    return currentNode;
  }
  function hasOctalOrNonOctalDecimalEscapeSequence(node2) {
    if (isConcatenation(node2)) {
      return hasOctalOrNonOctalDecimalEscapeSequence(node2.left) || hasOctalOrNonOctalDecimalEscapeSequence(node2.right);
    }
    if (node2.type === "Literal" && typeof node2.value === "string") {
      return astUtils2.hasOctalOrNonOctalDecimalEscapeSequence(node2.raw);
    }
    return false;
  }
  function hasStringLiteral(node2) {
    if (isConcatenation(node2)) {
      return hasStringLiteral(node2.right) || hasStringLiteral(node2.left);
    }
    return astUtils2.isStringLiteral(node2);
  }
  function hasNonStringLiteral(node2) {
    if (isConcatenation(node2)) {
      return hasNonStringLiteral(node2.right) || hasNonStringLiteral(node2.left);
    }
    return !astUtils2.isStringLiteral(node2);
  }
  function startsWithTemplateCurly(node2) {
    if (node2.type === "BinaryExpression") {
      return startsWithTemplateCurly(node2.left);
    }
    if (node2.type === "TemplateLiteral") {
      return node2.expressions.length && node2.quasis.length && node2.quasis[0].range[0] === node2.quasis[0].range[1];
    }
    return node2.type !== "Literal" || typeof node2.value !== "string";
  }
  function endsWithTemplateCurly(node2) {
    if (node2.type === "BinaryExpression") {
      return startsWithTemplateCurly(node2.right);
    }
    if (node2.type === "TemplateLiteral") {
      return node2.expressions.length && node2.quasis.length && node2.quasis.at(-1).range[0] === node2.quasis.at(-1).range[1];
    }
    return node2.type !== "Literal" || typeof node2.value !== "string";
  }
  preferTemplate = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require template literals instead of string concatenation",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/prefer-template"
      },
      schema: [],
      fixable: "code",
      messages: {
        unexpectedStringConcatenation: "Unexpected string concatenation."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let done = /* @__PURE__ */ Object.create(null);
      function getTextBetween(node1, node2) {
        const allTokens = [node1].concat(sourceCode2.getTokensBetween(node1, node2)).concat(node2);
        const sourceText = sourceCode2.getText();
        return allTokens.slice(0, -1).reduce(
          (accumulator, token, index) => accumulator + sourceText.slice(
            token.range[1],
            allTokens[index + 1].range[0]
          ),
          ""
        );
      }
      function getTemplateLiteral(currentNode, textBeforeNode, textAfterNode) {
        if (currentNode.type === "Literal" && typeof currentNode.value === "string") {
          return `\`${currentNode.raw.slice(1, -1).replace(/\\*(\$\{|`)/gu, (matched) => {
            if (matched.lastIndexOf("\\") % 2) {
              return `\\${matched}`;
            }
            return matched;
          }).replace(
            new RegExp(`\\\\${currentNode.raw[0]}`, "gu"),
            currentNode.raw[0]
          )}\``;
        }
        if (currentNode.type === "TemplateLiteral") {
          return sourceCode2.getText(currentNode);
        }
        if (isConcatenation(currentNode) && hasStringLiteral(currentNode)) {
          const plusSign = sourceCode2.getFirstTokenBetween(
            currentNode.left,
            currentNode.right,
            (token) => token.value === "+"
          );
          const textBeforePlus = getTextBetween(
            currentNode.left,
            plusSign
          );
          const textAfterPlus = getTextBetween(
            plusSign,
            currentNode.right
          );
          const leftEndsWithCurly = endsWithTemplateCurly(
            currentNode.left
          );
          const rightStartsWithCurly = startsWithTemplateCurly(
            currentNode.right
          );
          if (leftEndsWithCurly) {
            return getTemplateLiteral(
              currentNode.left,
              textBeforeNode,
              textBeforePlus + textAfterPlus
            ).slice(0, -1) + getTemplateLiteral(
              currentNode.right,
              null,
              textAfterNode
            ).slice(1);
          }
          if (rightStartsWithCurly) {
            return getTemplateLiteral(
              currentNode.left,
              textBeforeNode,
              null
            ).slice(0, -1) + getTemplateLiteral(
              currentNode.right,
              textBeforePlus + textAfterPlus,
              textAfterNode
            ).slice(1);
          }
          return `${getTemplateLiteral(currentNode.left, textBeforeNode, null)}${textBeforePlus}+${textAfterPlus}${getTemplateLiteral(currentNode.right, textAfterNode, null)}`;
        }
        return `\`\${${textBeforeNode || ""}${sourceCode2.getText(currentNode)}${textAfterNode || ""}}\``;
      }
      function fixNonStringBinaryExpression(fixer, node2) {
        const topBinaryExpr = getTopConcatBinaryExpression(node2.parent);
        if (hasOctalOrNonOctalDecimalEscapeSequence(topBinaryExpr)) {
          return null;
        }
        return fixer.replaceText(
          topBinaryExpr,
          getTemplateLiteral(topBinaryExpr, null, null)
        );
      }
      function checkForStringConcat(node2) {
        if (!astUtils2.isStringLiteral(node2) || !isConcatenation(node2.parent)) {
          return;
        }
        const topBinaryExpr = getTopConcatBinaryExpression(node2.parent);
        if (done[topBinaryExpr.range[0]]) {
          return;
        }
        done[topBinaryExpr.range[0]] = true;
        if (hasNonStringLiteral(topBinaryExpr)) {
          context.report({
            node: topBinaryExpr,
            messageId: "unexpectedStringConcatenation",
            fix: (fixer) => fixNonStringBinaryExpression(fixer, node2)
          });
        }
      }
      return {
        Program() {
          done = /* @__PURE__ */ Object.create(null);
        },
        Literal: checkForStringConcat,
        TemplateLiteral: checkForStringConcat
      };
    }
  };
  return preferTemplate;
}
var preserveCaughtError;
var hasRequiredPreserveCaughtError;
function requirePreserveCaughtError() {
  if (hasRequiredPreserveCaughtError) return preserveCaughtError;
  hasRequiredPreserveCaughtError = 1;
  const astUtils2 = requireAstUtils();
  const UNKNOWN_CAUSE = Symbol("unknown_cause");
  const BUILT_IN_ERROR_TYPES = /* @__PURE__ */ new Set([
    "Error",
    "EvalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError",
    "AggregateError"
  ]);
  function getErrorCause(throwStatement) {
    const throwExpression = throwStatement.argument;
    const optionsIndex = throwExpression.callee.name === "AggregateError" ? 2 : 1;
    const spreadExpressionIndex = throwExpression.arguments.findIndex(
      (arg) => arg.type === "SpreadElement"
    );
    if (spreadExpressionIndex >= 0 && spreadExpressionIndex <= optionsIndex) {
      return UNKNOWN_CAUSE;
    }
    const errorOptions = throwExpression.arguments[optionsIndex];
    if (errorOptions) {
      if (errorOptions.type === "ObjectExpression") {
        if (errorOptions.properties.some(
          (prop) => prop.type === "SpreadElement"
        )) {
          return UNKNOWN_CAUSE;
        }
        const causeProperties = errorOptions.properties.filter(
          (prop) => prop.type === "Property" && prop.key.type === "Identifier" && prop.key.name === "cause" && !prop.computed
          // It is hard to accurately identify the value of computed props
        );
        const causeProperty = causeProperties.at(-1);
        return causeProperty ? {
          value: causeProperty.value,
          multipleDefinitions: causeProperties.length > 1
        } : null;
      }
      return UNKNOWN_CAUSE;
    }
    return null;
  }
  function findParentCatch(node2) {
    let currentNode = node2;
    while (currentNode && currentNode.type !== "CatchClause") {
      if ([
        "FunctionDeclaration",
        "FunctionExpression",
        "ArrowFunctionExpression",
        "StaticBlock"
      ].includes(currentNode.type)) {
        return null;
      }
      currentNode = currentNode.parent;
    }
    return currentNode;
  }
  preserveCaughtError = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          requireCatchParameter: false
        }
      ],
      docs: {
        description: "Disallow losing originally caught error when re-throwing custom errors",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/preserve-caught-error"
        // URL to the documentation page for this rule
      },
      /*
       * TODO: We should allow passing `customErrorTypes` option once something like `typescript-eslint`'s
       * 		`TypeOrValueSpecifier` is implemented in core Eslint.
       *      See:
       * 		1. https://typescript-eslint.io/packages/type-utils/type-or-value-specifier/
       *      2. https://github.com/eslint/eslint/pull/19913#discussion_r2192608593
       *      3. https://github.com/eslint/eslint/discussions/16540
       */
      schema: [
        {
          type: "object",
          properties: {
            requireCatchParameter: {
              type: "boolean",
              description: "Requires the catch blocks to always have the caught error parameter so it is not discarded."
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        missingCause: "There is no `cause` attached to the symptom error being thrown.",
        incorrectCause: "The symptom error is being thrown with an incorrect `cause`.",
        includeCause: "Include the original caught error as the `cause` of the symptom error.",
        missingCatchErrorParam: "The caught error is not accessible because the catch clause lacks the error parameter. Start referencing the caught error using the catch parameter.",
        partiallyLostError: "Re-throws cannot preserve the caught error as a part of it is being lost due to destructuring.",
        caughtErrorShadowed: "The caught error is being attached as `cause`, but is shadowed by a closer scoped redeclaration."
      },
      hasSuggestions: true
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ requireCatchParameter }] = context.options;
      function isThrowingNewError(throwStatement) {
        return (throwStatement.argument.type === "NewExpression" || throwStatement.argument.type === "CallExpression") && throwStatement.argument.callee.type === "Identifier" && BUILT_IN_ERROR_TYPES.has(throwStatement.argument.callee.name) && /*
        * Make sure the thrown Error is instance is one of the built-in global error types.
        * Custom imports could shadow this, which would lead to false positives.
        * e.g. import { Error } from "./my-custom-error.js";
        *      throw Error("Failed to perform error prone operations");
        */
        sourceCode2.isGlobalReference(throwStatement.argument.callee);
      }
      function insertCauseIntoOptions(fixer, optionsNode, caughtErrorName) {
        const properties2 = optionsNode.properties;
        if (properties2.length === 0) {
          return fixer.insertTextAfter(
            sourceCode2.getFirstToken(optionsNode),
            `cause: ${caughtErrorName}`
          );
        }
        const lastProp = properties2.at(-1);
        return fixer.insertTextAfter(
          lastProp,
          `, cause: ${caughtErrorName}`
        );
      }
      return {
        ThrowStatement(node2) {
          const parentCatch = findParentCatch(node2);
          const throwStatement = node2;
          if (parentCatch && isThrowingNewError(throwStatement)) {
            if (parentCatch.param && parentCatch.param.type !== "Identifier") {
              context.report({
                messageId: "partiallyLostError",
                node: parentCatch
              });
              return;
            }
            const caughtError = parentCatch.param?.type === "Identifier" ? parentCatch.param : null;
            if (!caughtError) {
              if (requireCatchParameter) {
                context.report({
                  node: throwStatement,
                  messageId: "missingCatchErrorParam"
                });
                return;
              }
              return;
            }
            const errorCauseInfo = getErrorCause(throwStatement);
            if (errorCauseInfo === UNKNOWN_CAUSE) {
              return;
            }
            if (errorCauseInfo === null) {
              context.report({
                messageId: "missingCause",
                node: throwStatement,
                suggest: [
                  {
                    messageId: "includeCause",
                    fix(fixer) {
                      const throwExpression = throwStatement.argument;
                      const args = throwExpression.arguments;
                      const errorType = throwExpression.callee.name;
                      if (errorType === "AggregateError") {
                        const errorsArg = args[0];
                        const messageArg2 = args[1];
                        const optionsArg2 = args[2];
                        if (!errorsArg) {
                          const lastToken = sourceCode2.getLastToken(
                            throwExpression
                          );
                          const lastCalleeToken = sourceCode2.getLastToken(
                            throwExpression.callee
                          );
                          const parenToken = sourceCode2.getFirstTokenBetween(
                            lastCalleeToken,
                            lastToken,
                            astUtils2.isOpeningParenToken
                          );
                          if (parenToken) {
                            return fixer.insertTextAfter(
                              parenToken,
                              `[], "", { cause: ${caughtError.name} }`
                            );
                          }
                          return fixer.insertTextAfter(
                            throwExpression.callee,
                            `([], "", { cause: ${caughtError.name} })`
                          );
                        }
                        if (!messageArg2) {
                          return fixer.insertTextAfter(
                            errorsArg,
                            `, "", { cause: ${caughtError.name} }`
                          );
                        }
                        if (!optionsArg2) {
                          return fixer.insertTextAfter(
                            messageArg2,
                            `, { cause: ${caughtError.name} }`
                          );
                        }
                        if (optionsArg2.type === "ObjectExpression") {
                          return insertCauseIntoOptions(
                            fixer,
                            optionsArg2,
                            caughtError.name
                          );
                        }
                        return null;
                      }
                      const messageArg = args[0];
                      const optionsArg = args[1];
                      if (!messageArg) {
                        const lastToken = sourceCode2.getLastToken(
                          throwExpression
                        );
                        const lastCalleeToken = sourceCode2.getLastToken(
                          throwExpression.callee
                        );
                        const parenToken = sourceCode2.getFirstTokenBetween(
                          lastCalleeToken,
                          lastToken,
                          astUtils2.isOpeningParenToken
                        );
                        if (parenToken) {
                          return fixer.insertTextAfter(
                            parenToken,
                            `"", { cause: ${caughtError.name} }`
                          );
                        }
                        return fixer.insertTextAfter(
                          throwExpression.callee,
                          `("", { cause: ${caughtError.name} })`
                        );
                      }
                      if (!optionsArg) {
                        return fixer.insertTextAfter(
                          messageArg,
                          `, { cause: ${caughtError.name} }`
                        );
                      }
                      if (optionsArg.type === "ObjectExpression") {
                        return insertCauseIntoOptions(
                          fixer,
                          optionsArg,
                          caughtError.name
                        );
                      }
                      return null;
                    }
                  }
                ]
              });
              return;
            }
            const { value: thrownErrorCause } = errorCauseInfo;
            if (!(thrownErrorCause.type === "Identifier" && thrownErrorCause.name === caughtError.name)) {
              const suggest = errorCauseInfo.multipleDefinitions ? null : [
                {
                  messageId: "includeCause",
                  fix(fixer) {
                    if (thrownErrorCause.parent.method || thrownErrorCause.parent.shorthand || thrownErrorCause.parent.kind !== "init") {
                      return fixer.replaceText(
                        thrownErrorCause.parent,
                        `cause: ${caughtError.name}`
                      );
                    }
                    return fixer.replaceText(
                      thrownErrorCause,
                      caughtError.name
                    );
                  }
                }
              ];
              context.report({
                messageId: "incorrectCause",
                node: thrownErrorCause,
                suggest
              });
              return;
            }
            let scope = sourceCode2.getScope(throwStatement);
            do {
              const variable = scope.set.get(caughtError.name);
              if (variable) {
                break;
              }
              scope = scope.upper;
            } while (scope);
            if (scope?.block !== parentCatch) {
              context.report({
                messageId: "caughtErrorShadowed",
                node: throwStatement
              });
            }
          }
        }
      };
    }
  };
  return preserveCaughtError;
}
var quoteProps;
var hasRequiredQuoteProps;
function requireQuoteProps() {
  if (hasRequiredQuoteProps) return quoteProps;
  hasRequiredQuoteProps = 1;
  const espree2 = requireEspree();
  const astUtils2 = requireAstUtils();
  const keywords2 = requireKeywords();
  quoteProps = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "quote-props",
              url: "https://eslint.style/rules/quote-props"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Require quotes around object literal property names",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/quote-props"
      },
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: [
                  "always",
                  "as-needed",
                  "consistent",
                  "consistent-as-needed"
                ]
              }
            ],
            minItems: 0,
            maxItems: 1
          },
          {
            type: "array",
            items: [
              {
                enum: [
                  "always",
                  "as-needed",
                  "consistent",
                  "consistent-as-needed"
                ]
              },
              {
                type: "object",
                properties: {
                  keywords: {
                    type: "boolean"
                  },
                  unnecessary: {
                    type: "boolean"
                  },
                  numbers: {
                    type: "boolean"
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          }
        ]
      },
      fixable: "code",
      messages: {
        requireQuotesDueToReservedWord: "Properties should be quoted as '{{property}}' is a reserved word.",
        inconsistentlyQuotedProperty: "Inconsistently quoted property '{{key}}' found.",
        unnecessarilyQuotedProperty: "Unnecessarily quoted property '{{property}}' found.",
        unquotedReservedProperty: "Unquoted reserved word '{{property}}' used as key.",
        unquotedNumericProperty: "Unquoted number literal '{{property}}' used as key.",
        unquotedPropertyFound: "Unquoted property '{{property}}' found.",
        redundantQuoting: "Properties shouldn't be quoted as all quotes are redundant."
      }
    },
    create(context) {
      const MODE = context.options[0], KEYWORDS = context.options[1] && context.options[1].keywords, CHECK_UNNECESSARY = !context.options[1] || context.options[1].unnecessary !== false, NUMBERS = context.options[1] && context.options[1].numbers, sourceCode2 = context.sourceCode;
      function isKeyword(tokenStr) {
        return keywords2.includes(tokenStr);
      }
      function areQuotesRedundant(rawKey, tokens, skipNumberLiterals) {
        return tokens.length === 1 && tokens[0].start === 0 && tokens[0].end === rawKey.length && (["Identifier", "Keyword", "Null", "Boolean"].includes(
          tokens[0].type
        ) || tokens[0].type === "Numeric" && !skipNumberLiterals && String(+tokens[0].value) === tokens[0].value);
      }
      function getUnquotedKey(key) {
        return key.type === "Identifier" ? key.name : key.value;
      }
      function getQuotedKey(key) {
        if (key.type === "Literal" && typeof key.value === "string") {
          return sourceCode2.getText(key);
        }
        return `"${key.type === "Identifier" ? key.name : key.value}"`;
      }
      function checkUnnecessaryQuotes(node2) {
        const key = node2.key;
        if (node2.method || node2.computed || node2.shorthand) {
          return;
        }
        if (key.type === "Literal" && typeof key.value === "string") {
          let tokens;
          try {
            tokens = espree2.tokenize(key.value);
          } catch {
            return;
          }
          if (tokens.length !== 1) {
            return;
          }
          const isKeywordToken = isKeyword(tokens[0].value);
          if (isKeywordToken && KEYWORDS) {
            return;
          }
          if (CHECK_UNNECESSARY && areQuotesRedundant(key.value, tokens, NUMBERS)) {
            context.report({
              node: node2,
              messageId: "unnecessarilyQuotedProperty",
              data: { property: key.value },
              fix: (fixer) => fixer.replaceText(key, getUnquotedKey(key))
            });
          }
        } else if (KEYWORDS && key.type === "Identifier" && isKeyword(key.name)) {
          context.report({
            node: node2,
            messageId: "unquotedReservedProperty",
            data: { property: key.name },
            fix: (fixer) => fixer.replaceText(key, getQuotedKey(key))
          });
        } else if (NUMBERS && key.type === "Literal" && astUtils2.isNumericLiteral(key)) {
          context.report({
            node: node2,
            messageId: "unquotedNumericProperty",
            data: { property: key.value },
            fix: (fixer) => fixer.replaceText(key, getQuotedKey(key))
          });
        }
      }
      function checkOmittedQuotes(node2) {
        const key = node2.key;
        if (!node2.method && !node2.computed && !node2.shorthand && !(key.type === "Literal" && typeof key.value === "string")) {
          context.report({
            node: node2,
            messageId: "unquotedPropertyFound",
            data: { property: key.name || key.value },
            fix: (fixer) => fixer.replaceText(key, getQuotedKey(key))
          });
        }
      }
      function checkConsistency(node2, checkQuotesRedundancy) {
        const quotedProps = [], unquotedProps = [];
        let keywordKeyName = null, necessaryQuotes = false;
        node2.properties.forEach((property) => {
          const key = property.key;
          if (!key || property.method || property.computed || property.shorthand) {
            return;
          }
          if (key.type === "Literal" && typeof key.value === "string") {
            quotedProps.push(property);
            if (checkQuotesRedundancy) {
              let tokens;
              try {
                tokens = espree2.tokenize(key.value);
              } catch {
                necessaryQuotes = true;
                return;
              }
              necessaryQuotes = necessaryQuotes || !areQuotesRedundant(key.value, tokens) || KEYWORDS && isKeyword(tokens[0].value);
            }
          } else if (KEYWORDS && checkQuotesRedundancy && key.type === "Identifier" && isKeyword(key.name)) {
            unquotedProps.push(property);
            necessaryQuotes = true;
            keywordKeyName = key.name;
          } else {
            unquotedProps.push(property);
          }
        });
        if (checkQuotesRedundancy && quotedProps.length && !necessaryQuotes) {
          quotedProps.forEach((property) => {
            context.report({
              node: property,
              messageId: "redundantQuoting",
              fix: (fixer) => fixer.replaceText(
                property.key,
                getUnquotedKey(property.key)
              )
            });
          });
        } else if (unquotedProps.length && keywordKeyName) {
          unquotedProps.forEach((property) => {
            context.report({
              node: property,
              messageId: "requireQuotesDueToReservedWord",
              data: { property: keywordKeyName },
              fix: (fixer) => fixer.replaceText(
                property.key,
                getQuotedKey(property.key)
              )
            });
          });
        } else if (quotedProps.length && unquotedProps.length) {
          unquotedProps.forEach((property) => {
            context.report({
              node: property,
              messageId: "inconsistentlyQuotedProperty",
              data: { key: property.key.name || property.key.value },
              fix: (fixer) => fixer.replaceText(
                property.key,
                getQuotedKey(property.key)
              )
            });
          });
        }
      }
      return {
        Property(node2) {
          if (MODE === "always" || !MODE) {
            checkOmittedQuotes(node2);
          }
          if (MODE === "as-needed") {
            checkUnnecessaryQuotes(node2);
          }
        },
        ObjectExpression(node2) {
          if (MODE === "consistent") {
            checkConsistency(node2, false);
          }
          if (MODE === "consistent-as-needed") {
            checkConsistency(node2, true);
          }
        }
      };
    }
  };
  return quoteProps;
}
var quotes;
var hasRequiredQuotes;
function requireQuotes() {
  if (hasRequiredQuotes) return quotes;
  hasRequiredQuotes = 1;
  const astUtils2 = requireAstUtils();
  const QUOTE_SETTINGS = {
    double: {
      quote: '"',
      alternateQuote: "'",
      description: "doublequote"
    },
    single: {
      quote: "'",
      alternateQuote: '"',
      description: "singlequote"
    },
    backtick: {
      quote: "`",
      alternateQuote: '"',
      description: "backtick"
    }
  };
  const UNESCAPED_LINEBREAK_PATTERN = new RegExp(
    String.raw`(^|[^\\])(\\\\)*[${Array.from(astUtils2.LINEBREAKS).join("")}]`,
    "u"
  );
  QUOTE_SETTINGS.double.convert = QUOTE_SETTINGS.single.convert = QUOTE_SETTINGS.backtick.convert = function(str) {
    const newQuote = this.quote;
    const oldQuote = str[0];
    if (newQuote === oldQuote) {
      return str;
    }
    return newQuote + str.slice(1, -1).replace(
      /\\(\$\{|\r\n?|\n|.)|["'`]|\$\{|(\r\n?|\n)/gu,
      (match, escaped, newline) => {
        if (escaped === oldQuote || oldQuote === "`" && escaped === "${") {
          return escaped;
        }
        if (match === newQuote || newQuote === "`" && match === "${") {
          return `\\${match}`;
        }
        if (newline && oldQuote === "`") {
          return "\\n";
        }
        return match;
      }
    ) + newQuote;
  };
  const AVOID_ESCAPE = "avoid-escape";
  quotes = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "quotes",
              url: "https://eslint.style/rules/quotes"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce the consistent use of either backticks, double, or single quotes",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/quotes"
      },
      fixable: "code",
      schema: [
        {
          enum: ["single", "double", "backtick"]
        },
        {
          anyOf: [
            {
              enum: ["avoid-escape"]
            },
            {
              type: "object",
              properties: {
                avoidEscape: {
                  type: "boolean"
                },
                allowTemplateLiterals: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        wrongQuotes: "Strings must use {{description}}."
      }
    },
    create(context) {
      const quoteOption = context.options[0], settings = QUOTE_SETTINGS[quoteOption || "double"], options = context.options[1], allowTemplateLiterals = options && options.allowTemplateLiterals === true, sourceCode2 = context.sourceCode;
      let avoidEscape = options && options.avoidEscape === true;
      if (options === AVOID_ESCAPE) {
        avoidEscape = true;
      }
      function isJSXLiteral(node2) {
        return node2.parent.type === "JSXAttribute" || node2.parent.type === "JSXElement" || node2.parent.type === "JSXFragment";
      }
      function isDirective(node2) {
        return node2.type === "ExpressionStatement" && node2.expression.type === "Literal" && typeof node2.expression.value === "string" && !astUtils2.isParenthesised(sourceCode2, node2.expression);
      }
      function isExpressionInOrJustAfterDirectivePrologue(node2) {
        if (!astUtils2.isTopLevelExpressionStatement(node2.parent)) {
          return false;
        }
        const block = node2.parent.parent;
        for (let i2 = 0; i2 < block.body.length; ++i2) {
          const statement = block.body[i2];
          if (statement === node2.parent) {
            return true;
          }
          if (!isDirective(statement)) {
            break;
          }
        }
        return false;
      }
      function isAllowedAsNonBacktick(node2) {
        const parent = node2.parent;
        switch (parent.type) {
          // Directive Prologues.
          case "ExpressionStatement":
            return !astUtils2.isParenthesised(sourceCode2, node2) && isExpressionInOrJustAfterDirectivePrologue(node2);
          // LiteralPropertyName.
          case "Property":
          case "PropertyDefinition":
          case "MethodDefinition":
            return parent.key === node2 && !parent.computed;
          // ModuleSpecifier.
          case "ImportDeclaration":
          case "ExportNamedDeclaration":
            return parent.source === node2;
          // ModuleExportName or ModuleSpecifier.
          case "ExportAllDeclaration":
            return parent.exported === node2 || parent.source === node2;
          // ModuleExportName.
          case "ImportSpecifier":
            return parent.imported === node2;
          // ModuleExportName.
          case "ExportSpecifier":
            return parent.local === node2 || parent.exported === node2;
          // Others don't allow.
          default:
            return false;
        }
      }
      function isUsingFeatureOfTemplateLiteral(node2) {
        const hasTag = node2.parent.type === "TaggedTemplateExpression" && node2 === node2.parent.quasi;
        if (hasTag) {
          return true;
        }
        const hasStringInterpolation = node2.expressions.length > 0;
        if (hasStringInterpolation) {
          return true;
        }
        const isMultilineString = node2.quasis.length >= 1 && UNESCAPED_LINEBREAK_PATTERN.test(node2.quasis[0].value.raw);
        if (isMultilineString) {
          return true;
        }
        return false;
      }
      return {
        Literal(node2) {
          const val = node2.value, rawVal = node2.raw;
          if (settings && typeof val === "string") {
            let isValid = quoteOption === "backtick" && isAllowedAsNonBacktick(node2) || isJSXLiteral(node2) || astUtils2.isSurroundedBy(rawVal, settings.quote);
            if (!isValid && avoidEscape) {
              isValid = astUtils2.isSurroundedBy(
                rawVal,
                settings.alternateQuote
              ) && rawVal.includes(settings.quote);
            }
            if (!isValid) {
              context.report({
                node: node2,
                messageId: "wrongQuotes",
                data: {
                  description: settings.description
                },
                fix(fixer) {
                  if (quoteOption === "backtick" && astUtils2.hasOctalOrNonOctalDecimalEscapeSequence(
                    rawVal
                  )) {
                    return null;
                  }
                  return fixer.replaceText(
                    node2,
                    settings.convert(node2.raw)
                  );
                }
              });
            }
          }
        },
        TemplateLiteral(node2) {
          if (allowTemplateLiterals || quoteOption === "backtick" || isUsingFeatureOfTemplateLiteral(node2)) {
            return;
          }
          context.report({
            node: node2,
            messageId: "wrongQuotes",
            data: {
              description: settings.description
            },
            fix(fixer) {
              if (astUtils2.isTopLevelExpressionStatement(
                node2.parent
              ) && !astUtils2.isParenthesised(sourceCode2, node2)) {
                return null;
              }
              return fixer.replaceText(
                node2,
                settings.convert(sourceCode2.getText(node2))
              );
            }
          });
        }
      };
    }
  };
  return quotes;
}
var radix;
var hasRequiredRadix;
function requireRadix() {
  if (hasRequiredRadix) return radix;
  hasRequiredRadix = 1;
  const astUtils2 = requireAstUtils();
  const MODE_ALWAYS = "always", MODE_AS_NEEDED = "as-needed";
  const validRadixValues = new Set(
    Array.from({ length: 37 - 2 }, (_, index) => index + 2)
  );
  function isShadowed(variable) {
    return variable.defs.length >= 1;
  }
  function isParseIntMethod(node2) {
    return node2.type === "MemberExpression" && !node2.computed && node2.property.type === "Identifier" && node2.property.name === "parseInt";
  }
  function isValidRadix(radix2) {
    return !(radix2.type === "Literal" && !validRadixValues.has(radix2.value) || radix2.type === "Identifier" && radix2.name === "undefined");
  }
  function isDefaultRadix(radix2) {
    return radix2.type === "Literal" && radix2.value === 10;
  }
  radix = {
    meta: {
      type: "suggestion",
      defaultOptions: [MODE_ALWAYS],
      docs: {
        description: "Enforce the consistent use of the radix argument when using `parseInt()`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/radix"
      },
      hasSuggestions: true,
      schema: [
        {
          enum: ["always", "as-needed"]
        }
      ],
      messages: {
        missingParameters: "Missing parameters.",
        redundantRadix: "Redundant radix parameter.",
        missingRadix: "Missing radix parameter.",
        invalidRadix: "Invalid radix parameter, must be an integer between 2 and 36.",
        addRadixParameter10: "Add radix parameter `10` for parsing decimal numbers."
      }
    },
    create(context) {
      const [mode] = context.options;
      const sourceCode2 = context.sourceCode;
      function checkArguments(node2) {
        const args = node2.arguments;
        switch (args.length) {
          case 0:
            context.report({
              node: node2,
              messageId: "missingParameters"
            });
            break;
          case 1:
            if (mode === MODE_ALWAYS) {
              context.report({
                node: node2,
                messageId: "missingRadix",
                suggest: [
                  {
                    messageId: "addRadixParameter10",
                    fix(fixer) {
                      const tokens = sourceCode2.getTokens(node2);
                      const lastToken = tokens.at(-1);
                      const secondToLastToken = tokens.at(-2);
                      const hasTrailingComma = secondToLastToken.type === "Punctuator" && secondToLastToken.value === ",";
                      return fixer.insertTextBefore(
                        lastToken,
                        hasTrailingComma ? " 10," : ", 10"
                      );
                    }
                  }
                ]
              });
            }
            break;
          default:
            if (mode === MODE_AS_NEEDED && isDefaultRadix(args[1])) {
              context.report({
                node: node2,
                messageId: "redundantRadix"
              });
            } else if (!isValidRadix(args[1])) {
              context.report({
                node: node2,
                messageId: "invalidRadix"
              });
            }
            break;
        }
      }
      return {
        "Program:exit"(node2) {
          const scope = sourceCode2.getScope(node2);
          let variable;
          variable = astUtils2.getVariableByName(scope, "parseInt");
          if (variable && !isShadowed(variable)) {
            variable.references.forEach((reference) => {
              const idNode = reference.identifier;
              if (astUtils2.isCallee(idNode)) {
                checkArguments(idNode.parent);
              }
            });
          }
          variable = astUtils2.getVariableByName(scope, "Number");
          if (variable && !isShadowed(variable)) {
            variable.references.forEach((reference) => {
              const parentNode = reference.identifier.parent;
              const maybeCallee = parentNode.parent.type === "ChainExpression" ? parentNode.parent : parentNode;
              if (isParseIntMethod(parentNode) && astUtils2.isCallee(maybeCallee)) {
                checkArguments(maybeCallee.parent);
              }
            });
          }
        }
      };
    }
  };
  return radix;
}
var requireAtomicUpdates;
var hasRequiredRequireAtomicUpdates;
function requireRequireAtomicUpdates() {
  if (hasRequiredRequireAtomicUpdates) return requireAtomicUpdates;
  hasRequiredRequireAtomicUpdates = 1;
  function createReferenceMap(scope, outReferenceMap = /* @__PURE__ */ new Map()) {
    for (const reference of scope.references) {
      if (reference.resolved === null) {
        continue;
      }
      outReferenceMap.set(reference.identifier, reference);
    }
    for (const childScope of scope.childScopes) {
      if (childScope.type !== "function") {
        createReferenceMap(childScope, outReferenceMap);
      }
    }
    return outReferenceMap;
  }
  function getWriteExpr(reference) {
    if (reference.writeExpr) {
      return reference.writeExpr;
    }
    let node2 = reference.identifier;
    while (node2) {
      const t2 = node2.parent.type;
      if (t2 === "AssignmentExpression" && node2.parent.left === node2) {
        return node2.parent.right;
      }
      if (t2 === "MemberExpression" && node2.parent.object === node2) {
        node2 = node2.parent;
        continue;
      }
      break;
    }
    return null;
  }
  function isLocalVariableWithoutEscape(variable, isMemberAccess) {
    if (!variable) {
      return false;
    }
    if (isMemberAccess && variable.defs.some((d2) => d2.type === "Parameter")) {
      return false;
    }
    const functionScope = variable.scope.variableScope;
    return variable.references.every(
      (reference) => reference.from.variableScope === functionScope
    );
  }
  class SegmentInfo {
    constructor() {
      this.info = /* @__PURE__ */ new WeakMap();
    }
    /**
     * Initialize the segment information.
     * @param {PathSegment} segment The segment to initialize.
     * @returns {void}
     */
    initialize(segment) {
      const outdatedReadVariables = /* @__PURE__ */ new Set();
      const freshReadVariables = /* @__PURE__ */ new Set();
      for (const prevSegment of segment.prevSegments) {
        const info = this.info.get(prevSegment);
        if (info) {
          info.outdatedReadVariables.forEach(
            Set.prototype.add,
            outdatedReadVariables
          );
          info.freshReadVariables.forEach(
            Set.prototype.add,
            freshReadVariables
          );
        }
      }
      this.info.set(segment, { outdatedReadVariables, freshReadVariables });
    }
    /**
     * Mark a given variable as read on given segments.
     * @param {PathSegment[]} segments The segments that it read the variable on.
     * @param {Variable} variable The variable to be read.
     * @returns {void}
     */
    markAsRead(segments, variable) {
      for (const segment of segments) {
        const info = this.info.get(segment);
        if (info) {
          info.freshReadVariables.add(variable);
          info.outdatedReadVariables.delete(variable);
        }
      }
    }
    /**
     * Move `freshReadVariables` to `outdatedReadVariables`.
     * @param {PathSegment[]} segments The segments to process.
     * @returns {void}
     */
    makeOutdated(segments) {
      for (const segment of segments) {
        const info = this.info.get(segment);
        if (info) {
          info.freshReadVariables.forEach(
            Set.prototype.add,
            info.outdatedReadVariables
          );
          info.freshReadVariables.clear();
        }
      }
    }
    /**
     * Check if a given variable is outdated on the current segments.
     * @param {PathSegment[]} segments The current segments.
     * @param {Variable} variable The variable to check.
     * @returns {boolean} `true` if the variable is outdated on the segments.
     */
    isOutdated(segments, variable) {
      for (const segment of segments) {
        const info = this.info.get(segment);
        if (info && info.outdatedReadVariables.has(variable)) {
          return true;
        }
      }
      return false;
    }
  }
  requireAtomicUpdates = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          allowProperties: false
        }
      ],
      docs: {
        description: "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/require-atomic-updates"
      },
      fixable: null,
      schema: [
        {
          type: "object",
          properties: {
            allowProperties: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        nonAtomicUpdate: "Possible race condition: `{{value}}` might be reassigned based on an outdated value of `{{value}}`.",
        nonAtomicObjectUpdate: "Possible race condition: `{{value}}` might be assigned based on an outdated state of `{{object}}`."
      }
    },
    create(context) {
      const [{ allowProperties }] = context.options;
      const sourceCode2 = context.sourceCode;
      const assignmentReferences = /* @__PURE__ */ new Map();
      const segmentInfo = new SegmentInfo();
      let stack = null;
      return {
        onCodePathStart(codePath2, node2) {
          const scope = sourceCode2.getScope(node2);
          const shouldVerify = scope.type === "function" && (scope.block.async || scope.block.generator);
          stack = {
            upper: stack,
            codePath: codePath2,
            referenceMap: shouldVerify ? createReferenceMap(scope) : null,
            currentSegments: /* @__PURE__ */ new Set()
          };
        },
        onCodePathEnd() {
          stack = stack.upper;
        },
        // Initialize the segment information.
        onCodePathSegmentStart(segment) {
          segmentInfo.initialize(segment);
          stack.currentSegments.add(segment);
        },
        onUnreachableCodePathSegmentStart(segment) {
          stack.currentSegments.add(segment);
        },
        onUnreachableCodePathSegmentEnd(segment) {
          stack.currentSegments.delete(segment);
        },
        onCodePathSegmentEnd(segment) {
          stack.currentSegments.delete(segment);
        },
        // Handle references to prepare verification.
        Identifier(node2) {
          const { referenceMap } = stack;
          const reference = referenceMap && referenceMap.get(node2);
          if (!reference) {
            return;
          }
          const variable = reference.resolved;
          const writeExpr = getWriteExpr(reference);
          const isMemberAccess = reference.identifier.parent.type === "MemberExpression";
          if (reference.isRead() && !(writeExpr && writeExpr.parent.operator === "=")) {
            segmentInfo.markAsRead(stack.currentSegments, variable);
          }
          if (writeExpr && writeExpr.parent.right === writeExpr && // ← exclude variable declarations.
          !isLocalVariableWithoutEscape(variable, isMemberAccess)) {
            let refs = assignmentReferences.get(writeExpr);
            if (!refs) {
              refs = [];
              assignmentReferences.set(writeExpr, refs);
            }
            refs.push(reference);
          }
        },
        /*
         * Verify assignments.
         * If the reference exists in `outdatedReadVariables` list, report it.
         */
        ":expression:exit"(node2) {
          if (!stack.referenceMap) {
            return;
          }
          if (node2.type === "AwaitExpression" || node2.type === "YieldExpression") {
            segmentInfo.makeOutdated(stack.currentSegments);
          }
          const references = assignmentReferences.get(node2);
          if (references) {
            assignmentReferences.delete(node2);
            for (const reference of references) {
              const variable = reference.resolved;
              if (segmentInfo.isOutdated(
                stack.currentSegments,
                variable
              )) {
                if (node2.parent.left === reference.identifier) {
                  context.report({
                    node: node2.parent,
                    messageId: "nonAtomicUpdate",
                    data: {
                      value: variable.name
                    }
                  });
                } else if (!allowProperties) {
                  context.report({
                    node: node2.parent,
                    messageId: "nonAtomicObjectUpdate",
                    data: {
                      value: sourceCode2.getText(
                        node2.parent.left
                      ),
                      object: variable.name
                    }
                  });
                }
              }
            }
          }
        }
      };
    }
  };
  return requireAtomicUpdates;
}
var requireAwait;
var hasRequiredRequireAwait;
function requireRequireAwait() {
  if (hasRequiredRequireAwait) return requireAwait;
  hasRequiredRequireAwait = 1;
  const astUtils2 = requireAstUtils();
  function capitalizeFirstLetter(text) {
    return text[0].toUpperCase() + text.slice(1);
  }
  requireAwait = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Disallow async functions which have no `await` expression",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/require-await"
      },
      schema: [],
      messages: {
        missingAwait: "{{name}} has no 'await' expression.",
        removeAsync: "Remove 'async'."
      },
      hasSuggestions: true
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      let scopeInfo = null;
      function enterFunction() {
        scopeInfo = {
          upper: scopeInfo,
          hasAwait: false
        };
      }
      function exitFunction(node2) {
        if (!node2.generator && node2.async && !scopeInfo.hasAwait && !astUtils2.isEmptyFunction(node2)) {
          const nodeWithAsyncKeyword = node2.parent.type === "MethodDefinition" && node2.parent.value === node2 || node2.parent.type === "Property" && node2.parent.method && node2.parent.value === node2 ? node2.parent : node2;
          const asyncToken = sourceCode2.getFirstToken(
            nodeWithAsyncKeyword,
            (token) => token.value === "async"
          );
          const asyncRange = [
            asyncToken.range[0],
            sourceCode2.getTokenAfter(asyncToken, {
              includeComments: true
            }).range[0]
          ];
          const nextToken = sourceCode2.getTokenAfter(asyncToken);
          const addSemiColon = nextToken.type === "Punctuator" && (nextToken.value === "[" || nextToken.value === "(") && (nodeWithAsyncKeyword.type === "MethodDefinition" || astUtils2.isStartOfExpressionStatement(
            nodeWithAsyncKeyword
          )) && astUtils2.needsPrecedingSemicolon(
            sourceCode2,
            nodeWithAsyncKeyword
          );
          context.report({
            node: node2,
            loc: astUtils2.getFunctionHeadLoc(node2, sourceCode2),
            messageId: "missingAwait",
            data: {
              name: capitalizeFirstLetter(
                astUtils2.getFunctionNameWithKind(node2)
              )
            },
            suggest: [
              {
                messageId: "removeAsync",
                fix: (fixer) => fixer.replaceTextRange(
                  asyncRange,
                  addSemiColon ? ";" : ""
                )
              }
            ]
          });
        }
        scopeInfo = scopeInfo.upper;
      }
      return {
        FunctionDeclaration: enterFunction,
        FunctionExpression: enterFunction,
        ArrowFunctionExpression: enterFunction,
        "FunctionDeclaration:exit": exitFunction,
        "FunctionExpression:exit": exitFunction,
        "ArrowFunctionExpression:exit": exitFunction,
        AwaitExpression() {
          if (!scopeInfo) {
            return;
          }
          scopeInfo.hasAwait = true;
        },
        ForOfStatement(node2) {
          if (!scopeInfo) {
            return;
          }
          if (node2.await) {
            scopeInfo.hasAwait = true;
          }
        },
        VariableDeclaration(node2) {
          if (!scopeInfo) {
            return;
          }
          if (node2.kind === "await using") {
            scopeInfo.hasAwait = true;
          }
        }
      };
    }
  };
  return requireAwait;
}
var requireUnicodeRegexp;
var hasRequiredRequireUnicodeRegexp;
function requireRequireUnicodeRegexp() {
  if (hasRequiredRequireUnicodeRegexp) return requireUnicodeRegexp;
  hasRequiredRequireUnicodeRegexp = 1;
  const {
    CALL,
    CONSTRUCT,
    ReferenceTracker,
    getStringIfConstant
  } = /* @__PURE__ */ requireEslintUtils();
  const astUtils2 = requireAstUtils();
  const { isValidWithUnicodeFlag } = requireRegularExpressions();
  function checkFlags(requireFlag, flags2) {
    let missingFlag;
    if (requireFlag === "v") {
      missingFlag = !flags2.includes("v");
    } else if (requireFlag === "u") {
      missingFlag = !flags2.includes("u");
    } else {
      missingFlag = !flags2.includes("u") && !flags2.includes("v");
    }
    return missingFlag;
  }
  requireUnicodeRegexp = {
    meta: {
      type: "suggestion",
      defaultOptions: [{}],
      docs: {
        description: "Enforce the use of `u` or `v` flag on regular expressions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/require-unicode-regexp"
      },
      hasSuggestions: true,
      messages: {
        addUFlag: "Add the 'u' flag.",
        addVFlag: "Add the 'v' flag.",
        requireUFlag: "Use the 'u' flag.",
        requireVFlag: "Use the 'v' flag."
      },
      schema: [
        {
          type: "object",
          properties: {
            requireFlag: {
              enum: ["u", "v"]
            }
          },
          additionalProperties: false
        }
      ]
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const [{ requireFlag }] = context.options;
      return {
        "Literal[regex]"(node2) {
          const flags2 = node2.regex.flags || "";
          const missingFlag = checkFlags(requireFlag, flags2);
          if (missingFlag) {
            context.report({
              messageId: requireFlag === "v" ? "requireVFlag" : "requireUFlag",
              node: node2,
              suggest: isValidWithUnicodeFlag(
                context.languageOptions.ecmaVersion,
                node2.regex.pattern,
                requireFlag
              ) ? [
                {
                  fix(fixer) {
                    const replaceFlag = requireFlag ?? "u";
                    const regex = sourceCode2.getText(node2);
                    const slashPos = regex.lastIndexOf("/");
                    if (requireFlag) {
                      const flag = requireFlag === "u" ? "v" : "u";
                      if (regex.includes(
                        flag,
                        slashPos
                      )) {
                        return fixer.replaceText(
                          node2,
                          regex.slice(
                            0,
                            slashPos
                          ) + regex.slice(slashPos).replace(
                            flag,
                            requireFlag
                          )
                        );
                      }
                    }
                    return fixer.insertTextAfter(
                      node2,
                      replaceFlag
                    );
                  },
                  messageId: requireFlag === "v" ? "addVFlag" : "addUFlag"
                }
              ] : null
            });
          }
        },
        Program(node2) {
          const scope = sourceCode2.getScope(node2);
          const tracker = new ReferenceTracker(scope);
          const trackMap = {
            RegExp: { [CALL]: true, [CONSTRUCT]: true }
          };
          for (const { node: refNode } of tracker.iterateGlobalReferences(
            trackMap
          )) {
            const [patternNode, flagsNode] = refNode.arguments;
            if (patternNode && patternNode.type === "SpreadElement") {
              continue;
            }
            const pattern2 = getStringIfConstant(patternNode, scope);
            const flags2 = getStringIfConstant(flagsNode, scope);
            let missingFlag = !flagsNode;
            if (typeof flags2 === "string") {
              missingFlag = checkFlags(requireFlag, flags2);
            }
            if (missingFlag) {
              context.report({
                messageId: requireFlag === "v" ? "requireVFlag" : "requireUFlag",
                node: refNode,
                suggest: typeof pattern2 === "string" && isValidWithUnicodeFlag(
                  context.languageOptions.ecmaVersion,
                  pattern2,
                  requireFlag
                ) ? [
                  {
                    fix(fixer) {
                      const replaceFlag = requireFlag ?? "u";
                      if (flagsNode) {
                        if (flagsNode.type === "Literal" && typeof flagsNode.value === "string" || flagsNode.type === "TemplateLiteral") {
                          const flagsNodeText = sourceCode2.getText(
                            flagsNode
                          );
                          const flag = requireFlag === "u" ? "v" : "u";
                          if (flags2.includes(
                            flag
                          )) {
                            if (flagsNode.type === "Literal" && flagsNode.raw.includes(
                              "\\"
                            )) {
                              return null;
                            }
                            if (flagsNode.type === "TemplateLiteral" && (flagsNode.expressions.length || flagsNode.quasis.some(
                              ({
                                value: {
                                  raw
                                }
                              }) => raw.includes(
                                "\\"
                              )
                            ))) {
                              return null;
                            }
                            return fixer.replaceText(
                              flagsNode,
                              flagsNodeText.replace(
                                flag,
                                replaceFlag
                              )
                            );
                          }
                          return fixer.replaceText(
                            flagsNode,
                            [
                              flagsNodeText.slice(
                                0,
                                flagsNodeText.length - 1
                              ),
                              flagsNodeText.slice(
                                flagsNodeText.length - 1
                              )
                            ].join(
                              replaceFlag
                            )
                          );
                        }
                        return null;
                      }
                      const penultimateToken = sourceCode2.getLastToken(
                        refNode,
                        { skip: 1 }
                      );
                      return fixer.insertTextAfter(
                        penultimateToken,
                        astUtils2.isCommaToken(
                          penultimateToken
                        ) ? ` "${replaceFlag}",` : `, "${replaceFlag}"`
                      );
                    },
                    messageId: requireFlag === "v" ? "addVFlag" : "addUFlag"
                  }
                ] : null
              });
            }
          }
        }
      };
    }
  };
  return requireUnicodeRegexp;
}
var requireYield;
var hasRequiredRequireYield;
function requireRequireYield() {
  if (hasRequiredRequireYield) return requireYield;
  hasRequiredRequireYield = 1;
  requireYield = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require generator functions to contain `yield`",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/require-yield"
      },
      schema: [],
      messages: {
        missingYield: "This generator function does not have 'yield'."
      }
    },
    create(context) {
      const stack = [];
      function beginChecking(node2) {
        if (node2.generator) {
          stack.push(0);
        }
      }
      function endChecking(node2) {
        if (!node2.generator) {
          return;
        }
        const countYield = stack.pop();
        if (countYield === 0 && node2.body.body.length > 0) {
          context.report({ node: node2, messageId: "missingYield" });
        }
      }
      return {
        FunctionDeclaration: beginChecking,
        "FunctionDeclaration:exit": endChecking,
        FunctionExpression: beginChecking,
        "FunctionExpression:exit": endChecking,
        // Increases the count of `yield` keyword.
        YieldExpression() {
          if (stack.length > 0) {
            stack[stack.length - 1] += 1;
          }
        }
      };
    }
  };
  return requireYield;
}
var restSpreadSpacing;
var hasRequiredRestSpreadSpacing;
function requireRestSpreadSpacing() {
  if (hasRequiredRestSpreadSpacing) return restSpreadSpacing;
  hasRequiredRestSpreadSpacing = 1;
  restSpreadSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "rest-spread-spacing",
              url: "https://eslint.style/rules/rest-spread-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce spacing between rest and spread operators and their expressions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/rest-spread-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never"]
        }
      ],
      messages: {
        unexpectedWhitespace: "Unexpected whitespace after {{type}} operator.",
        expectedWhitespace: "Expected whitespace after {{type}} operator."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode, alwaysSpace = context.options[0] === "always";
      function checkWhiteSpace(node2) {
        const operator = sourceCode2.getFirstToken(node2), nextToken = sourceCode2.getTokenAfter(operator), hasWhitespace = sourceCode2.isSpaceBetweenTokens(
          operator,
          nextToken
        );
        let type2;
        switch (node2.type) {
          case "SpreadElement":
            type2 = "spread";
            if (node2.parent.type === "ObjectExpression") {
              type2 += " property";
            }
            break;
          case "RestElement":
            type2 = "rest";
            if (node2.parent.type === "ObjectPattern") {
              type2 += " property";
            }
            break;
          case "ExperimentalSpreadProperty":
            type2 = "spread property";
            break;
          case "ExperimentalRestProperty":
            type2 = "rest property";
            break;
          default:
            return;
        }
        if (alwaysSpace && !hasWhitespace) {
          context.report({
            node: node2,
            loc: operator.loc,
            messageId: "expectedWhitespace",
            data: {
              type: type2
            },
            fix(fixer) {
              return fixer.replaceTextRange(
                [operator.range[1], nextToken.range[0]],
                " "
              );
            }
          });
        } else if (!alwaysSpace && hasWhitespace) {
          context.report({
            node: node2,
            loc: {
              start: operator.loc.end,
              end: nextToken.loc.start
            },
            messageId: "unexpectedWhitespace",
            data: {
              type: type2
            },
            fix(fixer) {
              return fixer.removeRange([
                operator.range[1],
                nextToken.range[0]
              ]);
            }
          });
        }
      }
      return {
        SpreadElement: checkWhiteSpace,
        RestElement: checkWhiteSpace,
        ExperimentalSpreadProperty: checkWhiteSpace,
        ExperimentalRestProperty: checkWhiteSpace
      };
    }
  };
  return restSpreadSpacing;
}
var semi;
var hasRequiredSemi;
function requireSemi() {
  if (hasRequiredSemi) return semi;
  hasRequiredSemi = 1;
  const FixTracker = requireFixTracker();
  const astUtils2 = requireAstUtils();
  semi = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "semi",
              url: "https://eslint.style/rules/semi"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow semicolons instead of ASI",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/semi"
      },
      fixable: "code",
      schema: {
        anyOf: [
          {
            type: "array",
            items: [
              {
                enum: ["never"]
              },
              {
                type: "object",
                properties: {
                  beforeStatementContinuationChars: {
                    enum: ["always", "any", "never"]
                  }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          },
          {
            type: "array",
            items: [
              {
                enum: ["always"]
              },
              {
                type: "object",
                properties: {
                  omitLastInOneLineBlock: { type: "boolean" },
                  omitLastInOneLineClassBody: { type: "boolean" }
                },
                additionalProperties: false
              }
            ],
            minItems: 0,
            maxItems: 2
          }
        ]
      },
      messages: {
        missingSemi: "Missing semicolon.",
        extraSemi: "Extra semicolon."
      }
    },
    create(context) {
      const OPT_OUT_PATTERN = /^[-[(/+`]/u;
      const unsafeClassFieldNames = /* @__PURE__ */ new Set(["get", "set", "static"]);
      const unsafeClassFieldFollowers = /* @__PURE__ */ new Set(["*", "in", "instanceof"]);
      const options = context.options[1];
      const never = context.options[0] === "never";
      const exceptOneLine = Boolean(
        options && options.omitLastInOneLineBlock
      );
      const exceptOneLineClassBody = Boolean(
        options && options.omitLastInOneLineClassBody
      );
      const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || "any";
      const sourceCode2 = context.sourceCode;
      function report(node2, missing) {
        const lastToken = sourceCode2.getLastToken(node2);
        let messageId, fix, loc;
        if (!missing) {
          messageId = "missingSemi";
          loc = {
            start: lastToken.loc.end,
            end: astUtils2.getNextLocation(
              sourceCode2,
              lastToken.loc.end
            )
          };
          fix = function(fixer) {
            return fixer.insertTextAfter(lastToken, ";");
          };
        } else {
          messageId = "extraSemi";
          loc = lastToken.loc;
          fix = function(fixer) {
            return new FixTracker(fixer, sourceCode2).retainSurroundingTokens(lastToken).remove(lastToken);
          };
        }
        context.report({
          node: node2,
          loc,
          messageId,
          fix
        });
      }
      function isRedundantSemi(semiToken) {
        const nextToken = sourceCode2.getTokenAfter(semiToken);
        return !nextToken || astUtils2.isClosingBraceToken(nextToken) || astUtils2.isSemicolonToken(nextToken);
      }
      function isEndOfArrowBlock(lastToken) {
        if (!astUtils2.isClosingBraceToken(lastToken)) {
          return false;
        }
        const node2 = sourceCode2.getNodeByRangeIndex(lastToken.range[0]);
        return node2.type === "BlockStatement" && node2.parent.type === "ArrowFunctionExpression";
      }
      function maybeClassFieldAsiHazard(node2) {
        if (node2.type !== "PropertyDefinition") {
          return false;
        }
        const needsNameCheck = !node2.computed && node2.key.type === "Identifier";
        if (needsNameCheck && unsafeClassFieldNames.has(node2.key.name)) {
          const isStaticStatic = node2.static && node2.key.name === "static";
          if (!isStaticStatic && !node2.value) {
            return true;
          }
        }
        const followingToken = sourceCode2.getTokenAfter(node2);
        return unsafeClassFieldFollowers.has(followingToken.value);
      }
      function isOnSameLineWithNextToken(node2) {
        const prevToken = sourceCode2.getLastToken(node2, 1);
        const nextToken = sourceCode2.getTokenAfter(node2);
        return !!nextToken && astUtils2.isTokenOnSameLine(prevToken, nextToken);
      }
      function maybeAsiHazardAfter(node2) {
        const t2 = node2.type;
        if (t2 === "DoWhileStatement" || t2 === "BreakStatement" || t2 === "ContinueStatement" || t2 === "DebuggerStatement" || t2 === "ImportDeclaration" || t2 === "ExportAllDeclaration") {
          return false;
        }
        if (t2 === "ReturnStatement") {
          return Boolean(node2.argument);
        }
        if (t2 === "ExportNamedDeclaration") {
          return Boolean(node2.declaration);
        }
        if (isEndOfArrowBlock(sourceCode2.getLastToken(node2, 1))) {
          return false;
        }
        return true;
      }
      function maybeAsiHazardBefore(token) {
        return Boolean(token) && OPT_OUT_PATTERN.test(token.value) && token.value !== "++" && token.value !== "--";
      }
      function canRemoveSemicolon(node2) {
        if (isRedundantSemi(sourceCode2.getLastToken(node2))) {
          return true;
        }
        if (maybeClassFieldAsiHazard(node2)) {
          return false;
        }
        if (isOnSameLineWithNextToken(node2)) {
          return false;
        }
        if (node2.type !== "PropertyDefinition" && beforeStatementContinuationChars === "never" && !maybeAsiHazardAfter(node2)) {
          return true;
        }
        if (!maybeAsiHazardBefore(sourceCode2.getTokenAfter(node2))) {
          return true;
        }
        return false;
      }
      function isLastInOneLinerBlock(node2) {
        const parent = node2.parent;
        const nextToken = sourceCode2.getTokenAfter(node2);
        if (!nextToken || nextToken.value !== "}") {
          return false;
        }
        if (parent.type === "BlockStatement") {
          return parent.loc.start.line === parent.loc.end.line;
        }
        if (parent.type === "StaticBlock") {
          const openingBrace = sourceCode2.getFirstToken(parent, {
            skip: 1
          });
          return openingBrace.loc.start.line === parent.loc.end.line;
        }
        return false;
      }
      function isLastInOneLinerClassBody(node2) {
        const parent = node2.parent;
        const nextToken = sourceCode2.getTokenAfter(node2);
        if (!nextToken || nextToken.value !== "}") {
          return false;
        }
        if (parent.type === "ClassBody") {
          return parent.loc.start.line === parent.loc.end.line;
        }
        return false;
      }
      function checkForSemicolon(node2) {
        const isSemi = astUtils2.isSemicolonToken(
          sourceCode2.getLastToken(node2)
        );
        if (never) {
          if (isSemi && canRemoveSemicolon(node2)) {
            report(node2, true);
          } else if (!isSemi && beforeStatementContinuationChars === "always" && node2.type !== "PropertyDefinition" && maybeAsiHazardBefore(sourceCode2.getTokenAfter(node2))) {
            report(node2);
          }
        } else {
          const oneLinerBlock = exceptOneLine && isLastInOneLinerBlock(node2);
          const oneLinerClassBody = exceptOneLineClassBody && isLastInOneLinerClassBody(node2);
          const oneLinerBlockOrClassBody = oneLinerBlock || oneLinerClassBody;
          if (isSemi && oneLinerBlockOrClassBody) {
            report(node2, true);
          } else if (!isSemi && !oneLinerBlockOrClassBody) {
            report(node2);
          }
        }
      }
      function checkForSemicolonForVariableDeclaration(node2) {
        const parent = node2.parent;
        if ((parent.type !== "ForStatement" || parent.init !== node2) && (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node2)) {
          checkForSemicolon(node2);
        }
      }
      return {
        VariableDeclaration: checkForSemicolonForVariableDeclaration,
        ExpressionStatement: checkForSemicolon,
        ReturnStatement: checkForSemicolon,
        ThrowStatement: checkForSemicolon,
        DoWhileStatement: checkForSemicolon,
        DebuggerStatement: checkForSemicolon,
        BreakStatement: checkForSemicolon,
        ContinueStatement: checkForSemicolon,
        ImportDeclaration: checkForSemicolon,
        ExportAllDeclaration: checkForSemicolon,
        ExportNamedDeclaration(node2) {
          if (!node2.declaration) {
            checkForSemicolon(node2);
          }
        },
        ExportDefaultDeclaration(node2) {
          if (!/(?:Class|Function)Declaration/u.test(
            node2.declaration.type
          )) {
            checkForSemicolon(node2);
          }
        },
        PropertyDefinition: checkForSemicolon
      };
    }
  };
  return semi;
}
var semiSpacing;
var hasRequiredSemiSpacing;
function requireSemiSpacing() {
  if (hasRequiredSemiSpacing) return semiSpacing;
  hasRequiredSemiSpacing = 1;
  const astUtils2 = requireAstUtils();
  semiSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "semi-spacing",
              url: "https://eslint.style/rules/semi-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing before and after semicolons",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/semi-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            before: {
              type: "boolean",
              default: false
            },
            after: {
              type: "boolean",
              default: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedWhitespaceBefore: "Unexpected whitespace before semicolon.",
        unexpectedWhitespaceAfter: "Unexpected whitespace after semicolon.",
        missingWhitespaceBefore: "Missing whitespace before semicolon.",
        missingWhitespaceAfter: "Missing whitespace after semicolon."
      }
    },
    create(context) {
      const config2 = context.options[0], sourceCode2 = context.sourceCode;
      let requireSpaceBefore = false, requireSpaceAfter = true;
      if (typeof config2 === "object") {
        requireSpaceBefore = config2.before;
        requireSpaceAfter = config2.after;
      }
      function hasLeadingSpace(token) {
        const tokenBefore = sourceCode2.getTokenBefore(token);
        return tokenBefore && astUtils2.isTokenOnSameLine(tokenBefore, token) && sourceCode2.isSpaceBetweenTokens(tokenBefore, token);
      }
      function hasTrailingSpace(token) {
        const tokenAfter = sourceCode2.getTokenAfter(token);
        return tokenAfter && astUtils2.isTokenOnSameLine(token, tokenAfter) && sourceCode2.isSpaceBetweenTokens(token, tokenAfter);
      }
      function isLastTokenInCurrentLine(token) {
        const tokenAfter = sourceCode2.getTokenAfter(token);
        return !(tokenAfter && astUtils2.isTokenOnSameLine(token, tokenAfter));
      }
      function isFirstTokenInCurrentLine(token) {
        const tokenBefore = sourceCode2.getTokenBefore(token);
        return !(tokenBefore && astUtils2.isTokenOnSameLine(token, tokenBefore));
      }
      function isBeforeClosingParen(token) {
        const nextToken = sourceCode2.getTokenAfter(token);
        return nextToken && astUtils2.isClosingBraceToken(nextToken) || astUtils2.isClosingParenToken(nextToken);
      }
      function checkSemicolonSpacing(token, node2) {
        if (astUtils2.isSemicolonToken(token)) {
          if (hasLeadingSpace(token)) {
            if (!requireSpaceBefore) {
              const tokenBefore = sourceCode2.getTokenBefore(token);
              const loc = {
                start: tokenBefore.loc.end,
                end: token.loc.start
              };
              context.report({
                node: node2,
                loc,
                messageId: "unexpectedWhitespaceBefore",
                fix(fixer) {
                  return fixer.removeRange([
                    tokenBefore.range[1],
                    token.range[0]
                  ]);
                }
              });
            }
          } else {
            if (requireSpaceBefore) {
              const loc = token.loc;
              context.report({
                node: node2,
                loc,
                messageId: "missingWhitespaceBefore",
                fix(fixer) {
                  return fixer.insertTextBefore(token, " ");
                }
              });
            }
          }
          if (!isFirstTokenInCurrentLine(token) && !isLastTokenInCurrentLine(token) && !isBeforeClosingParen(token)) {
            if (hasTrailingSpace(token)) {
              if (!requireSpaceAfter) {
                const tokenAfter = sourceCode2.getTokenAfter(token);
                const loc = {
                  start: token.loc.end,
                  end: tokenAfter.loc.start
                };
                context.report({
                  node: node2,
                  loc,
                  messageId: "unexpectedWhitespaceAfter",
                  fix(fixer) {
                    return fixer.removeRange([
                      token.range[1],
                      tokenAfter.range[0]
                    ]);
                  }
                });
              }
            } else {
              if (requireSpaceAfter) {
                const loc = token.loc;
                context.report({
                  node: node2,
                  loc,
                  messageId: "missingWhitespaceAfter",
                  fix(fixer) {
                    return fixer.insertTextAfter(token, " ");
                  }
                });
              }
            }
          }
        }
      }
      function checkNode(node2) {
        const token = sourceCode2.getLastToken(node2);
        checkSemicolonSpacing(token, node2);
      }
      return {
        VariableDeclaration: checkNode,
        ExpressionStatement: checkNode,
        BreakStatement: checkNode,
        ContinueStatement: checkNode,
        DebuggerStatement: checkNode,
        DoWhileStatement: checkNode,
        ReturnStatement: checkNode,
        ThrowStatement: checkNode,
        ImportDeclaration: checkNode,
        ExportNamedDeclaration: checkNode,
        ExportAllDeclaration: checkNode,
        ExportDefaultDeclaration: checkNode,
        ForStatement(node2) {
          if (node2.init) {
            checkSemicolonSpacing(
              sourceCode2.getTokenAfter(node2.init),
              node2
            );
          }
          if (node2.test) {
            checkSemicolonSpacing(
              sourceCode2.getTokenAfter(node2.test),
              node2
            );
          }
        },
        PropertyDefinition: checkNode
      };
    }
  };
  return semiSpacing;
}
var semiStyle;
var hasRequiredSemiStyle;
function requireSemiStyle() {
  if (hasRequiredSemiStyle) return semiStyle;
  hasRequiredSemiStyle = 1;
  const astUtils2 = requireAstUtils();
  const SELECTOR = [
    "BreakStatement",
    "ContinueStatement",
    "DebuggerStatement",
    "DoWhileStatement",
    "ExportAllDeclaration",
    "ExportDefaultDeclaration",
    "ExportNamedDeclaration",
    "ExpressionStatement",
    "ImportDeclaration",
    "ReturnStatement",
    "ThrowStatement",
    "VariableDeclaration",
    "PropertyDefinition"
  ].join(",");
  function getChildren(node2) {
    const t2 = node2.type;
    if (t2 === "BlockStatement" || t2 === "StaticBlock" || t2 === "Program" || t2 === "ClassBody") {
      return node2.body;
    }
    if (t2 === "SwitchCase") {
      return node2.consequent;
    }
    return null;
  }
  function isLastChild(node2) {
    const t2 = node2.parent.type;
    if (t2 === "IfStatement" && node2.parent.consequent === node2 && node2.parent.alternate) {
      return true;
    }
    if (t2 === "DoWhileStatement") {
      return true;
    }
    const nodeList = getChildren(node2.parent);
    return nodeList !== null && nodeList.at(-1) === node2;
  }
  semiStyle = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "semi-style",
              url: "https://eslint.style/rules/semi-style"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce location of semicolons",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/semi-style"
      },
      schema: [{ enum: ["last", "first"] }],
      fixable: "whitespace",
      messages: {
        expectedSemiColon: "Expected this semicolon to be at {{pos}}."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const option = context.options[0] || "last";
      function check2(semiToken, expected) {
        const prevToken = sourceCode2.getTokenBefore(semiToken);
        const nextToken = sourceCode2.getTokenAfter(semiToken);
        const prevIsSameLine = !prevToken || astUtils2.isTokenOnSameLine(prevToken, semiToken);
        const nextIsSameLine = !nextToken || astUtils2.isTokenOnSameLine(semiToken, nextToken);
        if (expected === "last" && !prevIsSameLine || expected === "first" && !nextIsSameLine) {
          context.report({
            loc: semiToken.loc,
            messageId: "expectedSemiColon",
            data: {
              pos: expected === "last" ? "the end of the previous line" : "the beginning of the next line"
            },
            fix(fixer) {
              if (prevToken && nextToken && sourceCode2.commentsExistBetween(
                prevToken,
                nextToken
              )) {
                return null;
              }
              const start = prevToken ? prevToken.range[1] : semiToken.range[0];
              const end = nextToken ? nextToken.range[0] : semiToken.range[1];
              const text = expected === "last" ? ";\n" : "\n;";
              return fixer.replaceTextRange([start, end], text);
            }
          });
        }
      }
      return {
        [SELECTOR](node2) {
          if (option === "first" && isLastChild(node2)) {
            return;
          }
          const lastToken = sourceCode2.getLastToken(node2);
          if (astUtils2.isSemicolonToken(lastToken)) {
            check2(lastToken, option);
          }
        },
        ForStatement(node2) {
          const firstSemi = node2.init && sourceCode2.getTokenAfter(
            node2.init,
            astUtils2.isSemicolonToken
          );
          const secondSemi = node2.test && sourceCode2.getTokenAfter(
            node2.test,
            astUtils2.isSemicolonToken
          );
          if (firstSemi) {
            check2(firstSemi, "last");
          }
          if (secondSemi) {
            check2(secondSemi, "last");
          }
        }
      };
    }
  };
  return semiStyle;
}
var sortImports;
var hasRequiredSortImports;
function requireSortImports() {
  if (hasRequiredSortImports) return sortImports;
  hasRequiredSortImports = 1;
  sortImports = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          allowSeparatedGroups: false,
          ignoreCase: false,
          ignoreDeclarationSort: false,
          ignoreMemberSort: false,
          memberSyntaxSortOrder: ["none", "all", "multiple", "single"]
        }
      ],
      docs: {
        description: "Enforce sorted `import` declarations within modules",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/sort-imports"
      },
      schema: [
        {
          type: "object",
          properties: {
            ignoreCase: {
              type: "boolean"
            },
            memberSyntaxSortOrder: {
              type: "array",
              items: {
                enum: ["none", "all", "multiple", "single"]
              },
              uniqueItems: true,
              minItems: 4,
              maxItems: 4
            },
            ignoreDeclarationSort: {
              type: "boolean"
            },
            ignoreMemberSort: {
              type: "boolean"
            },
            allowSeparatedGroups: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        sortImportsAlphabetically: "Imports should be sorted alphabetically.",
        sortMembersAlphabetically: "Member '{{memberName}}' of the import declaration should be sorted alphabetically.",
        unexpectedSyntaxOrder: "Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax."
      }
    },
    create(context) {
      const [
        {
          ignoreCase,
          ignoreDeclarationSort,
          ignoreMemberSort,
          memberSyntaxSortOrder,
          allowSeparatedGroups
        }
      ] = context.options;
      const sourceCode2 = context.sourceCode;
      let previousDeclaration = null;
      function usedMemberSyntax(node2) {
        if (node2.specifiers.length === 0) {
          return "none";
        }
        if (node2.specifiers[0].type === "ImportNamespaceSpecifier") {
          return "all";
        }
        if (node2.specifiers.length === 1) {
          return "single";
        }
        return "multiple";
      }
      function getMemberParameterGroupIndex(node2) {
        return memberSyntaxSortOrder.indexOf(usedMemberSyntax(node2));
      }
      function getFirstLocalMemberName(node2) {
        if (node2.specifiers[0]) {
          return node2.specifiers[0].local.name;
        }
        return null;
      }
      function getNumberOfLinesBetween(left, right) {
        return Math.max(right.loc.start.line - left.loc.end.line - 1, 0);
      }
      return {
        ImportDeclaration(node2) {
          if (!ignoreDeclarationSort) {
            if (previousDeclaration && allowSeparatedGroups && getNumberOfLinesBetween(previousDeclaration, node2) > 0) {
              previousDeclaration = null;
            }
            if (previousDeclaration) {
              const currentMemberSyntaxGroupIndex = getMemberParameterGroupIndex(node2), previousMemberSyntaxGroupIndex = getMemberParameterGroupIndex(
                previousDeclaration
              );
              let currentLocalMemberName = getFirstLocalMemberName(node2), previousLocalMemberName = getFirstLocalMemberName(previousDeclaration);
              if (ignoreCase) {
                previousLocalMemberName = previousLocalMemberName && previousLocalMemberName.toLowerCase();
                currentLocalMemberName = currentLocalMemberName && currentLocalMemberName.toLowerCase();
              }
              if (currentMemberSyntaxGroupIndex !== previousMemberSyntaxGroupIndex) {
                if (currentMemberSyntaxGroupIndex < previousMemberSyntaxGroupIndex) {
                  context.report({
                    node: node2,
                    messageId: "unexpectedSyntaxOrder",
                    data: {
                      syntaxA: memberSyntaxSortOrder[currentMemberSyntaxGroupIndex],
                      syntaxB: memberSyntaxSortOrder[previousMemberSyntaxGroupIndex]
                    }
                  });
                }
              } else {
                if (previousLocalMemberName && currentLocalMemberName && currentLocalMemberName < previousLocalMemberName) {
                  context.report({
                    node: node2,
                    messageId: "sortImportsAlphabetically"
                  });
                }
              }
            }
            previousDeclaration = node2;
          }
          if (!ignoreMemberSort) {
            const importSpecifiers = node2.specifiers.filter(
              (specifier) => specifier.type === "ImportSpecifier"
            );
            const getSortableName = ignoreCase ? (specifier) => specifier.local.name.toLowerCase() : (specifier) => specifier.local.name;
            const firstUnsortedIndex = importSpecifiers.map(getSortableName).findIndex(
              (name, index, array) => array[index - 1] > name
            );
            if (firstUnsortedIndex !== -1) {
              context.report({
                node: importSpecifiers[firstUnsortedIndex],
                messageId: "sortMembersAlphabetically",
                data: {
                  memberName: importSpecifiers[firstUnsortedIndex].local.name
                },
                fix(fixer) {
                  if (importSpecifiers.some(
                    (specifier) => sourceCode2.getCommentsBefore(
                      specifier
                    ).length || sourceCode2.getCommentsAfter(
                      specifier
                    ).length
                  )) {
                    return null;
                  }
                  return fixer.replaceTextRange(
                    [
                      importSpecifiers[0].range[0],
                      importSpecifiers.at(-1).range[1]
                    ],
                    importSpecifiers.slice().sort((specifierA, specifierB) => {
                      const aName = getSortableName(specifierA);
                      const bName = getSortableName(specifierB);
                      return aName > bName ? 1 : -1;
                    }).reduce(
                      (sourceText, specifier, index) => {
                        const textAfterSpecifier = index === importSpecifiers.length - 1 ? "" : sourceCode2.getText().slice(
                          importSpecifiers[index].range[1],
                          importSpecifiers[index + 1].range[0]
                        );
                        return sourceText + sourceCode2.getText(
                          specifier
                        ) + textAfterSpecifier;
                      },
                      ""
                    )
                  );
                }
              });
            }
          }
        }
      };
    }
  };
  return sortImports;
}
var naturalCompare = { exports: {} };
var hasRequiredNaturalCompare;
function requireNaturalCompare() {
  if (hasRequiredNaturalCompare) return naturalCompare.exports;
  hasRequiredNaturalCompare = 1;
  /*
   * @version    1.4.0
   * @date       2015-10-26
   * @stability  3 - Stable
   * @author     Lauri Rooden (https://github.com/litejs/natural-compare-lite)
   * @license    MIT License
   */
  var naturalCompare$1 = function(a2, b) {
    var i2, codeA, codeB = 1, posA = 0, posB = 0, alphabet = String.alphabet;
    function getCode(str, pos, code2) {
      if (code2) {
        for (i2 = pos; code2 = getCode(str, i2), code2 < 76 && code2 > 65; ) ++i2;
        return +str.slice(pos - 1, i2);
      }
      code2 = alphabet && alphabet.indexOf(str.charAt(pos));
      return code2 > -1 ? code2 + 76 : (code2 = str.charCodeAt(pos) || 0, code2 < 45 || code2 > 127) ? code2 : code2 < 46 ? 65 : code2 < 48 ? code2 - 1 : code2 < 58 ? code2 + 18 : code2 < 65 ? code2 - 11 : code2 < 91 ? code2 + 11 : code2 < 97 ? code2 - 37 : code2 < 123 ? code2 + 5 : code2 - 63;
    }
    if ((a2 += "") != (b += "")) for (; codeB; ) {
      codeA = getCode(a2, posA++);
      codeB = getCode(b, posB++);
      if (codeA < 76 && codeB < 76 && codeA > 66 && codeB > 66) {
        codeA = getCode(a2, posA, posA);
        codeB = getCode(b, posB, posA = i2);
        posB = i2;
      }
      if (codeA != codeB) return codeA < codeB ? -1 : 1;
    }
    return 0;
  };
  try {
    naturalCompare.exports = naturalCompare$1;
  } catch (e2) {
    String.naturalCompare = naturalCompare$1;
  }
  return naturalCompare.exports;
}
var sortKeys;
var hasRequiredSortKeys;
function requireSortKeys() {
  if (hasRequiredSortKeys) return sortKeys;
  hasRequiredSortKeys = 1;
  const astUtils2 = requireAstUtils(), naturalCompare2 = requireNaturalCompare();
  function getPropertyName(node2) {
    const staticName = astUtils2.getStaticPropertyName(node2);
    if (staticName !== null) {
      return staticName;
    }
    return node2.key.name || null;
  }
  const isValidOrders = {
    asc(a2, b) {
      return a2 <= b;
    },
    ascI(a2, b) {
      return a2.toLowerCase() <= b.toLowerCase();
    },
    ascN(a2, b) {
      return naturalCompare2(a2, b) <= 0;
    },
    ascIN(a2, b) {
      return naturalCompare2(a2.toLowerCase(), b.toLowerCase()) <= 0;
    },
    desc(a2, b) {
      return isValidOrders.asc(b, a2);
    },
    descI(a2, b) {
      return isValidOrders.ascI(b, a2);
    },
    descN(a2, b) {
      return isValidOrders.ascN(b, a2);
    },
    descIN(a2, b) {
      return isValidOrders.ascIN(b, a2);
    }
  };
  sortKeys = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        "asc",
        {
          allowLineSeparatedGroups: false,
          caseSensitive: true,
          ignoreComputedKeys: false,
          minKeys: 2,
          natural: false
        }
      ],
      docs: {
        description: "Require object keys to be sorted",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/sort-keys"
      },
      schema: [
        {
          enum: ["asc", "desc"]
        },
        {
          type: "object",
          properties: {
            caseSensitive: {
              type: "boolean"
            },
            natural: {
              type: "boolean"
            },
            minKeys: {
              type: "integer",
              minimum: 2
            },
            allowLineSeparatedGroups: {
              type: "boolean"
            },
            ignoreComputedKeys: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        sortKeys: "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'."
      }
    },
    create(context) {
      const [
        order,
        {
          caseSensitive,
          natural,
          minKeys,
          allowLineSeparatedGroups,
          ignoreComputedKeys
        }
      ] = context.options;
      const insensitive = !caseSensitive;
      const isValidOrder = isValidOrders[order + (insensitive ? "I" : "") + (natural ? "N" : "")];
      let stack = null;
      const sourceCode2 = context.sourceCode;
      return {
        ObjectExpression(node2) {
          stack = {
            upper: stack,
            prevNode: null,
            prevBlankLine: false,
            prevName: null,
            numKeys: node2.properties.length
          };
        },
        "ObjectExpression:exit"() {
          stack = stack.upper;
        },
        SpreadElement(node2) {
          if (node2.parent.type === "ObjectExpression") {
            stack.prevName = null;
          }
        },
        Property(node2) {
          if (node2.parent.type === "ObjectPattern") {
            return;
          }
          if (ignoreComputedKeys && node2.computed) {
            stack.prevName = null;
            return;
          }
          const prevName = stack.prevName;
          const numKeys = stack.numKeys;
          const thisName = getPropertyName(node2);
          const tokens = stack.prevNode && sourceCode2.getTokensBetween(stack.prevNode, node2, {
            includeComments: true
          });
          let isBlankLineBetweenNodes = stack.prevBlankLine;
          if (tokens) {
            tokens.forEach((token, index) => {
              const previousToken = tokens[index - 1];
              if (previousToken && token.loc.start.line - previousToken.loc.end.line > 1) {
                isBlankLineBetweenNodes = true;
              }
            });
            if (!isBlankLineBetweenNodes && node2.loc.start.line - tokens.at(-1).loc.end.line > 1) {
              isBlankLineBetweenNodes = true;
            }
            if (!isBlankLineBetweenNodes && tokens[0].loc.start.line - stack.prevNode.loc.end.line > 1) {
              isBlankLineBetweenNodes = true;
            }
          }
          stack.prevNode = node2;
          if (thisName !== null) {
            stack.prevName = thisName;
          }
          if (allowLineSeparatedGroups && isBlankLineBetweenNodes) {
            stack.prevBlankLine = thisName === null;
            return;
          }
          if (prevName === null || thisName === null || numKeys < minKeys) {
            return;
          }
          if (!isValidOrder(prevName, thisName)) {
            context.report({
              node: node2,
              loc: node2.key.loc,
              messageId: "sortKeys",
              data: {
                thisName,
                prevName,
                order,
                insensitive: insensitive ? "insensitive " : "",
                natural: natural ? "natural " : ""
              }
            });
          }
        }
      };
    }
  };
  return sortKeys;
}
var sortVars;
var hasRequiredSortVars;
function requireSortVars() {
  if (hasRequiredSortVars) return sortVars;
  hasRequiredSortVars = 1;
  sortVars = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        {
          ignoreCase: false
        }
      ],
      docs: {
        description: "Require variables within the same declaration block to be sorted",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/sort-vars"
      },
      schema: [
        {
          type: "object",
          properties: {
            ignoreCase: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        sortVars: "Variables within the same declaration block should be sorted alphabetically."
      }
    },
    create(context) {
      const [{ ignoreCase }] = context.options;
      const sourceCode2 = context.sourceCode;
      return {
        VariableDeclaration(node2) {
          const idDeclarations = node2.declarations.filter(
            (decl) => decl.id.type === "Identifier"
          );
          const getSortableName = ignoreCase ? (decl) => decl.id.name.toLowerCase() : (decl) => decl.id.name;
          const unfixable = idDeclarations.some(
            (decl) => decl.init !== null && decl.init.type !== "Literal"
          );
          let fixed = false;
          idDeclarations.slice(1).reduce((memo, decl) => {
            const lastVariableName = getSortableName(memo), currentVariableName = getSortableName(decl);
            if (currentVariableName < lastVariableName) {
              context.report({
                node: decl,
                messageId: "sortVars",
                fix(fixer) {
                  if (unfixable || fixed) {
                    return null;
                  }
                  return fixer.replaceTextRange(
                    [
                      idDeclarations[0].range[0],
                      idDeclarations.at(-1).range[1]
                    ],
                    idDeclarations.slice().sort((declA, declB) => {
                      const aName = getSortableName(declA);
                      const bName = getSortableName(declB);
                      return aName > bName ? 1 : -1;
                    }).reduce(
                      (sourceText, identifier, index) => {
                        const textAfterIdentifier = index === idDeclarations.length - 1 ? "" : sourceCode2.getText().slice(
                          idDeclarations[index].range[1],
                          idDeclarations[index + 1].range[0]
                        );
                        return sourceText + sourceCode2.getText(
                          identifier
                        ) + textAfterIdentifier;
                      },
                      ""
                    )
                  );
                }
              });
              fixed = true;
              return memo;
            }
            return decl;
          }, idDeclarations[0]);
        }
      };
    }
  };
  return sortVars;
}
var spaceBeforeBlocks;
var hasRequiredSpaceBeforeBlocks;
function requireSpaceBeforeBlocks() {
  if (hasRequiredSpaceBeforeBlocks) return spaceBeforeBlocks;
  hasRequiredSpaceBeforeBlocks = 1;
  const astUtils2 = requireAstUtils();
  function isFunctionBody(node2) {
    const parent = node2.parent;
    return node2.type === "BlockStatement" && astUtils2.isFunction(parent) && parent.body === node2;
  }
  spaceBeforeBlocks = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "space-before-blocks",
              url: "https://eslint.style/rules/space-before-blocks"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing before blocks",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/space-before-blocks"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: ["always", "never"]
            },
            {
              type: "object",
              properties: {
                keywords: {
                  enum: ["always", "never", "off"]
                },
                functions: {
                  enum: ["always", "never", "off"]
                },
                classes: {
                  enum: ["always", "never", "off"]
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        unexpectedSpace: "Unexpected space before opening brace.",
        missingSpace: "Missing space before opening brace."
      }
    },
    create(context) {
      const config2 = context.options[0], sourceCode2 = context.sourceCode;
      let alwaysFunctions = true, alwaysKeywords = true, alwaysClasses = true, neverFunctions = false, neverKeywords = false, neverClasses = false;
      if (typeof config2 === "object") {
        alwaysFunctions = config2.functions === "always";
        alwaysKeywords = config2.keywords === "always";
        alwaysClasses = config2.classes === "always";
        neverFunctions = config2.functions === "never";
        neverKeywords = config2.keywords === "never";
        neverClasses = config2.classes === "never";
      } else if (config2 === "never") {
        alwaysFunctions = false;
        alwaysKeywords = false;
        alwaysClasses = false;
        neverFunctions = true;
        neverKeywords = true;
        neverClasses = true;
      }
      function isConflicted(precedingToken, node2) {
        return astUtils2.isArrowToken(precedingToken) || astUtils2.isKeywordToken(precedingToken) && !isFunctionBody(node2) || astUtils2.isColonToken(precedingToken) && node2.parent && node2.parent.type === "SwitchCase" && precedingToken === astUtils2.getSwitchCaseColonToken(
          node2.parent,
          sourceCode2
        );
      }
      function checkPrecedingSpace(node2) {
        const precedingToken = sourceCode2.getTokenBefore(node2);
        if (precedingToken && !isConflicted(precedingToken, node2) && astUtils2.isTokenOnSameLine(precedingToken, node2)) {
          const hasSpace = sourceCode2.isSpaceBetweenTokens(
            precedingToken,
            node2
          );
          let requireSpace;
          let requireNoSpace;
          if (isFunctionBody(node2)) {
            requireSpace = alwaysFunctions;
            requireNoSpace = neverFunctions;
          } else if (node2.type === "ClassBody") {
            requireSpace = alwaysClasses;
            requireNoSpace = neverClasses;
          } else {
            requireSpace = alwaysKeywords;
            requireNoSpace = neverKeywords;
          }
          if (requireSpace && !hasSpace) {
            context.report({
              node: node2,
              messageId: "missingSpace",
              fix(fixer) {
                return fixer.insertTextBefore(node2, " ");
              }
            });
          } else if (requireNoSpace && hasSpace) {
            context.report({
              node: node2,
              messageId: "unexpectedSpace",
              fix(fixer) {
                return fixer.removeRange([
                  precedingToken.range[1],
                  node2.range[0]
                ]);
              }
            });
          }
        }
      }
      function checkSpaceBeforeCaseBlock(node2) {
        const cases = node2.cases;
        let openingBrace;
        if (cases.length > 0) {
          openingBrace = sourceCode2.getTokenBefore(cases[0]);
        } else {
          openingBrace = sourceCode2.getLastToken(node2, 1);
        }
        checkPrecedingSpace(openingBrace);
      }
      return {
        BlockStatement: checkPrecedingSpace,
        ClassBody: checkPrecedingSpace,
        SwitchStatement: checkSpaceBeforeCaseBlock
      };
    }
  };
  return spaceBeforeBlocks;
}
var spaceBeforeFunctionParen;
var hasRequiredSpaceBeforeFunctionParen;
function requireSpaceBeforeFunctionParen() {
  if (hasRequiredSpaceBeforeFunctionParen) return spaceBeforeFunctionParen;
  hasRequiredSpaceBeforeFunctionParen = 1;
  const astUtils2 = requireAstUtils();
  spaceBeforeFunctionParen = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "space-before-function-paren",
              url: "https://eslint.style/rules/space-before-function-paren"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing before `function` definition opening parenthesis",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/space-before-function-paren"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: ["always", "never"]
            },
            {
              type: "object",
              properties: {
                anonymous: {
                  enum: ["always", "never", "ignore"]
                },
                named: {
                  enum: ["always", "never", "ignore"]
                },
                asyncArrow: {
                  enum: ["always", "never", "ignore"]
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        unexpectedSpace: "Unexpected space before function parentheses.",
        missingSpace: "Missing space before function parentheses."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const baseConfig = typeof context.options[0] === "string" ? context.options[0] : "always";
      const overrideConfig = typeof context.options[0] === "object" ? context.options[0] : {};
      function isNamedFunction(node2) {
        if (node2.id) {
          return true;
        }
        const parent = node2.parent;
        return parent.type === "MethodDefinition" || parent.type === "Property" && (parent.kind === "get" || parent.kind === "set" || parent.method);
      }
      function getConfigForFunction(node2) {
        if (node2.type === "ArrowFunctionExpression") {
          if (node2.async && astUtils2.isOpeningParenToken(
            sourceCode2.getFirstToken(node2, { skip: 1 })
          )) {
            return overrideConfig.asyncArrow || baseConfig;
          }
        } else if (isNamedFunction(node2)) {
          return overrideConfig.named || baseConfig;
        } else if (!node2.generator) {
          return overrideConfig.anonymous || baseConfig;
        }
        return "ignore";
      }
      function checkFunction(node2) {
        const functionConfig = getConfigForFunction(node2);
        if (functionConfig === "ignore") {
          return;
        }
        const rightToken = sourceCode2.getFirstToken(
          node2,
          astUtils2.isOpeningParenToken
        );
        const leftToken = sourceCode2.getTokenBefore(rightToken);
        const hasSpacing = sourceCode2.isSpaceBetweenTokens(
          leftToken,
          rightToken
        );
        if (hasSpacing && functionConfig === "never") {
          context.report({
            node: node2,
            loc: {
              start: leftToken.loc.end,
              end: rightToken.loc.start
            },
            messageId: "unexpectedSpace",
            fix(fixer) {
              const comments = sourceCode2.getCommentsBefore(rightToken);
              if (comments.some((comment2) => comment2.type === "Line")) {
                return null;
              }
              return fixer.replaceTextRange(
                [leftToken.range[1], rightToken.range[0]],
                comments.reduce(
                  (text, comment2) => text + sourceCode2.getText(comment2),
                  ""
                )
              );
            }
          });
        } else if (!hasSpacing && functionConfig === "always") {
          context.report({
            node: node2,
            loc: rightToken.loc,
            messageId: "missingSpace",
            fix: (fixer) => fixer.insertTextAfter(leftToken, " ")
          });
        }
      }
      return {
        ArrowFunctionExpression: checkFunction,
        FunctionDeclaration: checkFunction,
        FunctionExpression: checkFunction
      };
    }
  };
  return spaceBeforeFunctionParen;
}
var spaceInParens;
var hasRequiredSpaceInParens;
function requireSpaceInParens() {
  if (hasRequiredSpaceInParens) return spaceInParens;
  hasRequiredSpaceInParens = 1;
  const astUtils2 = requireAstUtils();
  spaceInParens = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "space-in-parens",
              url: "https://eslint.style/rules/space-in-parens"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing inside parentheses",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/space-in-parens"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never"]
        },
        {
          type: "object",
          properties: {
            exceptions: {
              type: "array",
              items: {
                enum: ["{}", "[]", "()", "empty"]
              },
              uniqueItems: true
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        missingOpeningSpace: "There must be a space after this paren.",
        missingClosingSpace: "There must be a space before this paren.",
        rejectedOpeningSpace: "There should be no space after this paren.",
        rejectedClosingSpace: "There should be no space before this paren."
      }
    },
    create(context) {
      const ALWAYS = context.options[0] === "always", exceptionsArrayOptions = context.options[1] && context.options[1].exceptions || [], options = {};
      let exceptions;
      if (exceptionsArrayOptions.length) {
        options.braceException = exceptionsArrayOptions.includes("{}");
        options.bracketException = exceptionsArrayOptions.includes("[]");
        options.parenException = exceptionsArrayOptions.includes("()");
        options.empty = exceptionsArrayOptions.includes("empty");
      }
      function getExceptions() {
        const openers = [], closers = [];
        if (options.braceException) {
          openers.push("{");
          closers.push("}");
        }
        if (options.bracketException) {
          openers.push("[");
          closers.push("]");
        }
        if (options.parenException) {
          openers.push("(");
          closers.push(")");
        }
        if (options.empty) {
          openers.push(")");
          closers.push("(");
        }
        return {
          openers,
          closers
        };
      }
      const sourceCode2 = context.sourceCode;
      function isOpenerException(token) {
        return exceptions.openers.includes(token.value);
      }
      function isCloserException(token) {
        return exceptions.closers.includes(token.value);
      }
      function openerMissingSpace(openingParenToken, tokenAfterOpeningParen) {
        if (sourceCode2.isSpaceBetweenTokens(
          openingParenToken,
          tokenAfterOpeningParen
        )) {
          return false;
        }
        if (!options.empty && astUtils2.isClosingParenToken(tokenAfterOpeningParen)) {
          return false;
        }
        if (ALWAYS) {
          return !isOpenerException(tokenAfterOpeningParen);
        }
        return isOpenerException(tokenAfterOpeningParen);
      }
      function openerRejectsSpace(openingParenToken, tokenAfterOpeningParen) {
        if (!astUtils2.isTokenOnSameLine(
          openingParenToken,
          tokenAfterOpeningParen
        )) {
          return false;
        }
        if (tokenAfterOpeningParen.type === "Line") {
          return false;
        }
        if (!sourceCode2.isSpaceBetweenTokens(
          openingParenToken,
          tokenAfterOpeningParen
        )) {
          return false;
        }
        if (ALWAYS) {
          return isOpenerException(tokenAfterOpeningParen);
        }
        return !isOpenerException(tokenAfterOpeningParen);
      }
      function closerMissingSpace(tokenBeforeClosingParen, closingParenToken) {
        if (sourceCode2.isSpaceBetweenTokens(
          tokenBeforeClosingParen,
          closingParenToken
        )) {
          return false;
        }
        if (!options.empty && astUtils2.isOpeningParenToken(tokenBeforeClosingParen)) {
          return false;
        }
        if (ALWAYS) {
          return !isCloserException(tokenBeforeClosingParen);
        }
        return isCloserException(tokenBeforeClosingParen);
      }
      function closerRejectsSpace(tokenBeforeClosingParen, closingParenToken) {
        if (!astUtils2.isTokenOnSameLine(
          tokenBeforeClosingParen,
          closingParenToken
        )) {
          return false;
        }
        if (!sourceCode2.isSpaceBetweenTokens(
          tokenBeforeClosingParen,
          closingParenToken
        )) {
          return false;
        }
        if (ALWAYS) {
          return isCloserException(tokenBeforeClosingParen);
        }
        return !isCloserException(tokenBeforeClosingParen);
      }
      return {
        Program: function checkParenSpaces(node2) {
          exceptions = getExceptions();
          const tokens = sourceCode2.tokensAndComments;
          tokens.forEach((token, i2) => {
            const prevToken = tokens[i2 - 1];
            const nextToken = tokens[i2 + 1];
            if (!astUtils2.isOpeningParenToken(token) && !astUtils2.isClosingParenToken(token)) {
              return;
            }
            if (token.value === "(" && openerMissingSpace(token, nextToken)) {
              context.report({
                node: node2,
                loc: token.loc,
                messageId: "missingOpeningSpace",
                fix(fixer) {
                  return fixer.insertTextAfter(token, " ");
                }
              });
            }
            if (token.value === "(" && openerRejectsSpace(token, nextToken)) {
              context.report({
                node: node2,
                loc: {
                  start: token.loc.end,
                  end: nextToken.loc.start
                },
                messageId: "rejectedOpeningSpace",
                fix(fixer) {
                  return fixer.removeRange([
                    token.range[1],
                    nextToken.range[0]
                  ]);
                }
              });
            }
            if (token.value === ")" && closerMissingSpace(prevToken, token)) {
              context.report({
                node: node2,
                loc: token.loc,
                messageId: "missingClosingSpace",
                fix(fixer) {
                  return fixer.insertTextBefore(token, " ");
                }
              });
            }
            if (token.value === ")" && closerRejectsSpace(prevToken, token)) {
              context.report({
                node: node2,
                loc: {
                  start: prevToken.loc.end,
                  end: token.loc.start
                },
                messageId: "rejectedClosingSpace",
                fix(fixer) {
                  return fixer.removeRange([
                    prevToken.range[1],
                    token.range[0]
                  ]);
                }
              });
            }
          });
        }
      };
    }
  };
  return spaceInParens;
}
var spaceInfixOps;
var hasRequiredSpaceInfixOps;
function requireSpaceInfixOps() {
  if (hasRequiredSpaceInfixOps) return spaceInfixOps;
  hasRequiredSpaceInfixOps = 1;
  const { isEqToken } = requireAstUtils();
  spaceInfixOps = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "space-infix-ops",
              url: "https://eslint.style/rules/space-infix-ops"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require spacing around infix operators",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/space-infix-ops"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            int32Hint: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        missingSpace: "Operator '{{operator}}' must be spaced."
      }
    },
    create(context) {
      const int32Hint = context.options[0] ? context.options[0].int32Hint === true : false;
      const sourceCode2 = context.sourceCode;
      function getFirstNonSpacedToken(left, right, op) {
        const operator = sourceCode2.getFirstTokenBetween(
          left,
          right,
          (token) => token.value === op
        );
        const prev = sourceCode2.getTokenBefore(operator);
        const next = sourceCode2.getTokenAfter(operator);
        if (!sourceCode2.isSpaceBetweenTokens(prev, operator) || !sourceCode2.isSpaceBetweenTokens(operator, next)) {
          return operator;
        }
        return null;
      }
      function report(mainNode, culpritToken) {
        context.report({
          node: mainNode,
          loc: culpritToken.loc,
          messageId: "missingSpace",
          data: {
            operator: culpritToken.value
          },
          fix(fixer) {
            const previousToken = sourceCode2.getTokenBefore(culpritToken);
            const afterToken = sourceCode2.getTokenAfter(culpritToken);
            let fixString = "";
            if (culpritToken.range[0] - previousToken.range[1] === 0) {
              fixString = " ";
            }
            fixString += culpritToken.value;
            if (afterToken.range[0] - culpritToken.range[1] === 0) {
              fixString += " ";
            }
            return fixer.replaceText(culpritToken, fixString);
          }
        });
      }
      function checkBinary(node2) {
        const leftNode = node2.left.typeAnnotation ? node2.left.typeAnnotation : node2.left;
        const rightNode = node2.right;
        const operator = node2.operator || "=";
        const nonSpacedNode = getFirstNonSpacedToken(
          leftNode,
          rightNode,
          operator
        );
        if (nonSpacedNode) {
          if (!(int32Hint && sourceCode2.getText(node2).endsWith("|0"))) {
            report(node2, nonSpacedNode);
          }
        }
      }
      function checkConditional(node2) {
        const nonSpacedConsequentNode = getFirstNonSpacedToken(
          node2.test,
          node2.consequent,
          "?"
        );
        const nonSpacedAlternateNode = getFirstNonSpacedToken(
          node2.consequent,
          node2.alternate,
          ":"
        );
        if (nonSpacedConsequentNode) {
          report(node2, nonSpacedConsequentNode);
        }
        if (nonSpacedAlternateNode) {
          report(node2, nonSpacedAlternateNode);
        }
      }
      function checkVar(node2) {
        const leftNode = node2.id.typeAnnotation ? node2.id.typeAnnotation : node2.id;
        const rightNode = node2.init;
        if (rightNode) {
          const nonSpacedNode = getFirstNonSpacedToken(
            leftNode,
            rightNode,
            "="
          );
          if (nonSpacedNode) {
            report(node2, nonSpacedNode);
          }
        }
      }
      return {
        AssignmentExpression: checkBinary,
        AssignmentPattern: checkBinary,
        BinaryExpression: checkBinary,
        LogicalExpression: checkBinary,
        ConditionalExpression: checkConditional,
        VariableDeclarator: checkVar,
        PropertyDefinition(node2) {
          if (!node2.value) {
            return;
          }
          const operatorToken = sourceCode2.getTokenBefore(
            node2.value,
            isEqToken
          );
          const leftToken = sourceCode2.getTokenBefore(operatorToken);
          const rightToken = sourceCode2.getTokenAfter(operatorToken);
          if (!sourceCode2.isSpaceBetweenTokens(
            leftToken,
            operatorToken
          ) || !sourceCode2.isSpaceBetweenTokens(operatorToken, rightToken)) {
            report(node2, operatorToken);
          }
        }
      };
    }
  };
  return spaceInfixOps;
}
var spaceUnaryOps;
var hasRequiredSpaceUnaryOps;
function requireSpaceUnaryOps() {
  if (hasRequiredSpaceUnaryOps) return spaceUnaryOps;
  hasRequiredSpaceUnaryOps = 1;
  const astUtils2 = requireAstUtils();
  spaceUnaryOps = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "space-unary-ops",
              url: "https://eslint.style/rules/space-unary-ops"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce consistent spacing before or after unary operators",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/space-unary-ops"
      },
      fixable: "whitespace",
      schema: [
        {
          type: "object",
          properties: {
            words: {
              type: "boolean",
              default: true
            },
            nonwords: {
              type: "boolean",
              default: false
            },
            overrides: {
              type: "object",
              additionalProperties: {
                type: "boolean"
              }
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedBefore: "Unexpected space before unary operator '{{operator}}'.",
        unexpectedAfter: "Unexpected space after unary operator '{{operator}}'.",
        unexpectedAfterWord: "Unexpected space after unary word operator '{{word}}'.",
        wordOperator: "Unary word operator '{{word}}' must be followed by whitespace.",
        operator: "Unary operator '{{operator}}' must be followed by whitespace.",
        beforeUnaryExpressions: "Space is required before unary expressions '{{token}}'."
      }
    },
    create(context) {
      const options = context.options[0] || { words: true, nonwords: false };
      const sourceCode2 = context.sourceCode;
      function isFirstBangInBangBangExpression(node2) {
        return node2 && node2.type === "UnaryExpression" && node2.argument.operator === "!" && node2.argument && node2.argument.type === "UnaryExpression" && node2.argument.operator === "!";
      }
      function overrideExistsForOperator(operator) {
        return options.overrides && Object.hasOwn(options.overrides, operator);
      }
      function overrideEnforcesSpaces(operator) {
        return options.overrides[operator];
      }
      function verifyWordHasSpaces(node2, firstToken, secondToken, word) {
        if (secondToken.range[0] === firstToken.range[1]) {
          context.report({
            node: node2,
            messageId: "wordOperator",
            data: {
              word
            },
            fix(fixer) {
              return fixer.insertTextAfter(firstToken, " ");
            }
          });
        }
      }
      function verifyWordDoesntHaveSpaces(node2, firstToken, secondToken, word) {
        if (astUtils2.canTokensBeAdjacent(firstToken, secondToken)) {
          if (secondToken.range[0] > firstToken.range[1]) {
            context.report({
              node: node2,
              messageId: "unexpectedAfterWord",
              data: {
                word
              },
              fix(fixer) {
                return fixer.removeRange([
                  firstToken.range[1],
                  secondToken.range[0]
                ]);
              }
            });
          }
        }
      }
      function checkUnaryWordOperatorForSpaces(node2, firstToken, secondToken, word) {
        if (overrideExistsForOperator(word)) {
          if (overrideEnforcesSpaces(word)) {
            verifyWordHasSpaces(node2, firstToken, secondToken, word);
          } else {
            verifyWordDoesntHaveSpaces(
              node2,
              firstToken,
              secondToken,
              word
            );
          }
        } else if (options.words) {
          verifyWordHasSpaces(node2, firstToken, secondToken, word);
        } else {
          verifyWordDoesntHaveSpaces(node2, firstToken, secondToken, word);
        }
      }
      function checkForSpacesAfterYield(node2) {
        const tokens = sourceCode2.getFirstTokens(node2, 3), word = "yield";
        if (!node2.argument || node2.delegate) {
          return;
        }
        checkUnaryWordOperatorForSpaces(node2, tokens[0], tokens[1], word);
      }
      function checkForSpacesAfterAwait(node2) {
        const tokens = sourceCode2.getFirstTokens(node2, 3);
        checkUnaryWordOperatorForSpaces(
          node2,
          tokens[0],
          tokens[1],
          "await"
        );
      }
      function verifyNonWordsHaveSpaces(node2, firstToken, secondToken) {
        if (node2.prefix) {
          if (isFirstBangInBangBangExpression(node2)) {
            return;
          }
          if (firstToken.range[1] === secondToken.range[0]) {
            context.report({
              node: node2,
              messageId: "operator",
              data: {
                operator: firstToken.value
              },
              fix(fixer) {
                return fixer.insertTextAfter(firstToken, " ");
              }
            });
          }
        } else {
          if (firstToken.range[1] === secondToken.range[0]) {
            context.report({
              node: node2,
              messageId: "beforeUnaryExpressions",
              data: {
                token: secondToken.value
              },
              fix(fixer) {
                return fixer.insertTextBefore(secondToken, " ");
              }
            });
          }
        }
      }
      function verifyNonWordsDontHaveSpaces(node2, firstToken, secondToken) {
        if (node2.prefix) {
          if (secondToken.range[0] > firstToken.range[1]) {
            context.report({
              node: node2,
              messageId: "unexpectedAfter",
              data: {
                operator: firstToken.value
              },
              fix(fixer) {
                if (astUtils2.canTokensBeAdjacent(
                  firstToken,
                  secondToken
                )) {
                  return fixer.removeRange([
                    firstToken.range[1],
                    secondToken.range[0]
                  ]);
                }
                return null;
              }
            });
          }
        } else {
          if (secondToken.range[0] > firstToken.range[1]) {
            context.report({
              node: node2,
              messageId: "unexpectedBefore",
              data: {
                operator: secondToken.value
              },
              fix(fixer) {
                return fixer.removeRange([
                  firstToken.range[1],
                  secondToken.range[0]
                ]);
              }
            });
          }
        }
      }
      function checkForSpaces(node2) {
        const tokens = node2.type === "UpdateExpression" && !node2.prefix ? sourceCode2.getLastTokens(node2, 2) : sourceCode2.getFirstTokens(node2, 2);
        const firstToken = tokens[0];
        const secondToken = tokens[1];
        if ((node2.type === "NewExpression" || node2.prefix) && firstToken.type === "Keyword") {
          checkUnaryWordOperatorForSpaces(
            node2,
            firstToken,
            secondToken,
            firstToken.value
          );
          return;
        }
        const operator = node2.prefix ? tokens[0].value : tokens[1].value;
        if (overrideExistsForOperator(operator)) {
          if (overrideEnforcesSpaces(operator)) {
            verifyNonWordsHaveSpaces(node2, firstToken, secondToken);
          } else {
            verifyNonWordsDontHaveSpaces(node2, firstToken, secondToken);
          }
        } else if (options.nonwords) {
          verifyNonWordsHaveSpaces(node2, firstToken, secondToken);
        } else {
          verifyNonWordsDontHaveSpaces(node2, firstToken, secondToken);
        }
      }
      return {
        UnaryExpression: checkForSpaces,
        UpdateExpression: checkForSpaces,
        NewExpression: checkForSpaces,
        YieldExpression: checkForSpacesAfterYield,
        AwaitExpression: checkForSpacesAfterAwait
      };
    }
  };
  return spaceUnaryOps;
}
var spacedComment;
var hasRequiredSpacedComment;
function requireSpacedComment() {
  if (hasRequiredSpacedComment) return spacedComment;
  hasRequiredSpacedComment = 1;
  const escapeRegExp = requireEscapeStringRegexp();
  const astUtils2 = requireAstUtils();
  function escape2(s2) {
    return `(?:${escapeRegExp(s2)})`;
  }
  function escapeAndRepeat(s2) {
    return `${escape2(s2)}+`;
  }
  function parseMarkersOption(markers) {
    if (!markers.includes("*")) {
      return markers.concat("*");
    }
    return markers;
  }
  function createExceptionsPattern(exceptions) {
    let pattern2 = "";
    if (exceptions.length === 0) {
      pattern2 += "\\s";
    } else {
      pattern2 += "(?:\\s|";
      if (exceptions.length === 1) {
        pattern2 += escapeAndRepeat(exceptions[0]);
      } else {
        pattern2 += "(?:";
        pattern2 += exceptions.map(escapeAndRepeat).join("|");
        pattern2 += ")";
      }
      pattern2 += `(?:$|[${Array.from(astUtils2.LINEBREAKS).join("")}]))`;
    }
    return pattern2;
  }
  function createAlwaysStylePattern(markers, exceptions) {
    let pattern2 = "^";
    if (markers.length === 1) {
      pattern2 += escape2(markers[0]);
    } else {
      pattern2 += "(?:";
      pattern2 += markers.map(escape2).join("|");
      pattern2 += ")";
    }
    pattern2 += "?";
    pattern2 += createExceptionsPattern(exceptions);
    return new RegExp(pattern2, "u");
  }
  function createNeverStylePattern(markers) {
    const pattern2 = `^(${markers.map(escape2).join("|")})?[ 	]+`;
    return new RegExp(pattern2, "u");
  }
  spacedComment = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "spaced-comment",
              url: "https://eslint.style/rules/spaced-comment"
            }
          }
        ]
      },
      type: "suggestion",
      docs: {
        description: "Enforce consistent spacing after the `//` or `/*` in a comment",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/spaced-comment"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never"]
        },
        {
          type: "object",
          properties: {
            exceptions: {
              type: "array",
              items: {
                type: "string"
              }
            },
            markers: {
              type: "array",
              items: {
                type: "string"
              }
            },
            line: {
              type: "object",
              properties: {
                exceptions: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                markers: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              },
              additionalProperties: false
            },
            block: {
              type: "object",
              properties: {
                exceptions: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                markers: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                balanced: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        unexpectedSpaceAfterMarker: "Unexpected space or tab after marker ({{refChar}}) in comment.",
        expectedExceptionAfter: "Expected exception block, space or tab after '{{refChar}}' in comment.",
        unexpectedSpaceBefore: "Unexpected space or tab before '*/' in comment.",
        unexpectedSpaceAfter: "Unexpected space or tab after '{{refChar}}' in comment.",
        expectedSpaceBefore: "Expected space or tab before '*/' in comment.",
        expectedSpaceAfter: "Expected space or tab after '{{refChar}}' in comment."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const requireSpace = context.options[0] !== "never";
      const config2 = context.options[1] || {};
      const balanced = config2.block && config2.block.balanced;
      const styleRules = ["block", "line"].reduce((rule, type2) => {
        const markers = parseMarkersOption(
          config2[type2] && config2[type2].markers || config2.markers || []
        );
        const exceptions = config2[type2] && config2[type2].exceptions || config2.exceptions || [];
        const endNeverPattern = "[ 	]+$";
        rule[type2] = {
          beginRegex: requireSpace ? createAlwaysStylePattern(markers, exceptions) : createNeverStylePattern(markers),
          endRegex: balanced && requireSpace ? new RegExp(
            `${createExceptionsPattern(exceptions)}$`,
            "u"
          ) : new RegExp(endNeverPattern, "u"),
          hasExceptions: exceptions.length > 0,
          captureMarker: new RegExp(
            `^(${markers.map(escape2).join("|")})`,
            "u"
          ),
          markers: new Set(markers)
        };
        return rule;
      }, {});
      function reportBegin(node2, messageId, match, refChar) {
        const type2 = node2.type.toLowerCase(), commentIdentifier = type2 === "block" ? "/*" : "//";
        context.report({
          node: node2,
          fix(fixer) {
            const start = node2.range[0];
            let end = start + 2;
            if (requireSpace) {
              if (match) {
                end += match[0].length;
              }
              return fixer.insertTextAfterRange([start, end], " ");
            }
            end += match[0].length;
            return fixer.replaceTextRange(
              [start, end],
              commentIdentifier + (match[1] ? match[1] : "")
            );
          },
          messageId,
          data: { refChar }
        });
      }
      function reportEnd(node2, messageId, match) {
        context.report({
          node: node2,
          fix(fixer) {
            if (requireSpace) {
              return fixer.insertTextAfterRange(
                [node2.range[0], node2.range[1] - 2],
                " "
              );
            }
            const end = node2.range[1] - 2, start = end - match[0].length;
            return fixer.replaceTextRange([start, end], "");
          },
          messageId
        });
      }
      function checkCommentForSpace(node2) {
        const type2 = node2.type.toLowerCase(), rule = styleRules[type2], commentIdentifier = type2 === "block" ? "/*" : "//";
        if (node2.value.length === 0 || rule.markers.has(node2.value)) {
          return;
        }
        const beginMatch = rule.beginRegex.exec(node2.value);
        const endMatch = rule.endRegex.exec(node2.value);
        if (requireSpace) {
          if (!beginMatch) {
            const hasMarker = rule.captureMarker.exec(node2.value);
            const marker = hasMarker ? commentIdentifier + hasMarker[0] : commentIdentifier;
            if (rule.hasExceptions) {
              reportBegin(
                node2,
                "expectedExceptionAfter",
                hasMarker,
                marker
              );
            } else {
              reportBegin(
                node2,
                "expectedSpaceAfter",
                hasMarker,
                marker
              );
            }
          }
          if (balanced && type2 === "block" && !endMatch) {
            reportEnd(node2, "expectedSpaceBefore");
          }
        } else {
          if (beginMatch) {
            if (!beginMatch[1]) {
              reportBegin(
                node2,
                "unexpectedSpaceAfter",
                beginMatch,
                commentIdentifier
              );
            } else {
              reportBegin(
                node2,
                "unexpectedSpaceAfterMarker",
                beginMatch,
                beginMatch[1]
              );
            }
          }
          if (balanced && type2 === "block" && endMatch) {
            reportEnd(node2, "unexpectedSpaceBefore", endMatch);
          }
        }
      }
      return {
        Program() {
          const comments = sourceCode2.getAllComments();
          comments.filter((token) => token.type !== "Shebang").forEach(checkCommentForSpace);
        }
      };
    }
  };
  return spacedComment;
}
var strict;
var hasRequiredStrict;
function requireStrict() {
  if (hasRequiredStrict) return strict;
  hasRequiredStrict = 1;
  const astUtils2 = requireAstUtils();
  function getUseStrictDirectives(statements) {
    const directives2 = [];
    for (let i2 = 0; i2 < statements.length; i2++) {
      const statement = statements[i2];
      if (statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && statement.expression.value === "use strict") {
        directives2[i2] = statement;
      } else {
        break;
      }
    }
    return directives2;
  }
  function isSimpleParameter(node2) {
    return node2.type === "Identifier";
  }
  function isSimpleParameterList(params) {
    return params.every(isSimpleParameter);
  }
  strict = {
    meta: {
      type: "suggestion",
      defaultOptions: ["safe"],
      docs: {
        description: "Require or disallow strict mode directives",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/strict"
      },
      schema: [
        {
          enum: ["never", "global", "function", "safe"]
        }
      ],
      fixable: "code",
      messages: {
        function: "Use the function form of 'use strict'.",
        global: "Use the global form of 'use strict'.",
        multiple: "Multiple 'use strict' directives.",
        never: "Strict mode is not permitted.",
        unnecessary: "Unnecessary 'use strict' directive.",
        module: "'use strict' is unnecessary inside of modules.",
        implied: "'use strict' is unnecessary when implied strict mode is enabled.",
        unnecessaryInClasses: "'use strict' is unnecessary inside of classes.",
        nonSimpleParameterList: "'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.",
        wrap: "Wrap {{name}} in a function with 'use strict' directive."
      }
    },
    create(context) {
      const ecmaFeatures = context.languageOptions.parserOptions.ecmaFeatures || {}, scopes = [], classScopes = [];
      let [mode] = context.options;
      if (ecmaFeatures.impliedStrict) {
        mode = "implied";
      } else if (mode === "safe") {
        mode = ecmaFeatures.globalReturn || context.languageOptions.sourceType === "commonjs" ? "global" : "function";
      }
      function shouldFix(errorType) {
        return errorType === "multiple" || errorType === "unnecessary" || errorType === "module" || errorType === "implied" || errorType === "unnecessaryInClasses";
      }
      function getFixFunction(node2) {
        return (fixer) => fixer.remove(node2);
      }
      function reportSlice(nodes, start, end, messageId, fix) {
        nodes.slice(start, end).forEach((node2) => {
          context.report({
            node: node2,
            messageId,
            fix: fix ? getFixFunction(node2) : null
          });
        });
      }
      function reportAll(nodes, messageId, fix) {
        reportSlice(nodes, 0, nodes.length, messageId, fix);
      }
      function reportAllExceptFirst(nodes, messageId, fix) {
        reportSlice(nodes, 1, nodes.length, messageId, fix);
      }
      function enterFunctionInFunctionMode(node2, useStrictDirectives) {
        const isInClass = classScopes.length > 0, isParentGlobal = scopes.length === 0 && classScopes.length === 0, isParentStrict = scopes.length > 0 && scopes.at(-1), isStrict = useStrictDirectives.length > 0;
        if (isStrict) {
          if (!isSimpleParameterList(node2.params)) {
            context.report({
              node: useStrictDirectives[0],
              messageId: "nonSimpleParameterList"
            });
          } else if (isParentStrict) {
            context.report({
              node: useStrictDirectives[0],
              messageId: "unnecessary",
              fix: getFixFunction(useStrictDirectives[0])
            });
          } else if (isInClass) {
            context.report({
              node: useStrictDirectives[0],
              messageId: "unnecessaryInClasses",
              fix: getFixFunction(useStrictDirectives[0])
            });
          }
          reportAllExceptFirst(useStrictDirectives, "multiple", true);
        } else if (isParentGlobal) {
          if (isSimpleParameterList(node2.params)) {
            context.report({ node: node2, messageId: "function" });
          } else {
            context.report({
              node: node2,
              messageId: "wrap",
              data: { name: astUtils2.getFunctionNameWithKind(node2) }
            });
          }
        }
        scopes.push(isParentStrict || isStrict);
      }
      function exitFunctionInFunctionMode() {
        scopes.pop();
      }
      function enterFunction(node2) {
        const isBlock = node2.body.type === "BlockStatement", useStrictDirectives = isBlock ? getUseStrictDirectives(node2.body.body) : [];
        if (mode === "function") {
          enterFunctionInFunctionMode(node2, useStrictDirectives);
        } else if (useStrictDirectives.length > 0) {
          if (isSimpleParameterList(node2.params)) {
            reportAll(useStrictDirectives, mode, shouldFix(mode));
          } else {
            context.report({
              node: useStrictDirectives[0],
              messageId: "nonSimpleParameterList"
            });
            reportAllExceptFirst(useStrictDirectives, "multiple", true);
          }
        }
      }
      const rule = {
        Program(node2) {
          const useStrictDirectives = getUseStrictDirectives(node2.body);
          if (node2.sourceType === "module") {
            mode = "module";
          }
          if (mode === "global") {
            if (node2.body.length > 0 && useStrictDirectives.length === 0) {
              context.report({ node: node2, messageId: "global" });
            }
            reportAllExceptFirst(useStrictDirectives, "multiple", true);
          } else {
            reportAll(useStrictDirectives, mode, shouldFix(mode));
          }
        },
        FunctionDeclaration: enterFunction,
        FunctionExpression: enterFunction,
        ArrowFunctionExpression: enterFunction
      };
      if (mode === "function") {
        Object.assign(rule, {
          // Inside of class bodies are always strict mode.
          ClassBody() {
            classScopes.push(true);
          },
          "ClassBody:exit"() {
            classScopes.pop();
          },
          "FunctionDeclaration:exit": exitFunctionInFunctionMode,
          "FunctionExpression:exit": exitFunctionInFunctionMode,
          "ArrowFunctionExpression:exit": exitFunctionInFunctionMode
        });
      }
      return rule;
    }
  };
  return strict;
}
var switchColonSpacing;
var hasRequiredSwitchColonSpacing;
function requireSwitchColonSpacing() {
  if (hasRequiredSwitchColonSpacing) return switchColonSpacing;
  hasRequiredSwitchColonSpacing = 1;
  const astUtils2 = requireAstUtils();
  switchColonSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "switch-colon-spacing",
              url: "https://eslint.style/rules/switch-colon-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Enforce spacing around colons of switch statements",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/switch-colon-spacing"
      },
      schema: [
        {
          type: "object",
          properties: {
            before: { type: "boolean", default: false },
            after: { type: "boolean", default: true }
          },
          additionalProperties: false
        }
      ],
      fixable: "whitespace",
      messages: {
        expectedBefore: "Expected space(s) before this colon.",
        expectedAfter: "Expected space(s) after this colon.",
        unexpectedBefore: "Unexpected space(s) before this colon.",
        unexpectedAfter: "Unexpected space(s) after this colon."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const options = context.options[0] || {};
      const beforeSpacing = options.before === true;
      const afterSpacing = options.after !== false;
      function isValidSpacing(left, right, expected) {
        return astUtils2.isClosingBraceToken(right) || !astUtils2.isTokenOnSameLine(left, right) || sourceCode2.isSpaceBetweenTokens(left, right) === expected;
      }
      function commentsExistBetween(left, right) {
        return sourceCode2.getFirstTokenBetween(left, right, {
          includeComments: true,
          filter: astUtils2.isCommentToken
        }) !== null;
      }
      function fix(fixer, left, right, spacing) {
        if (commentsExistBetween(left, right)) {
          return null;
        }
        if (spacing) {
          return fixer.insertTextAfter(left, " ");
        }
        return fixer.removeRange([left.range[1], right.range[0]]);
      }
      return {
        SwitchCase(node2) {
          const colonToken = astUtils2.getSwitchCaseColonToken(
            node2,
            sourceCode2
          );
          const beforeToken = sourceCode2.getTokenBefore(colonToken);
          const afterToken = sourceCode2.getTokenAfter(colonToken);
          if (!isValidSpacing(beforeToken, colonToken, beforeSpacing)) {
            context.report({
              node: node2,
              loc: colonToken.loc,
              messageId: beforeSpacing ? "expectedBefore" : "unexpectedBefore",
              fix: (fixer) => fix(fixer, beforeToken, colonToken, beforeSpacing)
            });
          }
          if (!isValidSpacing(colonToken, afterToken, afterSpacing)) {
            context.report({
              node: node2,
              loc: colonToken.loc,
              messageId: afterSpacing ? "expectedAfter" : "unexpectedAfter",
              fix: (fixer) => fix(fixer, colonToken, afterToken, afterSpacing)
            });
          }
        }
      };
    }
  };
  return switchColonSpacing;
}
var symbolDescription;
var hasRequiredSymbolDescription;
function requireSymbolDescription() {
  if (hasRequiredSymbolDescription) return symbolDescription;
  hasRequiredSymbolDescription = 1;
  const astUtils2 = requireAstUtils();
  symbolDescription = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require symbol descriptions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/symbol-description"
      },
      fixable: null,
      schema: [],
      messages: {
        expected: "Expected Symbol to have a description."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      function checkArgument(node2) {
        if (node2.arguments.length === 0) {
          context.report({
            node: node2,
            messageId: "expected"
          });
        }
      }
      return {
        "Program:exit"(node2) {
          const scope = sourceCode2.getScope(node2);
          const variable = astUtils2.getVariableByName(scope, "Symbol");
          if (variable && variable.defs.length === 0) {
            variable.references.forEach((reference) => {
              const idNode = reference.identifier;
              if (astUtils2.isCallee(idNode)) {
                checkArgument(idNode.parent);
              }
            });
          }
        }
      };
    }
  };
  return symbolDescription;
}
var templateCurlySpacing;
var hasRequiredTemplateCurlySpacing;
function requireTemplateCurlySpacing() {
  if (hasRequiredTemplateCurlySpacing) return templateCurlySpacing;
  hasRequiredTemplateCurlySpacing = 1;
  const astUtils2 = requireAstUtils();
  templateCurlySpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "template-curly-spacing",
              url: "https://eslint.style/rules/template-curly-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow spacing around embedded expressions of template strings",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/template-curly-spacing"
      },
      fixable: "whitespace",
      schema: [{ enum: ["always", "never"] }],
      messages: {
        expectedBefore: "Expected space(s) before '}'.",
        expectedAfter: "Expected space(s) after '${'.",
        unexpectedBefore: "Unexpected space(s) before '}'.",
        unexpectedAfter: "Unexpected space(s) after '${'."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const always = context.options[0] === "always";
      function checkSpacingBefore(token) {
        if (!token.value.startsWith("}")) {
          return;
        }
        const prevToken = sourceCode2.getTokenBefore(token, {
          includeComments: true
        }), hasSpace = sourceCode2.isSpaceBetween(prevToken, token);
        if (!astUtils2.isTokenOnSameLine(prevToken, token)) {
          return;
        }
        if (always && !hasSpace) {
          context.report({
            loc: {
              start: token.loc.start,
              end: {
                line: token.loc.start.line,
                column: token.loc.start.column + 1
              }
            },
            messageId: "expectedBefore",
            fix: (fixer) => fixer.insertTextBefore(token, " ")
          });
        }
        if (!always && hasSpace) {
          context.report({
            loc: {
              start: prevToken.loc.end,
              end: token.loc.start
            },
            messageId: "unexpectedBefore",
            fix: (fixer) => fixer.removeRange([prevToken.range[1], token.range[0]])
          });
        }
      }
      function checkSpacingAfter(token) {
        if (!token.value.endsWith("${")) {
          return;
        }
        const nextToken = sourceCode2.getTokenAfter(token, {
          includeComments: true
        }), hasSpace = sourceCode2.isSpaceBetween(token, nextToken);
        if (!astUtils2.isTokenOnSameLine(token, nextToken)) {
          return;
        }
        if (always && !hasSpace) {
          context.report({
            loc: {
              start: {
                line: token.loc.end.line,
                column: token.loc.end.column - 2
              },
              end: token.loc.end
            },
            messageId: "expectedAfter",
            fix: (fixer) => fixer.insertTextAfter(token, " ")
          });
        }
        if (!always && hasSpace) {
          context.report({
            loc: {
              start: token.loc.end,
              end: nextToken.loc.start
            },
            messageId: "unexpectedAfter",
            fix: (fixer) => fixer.removeRange([token.range[1], nextToken.range[0]])
          });
        }
      }
      return {
        TemplateElement(node2) {
          const token = sourceCode2.getFirstToken(node2);
          checkSpacingBefore(token);
          checkSpacingAfter(token);
        }
      };
    }
  };
  return templateCurlySpacing;
}
var templateTagSpacing;
var hasRequiredTemplateTagSpacing;
function requireTemplateTagSpacing() {
  if (hasRequiredTemplateTagSpacing) return templateTagSpacing;
  hasRequiredTemplateTagSpacing = 1;
  templateTagSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "template-tag-spacing",
              url: "https://eslint.style/rules/template-tag-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow spacing between template tags and their literals",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/template-tag-spacing"
      },
      fixable: "whitespace",
      schema: [{ enum: ["always", "never"] }],
      messages: {
        unexpected: "Unexpected space between template tag and template literal.",
        missing: "Missing space between template tag and template literal."
      }
    },
    create(context) {
      const never = context.options[0] !== "always";
      const sourceCode2 = context.sourceCode;
      function checkSpacing(node2) {
        const tagToken = sourceCode2.getTokenBefore(node2.quasi);
        const literalToken = sourceCode2.getFirstToken(node2.quasi);
        const hasWhitespace = sourceCode2.isSpaceBetweenTokens(
          tagToken,
          literalToken
        );
        if (never && hasWhitespace) {
          context.report({
            node: node2,
            loc: {
              start: tagToken.loc.end,
              end: literalToken.loc.start
            },
            messageId: "unexpected",
            fix(fixer) {
              const comments = sourceCode2.getCommentsBefore(
                node2.quasi
              );
              if (comments.some((comment2) => comment2.type === "Line")) {
                return null;
              }
              return fixer.replaceTextRange(
                [tagToken.range[1], literalToken.range[0]],
                comments.reduce(
                  (text, comment2) => text + sourceCode2.getText(comment2),
                  ""
                )
              );
            }
          });
        } else if (!never && !hasWhitespace) {
          context.report({
            node: node2,
            loc: {
              start: node2.loc.start,
              end: literalToken.loc.start
            },
            messageId: "missing",
            fix(fixer) {
              return fixer.insertTextAfter(tagToken, " ");
            }
          });
        }
      }
      return {
        TaggedTemplateExpression: checkSpacing
      };
    }
  };
  return templateTagSpacing;
}
var unicodeBom;
var hasRequiredUnicodeBom;
function requireUnicodeBom() {
  if (hasRequiredUnicodeBom) return unicodeBom;
  hasRequiredUnicodeBom = 1;
  unicodeBom = {
    meta: {
      type: "layout",
      defaultOptions: ["never"],
      docs: {
        description: "Require or disallow Unicode byte order mark (BOM)",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/unicode-bom"
      },
      fixable: "whitespace",
      schema: [
        {
          enum: ["always", "never"]
        }
      ],
      messages: {
        expected: "Expected Unicode BOM (Byte Order Mark).",
        unexpected: "Unexpected Unicode BOM (Byte Order Mark)."
      }
    },
    create(context) {
      return {
        Program: function checkUnicodeBOM(node2) {
          const sourceCode2 = context.sourceCode, location = { column: 0, line: 1 };
          const [requireBOM] = context.options;
          if (!sourceCode2.hasBOM && requireBOM === "always") {
            context.report({
              node: node2,
              loc: location,
              messageId: "expected",
              fix(fixer) {
                return fixer.insertTextBeforeRange(
                  [0, 1],
                  "\uFEFF"
                );
              }
            });
          } else if (sourceCode2.hasBOM && requireBOM === "never") {
            context.report({
              node: node2,
              loc: location,
              messageId: "unexpected",
              fix(fixer) {
                return fixer.removeRange([-1, 0]);
              }
            });
          }
        }
      };
    }
  };
  return unicodeBom;
}
var useIsnan;
var hasRequiredUseIsnan;
function requireUseIsnan() {
  if (hasRequiredUseIsnan) return useIsnan;
  hasRequiredUseIsnan = 1;
  const astUtils2 = requireAstUtils();
  function isNaNIdentifier(node2) {
    if (!node2) {
      return false;
    }
    const nodeToCheck = node2.type === "SequenceExpression" ? node2.expressions.at(-1) : node2;
    return astUtils2.isSpecificId(nodeToCheck, "NaN") || astUtils2.isSpecificMemberAccess(nodeToCheck, "Number", "NaN");
  }
  useIsnan = {
    meta: {
      hasSuggestions: true,
      type: "problem",
      docs: {
        description: "Require calls to `isNaN()` when checking for `NaN`",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/use-isnan"
      },
      schema: [
        {
          type: "object",
          properties: {
            enforceForSwitchCase: {
              type: "boolean"
            },
            enforceForIndexOf: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      defaultOptions: [
        {
          enforceForIndexOf: false,
          enforceForSwitchCase: true
        }
      ],
      messages: {
        comparisonWithNaN: "Use the isNaN function to compare with NaN.",
        switchNaN: "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
        caseNaN: "'case NaN' can never match. Use Number.isNaN before the switch.",
        indexOfNaN: "Array prototype method '{{ methodName }}' cannot find NaN.",
        replaceWithIsNaN: "Replace with Number.isNaN.",
        replaceWithCastingAndIsNaN: "Replace with Number.isNaN and cast to a Number.",
        replaceWithFindIndex: "Replace with Array.prototype.{{ methodName }}."
      }
    },
    create(context) {
      const [{ enforceForIndexOf, enforceForSwitchCase }] = context.options;
      const sourceCode2 = context.sourceCode;
      const fixableOperators = /* @__PURE__ */ new Set(["==", "===", "!=", "!=="]);
      const castableOperators = /* @__PURE__ */ new Set(["==", "!="]);
      function getBinaryExpressionFixer(node2, wrapValue) {
        return (fixer) => {
          const comparedValue = isNaNIdentifier(node2.left) ? node2.right : node2.left;
          const shouldWrap = comparedValue.type === "SequenceExpression";
          const shouldNegate = node2.operator[0] === "!";
          const negation = shouldNegate ? "!" : "";
          let comparedValueText = sourceCode2.getText(comparedValue);
          if (shouldWrap) {
            comparedValueText = `(${comparedValueText})`;
          }
          const fixedValue = wrapValue(comparedValueText);
          return fixer.replaceText(node2, `${negation}${fixedValue}`);
        };
      }
      function checkBinaryExpression(node2) {
        if (/^(?:[<>]|[!=]=)=?$/u.test(node2.operator) && (isNaNIdentifier(node2.left) || isNaNIdentifier(node2.right))) {
          const suggestedFixes = [];
          const NaNNode = isNaNIdentifier(node2.left) ? node2.left : node2.right;
          const isSequenceExpression = NaNNode.type === "SequenceExpression";
          const isSuggestable = fixableOperators.has(node2.operator) && !isSequenceExpression;
          const isCastable = castableOperators.has(node2.operator);
          if (isSuggestable) {
            suggestedFixes.push({
              messageId: "replaceWithIsNaN",
              fix: getBinaryExpressionFixer(
                node2,
                (value) => `Number.isNaN(${value})`
              )
            });
            if (isCastable) {
              suggestedFixes.push({
                messageId: "replaceWithCastingAndIsNaN",
                fix: getBinaryExpressionFixer(
                  node2,
                  (value) => `Number.isNaN(Number(${value}))`
                )
              });
            }
          }
          context.report({
            node: node2,
            messageId: "comparisonWithNaN",
            suggest: suggestedFixes
          });
        }
      }
      function checkSwitchStatement(node2) {
        if (isNaNIdentifier(node2.discriminant)) {
          context.report({ node: node2, messageId: "switchNaN" });
        }
        for (const switchCase of node2.cases) {
          if (isNaNIdentifier(switchCase.test)) {
            context.report({ node: switchCase, messageId: "caseNaN" });
          }
        }
      }
      function checkCallExpression(node2) {
        const callee = astUtils2.skipChainExpression(node2.callee);
        if (callee.type === "MemberExpression") {
          const methodName = astUtils2.getStaticPropertyName(callee);
          if ((methodName === "indexOf" || methodName === "lastIndexOf") && node2.arguments.length <= 2 && isNaNIdentifier(node2.arguments[0])) {
            const isSuggestable = node2.arguments[0].type !== "SequenceExpression" && !node2.arguments[1];
            const suggestedFixes = [];
            if (isSuggestable) {
              const shouldWrap = callee.computed;
              const findIndexMethod = methodName === "indexOf" ? "findIndex" : "findLastIndex";
              const propertyName = shouldWrap ? `"${findIndexMethod}"` : findIndexMethod;
              suggestedFixes.push({
                messageId: "replaceWithFindIndex",
                data: { methodName: findIndexMethod },
                fix: (fixer) => [
                  fixer.replaceText(
                    callee.property,
                    propertyName
                  ),
                  fixer.replaceText(
                    node2.arguments[0],
                    "Number.isNaN"
                  )
                ]
              });
            }
            context.report({
              node: node2,
              messageId: "indexOfNaN",
              data: { methodName },
              suggest: suggestedFixes
            });
          }
        }
      }
      const listeners = {
        BinaryExpression: checkBinaryExpression
      };
      if (enforceForSwitchCase) {
        listeners.SwitchStatement = checkSwitchStatement;
      }
      if (enforceForIndexOf) {
        listeners.CallExpression = checkCallExpression;
      }
      return listeners;
    }
  };
  return useIsnan;
}
var validTypeof;
var hasRequiredValidTypeof;
function requireValidTypeof() {
  if (hasRequiredValidTypeof) return validTypeof;
  hasRequiredValidTypeof = 1;
  const astUtils2 = requireAstUtils();
  validTypeof = {
    meta: {
      type: "problem",
      defaultOptions: [
        {
          requireStringLiterals: false
        }
      ],
      docs: {
        description: "Enforce comparing `typeof` expressions against valid strings",
        recommended: true,
        url: "https://eslint.org/docs/latest/rules/valid-typeof"
      },
      hasSuggestions: true,
      schema: [
        {
          type: "object",
          properties: {
            requireStringLiterals: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        invalidValue: "Invalid typeof comparison value.",
        notString: "Typeof comparisons should be to string literals.",
        suggestString: 'Use `"{{type}}"` instead of `{{type}}`.'
      }
    },
    create(context) {
      const VALID_TYPES = /* @__PURE__ */ new Set([
        "symbol",
        "undefined",
        "object",
        "boolean",
        "number",
        "string",
        "function",
        "bigint"
      ]), OPERATORS = /* @__PURE__ */ new Set(["==", "===", "!=", "!=="]);
      const sourceCode2 = context.sourceCode;
      const [{ requireStringLiterals }] = context.options;
      let globalScope;
      function isReferenceToGlobalVariable(node2) {
        const variable = globalScope.set.get(node2.name);
        return variable && variable.defs.length === 0 && variable.references.some((ref2) => ref2.identifier === node2);
      }
      function isTypeofExpression(node2) {
        return node2.type === "UnaryExpression" && node2.operator === "typeof";
      }
      return {
        Program(node2) {
          globalScope = sourceCode2.getScope(node2);
        },
        UnaryExpression(node2) {
          if (isTypeofExpression(node2)) {
            const { parent } = node2;
            if (parent.type === "BinaryExpression" && OPERATORS.has(parent.operator)) {
              const sibling = parent.left === node2 ? parent.right : parent.left;
              if (sibling.type === "Literal" || astUtils2.isStaticTemplateLiteral(sibling)) {
                const value = sibling.type === "Literal" ? sibling.value : sibling.quasis[0].value.cooked;
                if (!VALID_TYPES.has(value)) {
                  context.report({
                    node: sibling,
                    messageId: "invalidValue"
                  });
                }
              } else if (sibling.type === "Identifier" && sibling.name === "undefined" && isReferenceToGlobalVariable(sibling)) {
                context.report({
                  node: sibling,
                  messageId: requireStringLiterals ? "notString" : "invalidValue",
                  suggest: [
                    {
                      messageId: "suggestString",
                      data: { type: "undefined" },
                      fix(fixer) {
                        return fixer.replaceText(
                          sibling,
                          '"undefined"'
                        );
                      }
                    }
                  ]
                });
              } else if (requireStringLiterals && !isTypeofExpression(sibling)) {
                context.report({
                  node: sibling,
                  messageId: "notString"
                });
              }
            }
          }
        }
      };
    }
  };
  return validTypeof;
}
var varsOnTop;
var hasRequiredVarsOnTop;
function requireVarsOnTop() {
  if (hasRequiredVarsOnTop) return varsOnTop;
  hasRequiredVarsOnTop = 1;
  varsOnTop = {
    meta: {
      type: "suggestion",
      docs: {
        description: "Require `var` declarations be placed at the top of their containing scope",
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/vars-on-top"
      },
      schema: [],
      messages: {
        top: "All 'var' declarations must be at the top of the function scope."
      }
    },
    create(context) {
      function looksLikeDirective(node2) {
        return node2.type === "ExpressionStatement" && node2.expression.type === "Literal" && typeof node2.expression.value === "string";
      }
      function looksLikeImport(node2) {
        return node2.type === "ImportDeclaration" || node2.type === "ImportSpecifier" || node2.type === "ImportDefaultSpecifier" || node2.type === "ImportNamespaceSpecifier";
      }
      function isVariableDeclaration(node2) {
        return node2.type === "VariableDeclaration" || node2.type === "ExportNamedDeclaration" && node2.declaration && node2.declaration.type === "VariableDeclaration";
      }
      function isVarOnTop(node2, statements) {
        const l2 = statements.length;
        let i2 = 0;
        if (node2.parent.type !== "StaticBlock") {
          for (; i2 < l2; ++i2) {
            if (!looksLikeDirective(statements[i2]) && !looksLikeImport(statements[i2])) {
              break;
            }
          }
        }
        for (; i2 < l2; ++i2) {
          if (!isVariableDeclaration(statements[i2])) {
            return false;
          }
          if (statements[i2] === node2) {
            return true;
          }
        }
        return false;
      }
      function globalVarCheck(node2, parent) {
        if (!isVarOnTop(node2, parent.body)) {
          context.report({ node: node2, messageId: "top" });
        }
      }
      function blockScopeVarCheck(node2) {
        const { parent } = node2;
        if (parent.type === "BlockStatement" && /Function/u.test(parent.parent.type) && isVarOnTop(node2, parent.body)) {
          return;
        }
        if (parent.type === "StaticBlock" && isVarOnTop(node2, parent.body)) {
          return;
        }
        context.report({ node: node2, messageId: "top" });
      }
      return {
        "VariableDeclaration[kind='var']"(node2) {
          if (node2.parent.type === "ExportNamedDeclaration") {
            globalVarCheck(node2.parent, node2.parent.parent);
          } else if (node2.parent.type === "Program") {
            globalVarCheck(node2, node2.parent);
          } else {
            blockScopeVarCheck(node2);
          }
        }
      };
    }
  };
  return varsOnTop;
}
var wrapIife;
var hasRequiredWrapIife;
function requireWrapIife() {
  if (hasRequiredWrapIife) return wrapIife;
  hasRequiredWrapIife = 1;
  const astUtils2 = requireAstUtils();
  const eslintUtils2 = /* @__PURE__ */ requireEslintUtils();
  function isCalleeOfNewExpression(node2) {
    const maybeCallee = node2.parent.type === "ChainExpression" ? node2.parent : node2;
    return maybeCallee.parent.type === "NewExpression" && maybeCallee.parent.callee === maybeCallee;
  }
  wrapIife = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "wrap-iife",
              url: "https://eslint.style/rules/wrap-iife"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require parentheses around immediate `function` invocations",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/wrap-iife"
      },
      schema: [
        {
          enum: ["outside", "inside", "any"]
        },
        {
          type: "object",
          properties: {
            functionPrototypeMethods: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        wrapInvocation: "Wrap an immediate function invocation in parentheses.",
        wrapExpression: "Wrap only the function expression in parens.",
        moveInvocation: "Move the invocation into the parens that contain the function."
      }
    },
    create(context) {
      const style = context.options[0] || "outside";
      const includeFunctionPrototypeMethods = context.options[1] && context.options[1].functionPrototypeMethods;
      const sourceCode2 = context.sourceCode;
      function isWrappedInAnyParens(node2) {
        return astUtils2.isParenthesised(sourceCode2, node2);
      }
      function isWrappedInGroupingParens(node2) {
        return eslintUtils2.isParenthesized(1, node2, sourceCode2);
      }
      function getFunctionNodeFromIIFE(node2) {
        const callee = astUtils2.skipChainExpression(node2.callee);
        if (callee.type === "FunctionExpression") {
          return callee;
        }
        if (includeFunctionPrototypeMethods && callee.type === "MemberExpression" && callee.object.type === "FunctionExpression" && (astUtils2.getStaticPropertyName(callee) === "call" || astUtils2.getStaticPropertyName(callee) === "apply")) {
          return callee.object;
        }
        return null;
      }
      return {
        CallExpression(node2) {
          const innerNode = getFunctionNodeFromIIFE(node2);
          if (!innerNode) {
            return;
          }
          const isCallExpressionWrapped = isWrappedInAnyParens(node2), isFunctionExpressionWrapped = isWrappedInAnyParens(innerNode);
          if (!isCallExpressionWrapped && !isFunctionExpressionWrapped) {
            context.report({
              node: node2,
              messageId: "wrapInvocation",
              fix(fixer) {
                const nodeToSurround = style === "inside" ? innerNode : node2;
                return fixer.replaceText(
                  nodeToSurround,
                  `(${sourceCode2.getText(nodeToSurround)})`
                );
              }
            });
          } else if (style === "inside" && !isFunctionExpressionWrapped) {
            context.report({
              node: node2,
              messageId: "wrapExpression",
              fix(fixer) {
                if (isWrappedInGroupingParens(node2) && !isCalleeOfNewExpression(node2)) {
                  const parenAfter = sourceCode2.getTokenAfter(node2);
                  return fixer.replaceTextRange(
                    [innerNode.range[1], parenAfter.range[1]],
                    `)${sourceCode2.getText().slice(innerNode.range[1], parenAfter.range[0])}`
                  );
                }
                return fixer.replaceText(
                  innerNode,
                  `(${sourceCode2.getText(innerNode)})`
                );
              }
            });
          } else if (style === "outside" && !isCallExpressionWrapped) {
            context.report({
              node: node2,
              messageId: "moveInvocation",
              fix(fixer) {
                const parenAfter = sourceCode2.getTokenAfter(innerNode);
                return fixer.replaceTextRange(
                  [parenAfter.range[0], node2.range[1]],
                  `${sourceCode2.getText().slice(parenAfter.range[1], node2.range[1])})`
                );
              }
            });
          }
        }
      };
    }
  };
  return wrapIife;
}
var wrapRegex;
var hasRequiredWrapRegex;
function requireWrapRegex() {
  if (hasRequiredWrapRegex) return wrapRegex;
  hasRequiredWrapRegex = 1;
  wrapRegex = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "wrap-regex",
              url: "https://eslint.style/rules/wrap-regex"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require parenthesis around regex literals",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/wrap-regex"
      },
      schema: [],
      fixable: "code",
      messages: {
        requireParens: "Wrap the regexp literal in parens to disambiguate the slash."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      return {
        Literal(node2) {
          const token = sourceCode2.getFirstToken(node2), nodeType = token.type;
          if (nodeType === "RegularExpression") {
            const beforeToken = sourceCode2.getTokenBefore(node2);
            const afterToken = sourceCode2.getTokenAfter(node2);
            const { parent } = node2;
            if (parent.type === "MemberExpression" && parent.object === node2 && !(beforeToken && beforeToken.value === "(" && afterToken && afterToken.value === ")")) {
              context.report({
                node: node2,
                messageId: "requireParens",
                fix: (fixer) => fixer.replaceText(
                  node2,
                  `(${sourceCode2.getText(node2)})`
                )
              });
            }
          }
        }
      };
    }
  };
  return wrapRegex;
}
var yieldStarSpacing;
var hasRequiredYieldStarSpacing;
function requireYieldStarSpacing() {
  if (hasRequiredYieldStarSpacing) return yieldStarSpacing;
  hasRequiredYieldStarSpacing = 1;
  yieldStarSpacing = {
    meta: {
      deprecated: {
        message: "Formatting rules are being moved out of ESLint core.",
        url: "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        deprecatedSince: "8.53.0",
        availableUntil: "10.0.0",
        replacedBy: [
          {
            message: "ESLint Stylistic now maintains deprecated stylistic core rules.",
            url: "https://eslint.style/guide/migration",
            plugin: {
              name: "@stylistic/eslint-plugin",
              url: "https://eslint.style"
            },
            rule: {
              name: "yield-star-spacing",
              url: "https://eslint.style/rules/yield-star-spacing"
            }
          }
        ]
      },
      type: "layout",
      docs: {
        description: "Require or disallow spacing around the `*` in `yield*` expressions",
        recommended: false,
        url: "https://eslint.org/docs/latest/rules/yield-star-spacing"
      },
      fixable: "whitespace",
      schema: [
        {
          oneOf: [
            {
              enum: ["before", "after", "both", "neither"]
            },
            {
              type: "object",
              properties: {
                before: { type: "boolean" },
                after: { type: "boolean" }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        missingBefore: "Missing space before *.",
        missingAfter: "Missing space after *.",
        unexpectedBefore: "Unexpected space before *.",
        unexpectedAfter: "Unexpected space after *."
      }
    },
    create(context) {
      const sourceCode2 = context.sourceCode;
      const mode = (function(option) {
        if (!option || typeof option === "string") {
          return {
            before: { before: true, after: false },
            after: { before: false, after: true },
            both: { before: true, after: true },
            neither: { before: false, after: false }
          }[option || "after"];
        }
        return option;
      })(context.options[0]);
      function checkSpacing(side, leftToken, rightToken) {
        if (sourceCode2.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) {
          const after = leftToken.value === "*";
          const spaceRequired = mode[side];
          const node2 = after ? leftToken : rightToken;
          let messageId;
          if (spaceRequired) {
            messageId = side === "before" ? "missingBefore" : "missingAfter";
          } else {
            messageId = side === "before" ? "unexpectedBefore" : "unexpectedAfter";
          }
          context.report({
            node: node2,
            messageId,
            fix(fixer) {
              if (spaceRequired) {
                if (after) {
                  return fixer.insertTextAfter(node2, " ");
                }
                return fixer.insertTextBefore(node2, " ");
              }
              return fixer.removeRange([
                leftToken.range[1],
                rightToken.range[0]
              ]);
            }
          });
        }
      }
      function checkExpression(node2) {
        if (!node2.delegate) {
          return;
        }
        const tokens = sourceCode2.getFirstTokens(node2, 3);
        const yieldToken = tokens[0];
        const starToken = tokens[1];
        const nextToken = tokens[2];
        checkSpacing("before", yieldToken, starToken);
        checkSpacing("after", starToken, nextToken);
      }
      return {
        YieldExpression: checkExpression
      };
    }
  };
  return yieldStarSpacing;
}
var yoda;
var hasRequiredYoda;
function requireYoda() {
  if (hasRequiredYoda) return yoda;
  hasRequiredYoda = 1;
  const astUtils2 = requireAstUtils();
  function isComparisonOperator(operator) {
    return /^(?:==|===|!=|!==|<|>|<=|>=)$/u.test(operator);
  }
  function isEqualityOperator(operator) {
    return /^(?:==|===)$/u.test(operator);
  }
  function isRangeTestOperator(operator) {
    return ["<", "<="].includes(operator);
  }
  function isNegativeNumericLiteral(node2) {
    return node2.type === "UnaryExpression" && node2.operator === "-" && node2.prefix && astUtils2.isNumericLiteral(node2.argument);
  }
  function looksLikeLiteral(node2) {
    return isNegativeNumericLiteral(node2) || astUtils2.isStaticTemplateLiteral(node2);
  }
  function getNormalizedLiteral(node2) {
    if (node2.type === "Literal") {
      return node2;
    }
    if (isNegativeNumericLiteral(node2)) {
      return {
        type: "Literal",
        value: -node2.argument.value,
        raw: `-${node2.argument.value}`
      };
    }
    if (astUtils2.isStaticTemplateLiteral(node2)) {
      return {
        type: "Literal",
        value: node2.quasis[0].value.cooked,
        raw: node2.quasis[0].value.raw
      };
    }
    return null;
  }
  yoda = {
    meta: {
      type: "suggestion",
      defaultOptions: [
        "never",
        {
          exceptRange: false,
          onlyEquality: false
        }
      ],
      docs: {
        description: 'Require or disallow "Yoda" conditions',
        recommended: false,
        frozen: true,
        url: "https://eslint.org/docs/latest/rules/yoda"
      },
      schema: [
        {
          enum: ["always", "never"]
        },
        {
          type: "object",
          properties: {
            exceptRange: {
              type: "boolean"
            },
            onlyEquality: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }
      ],
      fixable: "code",
      messages: {
        expected: "Expected literal to be on the {{expectedSide}} side of {{operator}}."
      }
    },
    create(context) {
      const [when, { exceptRange, onlyEquality }] = context.options;
      const always = when === "always";
      const sourceCode2 = context.sourceCode;
      function isRangeTest(node2) {
        const left = node2.left, right = node2.right;
        function isBetweenTest() {
          if (node2.operator === "&&" && astUtils2.isSameReference(left.right, right.left)) {
            const leftLiteral = getNormalizedLiteral(left.left);
            const rightLiteral = getNormalizedLiteral(right.right);
            if (leftLiteral === null && rightLiteral === null) {
              return false;
            }
            if (rightLiteral === null || leftLiteral === null) {
              return true;
            }
            if (leftLiteral.value <= rightLiteral.value) {
              return true;
            }
          }
          return false;
        }
        function isOutsideTest() {
          if (node2.operator === "||" && astUtils2.isSameReference(left.left, right.right)) {
            const leftLiteral = getNormalizedLiteral(left.right);
            const rightLiteral = getNormalizedLiteral(right.left);
            if (leftLiteral === null && rightLiteral === null) {
              return false;
            }
            if (rightLiteral === null || leftLiteral === null) {
              return true;
            }
            if (leftLiteral.value <= rightLiteral.value) {
              return true;
            }
          }
          return false;
        }
        function isParenWrapped() {
          return astUtils2.isParenthesised(sourceCode2, node2);
        }
        return node2.type === "LogicalExpression" && left.type === "BinaryExpression" && right.type === "BinaryExpression" && isRangeTestOperator(left.operator) && isRangeTestOperator(right.operator) && (isBetweenTest() || isOutsideTest()) && isParenWrapped();
      }
      const OPERATOR_FLIP_MAP = {
        "===": "===",
        "!==": "!==",
        "==": "==",
        "!=": "!=",
        "<": ">",
        ">": "<",
        "<=": ">=",
        ">=": "<="
      };
      function getFlippedString(node2) {
        const operatorToken = sourceCode2.getFirstTokenBetween(
          node2.left,
          node2.right,
          (token) => token.value === node2.operator
        );
        const lastLeftToken = sourceCode2.getTokenBefore(operatorToken);
        const firstRightToken = sourceCode2.getTokenAfter(operatorToken);
        const source = sourceCode2.getText();
        const leftText = source.slice(
          node2.range[0],
          lastLeftToken.range[1]
        );
        const textBeforeOperator = source.slice(
          lastLeftToken.range[1],
          operatorToken.range[0]
        );
        const textAfterOperator = source.slice(
          operatorToken.range[1],
          firstRightToken.range[0]
        );
        const rightText = source.slice(
          firstRightToken.range[0],
          node2.range[1]
        );
        const tokenBefore = sourceCode2.getTokenBefore(node2);
        const tokenAfter = sourceCode2.getTokenAfter(node2);
        let prefix = "";
        let suffix = "";
        if (tokenBefore && tokenBefore.range[1] === node2.range[0] && !astUtils2.canTokensBeAdjacent(tokenBefore, firstRightToken)) {
          prefix = " ";
        }
        if (tokenAfter && node2.range[1] === tokenAfter.range[0] && !astUtils2.canTokensBeAdjacent(lastLeftToken, tokenAfter)) {
          suffix = " ";
        }
        return prefix + rightText + textBeforeOperator + OPERATOR_FLIP_MAP[operatorToken.value] + textAfterOperator + leftText + suffix;
      }
      return {
        BinaryExpression(node2) {
          const expectedLiteral = always ? node2.left : node2.right;
          const expectedNonLiteral = always ? node2.right : node2.left;
          if ((expectedNonLiteral.type === "Literal" || looksLikeLiteral(expectedNonLiteral)) && !(expectedLiteral.type === "Literal" || looksLikeLiteral(expectedLiteral)) && !(!isEqualityOperator(node2.operator) && onlyEquality) && isComparisonOperator(node2.operator) && !(exceptRange && isRangeTest(node2.parent))) {
            context.report({
              node: node2,
              messageId: "expected",
              data: {
                operator: node2.operator,
                expectedSide: always ? "left" : "right"
              },
              fix: (fixer) => fixer.replaceText(node2, getFlippedString(node2))
            });
          }
        }
      };
    }
  };
  return yoda;
}
var rules$1;
var hasRequiredRules$1;
function requireRules$1() {
  if (hasRequiredRules$1) return rules$1;
  hasRequiredRules$1 = 1;
  const { LazyLoadingRuleMap } = requireLazyLoadingRuleMap();
  rules$1 = new LazyLoadingRuleMap(
    Object.entries({
      "accessor-pairs": () => requireAccessorPairs(),
      "array-bracket-newline": () => requireArrayBracketNewline(),
      "array-bracket-spacing": () => requireArrayBracketSpacing(),
      "array-callback-return": () => requireArrayCallbackReturn(),
      "array-element-newline": () => requireArrayElementNewline(),
      "arrow-body-style": () => requireArrowBodyStyle(),
      "arrow-parens": () => requireArrowParens(),
      "arrow-spacing": () => requireArrowSpacing(),
      "block-scoped-var": () => requireBlockScopedVar(),
      "block-spacing": () => requireBlockSpacing(),
      "brace-style": () => requireBraceStyle(),
      "callback-return": () => requireCallbackReturn(),
      camelcase: () => requireCamelcase(),
      "capitalized-comments": () => requireCapitalizedComments(),
      "class-methods-use-this": () => requireClassMethodsUseThis(),
      "comma-dangle": () => requireCommaDangle(),
      "comma-spacing": () => requireCommaSpacing(),
      "comma-style": () => requireCommaStyle(),
      complexity: () => requireComplexity(),
      "computed-property-spacing": () => requireComputedPropertySpacing(),
      "consistent-return": () => requireConsistentReturn(),
      "consistent-this": () => requireConsistentThis(),
      "constructor-super": () => requireConstructorSuper(),
      curly: () => requireCurly(),
      "default-case": () => requireDefaultCase(),
      "default-case-last": () => requireDefaultCaseLast(),
      "default-param-last": () => requireDefaultParamLast(),
      "dot-location": () => requireDotLocation(),
      "dot-notation": () => requireDotNotation(),
      "eol-last": () => requireEolLast(),
      eqeqeq: () => requireEqeqeq(),
      "for-direction": () => requireForDirection(),
      "func-call-spacing": () => requireFuncCallSpacing(),
      "func-name-matching": () => requireFuncNameMatching(),
      "func-names": () => requireFuncNames(),
      "func-style": () => requireFuncStyle(),
      "function-call-argument-newline": () => requireFunctionCallArgumentNewline(),
      "function-paren-newline": () => requireFunctionParenNewline(),
      "generator-star-spacing": () => requireGeneratorStarSpacing(),
      "getter-return": () => requireGetterReturn(),
      "global-require": () => requireGlobalRequire(),
      "grouped-accessor-pairs": () => requireGroupedAccessorPairs(),
      "guard-for-in": () => requireGuardForIn(),
      "handle-callback-err": () => requireHandleCallbackErr(),
      "id-blacklist": () => requireIdBlacklist(),
      "id-denylist": () => requireIdDenylist(),
      "id-length": () => requireIdLength(),
      "id-match": () => requireIdMatch(),
      "implicit-arrow-linebreak": () => requireImplicitArrowLinebreak(),
      indent: () => requireIndent(),
      "indent-legacy": () => requireIndentLegacy(),
      "init-declarations": () => requireInitDeclarations(),
      "jsx-quotes": () => requireJsxQuotes(),
      "key-spacing": () => requireKeySpacing(),
      "keyword-spacing": () => requireKeywordSpacing(),
      "line-comment-position": () => requireLineCommentPosition(),
      "linebreak-style": () => requireLinebreakStyle(),
      "lines-around-comment": () => requireLinesAroundComment(),
      "lines-around-directive": () => requireLinesAroundDirective(),
      "lines-between-class-members": () => requireLinesBetweenClassMembers(),
      "logical-assignment-operators": () => requireLogicalAssignmentOperators(),
      "max-classes-per-file": () => requireMaxClassesPerFile(),
      "max-depth": () => requireMaxDepth(),
      "max-len": () => requireMaxLen(),
      "max-lines": () => requireMaxLines(),
      "max-lines-per-function": () => requireMaxLinesPerFunction(),
      "max-nested-callbacks": () => requireMaxNestedCallbacks(),
      "max-params": () => requireMaxParams(),
      "max-statements": () => requireMaxStatements(),
      "max-statements-per-line": () => requireMaxStatementsPerLine(),
      "multiline-comment-style": () => requireMultilineCommentStyle(),
      "multiline-ternary": () => requireMultilineTernary(),
      "new-cap": () => requireNewCap(),
      "new-parens": () => requireNewParens(),
      "newline-after-var": () => requireNewlineAfterVar(),
      "newline-before-return": () => requireNewlineBeforeReturn(),
      "newline-per-chained-call": () => requireNewlinePerChainedCall(),
      "no-alert": () => requireNoAlert(),
      "no-array-constructor": () => requireNoArrayConstructor(),
      "no-async-promise-executor": () => requireNoAsyncPromiseExecutor(),
      "no-await-in-loop": () => requireNoAwaitInLoop(),
      "no-bitwise": () => requireNoBitwise(),
      "no-buffer-constructor": () => requireNoBufferConstructor(),
      "no-caller": () => requireNoCaller(),
      "no-case-declarations": () => requireNoCaseDeclarations(),
      "no-catch-shadow": () => requireNoCatchShadow(),
      "no-class-assign": () => requireNoClassAssign(),
      "no-compare-neg-zero": () => requireNoCompareNegZero(),
      "no-cond-assign": () => requireNoCondAssign(),
      "no-confusing-arrow": () => requireNoConfusingArrow(),
      "no-console": () => requireNoConsole(),
      "no-const-assign": () => requireNoConstAssign(),
      "no-constant-binary-expression": () => requireNoConstantBinaryExpression(),
      "no-constant-condition": () => requireNoConstantCondition(),
      "no-constructor-return": () => requireNoConstructorReturn(),
      "no-continue": () => requireNoContinue(),
      "no-control-regex": () => requireNoControlRegex(),
      "no-debugger": () => requireNoDebugger(),
      "no-delete-var": () => requireNoDeleteVar(),
      "no-div-regex": () => requireNoDivRegex(),
      "no-dupe-args": () => requireNoDupeArgs(),
      "no-dupe-class-members": () => requireNoDupeClassMembers(),
      "no-dupe-else-if": () => requireNoDupeElseIf(),
      "no-dupe-keys": () => requireNoDupeKeys(),
      "no-duplicate-case": () => requireNoDuplicateCase(),
      "no-duplicate-imports": () => requireNoDuplicateImports(),
      "no-else-return": () => requireNoElseReturn(),
      "no-empty": () => requireNoEmpty(),
      "no-empty-character-class": () => requireNoEmptyCharacterClass(),
      "no-empty-function": () => requireNoEmptyFunction(),
      "no-empty-pattern": () => requireNoEmptyPattern(),
      "no-empty-static-block": () => requireNoEmptyStaticBlock(),
      "no-eq-null": () => requireNoEqNull(),
      "no-eval": () => requireNoEval(),
      "no-ex-assign": () => requireNoExAssign(),
      "no-extend-native": () => requireNoExtendNative(),
      "no-extra-bind": () => requireNoExtraBind(),
      "no-extra-boolean-cast": () => requireNoExtraBooleanCast(),
      "no-extra-label": () => requireNoExtraLabel(),
      "no-extra-parens": () => requireNoExtraParens(),
      "no-extra-semi": () => requireNoExtraSemi(),
      "no-fallthrough": () => requireNoFallthrough(),
      "no-floating-decimal": () => requireNoFloatingDecimal(),
      "no-func-assign": () => requireNoFuncAssign(),
      "no-global-assign": () => requireNoGlobalAssign(),
      "no-implicit-coercion": () => requireNoImplicitCoercion(),
      "no-implicit-globals": () => requireNoImplicitGlobals(),
      "no-implied-eval": () => requireNoImpliedEval(),
      "no-import-assign": () => requireNoImportAssign(),
      "no-inline-comments": () => requireNoInlineComments(),
      "no-inner-declarations": () => requireNoInnerDeclarations(),
      "no-invalid-regexp": () => requireNoInvalidRegexp(),
      "no-invalid-this": () => requireNoInvalidThis(),
      "no-irregular-whitespace": () => requireNoIrregularWhitespace(),
      "no-iterator": () => requireNoIterator(),
      "no-label-var": () => requireNoLabelVar(),
      "no-labels": () => requireNoLabels(),
      "no-lone-blocks": () => requireNoLoneBlocks(),
      "no-lonely-if": () => requireNoLonelyIf(),
      "no-loop-func": () => requireNoLoopFunc(),
      "no-loss-of-precision": () => requireNoLossOfPrecision(),
      "no-magic-numbers": () => requireNoMagicNumbers(),
      "no-misleading-character-class": () => requireNoMisleadingCharacterClass(),
      "no-mixed-operators": () => requireNoMixedOperators(),
      "no-mixed-requires": () => requireNoMixedRequires(),
      "no-mixed-spaces-and-tabs": () => requireNoMixedSpacesAndTabs(),
      "no-multi-assign": () => requireNoMultiAssign(),
      "no-multi-spaces": () => requireNoMultiSpaces(),
      "no-multi-str": () => requireNoMultiStr(),
      "no-multiple-empty-lines": () => requireNoMultipleEmptyLines(),
      "no-native-reassign": () => requireNoNativeReassign(),
      "no-negated-condition": () => requireNoNegatedCondition(),
      "no-negated-in-lhs": () => requireNoNegatedInLhs(),
      "no-nested-ternary": () => requireNoNestedTernary(),
      "no-new": () => requireNoNew(),
      "no-new-func": () => requireNoNewFunc(),
      "no-new-native-nonconstructor": () => requireNoNewNativeNonconstructor(),
      "no-new-object": () => requireNoNewObject(),
      "no-new-require": () => requireNoNewRequire(),
      "no-new-symbol": () => requireNoNewSymbol(),
      "no-new-wrappers": () => requireNoNewWrappers(),
      "no-nonoctal-decimal-escape": () => requireNoNonoctalDecimalEscape(),
      "no-obj-calls": () => requireNoObjCalls(),
      "no-object-constructor": () => requireNoObjectConstructor(),
      "no-octal": () => requireNoOctal(),
      "no-octal-escape": () => requireNoOctalEscape(),
      "no-param-reassign": () => requireNoParamReassign(),
      "no-path-concat": () => requireNoPathConcat(),
      "no-plusplus": () => requireNoPlusplus(),
      "no-process-env": () => requireNoProcessEnv(),
      "no-process-exit": () => requireNoProcessExit(),
      "no-promise-executor-return": () => requireNoPromiseExecutorReturn(),
      "no-proto": () => requireNoProto(),
      "no-prototype-builtins": () => requireNoPrototypeBuiltins(),
      "no-redeclare": () => requireNoRedeclare(),
      "no-regex-spaces": () => requireNoRegexSpaces(),
      "no-restricted-exports": () => requireNoRestrictedExports(),
      "no-restricted-globals": () => requireNoRestrictedGlobals(),
      "no-restricted-imports": () => requireNoRestrictedImports(),
      "no-restricted-modules": () => requireNoRestrictedModules(),
      "no-restricted-properties": () => requireNoRestrictedProperties(),
      "no-restricted-syntax": () => requireNoRestrictedSyntax(),
      "no-return-assign": () => requireNoReturnAssign(),
      "no-return-await": () => requireNoReturnAwait(),
      "no-script-url": () => requireNoScriptUrl(),
      "no-self-assign": () => requireNoSelfAssign(),
      "no-self-compare": () => requireNoSelfCompare(),
      "no-sequences": () => requireNoSequences(),
      "no-setter-return": () => requireNoSetterReturn(),
      "no-shadow": () => requireNoShadow(),
      "no-shadow-restricted-names": () => requireNoShadowRestrictedNames(),
      "no-spaced-func": () => requireNoSpacedFunc(),
      "no-sparse-arrays": () => requireNoSparseArrays(),
      "no-sync": () => requireNoSync(),
      "no-tabs": () => requireNoTabs(),
      "no-template-curly-in-string": () => requireNoTemplateCurlyInString(),
      "no-ternary": () => requireNoTernary(),
      "no-this-before-super": () => requireNoThisBeforeSuper(),
      "no-throw-literal": () => requireNoThrowLiteral(),
      "no-trailing-spaces": () => requireNoTrailingSpaces(),
      "no-unassigned-vars": () => requireNoUnassignedVars(),
      "no-undef": () => requireNoUndef(),
      "no-undef-init": () => requireNoUndefInit(),
      "no-undefined": () => requireNoUndefined(),
      "no-underscore-dangle": () => requireNoUnderscoreDangle(),
      "no-unexpected-multiline": () => requireNoUnexpectedMultiline(),
      "no-unmodified-loop-condition": () => requireNoUnmodifiedLoopCondition(),
      "no-unneeded-ternary": () => requireNoUnneededTernary(),
      "no-unreachable": () => requireNoUnreachable(),
      "no-unreachable-loop": () => requireNoUnreachableLoop(),
      "no-unsafe-finally": () => requireNoUnsafeFinally(),
      "no-unsafe-negation": () => requireNoUnsafeNegation(),
      "no-unsafe-optional-chaining": () => requireNoUnsafeOptionalChaining(),
      "no-unused-expressions": () => requireNoUnusedExpressions(),
      "no-unused-labels": () => requireNoUnusedLabels(),
      "no-unused-private-class-members": () => requireNoUnusedPrivateClassMembers(),
      "no-unused-vars": () => requireNoUnusedVars(),
      "no-use-before-define": () => requireNoUseBeforeDefine(),
      "no-useless-assignment": () => requireNoUselessAssignment(),
      "no-useless-backreference": () => requireNoUselessBackreference(),
      "no-useless-call": () => requireNoUselessCall(),
      "no-useless-catch": () => requireNoUselessCatch(),
      "no-useless-computed-key": () => requireNoUselessComputedKey(),
      "no-useless-concat": () => requireNoUselessConcat(),
      "no-useless-constructor": () => requireNoUselessConstructor(),
      "no-useless-escape": () => requireNoUselessEscape(),
      "no-useless-rename": () => requireNoUselessRename(),
      "no-useless-return": () => requireNoUselessReturn(),
      "no-var": () => requireNoVar(),
      "no-void": () => requireNoVoid(),
      "no-warning-comments": () => requireNoWarningComments(),
      "no-whitespace-before-property": () => requireNoWhitespaceBeforeProperty(),
      "no-with": () => requireNoWith(),
      "nonblock-statement-body-position": () => requireNonblockStatementBodyPosition(),
      "object-curly-newline": () => requireObjectCurlyNewline(),
      "object-curly-spacing": () => requireObjectCurlySpacing(),
      "object-property-newline": () => requireObjectPropertyNewline(),
      "object-shorthand": () => requireObjectShorthand(),
      "one-var": () => requireOneVar(),
      "one-var-declaration-per-line": () => requireOneVarDeclarationPerLine(),
      "operator-assignment": () => requireOperatorAssignment(),
      "operator-linebreak": () => requireOperatorLinebreak(),
      "padded-blocks": () => requirePaddedBlocks(),
      "padding-line-between-statements": () => requirePaddingLineBetweenStatements(),
      "prefer-arrow-callback": () => requirePreferArrowCallback(),
      "prefer-const": () => requirePreferConst(),
      "prefer-destructuring": () => requirePreferDestructuring(),
      "prefer-exponentiation-operator": () => requirePreferExponentiationOperator(),
      "prefer-named-capture-group": () => requirePreferNamedCaptureGroup(),
      "prefer-numeric-literals": () => requirePreferNumericLiterals(),
      "prefer-object-has-own": () => requirePreferObjectHasOwn(),
      "prefer-object-spread": () => requirePreferObjectSpread(),
      "prefer-promise-reject-errors": () => requirePreferPromiseRejectErrors(),
      "prefer-reflect": () => requirePreferReflect(),
      "prefer-regex-literals": () => requirePreferRegexLiterals(),
      "prefer-rest-params": () => requirePreferRestParams(),
      "prefer-spread": () => requirePreferSpread(),
      "prefer-template": () => requirePreferTemplate(),
      "preserve-caught-error": () => requirePreserveCaughtError(),
      "quote-props": () => requireQuoteProps(),
      quotes: () => requireQuotes(),
      radix: () => requireRadix(),
      "require-atomic-updates": () => requireRequireAtomicUpdates(),
      "require-await": () => requireRequireAwait(),
      "require-unicode-regexp": () => requireRequireUnicodeRegexp(),
      "require-yield": () => requireRequireYield(),
      "rest-spread-spacing": () => requireRestSpreadSpacing(),
      semi: () => requireSemi(),
      "semi-spacing": () => requireSemiSpacing(),
      "semi-style": () => requireSemiStyle(),
      "sort-imports": () => requireSortImports(),
      "sort-keys": () => requireSortKeys(),
      "sort-vars": () => requireSortVars(),
      "space-before-blocks": () => requireSpaceBeforeBlocks(),
      "space-before-function-paren": () => requireSpaceBeforeFunctionParen(),
      "space-in-parens": () => requireSpaceInParens(),
      "space-infix-ops": () => requireSpaceInfixOps(),
      "space-unary-ops": () => requireSpaceUnaryOps(),
      "spaced-comment": () => requireSpacedComment(),
      strict: () => requireStrict(),
      "switch-colon-spacing": () => requireSwitchColonSpacing(),
      "symbol-description": () => requireSymbolDescription(),
      "template-curly-spacing": () => requireTemplateCurlySpacing(),
      "template-tag-spacing": () => requireTemplateTagSpacing(),
      "unicode-bom": () => requireUnicodeBom(),
      "use-isnan": () => requireUseIsnan(),
      "valid-typeof": () => requireValidTypeof(),
      "vars-on-top": () => requireVarsOnTop(),
      "wrap-iife": () => requireWrapIife(),
      "wrap-regex": () => requireWrapRegex(),
      "yield-star-spacing": () => requireYieldStarSpacing(),
      yoda: () => requireYoda()
    })
  );
  return rules$1;
}
var rules;
var hasRequiredRules;
function requireRules() {
  if (hasRequiredRules) return rules;
  hasRequiredRules = 1;
  const builtInRules = requireRules$1();
  class Rules {
    constructor() {
      this._rules = /* @__PURE__ */ Object.create(null);
    }
    /**
     * Registers a rule module for rule id in storage.
     * @param {string} ruleId Rule id (file name).
     * @param {Rule} rule Rule object.
     * @returns {void}
     */
    define(ruleId, rule) {
      this._rules[ruleId] = rule;
    }
    /**
     * Access rule handler by id (file name).
     * @param {string} ruleId Rule id (file name).
     * @returns {Rule} Rule object.
     */
    get(ruleId) {
      if (typeof this._rules[ruleId] === "string") {
        this.define(ruleId, commonjsRequire(this._rules[ruleId]));
      }
      if (this._rules[ruleId]) {
        return this._rules[ruleId];
      }
      if (builtInRules.has(ruleId)) {
        return builtInRules.get(ruleId);
      }
      return null;
    }
    *[Symbol.iterator]() {
      yield* builtInRules;
      for (const ruleId of Object.keys(this._rules)) {
        yield [ruleId, this.get(ruleId)];
      }
    }
  }
  rules = Rules;
  return rules;
}
var sourceCodeFixer;
var hasRequiredSourceCodeFixer;
function requireSourceCodeFixer() {
  if (hasRequiredSourceCodeFixer) return sourceCodeFixer;
  hasRequiredSourceCodeFixer = 1;
  const debug = requireSrc()("eslint:source-code-fixer");
  const BOM = "\uFEFF";
  function compareMessagesByFixRange(a2, b) {
    return a2.fix.range[0] - b.fix.range[0] || a2.fix.range[1] - b.fix.range[1];
  }
  function compareMessagesByLocation(a2, b) {
    return a2.line - b.line || a2.column - b.column;
  }
  function SourceCodeFixer() {
    Object.freeze(this);
  }
  SourceCodeFixer.applyFixes = function(sourceText, messages, shouldFix) {
    debug("Applying fixes");
    if (shouldFix === false) {
      debug("shouldFix parameter was false, not attempting fixes");
      return {
        fixed: false,
        messages,
        output: sourceText
      };
    }
    const remainingMessages = [], fixes = [], bom = sourceText.startsWith(BOM) ? BOM : "", text = bom ? sourceText.slice(1) : sourceText;
    let lastPos = Number.NEGATIVE_INFINITY, output = bom;
    function attemptFix(problem) {
      const fix = problem.fix;
      const start = fix.range[0];
      const end = fix.range[1];
      if (lastPos >= start || start > end) {
        remainingMessages.push(problem);
        return false;
      }
      if (start < 0 && end >= 0 || start === 0 && fix.text.startsWith(BOM)) {
        output = "";
      }
      output += text.slice(Math.max(0, lastPos), Math.max(0, start));
      output += fix.text;
      lastPos = end;
      return true;
    }
    messages.forEach((problem) => {
      if (Object.hasOwn(problem, "fix") && problem.fix) {
        fixes.push(problem);
      } else {
        remainingMessages.push(problem);
      }
    });
    if (fixes.length) {
      debug("Found fixes to apply");
      let fixesWereApplied = false;
      for (const problem of fixes.sort(compareMessagesByFixRange)) {
        if (typeof shouldFix !== "function" || shouldFix(problem)) {
          attemptFix(problem);
          fixesWereApplied = true;
        } else {
          remainingMessages.push(problem);
        }
      }
      output += text.slice(Math.max(0, lastPos));
      return {
        fixed: fixesWereApplied,
        messages: remainingMessages.sort(compareMessagesByLocation),
        output
      };
    }
    debug("No fixes to apply");
    return {
      fixed: false,
      messages,
      output: bom + text
    };
  };
  sourceCodeFixer = SourceCodeFixer;
  return sourceCodeFixer;
}
var sourceCodeVisitor;
var hasRequiredSourceCodeVisitor;
function requireSourceCodeVisitor() {
  if (hasRequiredSourceCodeVisitor) return sourceCodeVisitor;
  hasRequiredSourceCodeVisitor = 1;
  const emptyArray = Object.freeze([]);
  class SourceCodeVisitor {
    /**
     * The functions to call for a given name.
     * @type {Map<string, Function[]>}
     */
    #functions = /* @__PURE__ */ new Map();
    /**
     * Adds a function to the list of functions to call for a given name.
     * @param {string} name The name of the function to call.
     * @param {Function} func The function to call.
     * @returns {void}
     */
    add(name, func) {
      if (this.#functions.has(name)) {
        this.#functions.get(name).push(func);
      } else {
        this.#functions.set(name, [func]);
      }
    }
    /**
     * Gets the list of functions to call for a given name.
     * @param {string} name The name of the function to call.
     * @returns {Function[]} The list of functions to call.
     */
    get(name) {
      if (this.#functions.has(name)) {
        return this.#functions.get(name);
      }
      return emptyArray;
    }
    /**
     * Iterates over all names and calls the callback with the name.
     * @param {(name:string) => void} callback The callback to call for each name.
     * @returns {void}
     */
    forEachName(callback) {
      this.#functions.forEach((funcs, name) => {
        callback(name);
      });
    }
    /**
     * Calls the functions for a given name with the given arguments.
     * @param {string} name The name of the function to call.
     * @param {any[]} args The arguments to pass to the function.
     * @returns {void}
     */
    callSync(name, ...args) {
      if (this.#functions.has(name)) {
        this.#functions.get(name).forEach((func) => func(...args));
      }
    }
  }
  sourceCodeVisitor = { SourceCodeVisitor };
  return sourceCodeVisitor;
}
var stats;
var hasRequiredStats;
function requireStats() {
  if (hasRequiredStats) return stats;
  hasRequiredStats = 1;
  function startTime2() {
    return browser$1$1.hrtime();
  }
  function endTime(t2) {
    const time = browser$1$1.hrtime(t2);
    return time[0] * 1e3 + time[1] / 1e6;
  }
  stats = {
    startTime: startTime2,
    endTime
  };
  return stats;
}
var timing;
var hasRequiredTiming;
function requireTiming() {
  if (hasRequiredTiming) return timing;
  hasRequiredTiming = 1;
  const { startTime: startTime2, endTime } = requireStats();
  const enabled = !!browser$1$1.env.TIMING;
  function getListSize() {
    const MINIMUM_SIZE = 10;
    if (typeof browser$1$1.env.TIMING !== "string") {
      return MINIMUM_SIZE;
    }
    if (browser$1$1.env.TIMING.toLowerCase() === "all") {
      return Number.POSITIVE_INFINITY;
    }
    const TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(browser$1$1.env.TIMING, 10);
    return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;
  }
  timing = /* @__PURE__ */ (function() {
    const data2 = /* @__PURE__ */ Object.create(null);
    function time(key, fn, stats2) {
      return function(...args) {
        const t2 = startTime2();
        const result = fn(...args);
        const tdiff = endTime(t2);
        if (enabled) {
          if (typeof data2[key] === "undefined") {
            data2[key] = 0;
          }
          data2[key] += tdiff;
        }
        return stats2 ? { result, tdiff } : result;
      };
    }
    return {
      time,
      enabled,
      getListSize
    };
  })();
  return timing;
}
var flatConfigArray = {};
var defaultConfig = {};
var validateLanguageOptions_1;
var hasRequiredValidateLanguageOptions;
function requireValidateLanguageOptions() {
  if (hasRequiredValidateLanguageOptions) return validateLanguageOptions_1;
  hasRequiredValidateLanguageOptions = 1;
  const globalVariablesValues = /* @__PURE__ */ new Set([
    true,
    "true",
    "writable",
    "writeable",
    false,
    "false",
    "readonly",
    "readable",
    null,
    "off"
  ]);
  function isNonNullObject(value) {
    return typeof value === "object" && value !== null;
  }
  function isNonArrayObject(value) {
    return isNonNullObject(value) && !Array.isArray(value);
  }
  function isUndefined2(value) {
    return typeof value === "undefined";
  }
  function validateEcmaVersion(ecmaVersion2) {
    if (isUndefined2(ecmaVersion2)) {
      throw new TypeError(
        'Key "ecmaVersion": Expected an "ecmaVersion" property.'
      );
    }
    if (typeof ecmaVersion2 !== "number" && ecmaVersion2 !== "latest") {
      throw new TypeError(
        'Key "ecmaVersion": Expected a number or "latest".'
      );
    }
  }
  function validateSourceType(sourceType) {
    if (typeof sourceType !== "string" || !/^(?:script|module|commonjs)$/u.test(sourceType)) {
      throw new TypeError(
        'Key "sourceType": Expected "script", "module", or "commonjs".'
      );
    }
  }
  function validateGlobals(globals2) {
    if (!isNonArrayObject(globals2)) {
      throw new TypeError('Key "globals": Expected an object.');
    }
    for (const key of Object.keys(globals2)) {
      if (key === "__proto__") {
        continue;
      }
      if (key !== key.trim()) {
        throw new TypeError(
          `Key "globals": Global "${key}" has leading or trailing whitespace.`
        );
      }
      if (!globalVariablesValues.has(globals2[key])) {
        throw new TypeError(
          `Key "globals": Key "${key}": Expected "readonly", "writable", or "off".`
        );
      }
    }
  }
  function validateParser(parser) {
    if (!parser || typeof parser !== "object" || typeof parser.parse !== "function" && typeof parser.parseForESLint !== "function") {
      throw new TypeError(
        'Key "parser": Expected object with parse() or parseForESLint() method.'
      );
    }
  }
  function validateLanguageOptions(languageOptions) {
    if (!isNonArrayObject(languageOptions)) {
      throw new TypeError("Expected an object.");
    }
    const {
      ecmaVersion: ecmaVersion2,
      sourceType,
      globals: globals2,
      parser,
      parserOptions,
      ...otherOptions
    } = languageOptions;
    if ("ecmaVersion" in languageOptions) {
      validateEcmaVersion(ecmaVersion2);
    }
    if ("sourceType" in languageOptions) {
      validateSourceType(sourceType);
    }
    if ("globals" in languageOptions) {
      validateGlobals(globals2);
    }
    if ("parser" in languageOptions) {
      validateParser(parser);
    }
    if ("parserOptions" in languageOptions) {
      if (!isNonArrayObject(parserOptions)) {
        throw new TypeError('Key "parserOptions": Expected an object.');
      }
    }
    const otherOptionKeys = Object.keys(otherOptions);
    if (otherOptionKeys.length > 0) {
      throw new TypeError(`Unexpected key "${otherOptionKeys[0]}" found.`);
    }
  }
  validateLanguageOptions_1 = { validateLanguageOptions };
  return validateLanguageOptions_1;
}
var js;
var hasRequiredJs;
function requireJs() {
  if (hasRequiredJs) return js;
  hasRequiredJs = 1;
  const { SourceCode } = requireSourceCode();
  const createDebug = requireSrc();
  const astUtils2 = requireAstUtils$1();
  const espree2 = requireEspree();
  const eslintScope2 = requireEslintScope();
  const evk = requireEslintVisitorKeys$2();
  const { validateLanguageOptions } = requireValidateLanguageOptions();
  const { LATEST_ECMA_VERSION } = requireEcmaVersion();
  const debug = createDebug("eslint:languages:js");
  const DEFAULT_ECMA_VERSION = 5;
  const parserSymbol = Symbol.for("eslint.RuleTester.parser");
  function analyzeScope(ast2, languageOptions, visitorKeys) {
    const parserOptions = languageOptions.parserOptions;
    const ecmaFeatures = parserOptions.ecmaFeatures || {};
    const ecmaVersion2 = languageOptions.ecmaVersion || DEFAULT_ECMA_VERSION;
    return eslintScope2.analyze(ast2, {
      ignoreEval: true,
      nodejsScope: ecmaFeatures.globalReturn,
      impliedStrict: ecmaFeatures.impliedStrict,
      ecmaVersion: typeof ecmaVersion2 === "number" ? ecmaVersion2 : 6,
      sourceType: languageOptions.sourceType || "script",
      childVisitorKeys: visitorKeys || evk.KEYS,
      fallback: evk.getKeys
    });
  }
  function isEspree(parser) {
    return !!(parser === espree2 || parser[parserSymbol] === espree2);
  }
  function normalizeEcmaVersionForLanguageOptions(ecmaVersion2) {
    switch (ecmaVersion2) {
      case 3:
        return 3;
      // void 0 = no ecmaVersion specified so use the default
      case 5:
      case void 0:
        return 5;
      default:
        if (typeof ecmaVersion2 === "number") {
          return ecmaVersion2 >= 2015 ? ecmaVersion2 : ecmaVersion2 + 2009;
        }
    }
    return LATEST_ECMA_VERSION;
  }
  js = {
    fileType: "text",
    lineStart: 1,
    columnStart: 0,
    nodeTypeKey: "type",
    visitorKeys: evk.KEYS,
    defaultLanguageOptions: {
      sourceType: "module",
      ecmaVersion: "latest",
      parser: espree2,
      parserOptions: {}
    },
    validateLanguageOptions,
    /**
     * Normalizes the language options.
     * @param {Object} languageOptions The language options to normalize.
     * @returns {Object} The normalized language options.
     */
    normalizeLanguageOptions(languageOptions) {
      languageOptions.ecmaVersion = normalizeEcmaVersionForLanguageOptions(
        languageOptions.ecmaVersion
      );
      if (isEspree(languageOptions.parser)) {
        const parserOptions = languageOptions.parserOptions;
        if (languageOptions.sourceType) {
          parserOptions.sourceType = languageOptions.sourceType;
          if (parserOptions.sourceType === "module" && parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.globalReturn) {
            parserOptions.ecmaFeatures.globalReturn = false;
          }
        }
      }
      return languageOptions;
    },
    /**
     * Determines if a given node matches a given selector class.
     * @param {string} className The class name to check.
     * @param {ASTNode} node The node to check.
     * @param {Array<ASTNode>} ancestry The ancestry of the node.
     * @returns {boolean} True if there's a match, false if not.
     * @throws {Error} When an unknown class name is passed.
     */
    matchesSelectorClass(className, node2, ancestry) {
      switch (className.toLowerCase()) {
        case "statement":
          if (node2.type.slice(-9) === "Statement") {
            return true;
          }
        // fallthrough: interface Declaration <: Statement { }
        case "declaration":
          return node2.type.slice(-11) === "Declaration";
        case "pattern":
          if (node2.type.slice(-7) === "Pattern") {
            return true;
          }
        // fallthrough: interface Expression <: Node, Pattern { }
        case "expression":
          return node2.type.slice(-10) === "Expression" || node2.type.slice(-7) === "Literal" || node2.type === "Identifier" && (ancestry.length === 0 || ancestry[0].type !== "MetaProperty") || node2.type === "MetaProperty";
        case "function":
          return node2.type === "FunctionDeclaration" || node2.type === "FunctionExpression" || node2.type === "ArrowFunctionExpression";
        default:
          throw new Error(`Unknown class name: ${className}`);
      }
    },
    /**
     * Parses the given file into an AST.
     * @param {File} file The virtual file to parse.
     * @param {Object} options Additional options passed from ESLint.
     * @param {JSLanguageOptions} options.languageOptions The language options.
     * @returns {Object} The result of parsing.
     */
    parse(file, { languageOptions }) {
      const { body: text, path: filePath } = file;
      const textToParse = text.replace(
        astUtils2.shebangPattern,
        (match, captured) => `//${captured}`
      );
      const { ecmaVersion: ecmaVersion2, sourceType, parser } = languageOptions;
      const parserOptions = Object.assign(
        { ecmaVersion: ecmaVersion2, sourceType },
        languageOptions.parserOptions,
        {
          loc: true,
          range: true,
          raw: true,
          tokens: true,
          comment: true,
          eslintVisitorKeys: true,
          eslintScopeManager: true,
          filePath
        }
      );
      try {
        debug("Parsing:", filePath);
        const parseResult = typeof parser.parseForESLint === "function" ? parser.parseForESLint(textToParse, parserOptions) : { ast: parser.parse(textToParse, parserOptions) };
        debug("Parsing successful:", filePath);
        const {
          ast: ast2,
          services: parserServices = {},
          visitorKeys = evk.KEYS,
          scopeManager
        } = parseResult;
        return {
          ok: true,
          ast: ast2,
          parserServices,
          visitorKeys,
          scopeManager
        };
      } catch (ex) {
        const message = ex.message.replace(/^line \d+:/iu, "").trim();
        debug("%s\n%s", message, ex.stack);
        return {
          ok: false,
          errors: [
            {
              message,
              line: ex.lineNumber,
              column: ex.column
            }
          ]
        };
      }
    },
    /**
     * Creates a new `SourceCode` object from the given information.
     * @param {File} file The virtual file to create a `SourceCode` object from.
     * @param {OkParseResult} parseResult The result returned from `parse()`.
     * @param {Object} options Additional options passed from ESLint.
     * @param {JSLanguageOptions} options.languageOptions The language options.
     * @returns {SourceCode} The new `SourceCode` object.
     */
    createSourceCode(file, parseResult, { languageOptions }) {
      const { body: text, path: filePath, bom: hasBOM } = file;
      const { ast: ast2, parserServices, visitorKeys } = parseResult;
      debug("Scope analysis:", filePath);
      const scopeManager = parseResult.scopeManager || analyzeScope(ast2, languageOptions, visitorKeys);
      debug("Scope analysis successful:", filePath);
      return new SourceCode({
        text,
        ast: ast2,
        hasBOM,
        parserServices,
        scopeManager,
        visitorKeys
      });
    }
  };
  return js;
}
var hasRequiredDefaultConfig;
function requireDefaultConfig() {
  if (hasRequiredDefaultConfig) return defaultConfig;
  hasRequiredDefaultConfig = 1;
  const Rules = requireRules$1();
  const sharedDefaultConfig = [
    // intentionally empty config to ensure these files are globbed by default
    {
      files: ["**/*.js", "**/*.mjs"]
    },
    {
      files: ["**/*.cjs"],
      languageOptions: {
        sourceType: "commonjs",
        ecmaVersion: "latest"
      }
    }
  ];
  defaultConfig.defaultConfig = Object.freeze([
    {
      plugins: {
        "@": {
          languages: {
            js: requireJs()
          },
          /*
           * Because we try to delay loading rules until absolutely
           * necessary, a proxy allows us to hook into the lazy-loading
           * aspect of the rules map while still keeping all of the
           * relevant configuration inside of the config array.
           */
          rules: new Proxy(
            {},
            {
              get(target, property) {
                return Rules.get(property);
              },
              has(target, property) {
                return Rules.has(property);
              }
            }
          )
        }
      },
      language: "@/js",
      linterOptions: {
        reportUnusedDisableDirectives: 1
      }
    },
    // default ignores are listed here
    {
      ignores: ["**/node_modules/", ".git/"]
    },
    ...sharedDefaultConfig
  ]);
  defaultConfig.defaultRuleTesterConfig = Object.freeze([
    { files: ["**"] },
    // Make sure the default config matches for all files
    ...sharedDefaultConfig
  ]);
  return defaultConfig;
}
var hasRequiredFlatConfigArray;
function requireFlatConfigArray() {
  if (hasRequiredFlatConfigArray) return flatConfigArray;
  hasRequiredFlatConfigArray = 1;
  const { ConfigArray, ConfigArraySymbol } = requireCjs();
  const { flatConfigSchema } = requireFlatConfigSchema();
  const { defaultConfig: defaultConfig2 } = requireDefaultConfig();
  const { Config } = requireConfig();
  const META_FIELDS = /* @__PURE__ */ new Set(["name", "basePath"]);
  function wrapConfigErrorWithDetails(error, originalLength2, baseLength2) {
    let location = "user-defined";
    let configIndex = error.index;
    if (error.index < baseLength2) {
      location = "base";
    } else if (error.index < originalLength2 + baseLength2) {
      location = "original";
      configIndex = error.index - baseLength2;
    } else {
      configIndex = error.index - originalLength2 - baseLength2;
    }
    return new TypeError(
      `${error.message.slice(0, -1)} at ${location} index ${configIndex}.`,
      { cause: error }
    );
  }
  const originalBaseConfig = Symbol("originalBaseConfig");
  const originalLength = Symbol("originalLength");
  const baseLength = Symbol("baseLength");
  class FlatConfigArray extends ConfigArray {
    /**
     * Creates a new instance.
     * @param {*[]} configs An array of configuration information.
     * @param {{basePath: string, shouldIgnore: boolean, baseConfig: FlatConfig}} options The options
     *      to use for the config array instance.
     */
    constructor(configs, { basePath, shouldIgnore = true, baseConfig = defaultConfig2 } = {}) {
      super(configs, {
        basePath,
        schema: flatConfigSchema
      });
      this[originalLength] = this.length;
      if (baseConfig[Symbol.iterator]) {
        this.unshift(...baseConfig);
      } else {
        this.unshift(baseConfig);
      }
      this[baseLength] = this.length - this[originalLength];
      this[originalBaseConfig] = baseConfig;
      Object.defineProperty(this, originalBaseConfig, { writable: false });
      this.shouldIgnore = shouldIgnore;
      Object.defineProperty(this, "shouldIgnore", { writable: false });
    }
    /**
     * Normalizes the array by calling the superclass method and catching/rethrowing
     * any ConfigError exceptions with additional details.
     * @param {any} [context] The context to use to normalize the array.
     * @returns {Promise<FlatConfigArray>} A promise that resolves when the array is normalized.
     */
    normalize(context) {
      return super.normalize(context).catch((error) => {
        if (error.name === "ConfigError") {
          throw wrapConfigErrorWithDetails(
            error,
            this[originalLength],
            this[baseLength]
          );
        }
        throw error;
      });
    }
    /**
     * Normalizes the array by calling the superclass method and catching/rethrowing
     * any ConfigError exceptions with additional details.
     * @param {any} [context] The context to use to normalize the array.
     * @returns {FlatConfigArray} The current instance.
     * @throws {TypeError} If the config is invalid.
     */
    normalizeSync(context) {
      try {
        return super.normalizeSync(context);
      } catch (error) {
        if (error.name === "ConfigError") {
          throw wrapConfigErrorWithDetails(
            error,
            this[originalLength],
            this[baseLength]
          );
        }
        throw error;
      }
    }
    /* eslint-disable class-methods-use-this -- Desired as instance method */
    /**
     * Replaces a config with another config to allow us to put strings
     * in the config array that will be replaced by objects before
     * normalization.
     * @param {Object} config The config to preprocess.
     * @returns {Object} The preprocessed config.
     */
    [ConfigArraySymbol.preprocessConfig](config2) {
      if (!this.shouldIgnore && !this[originalBaseConfig].includes(config2) && config2.ignores && Object.keys(config2).filter((key) => !META_FIELDS.has(key)).length === 1) {
        const { ignores, ...otherKeys } = config2;
        return otherKeys;
      }
      return config2;
    }
    /**
     * Finalizes the config by replacing plugin references with their objects
     * and validating rule option schemas.
     * @param {Object} config The config to finalize.
     * @returns {Object} The finalized config.
     * @throws {TypeError} If the config is invalid.
     */
    [ConfigArraySymbol.finalizeConfig](config2) {
      return new Config(config2);
    }
    /* eslint-enable class-methods-use-this -- Desired as instance method */
  }
  flatConfigArray.FlatConfigArray = FlatConfigArray;
  return flatConfigArray;
}
var flags;
var hasRequiredFlags;
function requireFlags() {
  if (hasRequiredFlags) return flags;
  hasRequiredFlags = 1;
  const activeFlags = /* @__PURE__ */ new Map([
    ["test_only", "Used only for testing."],
    ["test_only_2", "Used only for testing."],
    [
      "v10_config_lookup_from_file",
      "Look up `eslint.config.js` from the file being linted."
    ],
    [
      "unstable_native_nodejs_ts_config",
      "Use native Node.js to load TypeScript configuration."
    ]
  ]);
  const inactiveFlags = /* @__PURE__ */ new Map([
    [
      "test_only_replaced",
      {
        description: "Used only for testing flags that have been replaced by other flags.",
        replacedBy: "test_only"
      }
    ],
    [
      "test_only_enabled_by_default",
      {
        description: "Used only for testing flags whose features have been enabled by default.",
        replacedBy: null
      }
    ],
    [
      "test_only_abandoned",
      {
        description: "Used only for testing flags whose features have been abandoned."
      }
    ],
    [
      "unstable_ts_config",
      {
        description: "Enable TypeScript configuration files.",
        replacedBy: null
      }
    ],
    [
      "unstable_config_lookup_from_file",
      {
        description: "Look up `eslint.config.js` from the file being linted.",
        replacedBy: "v10_config_lookup_from_file"
      }
    ]
  ]);
  function getInactivityReasonMessage({ replacedBy }) {
    if (typeof replacedBy === "undefined") {
      return "This feature has been abandoned.";
    }
    if (typeof replacedBy === "string") {
      return `This flag has been renamed '${replacedBy}' to reflect its stabilization. Please use '${replacedBy}' instead.`;
    }
    return "This feature is now enabled by default.";
  }
  flags = {
    activeFlags,
    inactiveFlags,
    getInactivityReasonMessage
  };
  return flags;
}
var vfile;
var hasRequiredVfile;
function requireVfile() {
  if (hasRequiredVfile) return vfile;
  hasRequiredVfile = 1;
  function hasUnicodeBOM(value) {
    return typeof value === "string" ? value.charCodeAt(0) === 65279 : value[0] === 239 && value[1] === 187 && value[2] === 191;
  }
  function stripUnicodeBOM(value) {
    if (!hasUnicodeBOM(value)) {
      return value;
    }
    if (typeof value === "string") {
      return value.slice(1);
    }
    return value.slice(3);
  }
  class VFile {
    /**
     * The file path including any processor-created virtual path.
     * @type {string}
     * @readonly
     */
    path;
    /**
     * The file path on disk.
     * @type {string}
     * @readonly
     */
    physicalPath;
    /**
     * The file contents.
     * @type {string|Uint8Array}
     * @readonly
     */
    body;
    /**
     * The raw body of the file, including a BOM if present.
     * @type {string|Uint8Array}
     * @readonly
     */
    rawBody;
    /**
     * Indicates whether the file has a byte order mark (BOM).
     * @type {boolean}
     * @readonly
     */
    bom;
    /**
     * Creates a new instance.
     * @param {string} path The file path.
     * @param {string|Uint8Array} body The file contents.
     * @param {Object} [options] Additional options.
     * @param {string} [options.physicalPath] The file path on disk.
     */
    constructor(path, body, { physicalPath } = {}) {
      this.path = path;
      this.physicalPath = physicalPath ?? path;
      this.bom = hasUnicodeBOM(body);
      this.body = stripUnicodeBOM(body);
      this.rawBody = body;
    }
  }
  vfile = { VFile };
  return vfile;
}
var parserService;
var hasRequiredParserService;
function requireParserService() {
  if (hasRequiredParserService) return parserService;
  hasRequiredParserService = 1;
  class ParserService {
    /**
     * Parses the given file synchronously.
     * @param {VFile} file The file to parse.
     * @param {{language:Language,languageOptions:LanguageOptions}} config The configuration to use.
     * @returns {Object} An object with the parsed source code or errors.
     * @throws {Error} If the parser returns a promise.
     */
    parseSync(file, config2) {
      const { language, languageOptions } = config2;
      const result = language.parse(file, { languageOptions });
      if (typeof result.then === "function") {
        throw new Error("Unsupported: Language parser returned a promise.");
      }
      if (result.ok) {
        return {
          ok: true,
          sourceCode: language.createSourceCode(file, result, {
            languageOptions
          })
        };
      }
      return {
        ok: false,
        errors: result.errors.map((error) => ({
          ruleId: null,
          nodeType: null,
          fatal: true,
          severity: 2,
          message: `Parsing error: ${error.message}`,
          line: error.line,
          column: error.column
        }))
      };
    }
  }
  parserService = { ParserService };
  return parserService;
}
var fileContext = {};
var hasRequiredFileContext;
function requireFileContext() {
  if (hasRequiredFileContext) return fileContext;
  hasRequiredFileContext = 1;
  class FileContext {
    /**
     * The current working directory.
     * @type {string}
     */
    cwd;
    /**
     * The filename of the file being linted.
     * @type {string}
     */
    filename;
    /**
     * The physical filename of the file being linted.
     * @type {string}
     */
    physicalFilename;
    /**
     * The source code of the file being linted.
     * @type {SourceCode}
     */
    sourceCode;
    /**
     * The parser options for the file being linted.
     * @type {Record<string, unknown>}
     * @deprecated Use `languageOptions` instead.
     */
    parserOptions;
    /**
     * The path to the parser used to parse this file.
     * @type {string}
     * @deprecated No longer supported.
     */
    parserPath;
    /**
     * The language options used when parsing this file.
     * @type {Record<string, unknown>}
     */
    languageOptions;
    /**
     * The settings for the file being linted.
     * @type {Record<string, unknown>}
     */
    settings;
    /**
     * Creates a new instance.
     * @param {Object} config The configuration object for the file context.
     * @param {string} config.cwd The current working directory.
     * @param {string} config.filename The filename of the file being linted.
     * @param {string} config.physicalFilename The physical filename of the file being linted.
     * @param {SourceCode} config.sourceCode The source code of the file being linted.
     * @param {Record<string, unknown>} config.parserOptions The parser options for the file being linted.
     * @param {string} config.parserPath The path to the parser used to parse this file.
     * @param {Record<string, unknown>} config.languageOptions The language options used when parsing this file.
     * @param {Record<string, unknown>} config.settings The settings for the file being linted.
     */
    constructor({
      cwd: cwd2,
      filename,
      physicalFilename,
      sourceCode: sourceCode2,
      parserOptions,
      parserPath,
      languageOptions,
      settings
    }) {
      this.cwd = cwd2;
      this.filename = filename;
      this.physicalFilename = physicalFilename;
      this.sourceCode = sourceCode2;
      this.parserOptions = parserOptions;
      this.parserPath = parserPath;
      this.languageOptions = languageOptions;
      this.settings = settings;
      Object.freeze(this);
    }
    /**
     * Gets the current working directory.
     * @returns {string} The current working directory.
     * @deprecated Use `cwd` instead.
     */
    getCwd() {
      return this.cwd;
    }
    /**
     * Gets the filename of the file being linted.
     * @returns {string} The filename of the file being linted.
     * @deprecated Use `filename` instead.
     */
    getFilename() {
      return this.filename;
    }
    /**
     * Gets the physical filename of the file being linted.
     * @returns {string} The physical filename of the file being linted.
     * @deprecated Use `physicalFilename` instead.
     */
    getPhysicalFilename() {
      return this.physicalFilename;
    }
    /**
     * Gets the source code of the file being linted.
     * @returns {SourceCode} The source code of the file being linted.
     * @deprecated Use `sourceCode` instead.
     */
    getSourceCode() {
      return this.sourceCode;
    }
    /**
     * Creates a new object with the current object as the prototype and
     * the specified properties as its own properties.
     * @param {Object} extension The properties to add to the new object.
     * @returns {FileContext} A new object with the current object as the prototype
     * and the specified properties as its own properties.
     */
    extend(extension) {
      return Object.freeze(Object.assign(Object.create(this), extension));
    }
  }
  fileContext.FileContext = FileContext;
  return fileContext;
}
var processorService;
var hasRequiredProcessorService;
function requireProcessorService() {
  if (hasRequiredProcessorService) return processorService;
  hasRequiredProcessorService = 1;
  const path = require$$0$1;
  const { VFile } = requireVfile();
  class ProcessorService {
    /**
     * Preprocesses the given file synchronously.
     * @param {VFile} file The file to preprocess.
     * @param {{processor:Processor}} config The configuration to use.
     * @returns {{ok:boolean, files?: Array<VFile>, errors?: Array<LintMessage>}} An array of preprocessed files or errors.
     * @throws {Error} If the preprocessor returns a promise.
     */
    preprocessSync(file, config2) {
      const { processor } = config2;
      let blocks;
      try {
        blocks = processor.preprocess(file.rawBody, file.path);
      } catch (ex) {
        const message = `Preprocessing error: ${ex.message.replace(/^line \d+:/iu, "").trim()}`;
        return {
          ok: false,
          errors: [
            {
              ruleId: null,
              fatal: true,
              severity: 2,
              message,
              line: ex.lineNumber,
              column: ex.column,
              nodeType: null
            }
          ]
        };
      }
      if (typeof blocks.then === "function") {
        throw new Error("Unsupported: Preprocessor returned a promise.");
      }
      return {
        ok: true,
        files: blocks.map((block, i2) => {
          if (typeof block === "string") {
            return block;
          }
          const filePath = path.join(file.path, `${i2}_${block.filename}`);
          return new VFile(filePath, block.text, {
            physicalPath: file.physicalPath
          });
        })
      };
    }
    /**
     * Postprocesses the given messages synchronously.
     * @param {VFile} file The file to postprocess.
     * @param {LintMessage[][]} messages The messages to postprocess.
     * @param {{processor:Processor}} config The configuration to use.
     * @returns {LintMessage[]} The postprocessed messages.
     */
    postprocessSync(file, messages, config2) {
      const { processor } = config2;
      return processor.postprocess(messages, file.path);
    }
  }
  processorService = { ProcessorService };
  return processorService;
}
var optionUtils;
var hasRequiredOptionUtils;
function requireOptionUtils() {
  if (hasRequiredOptionUtils) return optionUtils;
  hasRequiredOptionUtils = 1;
  function containsDifferentProperty(input, original) {
    if (input === original) {
      return false;
    }
    if (typeof input !== typeof original || Array.isArray(input) !== Array.isArray(original)) {
      return true;
    }
    if (Array.isArray(input)) {
      return input.length !== original.length || input.some(
        (value, i2) => containsDifferentProperty(value, original[i2])
      );
    }
    if (typeof input === "object") {
      if (input === null || original === null) {
        return true;
      }
      const inputKeys = Object.keys(input);
      const originalKeys = Object.keys(original);
      return inputKeys.length !== originalKeys.length || inputKeys.some(
        (inputKey) => !Object.hasOwn(original, inputKey) || containsDifferentProperty(
          input[inputKey],
          original[inputKey]
        )
      );
    }
    return true;
  }
  optionUtils = {
    containsDifferentProperty
  };
  return optionUtils;
}
var warningService;
var hasRequiredWarningService;
function requireWarningService() {
  if (hasRequiredWarningService) return warningService;
  hasRequiredWarningService = 1;
  class WarningService {
    /**
     * Creates a new instance of the service.
     * @param {{ emitWarning?: ((warning: string, type: string) => void) | undefined }} [options] A function called internally to emit warnings using API provided by the runtime.
     */
    constructor({
      emitWarning = globalThis.process?.emitWarning ?? (() => {
      })
    } = {}) {
      this.emitWarning = emitWarning;
    }
    /**
     * Emits a warning when circular fixes are detected while fixing a file.
     * This method is used by the Linter and is safe to call outside Node.js.
     * @param {string} filename The name of the file being fixed.
     * @returns {void}
     */
    emitCircularFixesWarning(filename) {
      this.emitWarning(
        `Circular fixes detected while fixing ${filename}. It is likely that you have conflicting rules in your configuration.`,
        "ESLintCircularFixesWarning"
      );
    }
    /**
     * Emits a warning when an empty config file has been loaded.
     * @param {string} configFilePath The path to the config file.
     * @returns {void}
     */
    emitEmptyConfigWarning(configFilePath) {
      this.emitWarning(
        `Running ESLint with an empty config (from ${configFilePath}). Please double-check that this is what you want. If you want to run ESLint with an empty config, export [{}] to remove this warning.`,
        "ESLintEmptyConfigWarning"
      );
    }
    /**
     * Emits a warning when an ".eslintignore" file is found.
     * @returns {void}
     */
    emitESLintIgnoreWarning() {
      this.emitWarning(
        'The ".eslintignore" file is no longer supported. Switch to using the "ignores" property in "eslint.config.js": https://eslint.org/docs/latest/use/configure/migration-guide#ignoring-files',
        "ESLintIgnoreWarning"
      );
    }
    /**
     * Emits a warning when the ESLINT_USE_FLAT_CONFIG environment variable is set to "false".
     * @returns {void}
     */
    emitESLintRCWarning() {
      this.emitWarning(
        "You are using an eslintrc configuration file, which is deprecated and support will be removed in v10.0.0. Please migrate to an eslint.config.js file. See https://eslint.org/docs/latest/use/configure/migration-guide for details. An eslintrc configuration file is used because you have the ESLINT_USE_FLAT_CONFIG environment variable set to false. If you want to use an eslint.config.js file, remove the environment variable. If you want to find the location of the eslintrc configuration file, use the --debug flag.",
        "ESLintRCWarning"
      );
    }
    /**
     * Emits a warning when an inactive flag is used.
     * This method is used by the Linter and is safe to call outside Node.js.
     * @param {string} flag The name of the flag.
     * @param {string} message The warning message.
     * @returns {void}
     */
    emitInactiveFlagWarning(flag, message) {
      this.emitWarning(message, `ESLintInactiveFlag_${flag}`);
    }
    /**
     * Emits a warning when a suboptimal concurrency setting is detected.
     * Currently, this is only used to warn when the net linting ratio is low.
     * @param {string} notice A notice about how to improve performance.
     * @returns {void}
     */
    emitPoorConcurrencyWarning(notice) {
      this.emitWarning(
        `You may ${notice} to improve performance.`,
        "ESLintPoorConcurrencyWarning"
      );
    }
  }
  warningService = { WarningService };
  return warningService;
}
function e(t2) {
  return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  })(t2);
}
function t(e2, t2) {
  return (function(e3) {
    if (Array.isArray(e3)) return e3;
  })(e2) || (function(e3, t3) {
    var r2 = null == e3 ? null : "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
    if (null != r2) {
      var n2, a2, o2, i2, s2 = [], u2 = true, l2 = false;
      try {
        if (o2 = (r2 = r2.call(e3)).next, 0 === t3) ;
        else for (; !(u2 = (n2 = o2.call(r2)).done) && (s2.push(n2.value), s2.length !== t3); u2 = true) ;
      } catch (e4) {
        l2 = true, a2 = e4;
      } finally {
        try {
          if (!u2 && null != r2.return && (i2 = r2.return(), Object(i2) !== i2)) return;
        } finally {
          if (l2) throw a2;
        }
      }
      return s2;
    }
  })(e2, t2) || n(e2, t2) || (function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  })();
}
function r(e2) {
  return (function(e3) {
    if (Array.isArray(e3)) return a(e3);
  })(e2) || (function(e3) {
    if ("undefined" != typeof Symbol && null != e3[Symbol.iterator] || null != e3["@@iterator"]) return Array.from(e3);
  })(e2) || n(e2) || (function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  })();
}
function n(e2, t2) {
  if (e2) {
    if ("string" == typeof e2) return a(e2, t2);
    var r2 = Object.prototype.toString.call(e2).slice(8, -1);
    return "Object" === r2 && e2.constructor && (r2 = e2.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e2) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? a(e2, t2) : void 0;
  }
}
function a(e2, t2) {
  (null == t2 || t2 > e2.length) && (t2 = e2.length);
  for (var r2 = 0, n2 = new Array(t2); r2 < t2; r2++) n2[r2] = e2[r2];
  return n2;
}
function o(e2, t2) {
  return e2(t2 = { exports: {} }, t2.exports), t2.exports;
}
var i = o((function(e2, t2) {
  !(function e3(t3) {
    var r2, n2, a2, o2, i2, s2;
    function u2(e4) {
      var t4, r3, n3 = {};
      for (t4 in e4) e4.hasOwnProperty(t4) && (r3 = e4[t4], n3[t4] = "object" == typeof r3 && null !== r3 ? u2(r3) : r3);
      return n3;
    }
    function l2(e4, t4) {
      this.parent = e4, this.key = t4;
    }
    function c2(e4, t4, r3, n3) {
      this.node = e4, this.path = t4, this.wrap = r3, this.ref = n3;
    }
    function f2() {
    }
    function p2(e4) {
      return null != e4 && ("object" == typeof e4 && "string" == typeof e4.type);
    }
    function h2(e4, t4) {
      return (e4 === r2.ObjectExpression || e4 === r2.ObjectPattern) && "properties" === t4;
    }
    function y2(e4, t4) {
      for (var r3 = e4.length - 1; r3 >= 0; --r3) if (e4[r3].node === t4) return true;
      return false;
    }
    function d2(e4, t4) {
      return new f2().traverse(e4, t4);
    }
    function m2(e4, t4) {
      var r3;
      return r3 = (function(e5, t5) {
        var r4, n3, a3, o3;
        for (n3 = e5.length, a3 = 0; n3; ) t5(e5[o3 = a3 + (r4 = n3 >>> 1)]) ? n3 = r4 : (a3 = o3 + 1, n3 -= r4 + 1);
        return a3;
      })(t4, (function(t5) {
        return t5.range[0] > e4.range[0];
      })), e4.extendedRange = [e4.range[0], e4.range[1]], r3 !== t4.length && (e4.extendedRange[1] = t4[r3].range[0]), (r3 -= 1) >= 0 && (e4.extendedRange[0] = t4[r3].range[1]), e4;
    }
    return r2 = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ChainExpression: "ChainExpression", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ComprehensionBlock: "ComprehensionBlock", ComprehensionExpression: "ComprehensionExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DebuggerStatement: "DebuggerStatement", DirectiveStatement: "DirectiveStatement", DoWhileStatement: "DoWhileStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForInStatement: "ForInStatement", ForOfStatement: "ForOfStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", GeneratorExpression: "GeneratorExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportExpression: "ImportExpression", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", ModuleSpecifier: "ModuleSpecifier", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", PrivateIdentifier: "PrivateIdentifier", Program: "Program", Property: "Property", PropertyDefinition: "PropertyDefinition", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchStatement: "SwitchStatement", SwitchCase: "SwitchCase", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression" }, a2 = { AssignmentExpression: ["left", "right"], AssignmentPattern: ["left", "right"], ArrayExpression: ["elements"], ArrayPattern: ["elements"], ArrowFunctionExpression: ["params", "body"], AwaitExpression: ["argument"], BlockStatement: ["body"], BinaryExpression: ["left", "right"], BreakStatement: ["label"], CallExpression: ["callee", "arguments"], CatchClause: ["param", "body"], ChainExpression: ["expression"], ClassBody: ["body"], ClassDeclaration: ["id", "superClass", "body"], ClassExpression: ["id", "superClass", "body"], ComprehensionBlock: ["left", "right"], ComprehensionExpression: ["blocks", "filter", "body"], ConditionalExpression: ["test", "consequent", "alternate"], ContinueStatement: ["label"], DebuggerStatement: [], DirectiveStatement: [], DoWhileStatement: ["body", "test"], EmptyStatement: [], ExportAllDeclaration: ["source"], ExportDefaultDeclaration: ["declaration"], ExportNamedDeclaration: ["declaration", "specifiers", "source"], ExportSpecifier: ["exported", "local"], ExpressionStatement: ["expression"], ForStatement: ["init", "test", "update", "body"], ForInStatement: ["left", "right", "body"], ForOfStatement: ["left", "right", "body"], FunctionDeclaration: ["id", "params", "body"], FunctionExpression: ["id", "params", "body"], GeneratorExpression: ["blocks", "filter", "body"], Identifier: [], IfStatement: ["test", "consequent", "alternate"], ImportExpression: ["source"], ImportDeclaration: ["specifiers", "source"], ImportDefaultSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportSpecifier: ["imported", "local"], Literal: [], LabeledStatement: ["label", "body"], LogicalExpression: ["left", "right"], MemberExpression: ["object", "property"], MetaProperty: ["meta", "property"], MethodDefinition: ["key", "value"], ModuleSpecifier: [], NewExpression: ["callee", "arguments"], ObjectExpression: ["properties"], ObjectPattern: ["properties"], PrivateIdentifier: [], Program: ["body"], Property: ["key", "value"], PropertyDefinition: ["key", "value"], RestElement: ["argument"], ReturnStatement: ["argument"], SequenceExpression: ["expressions"], SpreadElement: ["argument"], Super: [], SwitchStatement: ["discriminant", "cases"], SwitchCase: ["test", "consequent"], TaggedTemplateExpression: ["tag", "quasi"], TemplateElement: [], TemplateLiteral: ["quasis", "expressions"], ThisExpression: [], ThrowStatement: ["argument"], TryStatement: ["block", "handler", "finalizer"], UnaryExpression: ["argument"], UpdateExpression: ["argument"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id", "init"], WhileStatement: ["test", "body"], WithStatement: ["object", "body"], YieldExpression: ["argument"] }, n2 = { Break: o2 = {}, Skip: i2 = {}, Remove: s2 = {} }, l2.prototype.replace = function(e4) {
      this.parent[this.key] = e4;
    }, l2.prototype.remove = function() {
      return Array.isArray(this.parent) ? (this.parent.splice(this.key, 1), true) : (this.replace(null), false);
    }, f2.prototype.path = function() {
      var e4, t4, r3, n3, a3;
      function o3(e5, t5) {
        if (Array.isArray(t5)) for (r3 = 0, n3 = t5.length; r3 < n3; ++r3) e5.push(t5[r3]);
        else e5.push(t5);
      }
      if (!this.__current.path) return null;
      for (a3 = [], e4 = 2, t4 = this.__leavelist.length; e4 < t4; ++e4) o3(a3, this.__leavelist[e4].path);
      return o3(a3, this.__current.path), a3;
    }, f2.prototype.type = function() {
      return this.current().type || this.__current.wrap;
    }, f2.prototype.parents = function() {
      var e4, t4, r3;
      for (r3 = [], e4 = 1, t4 = this.__leavelist.length; e4 < t4; ++e4) r3.push(this.__leavelist[e4].node);
      return r3;
    }, f2.prototype.current = function() {
      return this.__current.node;
    }, f2.prototype.__execute = function(e4, t4) {
      var r3, n3;
      return n3 = void 0, r3 = this.__current, this.__current = t4, this.__state = null, e4 && (n3 = e4.call(this, t4.node, this.__leavelist[this.__leavelist.length - 1].node)), this.__current = r3, n3;
    }, f2.prototype.notify = function(e4) {
      this.__state = e4;
    }, f2.prototype.skip = function() {
      this.notify(i2);
    }, f2.prototype.break = function() {
      this.notify(o2);
    }, f2.prototype.remove = function() {
      this.notify(s2);
    }, f2.prototype.__initialize = function(e4, t4) {
      this.visitor = t4, this.root = e4, this.__worklist = [], this.__leavelist = [], this.__current = null, this.__state = null, this.__fallback = null, "iteration" === t4.fallback ? this.__fallback = Object.keys : "function" == typeof t4.fallback && (this.__fallback = t4.fallback), this.__keys = a2, t4.keys && (this.__keys = Object.assign(Object.create(this.__keys), t4.keys));
    }, f2.prototype.traverse = function(e4, t4) {
      var r3, n3, a3, s3, u3, l3, f3, d3, m3, x2, v2, g2;
      for (this.__initialize(e4, t4), g2 = {}, r3 = this.__worklist, n3 = this.__leavelist, r3.push(new c2(e4, null, null, null)), n3.push(new c2(null, null, null, null)); r3.length; ) if ((a3 = r3.pop()) !== g2) {
        if (a3.node) {
          if (l3 = this.__execute(t4.enter, a3), this.__state === o2 || l3 === o2) return;
          if (r3.push(g2), n3.push(a3), this.__state === i2 || l3 === i2) continue;
          if (u3 = (s3 = a3.node).type || a3.wrap, !(x2 = this.__keys[u3])) {
            if (!this.__fallback) throw new Error("Unknown node type " + u3 + ".");
            x2 = this.__fallback(s3);
          }
          for (d3 = x2.length; (d3 -= 1) >= 0; ) if (v2 = s3[f3 = x2[d3]]) {
            if (Array.isArray(v2)) {
              for (m3 = v2.length; (m3 -= 1) >= 0; ) if (v2[m3] && !y2(n3, v2[m3])) {
                if (h2(u3, x2[d3])) a3 = new c2(v2[m3], [f3, m3], "Property", null);
                else {
                  if (!p2(v2[m3])) continue;
                  a3 = new c2(v2[m3], [f3, m3], null, null);
                }
                r3.push(a3);
              }
            } else if (p2(v2)) {
              if (y2(n3, v2)) continue;
              r3.push(new c2(v2, f3, null, null));
            }
          }
        }
      } else if (a3 = n3.pop(), l3 = this.__execute(t4.leave, a3), this.__state === o2 || l3 === o2) return;
    }, f2.prototype.replace = function(e4, t4) {
      var r3, n3, a3, u3, f3, y3, d3, m3, x2, v2, g2, A2, E;
      function b(e5) {
        var t5, n4, a4, o3;
        if (e5.ref.remove()) {
          for (n4 = e5.ref.key, o3 = e5.ref.parent, t5 = r3.length; t5--; ) if ((a4 = r3[t5]).ref && a4.ref.parent === o3) {
            if (a4.ref.key < n4) break;
            --a4.ref.key;
          }
        }
      }
      for (this.__initialize(e4, t4), g2 = {}, r3 = this.__worklist, n3 = this.__leavelist, y3 = new c2(e4, null, null, new l2(A2 = { root: e4 }, "root")), r3.push(y3), n3.push(y3); r3.length; ) if ((y3 = r3.pop()) !== g2) {
        if (void 0 !== (f3 = this.__execute(t4.enter, y3)) && f3 !== o2 && f3 !== i2 && f3 !== s2 && (y3.ref.replace(f3), y3.node = f3), this.__state !== s2 && f3 !== s2 || (b(y3), y3.node = null), this.__state === o2 || f3 === o2) return A2.root;
        if ((a3 = y3.node) && (r3.push(g2), n3.push(y3), this.__state !== i2 && f3 !== i2)) {
          if (u3 = a3.type || y3.wrap, !(x2 = this.__keys[u3])) {
            if (!this.__fallback) throw new Error("Unknown node type " + u3 + ".");
            x2 = this.__fallback(a3);
          }
          for (d3 = x2.length; (d3 -= 1) >= 0; ) if (v2 = a3[E = x2[d3]]) if (Array.isArray(v2)) {
            for (m3 = v2.length; (m3 -= 1) >= 0; ) if (v2[m3]) {
              if (h2(u3, x2[d3])) y3 = new c2(v2[m3], [E, m3], "Property", new l2(v2, m3));
              else {
                if (!p2(v2[m3])) continue;
                y3 = new c2(v2[m3], [E, m3], null, new l2(v2, m3));
              }
              r3.push(y3);
            }
          } else p2(v2) && r3.push(new c2(v2, E, null, new l2(a3, E)));
        }
      } else if (y3 = n3.pop(), void 0 !== (f3 = this.__execute(t4.leave, y3)) && f3 !== o2 && f3 !== i2 && f3 !== s2 && y3.ref.replace(f3), this.__state !== s2 && f3 !== s2 || b(y3), this.__state === o2 || f3 === o2) return A2.root;
      return A2.root;
    }, t3.Syntax = r2, t3.traverse = d2, t3.replace = function(e4, t4) {
      return new f2().replace(e4, t4);
    }, t3.attachComments = function(e4, t4, r3) {
      var a3, o3, i3, s3, l3 = [];
      if (!e4.range) throw new Error("attachComments needs range information");
      if (!r3.length) {
        if (t4.length) {
          for (i3 = 0, o3 = t4.length; i3 < o3; i3 += 1) (a3 = u2(t4[i3])).extendedRange = [0, e4.range[0]], l3.push(a3);
          e4.leadingComments = l3;
        }
        return e4;
      }
      for (i3 = 0, o3 = t4.length; i3 < o3; i3 += 1) l3.push(m2(u2(t4[i3]), r3));
      return s3 = 0, d2(e4, { enter: function(e5) {
        for (var t5; s3 < l3.length && !((t5 = l3[s3]).extendedRange[1] > e5.range[0]); ) t5.extendedRange[1] === e5.range[0] ? (e5.leadingComments || (e5.leadingComments = []), e5.leadingComments.push(t5), l3.splice(s3, 1)) : s3 += 1;
        return s3 === l3.length ? n2.Break : l3[s3].extendedRange[0] > e5.range[1] ? n2.Skip : void 0;
      } }), s3 = 0, d2(e4, { leave: function(e5) {
        for (var t5; s3 < l3.length && (t5 = l3[s3], !(e5.range[1] < t5.extendedRange[0])); ) e5.range[1] === t5.extendedRange[0] ? (e5.trailingComments || (e5.trailingComments = []), e5.trailingComments.push(t5), l3.splice(s3, 1)) : s3 += 1;
        return s3 === l3.length ? n2.Break : l3[s3].extendedRange[0] > e5.range[1] ? n2.Skip : void 0;
      } }), e4;
    }, t3.VisitorKeys = a2, t3.VisitorOption = n2, t3.Controller = f2, t3.cloneEnvironment = function() {
      return e3({});
    }, t3;
  })(t2);
})), s = o((function(e2) {
  e2.exports && (e2.exports = (function() {
    function e3(t2, r2, n2, a2) {
      this.message = t2, this.expected = r2, this.found = n2, this.location = a2, this.name = "SyntaxError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, e3);
    }
    return (function(e4, t2) {
      function r2() {
        this.constructor = e4;
      }
      r2.prototype = t2.prototype, e4.prototype = new r2();
    })(e3, Error), e3.buildMessage = function(e4, t2) {
      var r2 = { literal: function(e5) {
        return '"' + a2(e5.text) + '"';
      }, class: function(e5) {
        var t3, r3 = "";
        for (t3 = 0; t3 < e5.parts.length; t3++) r3 += e5.parts[t3] instanceof Array ? o2(e5.parts[t3][0]) + "-" + o2(e5.parts[t3][1]) : o2(e5.parts[t3]);
        return "[" + (e5.inverted ? "^" : "") + r3 + "]";
      }, any: function(e5) {
        return "any character";
      }, end: function(e5) {
        return "end of input";
      }, other: function(e5) {
        return e5.description;
      } };
      function n2(e5) {
        return e5.charCodeAt(0).toString(16).toUpperCase();
      }
      function a2(e5) {
        return e5.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, (function(e6) {
          return "\\x0" + n2(e6);
        })).replace(/[\x10-\x1F\x7F-\x9F]/g, (function(e6) {
          return "\\x" + n2(e6);
        }));
      }
      function o2(e5) {
        return e5.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, (function(e6) {
          return "\\x0" + n2(e6);
        })).replace(/[\x10-\x1F\x7F-\x9F]/g, (function(e6) {
          return "\\x" + n2(e6);
        }));
      }
      return "Expected " + (function(e5) {
        var t3, n3, a3, o3 = new Array(e5.length);
        for (t3 = 0; t3 < e5.length; t3++) o3[t3] = (a3 = e5[t3], r2[a3.type](a3));
        if (o3.sort(), o3.length > 0) {
          for (t3 = 1, n3 = 1; t3 < o3.length; t3++) o3[t3 - 1] !== o3[t3] && (o3[n3] = o3[t3], n3++);
          o3.length = n3;
        }
        switch (o3.length) {
          case 1:
            return o3[0];
          case 2:
            return o3[0] + " or " + o3[1];
          default:
            return o3.slice(0, -1).join(", ") + ", or " + o3[o3.length - 1];
        }
      })(e4) + " but " + (function(e5) {
        return e5 ? '"' + a2(e5) + '"' : "end of input";
      })(t2) + " found.";
    }, { SyntaxError: e3, parse: function(t2, r2) {
      r2 = void 0 !== r2 ? r2 : {};
      var n2, a2, o2, i2, s2 = {}, u2 = { start: de }, l2 = de, c2 = ce(" ", false), f2 = /^[^ [\],():#!=><~+.]/, p2 = fe([" ", "[", "]", ",", "(", ")", ":", "#", "!", "=", ">", "<", "~", "+", "."], true, false), h2 = ce(">", false), y2 = ce("~", false), d2 = ce("+", false), m2 = ce(",", false), x2 = ce("!", false), v2 = ce("*", false), g2 = ce("#", false), A2 = ce("[", false), E = ce("]", false), b = /^[><!]/, S = fe([">", "<", "!"], false, false), _ = ce("=", false), C = function(e4) {
        return (e4 || "") + "=";
      }, w = /^[><]/, P = fe([">", "<"], false, false), k = ce(".", false), D = function(e4, t3, r3) {
        return { type: "attribute", name: e4, operator: t3, value: r3 };
      }, I = ce('"', false), j = /^[^\\"]/, T = fe(["\\", '"'], true, false), F = ce("\\", false), R = { type: "any" }, O = function(e4, t3) {
        return e4 + t3;
      }, L = function(e4) {
        return { type: "literal", value: (t3 = e4.join(""), t3.replace(/\\(.)/g, (function(e5, t4) {
          switch (t4) {
            case "b":
              return "\b";
            case "f":
              return "\f";
            case "n":
              return "\n";
            case "r":
              return "\r";
            case "t":
              return "	";
            case "v":
              return "\v";
            default:
              return t4;
          }
        }))) };
        var t3;
      }, M = ce("'", false), B = /^[^\\']/, U = fe(["\\", "'"], true, false), K = /^[0-9]/, W = fe([["0", "9"]], false, false), V = ce("type(", false), q = /^[^ )]/, N = fe([" ", ")"], true, false), G = ce(")", false), z = /^[imsu]/, H = fe(["i", "m", "s", "u"], false, false), Y = ce("/", false), $ = /^[^\/]/, J = fe(["/"], true, false), Q = ce(":not(", false), X = ce(":matches(", false), Z = ce(":has(", false), ee = ce(":first-child", false), te = ce(":last-child", false), re = ce(":nth-child(", false), ne = ce(":nth-last-child(", false), ae = ce(":", false), oe = 0, ie = [{ line: 1, column: 1 }], se = 0, ue = [], le = {};
      if ("startRule" in r2) {
        if (!(r2.startRule in u2)) throw new Error(`Can't start parsing from rule "` + r2.startRule + '".');
        l2 = u2[r2.startRule];
      }
      function ce(e4, t3) {
        return { type: "literal", text: e4, ignoreCase: t3 };
      }
      function fe(e4, t3, r3) {
        return { type: "class", parts: e4, inverted: t3, ignoreCase: r3 };
      }
      function pe(e4) {
        var r3, n3 = ie[e4];
        if (n3) return n3;
        for (r3 = e4 - 1; !ie[r3]; ) r3--;
        for (n3 = { line: (n3 = ie[r3]).line, column: n3.column }; r3 < e4; ) 10 === t2.charCodeAt(r3) ? (n3.line++, n3.column = 1) : n3.column++, r3++;
        return ie[e4] = n3, n3;
      }
      function he(e4, t3) {
        var r3 = pe(e4), n3 = pe(t3);
        return { start: { offset: e4, line: r3.line, column: r3.column }, end: { offset: t3, line: n3.line, column: n3.column } };
      }
      function ye(e4) {
        oe < se || (oe > se && (se = oe, ue = []), ue.push(e4));
      }
      function de() {
        var e4, t3, r3, n3, a3 = 30 * oe + 0, o3 = le[a3];
        return o3 ? (oe = o3.nextPos, o3.result) : (e4 = oe, (t3 = me()) !== s2 && (r3 = ge()) !== s2 && me() !== s2 ? e4 = t3 = 1 === (n3 = r3).length ? n3[0] : { type: "matches", selectors: n3 } : (oe = e4, e4 = s2), e4 === s2 && (e4 = oe, (t3 = me()) !== s2 && (t3 = void 0), e4 = t3), le[a3] = { nextPos: oe, result: e4 }, e4);
      }
      function me() {
        var e4, r3, n3 = 30 * oe + 1, a3 = le[n3];
        if (a3) return oe = a3.nextPos, a3.result;
        for (e4 = [], 32 === t2.charCodeAt(oe) ? (r3 = " ", oe++) : (r3 = s2, ye(c2)); r3 !== s2; ) e4.push(r3), 32 === t2.charCodeAt(oe) ? (r3 = " ", oe++) : (r3 = s2, ye(c2));
        return le[n3] = { nextPos: oe, result: e4 }, e4;
      }
      function xe() {
        var e4, r3, n3, a3 = 30 * oe + 2, o3 = le[a3];
        if (o3) return oe = o3.nextPos, o3.result;
        if (r3 = [], f2.test(t2.charAt(oe)) ? (n3 = t2.charAt(oe), oe++) : (n3 = s2, ye(p2)), n3 !== s2) for (; n3 !== s2; ) r3.push(n3), f2.test(t2.charAt(oe)) ? (n3 = t2.charAt(oe), oe++) : (n3 = s2, ye(p2));
        else r3 = s2;
        return r3 !== s2 && (r3 = r3.join("")), e4 = r3, le[a3] = { nextPos: oe, result: e4 }, e4;
      }
      function ve() {
        var e4, r3, n3, a3 = 30 * oe + 3, o3 = le[a3];
        return o3 ? (oe = o3.nextPos, o3.result) : (e4 = oe, (r3 = me()) !== s2 ? (62 === t2.charCodeAt(oe) ? (n3 = ">", oe++) : (n3 = s2, ye(h2)), n3 !== s2 && me() !== s2 ? e4 = r3 = "child" : (oe = e4, e4 = s2)) : (oe = e4, e4 = s2), e4 === s2 && (e4 = oe, (r3 = me()) !== s2 ? (126 === t2.charCodeAt(oe) ? (n3 = "~", oe++) : (n3 = s2, ye(y2)), n3 !== s2 && me() !== s2 ? e4 = r3 = "sibling" : (oe = e4, e4 = s2)) : (oe = e4, e4 = s2), e4 === s2 && (e4 = oe, (r3 = me()) !== s2 ? (43 === t2.charCodeAt(oe) ? (n3 = "+", oe++) : (n3 = s2, ye(d2)), n3 !== s2 && me() !== s2 ? e4 = r3 = "adjacent" : (oe = e4, e4 = s2)) : (oe = e4, e4 = s2), e4 === s2 && (e4 = oe, 32 === t2.charCodeAt(oe) ? (r3 = " ", oe++) : (r3 = s2, ye(c2)), r3 !== s2 && (n3 = me()) !== s2 ? e4 = r3 = "descendant" : (oe = e4, e4 = s2)))), le[a3] = { nextPos: oe, result: e4 }, e4);
      }
      function ge() {
        var e4, r3, n3, a3, o3, i3, u3, l3, c3 = 30 * oe + 4, f3 = le[c3];
        if (f3) return oe = f3.nextPos, f3.result;
        if (e4 = oe, (r3 = Ae()) !== s2) {
          for (n3 = [], a3 = oe, (o3 = me()) !== s2 ? (44 === t2.charCodeAt(oe) ? (i3 = ",", oe++) : (i3 = s2, ye(m2)), i3 !== s2 && (u3 = me()) !== s2 && (l3 = Ae()) !== s2 ? a3 = o3 = [o3, i3, u3, l3] : (oe = a3, a3 = s2)) : (oe = a3, a3 = s2); a3 !== s2; ) n3.push(a3), a3 = oe, (o3 = me()) !== s2 ? (44 === t2.charCodeAt(oe) ? (i3 = ",", oe++) : (i3 = s2, ye(m2)), i3 !== s2 && (u3 = me()) !== s2 && (l3 = Ae()) !== s2 ? a3 = o3 = [o3, i3, u3, l3] : (oe = a3, a3 = s2)) : (oe = a3, a3 = s2);
          n3 !== s2 ? e4 = r3 = [r3].concat(n3.map((function(e5) {
            return e5[3];
          }))) : (oe = e4, e4 = s2);
        } else oe = e4, e4 = s2;
        return le[c3] = { nextPos: oe, result: e4 }, e4;
      }
      function Ae() {
        var e4, t3, r3, n3, a3, o3, i3, u3 = 30 * oe + 5, l3 = le[u3];
        if (l3) return oe = l3.nextPos, l3.result;
        if (e4 = oe, (t3 = Ee()) !== s2) {
          for (r3 = [], n3 = oe, (a3 = ve()) !== s2 && (o3 = Ee()) !== s2 ? n3 = a3 = [a3, o3] : (oe = n3, n3 = s2); n3 !== s2; ) r3.push(n3), n3 = oe, (a3 = ve()) !== s2 && (o3 = Ee()) !== s2 ? n3 = a3 = [a3, o3] : (oe = n3, n3 = s2);
          r3 !== s2 ? (i3 = t3, e4 = t3 = r3.reduce((function(e5, t4) {
            return { type: t4[0], left: e5, right: t4[1] };
          }), i3)) : (oe = e4, e4 = s2);
        } else oe = e4, e4 = s2;
        return le[u3] = { nextPos: oe, result: e4 }, e4;
      }
      function Ee() {
        var e4, r3, n3, a3, o3, i3, u3, l3 = 30 * oe + 6, c3 = le[l3];
        if (c3) return oe = c3.nextPos, c3.result;
        if (e4 = oe, 33 === t2.charCodeAt(oe) ? (r3 = "!", oe++) : (r3 = s2, ye(x2)), r3 === s2 && (r3 = null), r3 !== s2) {
          if (n3 = [], (a3 = be()) !== s2) for (; a3 !== s2; ) n3.push(a3), a3 = be();
          else n3 = s2;
          n3 !== s2 ? (o3 = r3, u3 = 1 === (i3 = n3).length ? i3[0] : { type: "compound", selectors: i3 }, o3 && (u3.subject = true), e4 = r3 = u3) : (oe = e4, e4 = s2);
        } else oe = e4, e4 = s2;
        return le[l3] = { nextPos: oe, result: e4 }, e4;
      }
      function be() {
        var e4, r3 = 30 * oe + 7, n3 = le[r3];
        return n3 ? (oe = n3.nextPos, n3.result) : ((e4 = (function() {
          var e5, r4, n4 = 30 * oe + 8, a3 = le[n4];
          return a3 ? (oe = a3.nextPos, a3.result) : (42 === t2.charCodeAt(oe) ? (r4 = "*", oe++) : (r4 = s2, ye(v2)), r4 !== s2 && (r4 = { type: "wildcard", value: r4 }), e5 = r4, le[n4] = { nextPos: oe, result: e5 }, e5);
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3 = 30 * oe + 9, o3 = le[a3];
          return o3 ? (oe = o3.nextPos, o3.result) : (e5 = oe, 35 === t2.charCodeAt(oe) ? (r4 = "#", oe++) : (r4 = s2, ye(g2)), r4 === s2 && (r4 = null), r4 !== s2 && (n4 = xe()) !== s2 ? e5 = r4 = { type: "identifier", value: n4 } : (oe = e5, e5 = s2), le[a3] = { nextPos: oe, result: e5 }, e5);
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3, o3 = 30 * oe + 10, i3 = le[o3];
          return i3 ? (oe = i3.nextPos, i3.result) : (e5 = oe, 91 === t2.charCodeAt(oe) ? (r4 = "[", oe++) : (r4 = s2, ye(A2)), r4 !== s2 && me() !== s2 && (n4 = (function() {
            var e6, r5, n5, a4, o4 = 30 * oe + 14, i4 = le[o4];
            return i4 ? (oe = i4.nextPos, i4.result) : (e6 = oe, (r5 = Se()) !== s2 && me() !== s2 && (n5 = (function() {
              var e7, r6, n6, a5 = 30 * oe + 12, o5 = le[a5];
              return o5 ? (oe = o5.nextPos, o5.result) : (e7 = oe, 33 === t2.charCodeAt(oe) ? (r6 = "!", oe++) : (r6 = s2, ye(x2)), r6 === s2 && (r6 = null), r6 !== s2 ? (61 === t2.charCodeAt(oe) ? (n6 = "=", oe++) : (n6 = s2, ye(_)), n6 !== s2 ? (r6 = C(r6), e7 = r6) : (oe = e7, e7 = s2)) : (oe = e7, e7 = s2), le[a5] = { nextPos: oe, result: e7 }, e7);
            })()) !== s2 && me() !== s2 ? ((a4 = (function() {
              var e7, r6, n6, a5, o5, i5 = 30 * oe + 18, u3 = le[i5];
              if (u3) return oe = u3.nextPos, u3.result;
              if (e7 = oe, "type(" === t2.substr(oe, 5) ? (r6 = "type(", oe += 5) : (r6 = s2, ye(V)), r6 !== s2) if (me() !== s2) {
                if (n6 = [], q.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(N)), a5 !== s2) for (; a5 !== s2; ) n6.push(a5), q.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(N));
                else n6 = s2;
                n6 !== s2 && (a5 = me()) !== s2 ? (41 === t2.charCodeAt(oe) ? (o5 = ")", oe++) : (o5 = s2, ye(G)), o5 !== s2 ? (r6 = { type: "type", value: n6.join("") }, e7 = r6) : (oe = e7, e7 = s2)) : (oe = e7, e7 = s2);
              } else oe = e7, e7 = s2;
              else oe = e7, e7 = s2;
              return le[i5] = { nextPos: oe, result: e7 }, e7;
            })()) === s2 && (a4 = (function() {
              var e7, r6, n6, a5, o5, i5, u3 = 30 * oe + 20, l3 = le[u3];
              if (l3) return oe = l3.nextPos, l3.result;
              if (e7 = oe, 47 === t2.charCodeAt(oe) ? (r6 = "/", oe++) : (r6 = s2, ye(Y)), r6 !== s2) {
                if (n6 = [], $.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(J)), a5 !== s2) for (; a5 !== s2; ) n6.push(a5), $.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(J));
                else n6 = s2;
                n6 !== s2 ? (47 === t2.charCodeAt(oe) ? (a5 = "/", oe++) : (a5 = s2, ye(Y)), a5 !== s2 ? ((o5 = (function() {
                  var e8, r7, n7 = 30 * oe + 19, a6 = le[n7];
                  if (a6) return oe = a6.nextPos, a6.result;
                  if (e8 = [], z.test(t2.charAt(oe)) ? (r7 = t2.charAt(oe), oe++) : (r7 = s2, ye(H)), r7 !== s2) for (; r7 !== s2; ) e8.push(r7), z.test(t2.charAt(oe)) ? (r7 = t2.charAt(oe), oe++) : (r7 = s2, ye(H));
                  else e8 = s2;
                  return le[n7] = { nextPos: oe, result: e8 }, e8;
                })()) === s2 && (o5 = null), o5 !== s2 ? (i5 = o5, r6 = { type: "regexp", value: new RegExp(n6.join(""), i5 ? i5.join("") : "") }, e7 = r6) : (oe = e7, e7 = s2)) : (oe = e7, e7 = s2)) : (oe = e7, e7 = s2);
              } else oe = e7, e7 = s2;
              return le[u3] = { nextPos: oe, result: e7 }, e7;
            })()), a4 !== s2 ? (r5 = D(r5, n5, a4), e6 = r5) : (oe = e6, e6 = s2)) : (oe = e6, e6 = s2), e6 === s2 && (e6 = oe, (r5 = Se()) !== s2 && me() !== s2 && (n5 = (function() {
              var e7, r6, n6, a5 = 30 * oe + 11, o5 = le[a5];
              return o5 ? (oe = o5.nextPos, o5.result) : (e7 = oe, b.test(t2.charAt(oe)) ? (r6 = t2.charAt(oe), oe++) : (r6 = s2, ye(S)), r6 === s2 && (r6 = null), r6 !== s2 ? (61 === t2.charCodeAt(oe) ? (n6 = "=", oe++) : (n6 = s2, ye(_)), n6 !== s2 ? (r6 = C(r6), e7 = r6) : (oe = e7, e7 = s2)) : (oe = e7, e7 = s2), e7 === s2 && (w.test(t2.charAt(oe)) ? (e7 = t2.charAt(oe), oe++) : (e7 = s2, ye(P))), le[a5] = { nextPos: oe, result: e7 }, e7);
            })()) !== s2 && me() !== s2 ? ((a4 = (function() {
              var e7, r6, n6, a5, o5, i5, u3 = 30 * oe + 15, l3 = le[u3];
              if (l3) return oe = l3.nextPos, l3.result;
              if (e7 = oe, 34 === t2.charCodeAt(oe) ? (r6 = '"', oe++) : (r6 = s2, ye(I)), r6 !== s2) {
                for (n6 = [], j.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(T)), a5 === s2 && (a5 = oe, 92 === t2.charCodeAt(oe) ? (o5 = "\\", oe++) : (o5 = s2, ye(F)), o5 !== s2 ? (t2.length > oe ? (i5 = t2.charAt(oe), oe++) : (i5 = s2, ye(R)), i5 !== s2 ? (o5 = O(o5, i5), a5 = o5) : (oe = a5, a5 = s2)) : (oe = a5, a5 = s2)); a5 !== s2; ) n6.push(a5), j.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(T)), a5 === s2 && (a5 = oe, 92 === t2.charCodeAt(oe) ? (o5 = "\\", oe++) : (o5 = s2, ye(F)), o5 !== s2 ? (t2.length > oe ? (i5 = t2.charAt(oe), oe++) : (i5 = s2, ye(R)), i5 !== s2 ? (o5 = O(o5, i5), a5 = o5) : (oe = a5, a5 = s2)) : (oe = a5, a5 = s2));
                n6 !== s2 ? (34 === t2.charCodeAt(oe) ? (a5 = '"', oe++) : (a5 = s2, ye(I)), a5 !== s2 ? (r6 = L(n6), e7 = r6) : (oe = e7, e7 = s2)) : (oe = e7, e7 = s2);
              } else oe = e7, e7 = s2;
              if (e7 === s2) if (e7 = oe, 39 === t2.charCodeAt(oe) ? (r6 = "'", oe++) : (r6 = s2, ye(M)), r6 !== s2) {
                for (n6 = [], B.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(U)), a5 === s2 && (a5 = oe, 92 === t2.charCodeAt(oe) ? (o5 = "\\", oe++) : (o5 = s2, ye(F)), o5 !== s2 ? (t2.length > oe ? (i5 = t2.charAt(oe), oe++) : (i5 = s2, ye(R)), i5 !== s2 ? (o5 = O(o5, i5), a5 = o5) : (oe = a5, a5 = s2)) : (oe = a5, a5 = s2)); a5 !== s2; ) n6.push(a5), B.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(U)), a5 === s2 && (a5 = oe, 92 === t2.charCodeAt(oe) ? (o5 = "\\", oe++) : (o5 = s2, ye(F)), o5 !== s2 ? (t2.length > oe ? (i5 = t2.charAt(oe), oe++) : (i5 = s2, ye(R)), i5 !== s2 ? (o5 = O(o5, i5), a5 = o5) : (oe = a5, a5 = s2)) : (oe = a5, a5 = s2));
                n6 !== s2 ? (39 === t2.charCodeAt(oe) ? (a5 = "'", oe++) : (a5 = s2, ye(M)), a5 !== s2 ? (r6 = L(n6), e7 = r6) : (oe = e7, e7 = s2)) : (oe = e7, e7 = s2);
              } else oe = e7, e7 = s2;
              return le[u3] = { nextPos: oe, result: e7 }, e7;
            })()) === s2 && (a4 = (function() {
              var e7, r6, n6, a5, o5, i5, u3, l3 = 30 * oe + 16, c3 = le[l3];
              if (c3) return oe = c3.nextPos, c3.result;
              for (e7 = oe, r6 = oe, n6 = [], K.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(W)); a5 !== s2; ) n6.push(a5), K.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(W));
              if (n6 !== s2 ? (46 === t2.charCodeAt(oe) ? (a5 = ".", oe++) : (a5 = s2, ye(k)), a5 !== s2 ? r6 = n6 = [n6, a5] : (oe = r6, r6 = s2)) : (oe = r6, r6 = s2), r6 === s2 && (r6 = null), r6 !== s2) {
                if (n6 = [], K.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(W)), a5 !== s2) for (; a5 !== s2; ) n6.push(a5), K.test(t2.charAt(oe)) ? (a5 = t2.charAt(oe), oe++) : (a5 = s2, ye(W));
                else n6 = s2;
                n6 !== s2 ? (i5 = n6, u3 = (o5 = r6) ? [].concat.apply([], o5).join("") : "", r6 = { type: "literal", value: parseFloat(u3 + i5.join("")) }, e7 = r6) : (oe = e7, e7 = s2);
              } else oe = e7, e7 = s2;
              return le[l3] = { nextPos: oe, result: e7 }, e7;
            })()) === s2 && (a4 = (function() {
              var e7, t3, r6 = 30 * oe + 17, n6 = le[r6];
              return n6 ? (oe = n6.nextPos, n6.result) : ((t3 = xe()) !== s2 && (t3 = { type: "literal", value: t3 }), e7 = t3, le[r6] = { nextPos: oe, result: e7 }, e7);
            })()), a4 !== s2 ? (r5 = D(r5, n5, a4), e6 = r5) : (oe = e6, e6 = s2)) : (oe = e6, e6 = s2), e6 === s2 && (e6 = oe, (r5 = Se()) !== s2 && (r5 = { type: "attribute", name: r5 }), e6 = r5)), le[o4] = { nextPos: oe, result: e6 }, e6);
          })()) !== s2 && me() !== s2 ? (93 === t2.charCodeAt(oe) ? (a3 = "]", oe++) : (a3 = s2, ye(E)), a3 !== s2 ? e5 = r4 = n4 : (oe = e5, e5 = s2)) : (oe = e5, e5 = s2), le[o3] = { nextPos: oe, result: e5 }, e5);
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3, o3, i3, u3, l3, c3 = 30 * oe + 21, f3 = le[c3];
          if (f3) return oe = f3.nextPos, f3.result;
          if (e5 = oe, 46 === t2.charCodeAt(oe) ? (r4 = ".", oe++) : (r4 = s2, ye(k)), r4 !== s2) if ((n4 = xe()) !== s2) {
            for (a3 = [], o3 = oe, 46 === t2.charCodeAt(oe) ? (i3 = ".", oe++) : (i3 = s2, ye(k)), i3 !== s2 && (u3 = xe()) !== s2 ? o3 = i3 = [i3, u3] : (oe = o3, o3 = s2); o3 !== s2; ) a3.push(o3), o3 = oe, 46 === t2.charCodeAt(oe) ? (i3 = ".", oe++) : (i3 = s2, ye(k)), i3 !== s2 && (u3 = xe()) !== s2 ? o3 = i3 = [i3, u3] : (oe = o3, o3 = s2);
            a3 !== s2 ? (l3 = n4, r4 = { type: "field", name: a3.reduce((function(e6, t3) {
              return e6 + t3[0] + t3[1];
            }), l3) }, e5 = r4) : (oe = e5, e5 = s2);
          } else oe = e5, e5 = s2;
          else oe = e5, e5 = s2;
          return le[c3] = { nextPos: oe, result: e5 }, e5;
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3, o3 = 30 * oe + 22, i3 = le[o3];
          return i3 ? (oe = i3.nextPos, i3.result) : (e5 = oe, ":not(" === t2.substr(oe, 5) ? (r4 = ":not(", oe += 5) : (r4 = s2, ye(Q)), r4 !== s2 && me() !== s2 && (n4 = ge()) !== s2 && me() !== s2 ? (41 === t2.charCodeAt(oe) ? (a3 = ")", oe++) : (a3 = s2, ye(G)), a3 !== s2 ? e5 = r4 = { type: "not", selectors: n4 } : (oe = e5, e5 = s2)) : (oe = e5, e5 = s2), le[o3] = { nextPos: oe, result: e5 }, e5);
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3, o3 = 30 * oe + 23, i3 = le[o3];
          return i3 ? (oe = i3.nextPos, i3.result) : (e5 = oe, ":matches(" === t2.substr(oe, 9) ? (r4 = ":matches(", oe += 9) : (r4 = s2, ye(X)), r4 !== s2 && me() !== s2 && (n4 = ge()) !== s2 && me() !== s2 ? (41 === t2.charCodeAt(oe) ? (a3 = ")", oe++) : (a3 = s2, ye(G)), a3 !== s2 ? e5 = r4 = { type: "matches", selectors: n4 } : (oe = e5, e5 = s2)) : (oe = e5, e5 = s2), le[o3] = { nextPos: oe, result: e5 }, e5);
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3, o3 = 30 * oe + 24, i3 = le[o3];
          return i3 ? (oe = i3.nextPos, i3.result) : (e5 = oe, ":has(" === t2.substr(oe, 5) ? (r4 = ":has(", oe += 5) : (r4 = s2, ye(Z)), r4 !== s2 && me() !== s2 && (n4 = ge()) !== s2 && me() !== s2 ? (41 === t2.charCodeAt(oe) ? (a3 = ")", oe++) : (a3 = s2, ye(G)), a3 !== s2 ? e5 = r4 = { type: "has", selectors: n4 } : (oe = e5, e5 = s2)) : (oe = e5, e5 = s2), le[o3] = { nextPos: oe, result: e5 }, e5);
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4 = 30 * oe + 25, a3 = le[n4];
          return a3 ? (oe = a3.nextPos, a3.result) : (":first-child" === t2.substr(oe, 12) ? (r4 = ":first-child", oe += 12) : (r4 = s2, ye(ee)), r4 !== s2 && (r4 = _e(1)), e5 = r4, le[n4] = { nextPos: oe, result: e5 }, e5);
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4 = 30 * oe + 26, a3 = le[n4];
          return a3 ? (oe = a3.nextPos, a3.result) : (":last-child" === t2.substr(oe, 11) ? (r4 = ":last-child", oe += 11) : (r4 = s2, ye(te)), r4 !== s2 && (r4 = Ce(1)), e5 = r4, le[n4] = { nextPos: oe, result: e5 }, e5);
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3, o3, i3 = 30 * oe + 27, u3 = le[i3];
          if (u3) return oe = u3.nextPos, u3.result;
          if (e5 = oe, ":nth-child(" === t2.substr(oe, 11) ? (r4 = ":nth-child(", oe += 11) : (r4 = s2, ye(re)), r4 !== s2) if (me() !== s2) {
            if (n4 = [], K.test(t2.charAt(oe)) ? (a3 = t2.charAt(oe), oe++) : (a3 = s2, ye(W)), a3 !== s2) for (; a3 !== s2; ) n4.push(a3), K.test(t2.charAt(oe)) ? (a3 = t2.charAt(oe), oe++) : (a3 = s2, ye(W));
            else n4 = s2;
            n4 !== s2 && (a3 = me()) !== s2 ? (41 === t2.charCodeAt(oe) ? (o3 = ")", oe++) : (o3 = s2, ye(G)), o3 !== s2 ? (r4 = _e(parseInt(n4.join(""), 10)), e5 = r4) : (oe = e5, e5 = s2)) : (oe = e5, e5 = s2);
          } else oe = e5, e5 = s2;
          else oe = e5, e5 = s2;
          return le[i3] = { nextPos: oe, result: e5 }, e5;
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3, o3, i3 = 30 * oe + 28, u3 = le[i3];
          if (u3) return oe = u3.nextPos, u3.result;
          if (e5 = oe, ":nth-last-child(" === t2.substr(oe, 16) ? (r4 = ":nth-last-child(", oe += 16) : (r4 = s2, ye(ne)), r4 !== s2) if (me() !== s2) {
            if (n4 = [], K.test(t2.charAt(oe)) ? (a3 = t2.charAt(oe), oe++) : (a3 = s2, ye(W)), a3 !== s2) for (; a3 !== s2; ) n4.push(a3), K.test(t2.charAt(oe)) ? (a3 = t2.charAt(oe), oe++) : (a3 = s2, ye(W));
            else n4 = s2;
            n4 !== s2 && (a3 = me()) !== s2 ? (41 === t2.charCodeAt(oe) ? (o3 = ")", oe++) : (o3 = s2, ye(G)), o3 !== s2 ? (r4 = Ce(parseInt(n4.join(""), 10)), e5 = r4) : (oe = e5, e5 = s2)) : (oe = e5, e5 = s2);
          } else oe = e5, e5 = s2;
          else oe = e5, e5 = s2;
          return le[i3] = { nextPos: oe, result: e5 }, e5;
        })()) === s2 && (e4 = (function() {
          var e5, r4, n4, a3 = 30 * oe + 29, o3 = le[a3];
          return o3 ? (oe = o3.nextPos, o3.result) : (e5 = oe, 58 === t2.charCodeAt(oe) ? (r4 = ":", oe++) : (r4 = s2, ye(ae)), r4 !== s2 && (n4 = xe()) !== s2 ? e5 = r4 = { type: "class", name: n4 } : (oe = e5, e5 = s2), le[a3] = { nextPos: oe, result: e5 }, e5);
        })()), le[r3] = { nextPos: oe, result: e4 }, e4);
      }
      function Se() {
        var e4, r3, n3, a3, o3, i3, u3, l3, c3 = 30 * oe + 13, f3 = le[c3];
        if (f3) return oe = f3.nextPos, f3.result;
        if (e4 = oe, (r3 = xe()) !== s2) {
          for (n3 = [], a3 = oe, 46 === t2.charCodeAt(oe) ? (o3 = ".", oe++) : (o3 = s2, ye(k)), o3 !== s2 && (i3 = xe()) !== s2 ? a3 = o3 = [o3, i3] : (oe = a3, a3 = s2); a3 !== s2; ) n3.push(a3), a3 = oe, 46 === t2.charCodeAt(oe) ? (o3 = ".", oe++) : (o3 = s2, ye(k)), o3 !== s2 && (i3 = xe()) !== s2 ? a3 = o3 = [o3, i3] : (oe = a3, a3 = s2);
          n3 !== s2 ? (u3 = r3, l3 = n3, e4 = r3 = [].concat.apply([u3], l3).join("")) : (oe = e4, e4 = s2);
        } else oe = e4, e4 = s2;
        return le[c3] = { nextPos: oe, result: e4 }, e4;
      }
      function _e(e4) {
        return { type: "nth-child", index: { type: "literal", value: e4 } };
      }
      function Ce(e4) {
        return { type: "nth-last-child", index: { type: "literal", value: e4 } };
      }
      if ((n2 = l2()) !== s2 && oe === t2.length) return n2;
      throw n2 !== s2 && oe < t2.length && ye({ type: "end" }), a2 = ue, o2 = se < t2.length ? t2.charAt(se) : null, i2 = se < t2.length ? he(se, se + 1) : he(se, se), new e3(e3.buildMessage(a2, o2), a2, o2, i2);
    } };
  })());
}));
function u(e2, t2) {
  for (var r2 = 0; r2 < t2.length; ++r2) {
    if (null == e2) return e2;
    e2 = e2[t2[r2]];
  }
  return e2;
}
var l = "function" == typeof WeakMap ? /* @__PURE__ */ new WeakMap() : null;
function c(e2) {
  if (null == e2) return function() {
    return true;
  };
  if (null != l) {
    var t2 = l.get(e2);
    return null != t2 || (t2 = f(e2), l.set(e2, t2)), t2;
  }
  return f(e2);
}
function f(t2) {
  switch (t2.type) {
    case "wildcard":
      return function() {
        return true;
      };
    case "identifier":
      var r2 = t2.value.toLowerCase();
      return function(e2, t3, n3) {
        var a3 = n3 && n3.nodeTypeKey || "type";
        return r2 === e2[a3].toLowerCase();
      };
    case "field":
      var n2 = t2.name.split(".");
      return function(e2, t3) {
        return (function e3(t4, r3, n3, a3) {
          for (var o3 = r3, i2 = a3; i2 < n3.length; ++i2) {
            if (null == o3) return false;
            var s3 = o3[n3[i2]];
            if (Array.isArray(s3)) {
              for (var u2 = 0; u2 < s3.length; ++u2) if (e3(t4, s3[u2], n3, i2 + 1)) return true;
              return false;
            }
            o3 = s3;
          }
          return t4 === o3;
        })(e2, t3[n2.length - 1], n2, 0);
      };
    case "matches":
      var a2 = t2.selectors.map(c);
      return function(e2, t3, r3) {
        for (var n3 = 0; n3 < a2.length; ++n3) if (a2[n3](e2, t3, r3)) return true;
        return false;
      };
    case "compound":
      var o2 = t2.selectors.map(c);
      return function(e2, t3, r3) {
        for (var n3 = 0; n3 < o2.length; ++n3) if (!o2[n3](e2, t3, r3)) return false;
        return true;
      };
    case "not":
      var s2 = t2.selectors.map(c);
      return function(e2, t3, r3) {
        for (var n3 = 0; n3 < s2.length; ++n3) if (s2[n3](e2, t3, r3)) return false;
        return true;
      };
    case "has":
      var l2 = t2.selectors.map(c);
      return function(e2, t3, r3) {
        var n3 = false, a3 = [];
        return i.traverse(e2, { enter: function(e3, t4) {
          null != t4 && a3.unshift(t4);
          for (var o3 = 0; o3 < l2.length; ++o3) if (l2[o3](e3, a3, r3)) return n3 = true, void this.break();
        }, leave: function() {
          a3.shift();
        }, keys: r3 && r3.visitorKeys, fallback: r3 && r3.fallback || "iteration" }), n3;
      };
    case "child":
      var f2 = c(t2.left), p2 = c(t2.right);
      return function(e2, t3, r3) {
        return !!(t3.length > 0 && p2(e2, t3, r3)) && f2(t3[0], t3.slice(1), r3);
      };
    case "descendant":
      var h2 = c(t2.left), x2 = c(t2.right);
      return function(e2, t3, r3) {
        if (x2(e2, t3, r3)) {
          for (var n3 = 0, a3 = t3.length; n3 < a3; ++n3) if (h2(t3[n3], t3.slice(n3 + 1), r3)) return true;
        }
        return false;
      };
    case "attribute":
      var v2 = t2.name.split(".");
      switch (t2.operator) {
        case void 0:
          return function(e2) {
            return null != u(e2, v2);
          };
        case "=":
          switch (t2.value.type) {
            case "regexp":
              return function(e2) {
                var r3 = u(e2, v2);
                return "string" == typeof r3 && t2.value.value.test(r3);
              };
            case "literal":
              var g2 = "".concat(t2.value.value);
              return function(e2) {
                return g2 === "".concat(u(e2, v2));
              };
            case "type":
              return function(r3) {
                return t2.value.value === e(u(r3, v2));
              };
          }
          throw new Error("Unknown selector value type: ".concat(t2.value.type));
        case "!=":
          switch (t2.value.type) {
            case "regexp":
              return function(e2) {
                return !t2.value.value.test(u(e2, v2));
              };
            case "literal":
              var A2 = "".concat(t2.value.value);
              return function(e2) {
                return A2 !== "".concat(u(e2, v2));
              };
            case "type":
              return function(r3) {
                return t2.value.value !== e(u(r3, v2));
              };
          }
          throw new Error("Unknown selector value type: ".concat(t2.value.type));
        case "<=":
          return function(e2) {
            return u(e2, v2) <= t2.value.value;
          };
        case "<":
          return function(e2) {
            return u(e2, v2) < t2.value.value;
          };
        case ">":
          return function(e2) {
            return u(e2, v2) > t2.value.value;
          };
        case ">=":
          return function(e2) {
            return u(e2, v2) >= t2.value.value;
          };
      }
      throw new Error("Unknown operator: ".concat(t2.operator));
    case "sibling":
      var E = c(t2.left), b = c(t2.right);
      return function(e2, r3, n3) {
        return b(e2, r3, n3) && y(e2, E, r3, "LEFT_SIDE", n3) || t2.left.subject && E(e2, r3, n3) && y(e2, b, r3, "RIGHT_SIDE", n3);
      };
    case "adjacent":
      var S = c(t2.left), _ = c(t2.right);
      return function(e2, r3, n3) {
        return _(e2, r3, n3) && d(e2, S, r3, "LEFT_SIDE", n3) || t2.right.subject && S(e2, r3, n3) && d(e2, _, r3, "RIGHT_SIDE", n3);
      };
    case "nth-child":
      var C = t2.index.value, w = c(t2.right);
      return function(e2, t3, r3) {
        return w(e2, t3, r3) && m(e2, t3, C, r3);
      };
    case "nth-last-child":
      var P = -t2.index.value, k = c(t2.right);
      return function(e2, t3, r3) {
        return k(e2, t3, r3) && m(e2, t3, P, r3);
      };
    case "class":
      return function(e2, r3, n3) {
        if (n3 && n3.matchClass) return n3.matchClass(t2.name, e2, r3);
        if (n3 && n3.nodeTypeKey) return false;
        switch (t2.name.toLowerCase()) {
          case "statement":
            if ("Statement" === e2.type.slice(-9)) return true;
          case "declaration":
            return "Declaration" === e2.type.slice(-11);
          case "pattern":
            if ("Pattern" === e2.type.slice(-7)) return true;
          case "expression":
            return "Expression" === e2.type.slice(-10) || "Literal" === e2.type.slice(-7) || "Identifier" === e2.type && (0 === r3.length || "MetaProperty" !== r3[0].type) || "MetaProperty" === e2.type;
          case "function":
            return "FunctionDeclaration" === e2.type || "FunctionExpression" === e2.type || "ArrowFunctionExpression" === e2.type;
        }
        throw new Error("Unknown class name: ".concat(t2.name));
      };
  }
  throw new Error("Unknown selector type: ".concat(t2.type));
}
function p(e2, t2) {
  var r2 = t2 && t2.nodeTypeKey || "type", n2 = e2[r2];
  return t2 && t2.visitorKeys && t2.visitorKeys[n2] ? t2.visitorKeys[n2] : i.VisitorKeys[n2] ? i.VisitorKeys[n2] : t2 && "function" == typeof t2.fallback ? t2.fallback(e2) : Object.keys(e2).filter((function(e3) {
    return e3 !== r2;
  }));
}
function h(t2, r2) {
  var n2 = r2 && r2.nodeTypeKey || "type";
  return null !== t2 && "object" === e(t2) && "string" == typeof t2[n2];
}
function y(e2, r2, n2, a2, o2) {
  var i2 = t(n2, 1)[0];
  if (!i2) return false;
  for (var s2 = p(i2, o2), u2 = 0; u2 < s2.length; ++u2) {
    var l2 = i2[s2[u2]];
    if (Array.isArray(l2)) {
      var c2 = l2.indexOf(e2);
      if (c2 < 0) continue;
      var f2 = void 0, y2 = void 0;
      "LEFT_SIDE" === a2 ? (f2 = 0, y2 = c2) : (f2 = c2 + 1, y2 = l2.length);
      for (var d2 = f2; d2 < y2; ++d2) if (h(l2[d2], o2) && r2(l2[d2], n2, o2)) return true;
    }
  }
  return false;
}
function d(e2, r2, n2, a2, o2) {
  var i2 = t(n2, 1)[0];
  if (!i2) return false;
  for (var s2 = p(i2, o2), u2 = 0; u2 < s2.length; ++u2) {
    var l2 = i2[s2[u2]];
    if (Array.isArray(l2)) {
      var c2 = l2.indexOf(e2);
      if (c2 < 0) continue;
      if ("LEFT_SIDE" === a2 && c2 > 0 && h(l2[c2 - 1], o2) && r2(l2[c2 - 1], n2, o2)) return true;
      if ("RIGHT_SIDE" === a2 && c2 < l2.length - 1 && h(l2[c2 + 1], o2) && r2(l2[c2 + 1], n2, o2)) return true;
    }
  }
  return false;
}
function m(e2, r2, n2, a2) {
  if (0 === n2) return false;
  var o2 = t(r2, 1)[0];
  if (!o2) return false;
  for (var i2 = p(o2, a2), s2 = 0; s2 < i2.length; ++s2) {
    var u2 = o2[i2[s2]];
    if (Array.isArray(u2)) {
      var l2 = n2 < 0 ? u2.length + n2 : n2 - 1;
      if (l2 >= 0 && l2 < u2.length && u2[l2] === e2) return true;
    }
  }
  return false;
}
function x(t2, n2, a2, o2) {
  if (n2) {
    var s2 = [], u2 = c(n2), l2 = (function t3(n3, a3) {
      if (null == n3 || "object" != e(n3)) return [];
      null == a3 && (a3 = n3);
      for (var o3 = n3.subject ? [a3] : [], i2 = Object.keys(n3), s3 = 0; s3 < i2.length; ++s3) {
        var u3 = i2[s3], l3 = n3[u3];
        o3.push.apply(o3, r(t3(l3, "left" === u3 ? l3 : a3)));
      }
      return o3;
    })(n2).map(c);
    i.traverse(t2, { enter: function(e2, t3) {
      if (null != t3 && s2.unshift(t3), u2(e2, s2, o2)) if (l2.length) for (var r2 = 0, n3 = l2.length; r2 < n3; ++r2) {
        l2[r2](e2, s2, o2) && a2(e2, t3, s2);
        for (var i2 = 0, c2 = s2.length; i2 < c2; ++i2) {
          var f2 = s2.slice(i2 + 1);
          l2[r2](s2[i2], f2, o2) && a2(s2[i2], t3, f2);
        }
      }
      else a2(e2, t3, s2);
    }, leave: function() {
      s2.shift();
    }, keys: o2 && o2.visitorKeys, fallback: o2 && o2.fallback || "iteration" });
  }
}
function v(e2, t2, r2) {
  var n2 = [];
  return x(e2, t2, (function(e3) {
    n2.push(e3);
  }), r2), n2;
}
function g(e2) {
  return s.parse(e2);
}
function A(e2, t2, r2) {
  return v(e2, g(t2), r2);
}
A.parse = g, A.match = v, A.traverse = x, A.matches = function(e2, t2, r2, n2) {
  return !t2 || !!e2 && (r2 || (r2 = []), c(t2)(e2, r2, n2));
}, A.query = A;
var esquery_1;
var hasRequiredEsquery;
function requireEsquery() {
  if (hasRequiredEsquery) return esquery_1;
  hasRequiredEsquery = 1;
  const esquery = A;
  class ESQueryParsedSelector {
    /**
     * The raw selector string that was parsed
     * @type {string}
     */
    source;
    /**
     * Whether this selector is an exit selector
     * @type {boolean}
     */
    isExit;
    /**
     * An object (from esquery) describing the matching behavior of the selector
     * @type {ESQuerySelector}
     */
    root;
    /**
     * The node types that could possibly trigger this selector, or `null` if all node types could trigger it
     * @type {string[]|null}
     */
    nodeTypes;
    /**
     * The number of class, pseudo-class, and attribute queries in this selector
     * @type {number}
     */
    attributeCount;
    /**
     * The number of identifier queries in this selector
     * @type {number}
     */
    identifierCount;
    /**
     * Creates a new parsed selector.
     * @param {string} source The raw selector string that was parsed
     * @param {boolean} isExit Whether this selector is an exit selector
     * @param {ESQuerySelector} root An object (from esquery) describing the matching behavior of the selector
     * @param {string[]|null} nodeTypes The node types that could possibly trigger this selector, or `null` if all node types could trigger it
     * @param {number} attributeCount The number of class, pseudo-class, and attribute queries in this selector
     * @param {number} identifierCount The number of identifier queries in this selector
     */
    constructor(source, isExit, root, nodeTypes, attributeCount, identifierCount) {
      this.source = source;
      this.isExit = isExit;
      this.root = root;
      this.nodeTypes = nodeTypes;
      this.attributeCount = attributeCount;
      this.identifierCount = identifierCount;
    }
    /**
     * Compares this selector's specifity to another selector for sorting purposes.
     * @param {ESQueryParsedSelector} otherSelector The selector to compare against
     * @returns {number}
     * a value less than 0 if this selector is less specific than otherSelector
     * a value greater than 0 if this selector is more specific than otherSelector
     * a value less than 0 if this selector and otherSelector have the same specificity, and this selector <= otherSelector alphabetically
     * a value greater than 0 if this selector and otherSelector have the same specificity, and this selector > otherSelector alphabetically
     */
    compare(otherSelector) {
      return this.attributeCount - otherSelector.attributeCount || this.identifierCount - otherSelector.identifierCount || (this.source <= otherSelector.source ? -1 : 1);
    }
  }
  const selectorCache = /* @__PURE__ */ new Map();
  function union(...arrays) {
    return [...new Set(arrays.flat())];
  }
  function intersection(...arrays) {
    if (arrays.length === 0) {
      return [];
    }
    let result = [...new Set(arrays[0])];
    for (const array of arrays.slice(1)) {
      result = result.filter((x2) => array.includes(x2));
    }
    return result;
  }
  function analyzeParsedSelector(parsedSelector) {
    let attributeCount = 0;
    let identifierCount = 0;
    function analyzeSelector(selector) {
      switch (selector.type) {
        case "identifier":
          identifierCount++;
          return [selector.value];
        case "not":
          selector.selectors.map(analyzeSelector);
          return null;
        case "matches": {
          const typesForComponents = selector.selectors.map(analyzeSelector);
          if (typesForComponents.every(Boolean)) {
            return union(...typesForComponents);
          }
          return null;
        }
        case "compound": {
          const typesForComponents = selector.selectors.map(analyzeSelector).filter((typesForComponent) => typesForComponent);
          if (!typesForComponents.length) {
            return null;
          }
          return intersection(...typesForComponents);
        }
        case "attribute":
        case "field":
        case "nth-child":
        case "nth-last-child":
          attributeCount++;
          return null;
        case "child":
        case "descendant":
        case "sibling":
        case "adjacent":
          analyzeSelector(selector.left);
          return analyzeSelector(selector.right);
        case "class":
          if (selector.name === "function") {
            return [
              "FunctionDeclaration",
              "FunctionExpression",
              "ArrowFunctionExpression"
            ];
          }
          return null;
        default:
          return null;
      }
    }
    const nodeTypes = analyzeSelector(parsedSelector);
    return {
      nodeTypes,
      attributeCount,
      identifierCount
    };
  }
  function trySimpleParseSelector(selector) {
    if (selector === "*") {
      return {
        type: "wildcard",
        value: "*"
      };
    }
    if (/^[a-z]+$/iu.test(selector)) {
      return {
        type: "identifier",
        value: selector
      };
    }
    return null;
  }
  function tryParseSelector(selector) {
    try {
      return esquery.parse(selector);
    } catch (err) {
      if (err.location && err.location.start && typeof err.location.start.offset === "number") {
        throw new SyntaxError(
          `Syntax error in selector "${selector}" at position ${err.location.start.offset}: ${err.message}`,
          {
            cause: err
          }
        );
      }
      throw err;
    }
  }
  function parse(source) {
    if (selectorCache.has(source)) {
      return selectorCache.get(source);
    }
    const cleanSource = source.replace(/:exit$/u, "");
    const parsedSelector = trySimpleParseSelector(cleanSource) ?? tryParseSelector(cleanSource);
    const { nodeTypes, attributeCount, identifierCount } = analyzeParsedSelector(parsedSelector);
    const result = new ESQueryParsedSelector(
      source,
      source.endsWith(":exit"),
      parsedSelector,
      nodeTypes,
      attributeCount,
      identifierCount
    );
    selectorCache.set(source, result);
    return result;
  }
  function matches(node2, root, ancestry, options) {
    return esquery.matches(node2, root, ancestry, options);
  }
  esquery_1 = {
    parse,
    matches,
    ESQueryParsedSelector
  };
  return esquery_1;
}
var sourceCodeTraverser;
var hasRequiredSourceCodeTraverser;
function requireSourceCodeTraverser() {
  if (hasRequiredSourceCodeTraverser) return sourceCodeTraverser;
  hasRequiredSourceCodeTraverser = 1;
  const { parse, matches } = requireEsquery();
  const vk = requireEslintVisitorKeys$2();
  const STEP_KIND_VISIT = 1;
  const STEP_KIND_CALL = 2;
  function compareSpecificity(a2, b) {
    return a2.compare(b);
  }
  class ESQueryHelper {
    /**
     * Creates a new instance.
     * @param {SourceCodeVisitor} visitor The visitor containing the functions to call.
     * @param {ESQueryOptions} esqueryOptions `esquery` options for traversing custom nodes.
     * @returns {NodeEventGenerator} new instance
     */
    constructor(visitor, esqueryOptions) {
      this.visitor = visitor;
      this.esqueryOptions = esqueryOptions;
      this.enterSelectorsByNodeType = /* @__PURE__ */ new Map();
      this.exitSelectorsByNodeType = /* @__PURE__ */ new Map();
      this.anyTypeEnterSelectors = [];
      this.anyTypeExitSelectors = [];
      visitor.forEachName((rawSelector) => {
        const selector = parse(rawSelector);
        if (selector.nodeTypes) {
          const typeMap = selector.isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType;
          selector.nodeTypes.forEach((nodeType) => {
            if (!typeMap.has(nodeType)) {
              typeMap.set(nodeType, []);
            }
            typeMap.get(nodeType).push(selector);
          });
          return;
        }
        const selectors = selector.isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors;
        selectors.push(selector);
      });
      this.anyTypeEnterSelectors.sort(compareSpecificity);
      this.anyTypeExitSelectors.sort(compareSpecificity);
      this.enterSelectorsByNodeType.forEach(
        (selectorList) => selectorList.sort(compareSpecificity)
      );
      this.exitSelectorsByNodeType.forEach(
        (selectorList) => selectorList.sort(compareSpecificity)
      );
    }
    /**
     * Checks if a node matches a given selector.
     * @param {ASTNode} node The node to check
     * @param {ASTNode[]} ancestry The ancestry of the node being checked.
     * @param {ESQueryParsedSelector} selector An AST selector descriptor
     * @returns {boolean} `true` if the selector matches the node, `false` otherwise
     */
    matches(node2, ancestry, selector) {
      return matches(node2, selector.root, ancestry, this.esqueryOptions);
    }
    /**
     * Calculates all appropriate selectors to a node, in specificity order
     * @param {ASTNode} node The node to check
     * @param {ASTNode[]} ancestry The ancestry of the node being checked.
     * @param {boolean} isExit `false` if the node is currently being entered, `true` if it's currently being exited
     * @returns {string[]} An array of selectors that match the node.
     */
    calculateSelectors(node2, ancestry, isExit) {
      const nodeTypeKey = this.esqueryOptions?.nodeTypeKey || "type";
      const selectors = [];
      const selectorsByNodeType = (isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType).get(node2[nodeTypeKey]) || [];
      const anyTypeSelectors = isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors;
      let selectorsByNodeTypeIndex = 0;
      let anyTypeSelectorsIndex = 0;
      while (selectorsByNodeTypeIndex < selectorsByNodeType.length || anyTypeSelectorsIndex < anyTypeSelectors.length) {
        const hasMoreNodeTypeSelectors = selectorsByNodeTypeIndex < selectorsByNodeType.length;
        const hasMoreAnyTypeSelectors = anyTypeSelectorsIndex < anyTypeSelectors.length;
        const anyTypeSelector = anyTypeSelectors[anyTypeSelectorsIndex];
        const nodeTypeSelector = selectorsByNodeType[selectorsByNodeTypeIndex];
        const isAnyTypeSelectorLessSpecific = hasMoreAnyTypeSelectors && hasMoreNodeTypeSelectors && anyTypeSelector.compare(nodeTypeSelector) < 0;
        if (!hasMoreNodeTypeSelectors || isAnyTypeSelectorLessSpecific) {
          anyTypeSelectorsIndex++;
          if (this.matches(node2, ancestry, anyTypeSelector)) {
            selectors.push(anyTypeSelector.source);
          }
        } else {
          selectorsByNodeTypeIndex++;
          if (this.matches(node2, ancestry, nodeTypeSelector)) {
            selectors.push(nodeTypeSelector.source);
          }
        }
      }
      return selectors;
    }
  }
  class SourceCodeTraverser {
    /**
     * The language of the source code being traversed.
     * @type {Language}
     */
    #language;
    /**
     * Map of languages to instances of this class.
     * @type {WeakMap<Language, SourceCodeTraverser>}
     */
    static instances = /* @__PURE__ */ new WeakMap();
    /**
     * Creates a new instance.
     * @param {Language} language The language of the source code being traversed.
     */
    constructor(language) {
      this.#language = language;
    }
    static getInstance(language) {
      if (!this.instances.has(language)) {
        this.instances.set(language, new this(language));
      }
      return this.instances.get(language);
    }
    /**
     * Traverses the given source code synchronously.
     * @param {SourceCode} sourceCode The source code to traverse.
     * @param {SourceCodeVisitor} visitor The emitter to use for events.
     * @param {Object} options Options for traversal.
     * @param {ReturnType<SourceCode["traverse"]>} options.steps The steps to take during traversal.
     * @returns {void}
     * @throws {Error} If an error occurs during traversal.
     */
    traverseSync(sourceCode2, visitor, { steps } = {}) {
      const esquery = new ESQueryHelper(visitor, {
        visitorKeys: sourceCode2.visitorKeys ?? this.#language.visitorKeys,
        fallback: vk.getKeys,
        matchClass: this.#language.matchesSelectorClass ?? (() => false),
        nodeTypeKey: this.#language.nodeTypeKey
      });
      const currentAncestry = [];
      for (const step of steps ?? sourceCode2.traverse()) {
        switch (step.kind) {
          case STEP_KIND_VISIT: {
            try {
              if (step.phase === 1) {
                esquery.calculateSelectors(
                  step.target,
                  currentAncestry,
                  false
                ).forEach((selector) => {
                  visitor.callSync(selector, step.target);
                });
                currentAncestry.unshift(step.target);
              } else {
                currentAncestry.shift();
                esquery.calculateSelectors(
                  step.target,
                  currentAncestry,
                  true
                ).forEach((selector) => {
                  visitor.callSync(selector, step.target);
                });
              }
            } catch (err) {
              err.currentNode = step.target;
              throw err;
            }
            break;
          }
          case STEP_KIND_CALL: {
            visitor.callSync(step.target, ...step.args);
            break;
          }
          default:
            throw new Error(
              `Invalid traversal step found: "${step.kind}".`
            );
        }
      }
    }
  }
  sourceCodeTraverser = { SourceCodeTraverser };
  return sourceCodeTraverser;
}
var ruleFixer;
var hasRequiredRuleFixer;
function requireRuleFixer() {
  if (hasRequiredRuleFixer) return ruleFixer;
  hasRequiredRuleFixer = 1;
  function insertTextAt(index, text) {
    return {
      range: [index, index],
      text
    };
  }
  class RuleFixer {
    /**
     * The source code object representing the text to be fixed.
     * @type {SourceCode}
     */
    #sourceCode;
    /**
     * Creates a new instance.
     * @param {Object} options The options for the fixer.
     * @param {SourceCode} options.sourceCode The source code object representing the text to be fixed.
     */
    constructor({ sourceCode: sourceCode2 }) {
      this.#sourceCode = sourceCode2;
    }
    /**
     * Creates a fix command that inserts text after the given node or token.
     * The fix is not applied until applyFixes() is called.
     * @param {ASTNode|Token} nodeOrToken The node or token to insert after.
     * @param {string} text The text to insert.
     * @returns {Object} The fix command.
     */
    insertTextAfter(nodeOrToken, text) {
      const range = this.#sourceCode.getRange(nodeOrToken);
      return this.insertTextAfterRange(range, text);
    }
    /**
     * Creates a fix command that inserts text after the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param {SourceRange} range The range to replace, first item is start of range, second
     *      is end of range.
     * @param {string} text The text to insert.
     * @returns {Object} The fix command.
     */
    insertTextAfterRange(range, text) {
      return insertTextAt(range[1], text);
    }
    /**
     * Creates a fix command that inserts text before the given node or token.
     * The fix is not applied until applyFixes() is called.
     * @param {ASTNode|Token} nodeOrToken The node or token to insert before.
     * @param {string} text The text to insert.
     * @returns {Object} The fix command.
     */
    insertTextBefore(nodeOrToken, text) {
      const range = this.#sourceCode.getRange(nodeOrToken);
      return this.insertTextBeforeRange(range, text);
    }
    /**
     * Creates a fix command that inserts text before the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param {SourceRange} range The range to replace, first item is start of range, second
     *      is end of range.
     * @param {string} text The text to insert.
     * @returns {Object} The fix command.
     */
    insertTextBeforeRange(range, text) {
      return insertTextAt(range[0], text);
    }
    /**
     * Creates a fix command that replaces text at the node or token.
     * The fix is not applied until applyFixes() is called.
     * @param {ASTNode|Token} nodeOrToken The node or token to remove.
     * @param {string} text The text to insert.
     * @returns {Object} The fix command.
     */
    replaceText(nodeOrToken, text) {
      const range = this.#sourceCode.getRange(nodeOrToken);
      return this.replaceTextRange(range, text);
    }
    /**
     * Creates a fix command that replaces text at the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param {SourceRange} range The range to replace, first item is start of range, second
     *      is end of range.
     * @param {string} text The text to insert.
     * @returns {Object} The fix command.
     */
    replaceTextRange(range, text) {
      return {
        range,
        text
      };
    }
    /**
     * Creates a fix command that removes the node or token from the source.
     * The fix is not applied until applyFixes() is called.
     * @param {ASTNode|Token} nodeOrToken The node or token to remove.
     * @returns {Object} The fix command.
     */
    remove(nodeOrToken) {
      const range = this.#sourceCode.getRange(nodeOrToken);
      return this.removeRange(range);
    }
    /**
     * Creates a fix command that removes the specified range of text from the source.
     * The fix is not applied until applyFixes() is called.
     * @param {SourceRange} range The range to remove, first item is start of range, second
     *      is end of range.
     * @returns {Object} The fix command.
     */
    removeRange(range) {
      return {
        range,
        text: ""
      };
    }
  }
  ruleFixer = { RuleFixer };
  return ruleFixer;
}
var interpolate_1;
var hasRequiredInterpolate;
function requireInterpolate() {
  if (hasRequiredInterpolate) return interpolate_1;
  hasRequiredInterpolate = 1;
  function getPlaceholderMatcher() {
    return /\{\{([^{}]+)\}\}/gu;
  }
  function interpolate(text, data2) {
    if (!data2) {
      return text;
    }
    const matcher = getPlaceholderMatcher();
    return text.replace(matcher, (fullMatch, termWithWhitespace) => {
      const term = termWithWhitespace.trim();
      if (term in data2) {
        return data2[term];
      }
      return fullMatch;
    });
  }
  interpolate_1 = {
    getPlaceholderMatcher,
    interpolate
  };
  return interpolate_1;
}
var fileReport;
var hasRequiredFileReport;
function requireFileReport() {
  if (hasRequiredFileReport) return fileReport;
  hasRequiredFileReport = 1;
  const assert2 = requireAssert();
  const { RuleFixer } = requireRuleFixer();
  const { interpolate } = requireInterpolate();
  const ruleReplacements = require$$3;
  const DEFAULT_ERROR_LOC = {
    start: { line: 1, column: 0 },
    end: { line: 1, column: 1 }
  };
  function updateLocationInformation({ line, column, endLine, endColumn }, language) {
    const columnOffset = language.columnStart === 1 ? 0 : 1;
    const lineOffset = language.lineStart === 1 ? 0 : 1;
    const finalEndLine = endLine === void 0 ? endLine : endLine + lineOffset;
    const finalEndColumn = endColumn === void 0 ? endColumn : endColumn + columnOffset;
    return {
      line: line + lineOffset,
      column: column + columnOffset,
      endLine: finalEndLine,
      endColumn: finalEndColumn
    };
  }
  function createMissingRuleMessage(ruleId) {
    return Object.hasOwn(ruleReplacements.rules, ruleId) ? `Rule '${ruleId}' was removed and replaced by: ${ruleReplacements.rules[ruleId].join(", ")}` : `Definition for rule '${ruleId}' was not found.`;
  }
  function createLintingProblem(options, severity2, language) {
    const {
      ruleId = null,
      loc = DEFAULT_ERROR_LOC,
      message = createMissingRuleMessage(options.ruleId)
    } = options;
    return {
      ruleId,
      message,
      ...updateLocationInformation(
        {
          line: loc.start.line,
          column: loc.start.column,
          endLine: loc.end.line,
          endColumn: loc.end.column
        },
        language
      ),
      severity: severity2,
      nodeType: null
    };
  }
  function normalizeMultiArgReportCall(...args) {
    if (args.length === 1) {
      return Object.assign({}, args[0]);
    }
    if (typeof args[1] === "string") {
      return {
        node: args[0],
        message: args[1],
        data: args[2],
        fix: args[3]
      };
    }
    return {
      node: args[0],
      loc: args[1],
      message: args[2],
      data: args[3],
      fix: args[4]
    };
  }
  function assertValidNodeInfo(descriptor) {
    if (descriptor.node) {
      assert2(typeof descriptor.node === "object", "Node must be an object");
    } else {
      assert2(
        descriptor.loc,
        "Node must be provided when reporting error if location is not provided"
      );
    }
  }
  function normalizeReportLoc(descriptor) {
    if (descriptor.loc.start) {
      return descriptor.loc;
    }
    return { start: descriptor.loc, end: null };
  }
  function cloneFix(fix) {
    if (!fix) {
      return null;
    }
    return {
      range: [fix.range[0], fix.range[1]],
      text: fix.text
    };
  }
  function assertValidFix(fix) {
    if (fix) {
      assert2(
        fix.range && typeof fix.range[0] === "number" && typeof fix.range[1] === "number",
        `Fix has invalid range: ${JSON.stringify(fix, null, 2)}`
      );
    }
  }
  function compareFixesByRange(a2, b) {
    return a2.range[0] - b.range[0] || a2.range[1] - b.range[1];
  }
  function mergeFixes(fixes, sourceCode2) {
    for (const fix of fixes) {
      assertValidFix(fix);
    }
    if (fixes.length === 0) {
      return null;
    }
    if (fixes.length === 1) {
      return cloneFix(fixes[0]);
    }
    fixes.sort(compareFixesByRange);
    const originalText = sourceCode2.text;
    const start = fixes[0].range[0];
    const end = fixes.at(-1).range[1];
    let text = "";
    let lastPos = Number.MIN_SAFE_INTEGER;
    for (const fix of fixes) {
      assert2(
        fix.range[0] >= lastPos,
        "Fix objects must not be overlapped in a report."
      );
      if (fix.range[0] >= 0) {
        text += originalText.slice(
          Math.max(0, start, lastPos),
          fix.range[0]
        );
      }
      text += fix.text;
      lastPos = fix.range[1];
    }
    text += originalText.slice(Math.max(0, start, lastPos), end);
    return { range: [start, end], text };
  }
  function normalizeFixes(descriptor, sourceCode2) {
    if (typeof descriptor.fix !== "function") {
      return null;
    }
    const ruleFixer2 = new RuleFixer({ sourceCode: sourceCode2 });
    const fix = descriptor.fix(ruleFixer2);
    if (fix && Symbol.iterator in fix) {
      return mergeFixes(Array.from(fix), sourceCode2);
    }
    assertValidFix(fix);
    return cloneFix(fix);
  }
  function mapSuggestions(descriptor, sourceCode2, messages) {
    if (!descriptor.suggest || !Array.isArray(descriptor.suggest)) {
      return [];
    }
    return descriptor.suggest.map((suggestInfo) => {
      const computedDesc = suggestInfo.desc || messages[suggestInfo.messageId];
      return {
        ...suggestInfo,
        desc: interpolate(computedDesc, suggestInfo.data),
        fix: normalizeFixes(suggestInfo, sourceCode2)
      };
    }).filter(({ fix }) => fix);
  }
  function createProblem(options) {
    const { language } = options;
    const columnOffset = language.columnStart === 1 ? 0 : 1;
    const lineOffset = language.lineStart === 1 ? 0 : 1;
    const problem = {
      ruleId: options.ruleId,
      severity: options.severity,
      message: options.message,
      line: options.loc.start.line + lineOffset,
      column: options.loc.start.column + columnOffset,
      nodeType: options.node && options.node.type || null
    };
    if (options.messageId) {
      problem.messageId = options.messageId;
    }
    if (options.loc.end) {
      problem.endLine = options.loc.end.line + lineOffset;
      problem.endColumn = options.loc.end.column + columnOffset;
    }
    if (options.fix) {
      problem.fix = options.fix;
    }
    if (options.suggestions && options.suggestions.length > 0) {
      problem.suggestions = options.suggestions;
    }
    return problem;
  }
  function validateSuggestions(suggest, messages) {
    if (suggest && Array.isArray(suggest)) {
      suggest.forEach((suggestion) => {
        if (suggestion.messageId) {
          const { messageId } = suggestion;
          if (!messages) {
            throw new TypeError(
              `context.report() called with a suggest option with a messageId '${messageId}', but no messages were present in the rule metadata.`
            );
          }
          if (!messages[messageId]) {
            throw new TypeError(
              `context.report() called with a suggest option with a messageId '${messageId}' which is not present in the 'messages' config: ${JSON.stringify(messages, null, 2)}`
            );
          }
          if (suggestion.desc) {
            throw new TypeError(
              "context.report() called with a suggest option that defines both a 'messageId' and an 'desc'. Please only pass one."
            );
          }
        } else if (!suggestion.desc) {
          throw new TypeError(
            "context.report() called with a suggest option that doesn't have either a `desc` or `messageId`"
          );
        }
        if (typeof suggestion.fix !== "function") {
          throw new TypeError(
            `context.report() called with a suggest option without a fix function. See: ${suggestion}`
          );
        }
      });
    }
  }
  function computeMessageFromDescriptor(descriptor, messages) {
    if (descriptor.messageId) {
      if (!messages) {
        throw new TypeError(
          "context.report() called with a messageId, but no messages were present in the rule metadata."
        );
      }
      const id2 = descriptor.messageId;
      if (descriptor.message) {
        throw new TypeError(
          "context.report() called with a message and a messageId. Please only pass one."
        );
      }
      if (!messages || !Object.hasOwn(messages, id2)) {
        throw new TypeError(
          `context.report() called with a messageId of '${id2}' which is not present in the 'messages' config: ${JSON.stringify(messages, null, 2)}`
        );
      }
      return messages[id2];
    }
    if (descriptor.message) {
      return descriptor.message;
    }
    throw new TypeError(
      "Missing `message` property in report() call; add a message that describes the linting problem."
    );
  }
  class FileReport {
    /**
     * The messages reported by the linter for this file.
     * @type {LintMessage[]}
     */
    messages = [];
    /**
     * A rule mapper that maps rule IDs to their metadata.
     * @type {(string) => RuleDefinition}
     */
    #ruleMapper;
    /**
     * The source code object for the file.
     * @type {SourceCode}
     */
    #sourceCode;
    /**
     * The language to use to adjust line and column offsets.
     * @type {Language}
     */
    #language;
    /**
     * Whether to disable fixes for this report.
     * @type {boolean}
     */
    #disableFixes;
    /**
     * Creates a new FileReport instance.
     * @param {Object} options The options for the file report
     * @param {(string) => RuleDefinition} options.ruleMapper A rule mapper that maps rule IDs to their metadata.
     * @param {SourceCode} options.sourceCode The source code object for the file.
     * @param {Language} options.language The language to use to adjust line and column offsets.
     * @param {boolean} [options.disableFixes=false] Whether to disable fixes for this report.
     */
    constructor({ ruleMapper, sourceCode: sourceCode2, language, disableFixes = false }) {
      this.#ruleMapper = ruleMapper;
      this.#sourceCode = sourceCode2;
      this.#language = language;
      this.#disableFixes = disableFixes;
    }
    /**
     * Adds a rule-generated message to the report.
     * @param {string} ruleId The rule ID that reported the problem.
     * @param {0|1|2} severity The severity of the problem (0 = off, 1 = warning, 2 = error).
     * @param {...*} args The arguments passed to `context.report()`.
     * @returns {LintMessage} The created message object.
     * @throws {TypeError} If the messageId is not found or both message and messageId are provided.
     * @throws {AssertionError} If the node is not an object or neither a node nor a loc is provided.
     */
    addRuleMessage(ruleId, severity2, ...args) {
      const descriptor = normalizeMultiArgReportCall(...args);
      const ruleDefinition = this.#ruleMapper(ruleId);
      const messages = ruleDefinition?.meta?.messages;
      assertValidNodeInfo(descriptor);
      const computedMessage = computeMessageFromDescriptor(
        descriptor,
        messages
      );
      validateSuggestions(descriptor.suggest, messages);
      this.messages.push(
        createProblem({
          ruleId,
          severity: severity2,
          node: descriptor.node,
          message: interpolate(computedMessage, descriptor.data),
          messageId: descriptor.messageId,
          loc: descriptor.loc ? normalizeReportLoc(descriptor) : this.#sourceCode.getLoc(descriptor.node),
          fix: this.#disableFixes ? null : normalizeFixes(descriptor, this.#sourceCode),
          suggestions: this.#disableFixes ? [] : mapSuggestions(descriptor, this.#sourceCode, messages),
          language: this.#language
        })
      );
      return this.messages.at(-1);
    }
    /**
     * Adds an error message to the report. Meant to be called outside of rules.
     * @param {LintProblem} descriptor The descriptor for the error message.
     * @returns {LintMessage} The created message object.
     */
    addError(descriptor) {
      const message = createLintingProblem(descriptor, 2, this.#language);
      this.messages.push(message);
      return message;
    }
    /**
     * Adds a fatal error message to the report. Meant to be called outside of rules.
     * @param {LintProblem} descriptor The descriptor for the fatal error message.
     * @returns {LintMessage} The created message object.
     */
    addFatal(descriptor) {
      const message = createLintingProblem(descriptor, 2, this.#language);
      message.fatal = true;
      this.messages.push(message);
      return message;
    }
    /**
     * Adds a warning message to the report. Meant to be called outside of rules.
     * @param {LintProblem} descriptor The descriptor for the warning message.
     * @returns {LintMessage} The created message object.
     */
    addWarning(descriptor) {
      const message = createLintingProblem(descriptor, 1, this.#language);
      this.messages.push(message);
      return message;
    }
  }
  fileReport = {
    FileReport,
    updateLocationInformation
  };
  return fileReport;
}
var linter;
var hasRequiredLinter;
function requireLinter() {
  if (hasRequiredLinter) return linter;
  hasRequiredLinter = 1;
  const path = require$$0$1, eslintScope2 = requireEslintScope(), evk = requireEslintVisitorKeys$2(), espree2 = requireEspree(), merge = requireLodash_merge(), pkg = require$$5, {
    Legacy: {
      ConfigOps,
      ConfigValidator,
      environments: BuiltInEnvironments
    }
  } = requireEslintrcUniversal(), Traverser = requireTraverser(), { SourceCode } = requireSourceCode(), applyDisableDirectives2 = requireApplyDisableDirectives(), { ConfigCommentParser } = requireCjs$2(), Rules = requireRules(), SourceCodeFixer = requireSourceCodeFixer(), { SourceCodeVisitor } = requireSourceCodeVisitor(), timing2 = requireTiming();
  const { FlatConfigArray } = requireFlatConfigArray();
  const { startTime: startTime2, endTime } = requireStats();
  const { assertIsRuleSeverity } = requireFlatConfigSchema();
  const {
    normalizeSeverityToString,
    normalizeSeverityToNumber
  } = requireSeverity();
  const { deepMergeArrays } = requireDeepMergeArrays();
  const jslang = requireJs();
  const {
    activeFlags,
    inactiveFlags,
    getInactivityReasonMessage
  } = requireFlags();
  const debug = requireSrc()("eslint:linter");
  const MAX_AUTOFIX_PASSES = 10;
  const DEFAULT_PARSER_NAME = "espree";
  const DEFAULT_ECMA_VERSION = 5;
  const commentParser = new ConfigCommentParser();
  const parserSymbol = Symbol.for("eslint.RuleTester.parser");
  const { LATEST_ECMA_VERSION } = requireEcmaVersion();
  const { VFile } = requireVfile();
  const { ParserService } = requireParserService();
  const { FileContext } = requireFileContext();
  const { ProcessorService } = requireProcessorService();
  const { containsDifferentProperty } = requireOptionUtils();
  const { Config } = requireConfig();
  const { WarningService } = requireWarningService();
  const { SourceCodeTraverser } = requireSourceCodeTraverser();
  const { FileReport, updateLocationInformation } = requireFileReport();
  function isEspree(parser) {
    return !!(parser === espree2 || parser[parserSymbol] === espree2);
  }
  function addDeclaredGlobals(globalScope, configGlobals, { exportedVariables, enabledGlobals }) {
    for (const id2 of /* @__PURE__ */ new Set([
      ...Object.keys(configGlobals),
      ...Object.keys(enabledGlobals)
    ])) {
      const configValue = configGlobals[id2] === void 0 ? void 0 : ConfigOps.normalizeConfigGlobal(configGlobals[id2]);
      const commentValue = enabledGlobals[id2] && enabledGlobals[id2].value;
      const value = commentValue || configValue;
      const sourceComments = enabledGlobals[id2] && enabledGlobals[id2].comments;
      if (value === "off") {
        continue;
      }
      let variable = globalScope.set.get(id2);
      if (!variable) {
        variable = new eslintScope2.Variable(id2, globalScope);
        globalScope.variables.push(variable);
        globalScope.set.set(id2, variable);
      }
      variable.eslintImplicitGlobalSetting = configValue;
      variable.eslintExplicitGlobal = sourceComments !== void 0;
      variable.eslintExplicitGlobalComments = sourceComments;
      variable.writeable = value === "writable";
    }
    Object.keys(exportedVariables).forEach((name) => {
      const variable = globalScope.set.get(name);
      if (variable) {
        variable.eslintUsed = true;
        variable.eslintExported = true;
      }
    });
    globalScope.through = globalScope.through.filter((reference) => {
      const name = reference.identifier.name;
      const variable = globalScope.set.get(name);
      if (variable) {
        reference.resolved = variable;
        variable.references.push(reference);
        return false;
      }
      return true;
    });
  }
  function asArray(value) {
    return Array.isArray(value) ? value : [value];
  }
  function addProblemIfSameSeverityAndOptions(config2, loc, report, ruleId, ruleOptions, ruleOptionsInline, severity2) {
    const existingConfigRaw = config2.rules?.[ruleId];
    const existingConfig = existingConfigRaw ? asArray(existingConfigRaw) : ["off"];
    const existingSeverity = normalizeSeverityToString(existingConfig[0]);
    const inlineSeverity = normalizeSeverityToString(ruleOptions[0]);
    const sameSeverity = existingSeverity === inlineSeverity;
    if (!sameSeverity) {
      return;
    }
    const alreadyConfigured = existingConfigRaw ? `is already configured to '${existingSeverity}'` : "is not enabled so can't be turned off";
    let message;
    if (existingConfig.length === 1 && ruleOptions.length === 1 || existingSeverity === "off") {
      message = `Unused inline config ('${ruleId}' ${alreadyConfigured}).`;
    } else if (!containsDifferentProperty(
      ruleOptions.slice(1),
      existingConfig.slice(1)
    )) {
      message = ruleOptionsInline.length === 1 ? `Unused inline config ('${ruleId}' ${alreadyConfigured}).` : `Unused inline config ('${ruleId}' ${alreadyConfigured} with the same options).`;
    }
    if (message) {
      const numericSeverity = normalizeSeverityToNumber(severity2);
      const descriptor = {
        message,
        loc
      };
      if (numericSeverity === 1) {
        report.addWarning(descriptor);
      } else if (numericSeverity === 2) {
        report.addError(descriptor);
      }
    }
  }
  function createDisableDirectives({ type: type2, value, justification, node: node2 }, ruleMapper, language, sourceCode2, report) {
    const ruleIds = Object.keys(commentParser.parseListConfig(value));
    const directiveRules = ruleIds.length ? ruleIds : [null];
    const directives2 = [];
    const parentDirective = { node: node2, value, ruleIds };
    for (const ruleId of directiveRules) {
      const loc = sourceCode2.getLoc(node2);
      if (ruleId === null || !!ruleMapper(ruleId)) {
        if (type2 === "disable-next-line") {
          const { line, column } = updateLocationInformation(
            loc.end,
            language
          );
          directives2.push({
            parentDirective,
            type: type2,
            line,
            column,
            ruleId,
            justification
          });
        } else {
          const { line, column } = updateLocationInformation(
            loc.start,
            language
          );
          directives2.push({
            parentDirective,
            type: type2,
            line,
            column,
            ruleId,
            justification
          });
        }
      } else {
        report.addError({ ruleId, loc });
      }
    }
    return directives2;
  }
  function getDirectiveComments(sourceCode2, ruleMapper, warnInlineConfig, config2, report) {
    const configuredRules = {};
    const enabledGlobals = /* @__PURE__ */ Object.create(null);
    const exportedVariables = {};
    const disableDirectives = [];
    const validator = new ConfigValidator({
      builtInRules: Rules
    });
    sourceCode2.getInlineConfigNodes().filter((token) => token.type !== "Shebang").forEach((comment2) => {
      const directive = commentParser.parseDirective(comment2.value);
      if (!directive) {
        return;
      }
      const {
        label,
        value,
        justification: justificationPart
      } = directive;
      const lineCommentSupported = /^eslint-disable-(?:next-)?line$/u.test(label);
      if (comment2.type === "Line" && !lineCommentSupported) {
        return;
      }
      const loc = sourceCode2.getLoc(comment2);
      if (warnInlineConfig) {
        const kind = comment2.type === "Block" ? `/*${label}*/` : `//${label}`;
        report.addWarning({
          ruleId: null,
          message: `'${kind}' has no effect because you have 'noInlineConfig' setting in ${warnInlineConfig}.`,
          loc
        });
        return;
      }
      if (label === "eslint-disable-line" && loc.start.line !== loc.end.line) {
        const message = `${label} comment should not span multiple lines.`;
        report.addError({
          message,
          loc
        });
        return;
      }
      switch (label) {
        case "eslint-disable":
        case "eslint-enable":
        case "eslint-disable-next-line":
        case "eslint-disable-line": {
          const directiveType = label.slice("eslint-".length);
          const directives2 = createDisableDirectives(
            {
              type: directiveType,
              value,
              justification: justificationPart,
              node: comment2
            },
            ruleMapper,
            jslang,
            sourceCode2,
            report
          );
          disableDirectives.push(...directives2);
          break;
        }
        case "exported":
          Object.assign(
            exportedVariables,
            commentParser.parseListConfig(value)
          );
          break;
        case "globals":
        case "global":
          for (const [id2, idSetting] of Object.entries(
            commentParser.parseStringConfig(value)
          )) {
            let normalizedValue;
            try {
              normalizedValue = ConfigOps.normalizeConfigGlobal(idSetting);
            } catch (err) {
              report.addError({
                loc,
                message: err.message
              });
              continue;
            }
            if (enabledGlobals[id2]) {
              enabledGlobals[id2].comments.push(comment2);
              enabledGlobals[id2].value = normalizedValue;
            } else {
              enabledGlobals[id2] = {
                comments: [comment2],
                value: normalizedValue
              };
            }
          }
          break;
        case "eslint": {
          const parseResult = commentParser.parseJSONLikeConfig(value);
          if (parseResult.ok) {
            Object.keys(parseResult.config).forEach((name) => {
              const rule = ruleMapper(name);
              const ruleValue = parseResult.config[name];
              if (!rule) {
                report.addError({ ruleId: name, loc });
                return;
              }
              if (Object.hasOwn(configuredRules, name)) {
                report.addError({
                  message: `Rule "${name}" is already configured by another configuration comment in the preceding code. This configuration is ignored.`,
                  loc
                });
                return;
              }
              let ruleOptions = asArray(ruleValue);
              if (
                /*
                 * If inline config for the rule has only severity
                 */
                ruleOptions.length === 1 && /*
                * And the rule was already configured
                */
                config2.rules && Object.hasOwn(config2.rules, name)
              ) {
                ruleOptions = [
                  ruleOptions[0],
                  // severity from the inline config
                  ...asArray(config2.rules[name]).slice(1)
                  // options from the provided config
                ];
              }
              try {
                validator.validateRuleOptions(
                  rule,
                  name,
                  ruleOptions
                );
              } catch (err) {
                if (err.code === "ESLINT_INVALID_RULE_OPTIONS_SCHEMA") {
                  throw err;
                }
                report.addError({
                  ruleId: name,
                  message: err.message,
                  loc
                });
                return;
              }
              configuredRules[name] = ruleOptions;
            });
          } else {
            report.addFatal({
              loc,
              message: parseResult.error.message
            });
          }
          break;
        }
      }
    });
    return {
      configuredRules,
      enabledGlobals,
      exportedVariables,
      disableDirectives
    };
  }
  function getDirectiveCommentsForFlatConfig(sourceCode2, ruleMapper, language, report) {
    const disableDirectives = [];
    if (sourceCode2.getDisableDirectives) {
      const { directives: directivesSources, problems: directivesProblems } = sourceCode2.getDisableDirectives();
      if (Array.isArray(directivesProblems)) {
        directivesProblems.forEach((problem) => report.addError(problem));
      }
      directivesSources.forEach((directive) => {
        const directives2 = createDisableDirectives(
          directive,
          ruleMapper,
          language,
          sourceCode2,
          report
        );
        disableDirectives.push(...directives2);
      });
    }
    return disableDirectives;
  }
  function normalizeEcmaVersion(parser, ecmaVersion2) {
    if (isEspree(parser)) {
      if (ecmaVersion2 === "latest") {
        return espree2.latestEcmaVersion;
      }
    }
    return ecmaVersion2 >= 2015 ? ecmaVersion2 - 2009 : ecmaVersion2;
  }
  function normalizeEcmaVersionForLanguageOptions(ecmaVersion2) {
    switch (ecmaVersion2) {
      case 3:
        return 3;
      // void 0 = no ecmaVersion specified so use the default
      case 5:
      case void 0:
        return 5;
      default:
        if (typeof ecmaVersion2 === "number") {
          return ecmaVersion2 >= 2015 ? ecmaVersion2 : ecmaVersion2 + 2009;
        }
    }
    return LATEST_ECMA_VERSION;
  }
  const eslintEnvPattern = /\/\*\s*eslint-env\s.+?(?:\*\/|$)/gsu;
  function findEslintEnv(text) {
    let match, retv;
    eslintEnvPattern.lastIndex = 0;
    while ((match = eslintEnvPattern.exec(text)) !== null) {
      if (match[0].endsWith("*/")) {
        retv = Object.assign(
          retv || {},
          commentParser.parseListConfig(
            commentParser.parseDirective(match[0].slice(2, -2)).value
          )
        );
      }
    }
    return retv;
  }
  function normalizeFilename(filename) {
    const parts = filename.split(path.sep);
    const index = parts.lastIndexOf("<text>");
    return index === -1 ? filename : parts.slice(index).join(path.sep);
  }
  function normalizeVerifyOptions(providedOptions, config2) {
    const linterOptions = config2.linterOptions || config2;
    const disableInlineConfig = linterOptions.noInlineConfig === true;
    const ignoreInlineConfig = providedOptions.allowInlineConfig === false;
    const configNameOfNoInlineConfig = config2.configNameOfNoInlineConfig ? ` (${config2.configNameOfNoInlineConfig})` : "";
    let reportUnusedDisableDirectives = providedOptions.reportUnusedDisableDirectives;
    if (typeof reportUnusedDisableDirectives === "boolean") {
      reportUnusedDisableDirectives = reportUnusedDisableDirectives ? "error" : "off";
    }
    if (typeof reportUnusedDisableDirectives !== "string") {
      if (typeof linterOptions.reportUnusedDisableDirectives === "boolean") {
        reportUnusedDisableDirectives = linterOptions.reportUnusedDisableDirectives ? "warn" : "off";
      } else {
        reportUnusedDisableDirectives = linterOptions.reportUnusedDisableDirectives === void 0 ? "off" : normalizeSeverityToString(
          linterOptions.reportUnusedDisableDirectives
        );
      }
    }
    const reportUnusedInlineConfigs = linterOptions.reportUnusedInlineConfigs === void 0 ? "off" : normalizeSeverityToString(
      linterOptions.reportUnusedInlineConfigs
    );
    let ruleFilter = providedOptions.ruleFilter;
    if (typeof ruleFilter !== "function") {
      ruleFilter = () => true;
    }
    return {
      filename: normalizeFilename(providedOptions.filename || "<input>"),
      allowInlineConfig: !ignoreInlineConfig,
      warnInlineConfig: disableInlineConfig && !ignoreInlineConfig ? `your config${configNameOfNoInlineConfig}` : null,
      reportUnusedDisableDirectives,
      reportUnusedInlineConfigs,
      disableFixes: Boolean(providedOptions.disableFixes),
      stats: providedOptions.stats,
      ruleFilter
    };
  }
  function resolveParserOptions(parser, providedOptions, enabledEnvironments) {
    const parserOptionsFromEnv = enabledEnvironments.filter((env2) => env2.parserOptions).reduce(
      (parserOptions, env2) => merge(parserOptions, env2.parserOptions),
      {}
    );
    const mergedParserOptions = merge(
      parserOptionsFromEnv,
      providedOptions || {}
    );
    const isModule = mergedParserOptions.sourceType === "module";
    if (isModule) {
      mergedParserOptions.ecmaFeatures = Object.assign(
        {},
        mergedParserOptions.ecmaFeatures,
        { globalReturn: false }
      );
    }
    mergedParserOptions.ecmaVersion = normalizeEcmaVersion(
      parser,
      mergedParserOptions.ecmaVersion
    );
    return mergedParserOptions;
  }
  function createLanguageOptions({
    globals: configuredGlobals,
    parser,
    parserOptions
  }) {
    const { ecmaVersion: ecmaVersion2, sourceType } = parserOptions;
    return {
      globals: configuredGlobals,
      ecmaVersion: normalizeEcmaVersionForLanguageOptions(ecmaVersion2),
      sourceType,
      parser,
      parserOptions
    };
  }
  function resolveGlobals(providedGlobals, enabledEnvironments) {
    return Object.assign(
      /* @__PURE__ */ Object.create(null),
      ...enabledEnvironments.filter((env2) => env2.globals).map((env2) => env2.globals),
      providedGlobals
    );
  }
  function storeTime(time, timeOpts, slots) {
    const { type: type2, key } = timeOpts;
    if (!slots.times) {
      slots.times = { passes: [{}] };
    }
    const passIndex = slots.fixPasses;
    if (passIndex > slots.times.passes.length - 1) {
      slots.times.passes.push({});
    }
    if (key) {
      slots.times.passes[passIndex][type2] ??= {};
      slots.times.passes[passIndex][type2][key] ??= { total: 0 };
      slots.times.passes[passIndex][type2][key].total += time;
    } else {
      slots.times.passes[passIndex][type2] ??= { total: 0 };
      slots.times.passes[passIndex][type2].total += time;
    }
  }
  function getRuleOptions(ruleConfig, defaultOptions) {
    if (Array.isArray(ruleConfig)) {
      return deepMergeArrays(defaultOptions, ruleConfig.slice(1));
    }
    return defaultOptions ?? [];
  }
  function analyzeScope(ast2, languageOptions, visitorKeys) {
    const parserOptions = languageOptions.parserOptions;
    const ecmaFeatures = parserOptions.ecmaFeatures || {};
    const ecmaVersion2 = languageOptions.ecmaVersion || DEFAULT_ECMA_VERSION;
    return eslintScope2.analyze(ast2, {
      ignoreEval: true,
      nodejsScope: ecmaFeatures.globalReturn,
      impliedStrict: ecmaFeatures.impliedStrict,
      ecmaVersion: typeof ecmaVersion2 === "number" ? ecmaVersion2 : 6,
      sourceType: languageOptions.sourceType || "script",
      childVisitorKeys: evk.KEYS,
      fallback: Traverser.getKeys
    });
  }
  function createRuleListeners(rule, ruleContext) {
    if (!rule || typeof rule !== "object" || typeof rule.create !== "function") {
      throw new TypeError(
        `Error while loading rule '${ruleContext.id}': Rule must be an object with a \`create\` method`
      );
    }
    try {
      return rule.create(ruleContext);
    } catch (ex) {
      ex.message = `Error while loading rule '${ruleContext.id}': ${ex.message}`;
      throw ex;
    }
  }
  function runRules(sourceCode2, configuredRules, ruleMapper, parserName, language, languageOptions, settings, filename, applyDefaultOptions, cwd2, physicalFilename, ruleFilter, stats2, slots, report) {
    const visitor = new SourceCodeVisitor();
    const fileContext2 = new FileContext({
      cwd: cwd2,
      filename,
      physicalFilename: physicalFilename || filename,
      sourceCode: sourceCode2,
      parserOptions: {
        ...languageOptions.parserOptions
      },
      parserPath: parserName,
      languageOptions,
      settings
    });
    const steps = sourceCode2.traverse();
    Object.keys(configuredRules).forEach((ruleId) => {
      const severity2 = Config.getRuleNumericSeverity(configuredRules[ruleId]);
      if (severity2 === 0) {
        return;
      }
      if (ruleFilter && !ruleFilter({ ruleId, severity: severity2 })) {
        return;
      }
      const rule = ruleMapper(ruleId);
      if (!rule) {
        report.addError({ ruleId });
        return;
      }
      const ruleContext = fileContext2.extend({
        id: ruleId,
        options: getRuleOptions(
          configuredRules[ruleId],
          applyDefaultOptions ? rule.meta?.defaultOptions : void 0
        ),
        report(...args) {
          const problem = report.addRuleMessage(
            ruleId,
            severity2,
            ...args
          );
          if (problem.fix && !(rule.meta && rule.meta.fixable)) {
            throw new Error(
              'Fixable rules must set the `meta.fixable` property to "code" or "whitespace".'
            );
          }
          if (problem.suggestions && !(rule.meta && rule.meta.hasSuggestions === true)) {
            if (rule.meta && rule.meta.docs && typeof rule.meta.docs.suggestion !== "undefined") {
              throw new Error(
                "Rules with suggestions must set the `meta.hasSuggestions` property to `true`. `meta.docs.suggestion` is ignored by ESLint."
              );
            }
            throw new Error(
              "Rules with suggestions must set the `meta.hasSuggestions` property to `true`."
            );
          }
        }
      });
      const ruleListenersReturn = timing2.enabled || stats2 ? timing2.time(
        ruleId,
        createRuleListeners,
        stats2
      )(rule, ruleContext) : createRuleListeners(rule, ruleContext);
      const ruleListeners = stats2 ? ruleListenersReturn.result : ruleListenersReturn;
      if (stats2) {
        storeTime(
          ruleListenersReturn.tdiff,
          { type: "rules", key: ruleId },
          slots
        );
      }
      function addRuleErrorHandler(ruleListener) {
        return function ruleErrorHandler(...listenerArgs) {
          try {
            const ruleListenerReturn = ruleListener(...listenerArgs);
            const ruleListenerResult = stats2 ? ruleListenerReturn.result : ruleListenerReturn;
            if (stats2) {
              storeTime(
                ruleListenerReturn.tdiff,
                { type: "rules", key: ruleId },
                slots
              );
            }
            return ruleListenerResult;
          } catch (e2) {
            e2.ruleId = ruleId;
            throw e2;
          }
        };
      }
      if (typeof ruleListeners === "undefined" || ruleListeners === null) {
        throw new Error(
          `The create() function for rule '${ruleId}' did not return an object.`
        );
      }
      Object.keys(ruleListeners).forEach((selector) => {
        const ruleListener = timing2.enabled || stats2 ? timing2.time(ruleId, ruleListeners[selector], stats2) : ruleListeners[selector];
        visitor.add(selector, addRuleErrorHandler(ruleListener));
      });
    });
    const traverser2 = SourceCodeTraverser.getInstance(language);
    traverser2.traverseSync(sourceCode2, visitor, { steps });
    return report;
  }
  function ensureText(textOrSourceCode) {
    if (typeof textOrSourceCode === "object") {
      const { hasBOM, text } = textOrSourceCode;
      const bom = hasBOM ? "\uFEFF" : "";
      return bom + text;
    }
    return String(textOrSourceCode);
  }
  function getEnv(slots, envId) {
    return slots.lastConfigArray && slots.lastConfigArray.pluginEnvironments.get(envId) || BuiltInEnvironments.get(envId) || null;
  }
  function getRule(slots, ruleId) {
    return slots.lastConfigArray && slots.lastConfigArray.pluginRules.get(ruleId) || slots.ruleMap.get(ruleId);
  }
  function normalizeCwd(cwd2) {
    if (cwd2) {
      return cwd2;
    }
    if (typeof browser$1$1 === "object") {
      return browser$1$1.cwd();
    }
    return void 0;
  }
  const internalSlotsMap = /* @__PURE__ */ new WeakMap();
  function assertEslintrcConfig(linter2) {
    const { configType } = internalSlotsMap.get(linter2);
    if (configType === "flat") {
      throw new Error(
        "This method cannot be used with flat config. Add your entries directly into the config array."
      );
    }
  }
  class Linter2 {
    /**
     * Initialize the Linter.
     * @param {Object} [config] the config object
     * @param {string} [config.cwd] path to a directory that should be considered as the current working directory, can be undefined.
     * @param {Array<string>} [config.flags] the feature flags to enable.
     * @param {"flat"|"eslintrc"} [config.configType="flat"] the type of config used.
     * @param {WarningService} [config.warningService] The warning service to use.
     */
    constructor({
      cwd: cwd2,
      configType = "flat",
      flags: flags2 = [],
      warningService: warningService2 = new WarningService()
    } = {}) {
      const processedFlags = [];
      flags2.forEach((flag) => {
        if (inactiveFlags.has(flag)) {
          const inactiveFlagData = inactiveFlags.get(flag);
          const inactivityReason = getInactivityReasonMessage(inactiveFlagData);
          const message = `The flag '${flag}' is inactive: ${inactivityReason}`;
          if (typeof inactiveFlagData.replacedBy === "undefined") {
            throw new Error(message);
          }
          if (typeof inactiveFlagData.replacedBy === "string") {
            processedFlags.push(inactiveFlagData.replacedBy);
          }
          warningService2.emitInactiveFlagWarning(flag, message);
          return;
        }
        if (!activeFlags.has(flag)) {
          throw new Error(`Unknown flag '${flag}'.`);
        }
        processedFlags.push(flag);
      });
      internalSlotsMap.set(this, {
        cwd: normalizeCwd(cwd2),
        flags: processedFlags,
        lastConfigArray: null,
        lastSourceCode: null,
        lastSuppressedMessages: [],
        configType,
        // TODO: Remove after flat config conversion
        parserMap: /* @__PURE__ */ new Map([["espree", espree2]]),
        ruleMap: new Rules(),
        warningService: warningService2
      });
      this.version = pkg.version;
    }
    /**
     * Getter for package version.
     * @static
     * @returns {string} The version from package.json.
     */
    static get version() {
      return pkg.version;
    }
    /**
     * Indicates if the given feature flag is enabled for this instance.
     * @param {string} flag The feature flag to check.
     * @returns {boolean} `true` if the feature flag is enabled, `false` if not.
     */
    hasFlag(flag) {
      return internalSlotsMap.get(this).flags.includes(flag);
    }
    /**
     * Lint using eslintrc and without processors.
     * @param {VFile} file The file to lint.
     * @param {ConfigData} providedConfig An ESLintConfig instance to configure everything.
     * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.
     * @throws {Error} If during rule execution.
     * @returns {(LintMessage|SuppressedLintMessage)[]} The results as an array of messages or an empty array if no messages.
     */
    #eslintrcVerifyWithoutProcessors(file, providedConfig, providedOptions) {
      const slots = internalSlotsMap.get(this);
      const config2 = providedConfig || {};
      const options = normalizeVerifyOptions(providedOptions, config2);
      let parserName = DEFAULT_PARSER_NAME;
      let parser = espree2;
      if (typeof config2.parser === "object" && config2.parser !== null) {
        parserName = config2.parser.filePath;
        parser = config2.parser.definition;
      } else if (typeof config2.parser === "string") {
        if (!slots.parserMap.has(config2.parser)) {
          return [
            {
              ruleId: null,
              fatal: true,
              severity: 2,
              message: `Configured parser '${config2.parser}' was not found.`,
              line: 0,
              column: 0,
              nodeType: null
            }
          ];
        }
        parserName = config2.parser;
        parser = slots.parserMap.get(config2.parser);
      }
      const envInFile = options.allowInlineConfig && !options.warnInlineConfig ? findEslintEnv(file.body) : {};
      const resolvedEnvConfig = Object.assign(
        { builtin: true },
        config2.env,
        envInFile
      );
      const enabledEnvs = Object.keys(resolvedEnvConfig).filter((envName) => resolvedEnvConfig[envName]).map((envName) => getEnv(slots, envName)).filter((env2) => env2);
      const parserOptions = resolveParserOptions(
        parser,
        config2.parserOptions || {},
        enabledEnvs
      );
      const configuredGlobals = resolveGlobals(
        config2.globals || {},
        enabledEnvs
      );
      const settings = config2.settings || {};
      const languageOptions = createLanguageOptions({
        globals: config2.globals,
        parser,
        parserOptions
      });
      if (!slots.lastSourceCode) {
        let t2;
        if (options.stats) {
          t2 = startTime2();
        }
        const parserService2 = new ParserService();
        const parseResult = parserService2.parseSync(file, {
          language: jslang,
          languageOptions
        });
        if (options.stats) {
          const time = endTime(t2);
          const timeOpts = { type: "parse" };
          storeTime(time, timeOpts, slots);
        }
        if (!parseResult.ok) {
          return parseResult.errors;
        }
        slots.lastSourceCode = parseResult.sourceCode;
      } else {
        if (!slots.lastSourceCode.scopeManager) {
          slots.lastSourceCode = new SourceCode({
            text: slots.lastSourceCode.text,
            ast: slots.lastSourceCode.ast,
            hasBOM: slots.lastSourceCode.hasBOM,
            parserServices: slots.lastSourceCode.parserServices,
            visitorKeys: slots.lastSourceCode.visitorKeys,
            scopeManager: analyzeScope(
              slots.lastSourceCode.ast,
              languageOptions
            )
          });
        }
      }
      const sourceCode2 = slots.lastSourceCode;
      const report = new FileReport({
        ruleMapper: (ruleId) => getRule(slots, ruleId),
        language: jslang,
        sourceCode: sourceCode2,
        disableFixes: options.disableFixes
      });
      const commentDirectives = options.allowInlineConfig ? getDirectiveComments(
        sourceCode2,
        (ruleId) => getRule(slots, ruleId),
        options.warnInlineConfig,
        config2,
        report
      ) : {
        configuredRules: {},
        enabledGlobals: {},
        exportedVariables: {},
        disableDirectives: []
      };
      addDeclaredGlobals(
        sourceCode2.scopeManager.scopes[0],
        configuredGlobals,
        {
          exportedVariables: commentDirectives.exportedVariables,
          enabledGlobals: commentDirectives.enabledGlobals
        }
      );
      const configuredRules = Object.assign(
        {},
        config2.rules,
        commentDirectives.configuredRules
      );
      try {
        runRules(
          sourceCode2,
          configuredRules,
          (ruleId) => getRule(slots, ruleId),
          parserName,
          jslang,
          languageOptions,
          settings,
          options.filename,
          true,
          slots.cwd,
          providedOptions.physicalFilename,
          null,
          options.stats,
          slots,
          report
        );
      } catch (err) {
        err.message += `
Occurred while linting ${options.filename}`;
        debug("An error occurred while traversing");
        debug("Filename:", options.filename);
        if (err.currentNode) {
          const { line } = sourceCode2.getLoc(err.currentNode).start;
          debug("Line:", line);
          err.message += `:${line}`;
        }
        debug("Parser Options:", parserOptions);
        debug("Parser Path:", parserName);
        debug("Settings:", settings);
        if (err.ruleId) {
          err.message += `
Rule: "${err.ruleId}"`;
        }
        throw err;
      }
      return applyDisableDirectives2({
        language: jslang,
        sourceCode: sourceCode2,
        directives: commentDirectives.disableDirectives,
        disableFixes: options.disableFixes,
        problems: report.messages.sort(
          (problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column
        ),
        reportUnusedDisableDirectives: options.reportUnusedDisableDirectives
      });
    }
    /**
     * Same as linter.verify, except without support for processors.
     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.
     * @param {ConfigData} providedConfig An ESLintConfig instance to configure everything.
     * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.
     * @throws {Error} If during rule execution.
     * @returns {(LintMessage|SuppressedLintMessage)[]} The results as an array of messages or an empty array if no messages.
     */
    _verifyWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {
      const slots = internalSlotsMap.get(this);
      const filename = normalizeFilename(
        providedOptions.filename || "<input>"
      );
      let text;
      if (typeof textOrSourceCode === "string") {
        slots.lastSourceCode = null;
        text = textOrSourceCode;
      } else {
        slots.lastSourceCode = textOrSourceCode;
        text = textOrSourceCode.text;
      }
      const file = new VFile(filename, text, {
        physicalPath: providedOptions.physicalFilename
      });
      return this.#eslintrcVerifyWithoutProcessors(
        file,
        providedConfig,
        providedOptions
      );
    }
    /**
     * Verifies the text against the rules specified by the second argument.
     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.
     * @param {ConfigData|ConfigArray} config An ESLintConfig instance to configure everything.
     * @param {(string|(VerifyOptions&ProcessorOptions))} [filenameOrOptions] The optional filename of the file being checked.
     *      If this is not set, the filename will default to '<input>' in the rule context. If
     *      an object, then it has "filename", "allowInlineConfig", and some properties.
     * @returns {LintMessage[]} The results as an array of messages or an empty array if no messages.
     */
    verify(textOrSourceCode, config2, filenameOrOptions) {
      debug("Verify");
      const { configType, cwd: cwd2 } = internalSlotsMap.get(this);
      const options = typeof filenameOrOptions === "string" ? { filename: filenameOrOptions } : filenameOrOptions || {};
      const configToUse = config2 ?? {};
      if (configType !== "eslintrc") {
        let configArray = configToUse;
        if (!Array.isArray(configToUse) || typeof configToUse.getConfig !== "function") {
          configArray = new FlatConfigArray(configToUse, {
            basePath: cwd2
          });
          configArray.normalizeSync();
        }
        return this._distinguishSuppressedMessages(
          this._verifyWithFlatConfigArray(
            textOrSourceCode,
            configArray,
            options,
            true
          )
        );
      }
      if (typeof configToUse.extractConfig === "function") {
        return this._distinguishSuppressedMessages(
          this._verifyWithConfigArray(
            textOrSourceCode,
            configToUse,
            options
          )
        );
      }
      if (options.preprocess || options.postprocess) {
        return this._distinguishSuppressedMessages(
          this._verifyWithProcessor(
            textOrSourceCode,
            configToUse,
            options
          )
        );
      }
      return this._distinguishSuppressedMessages(
        this._verifyWithoutProcessors(
          textOrSourceCode,
          configToUse,
          options
        )
      );
    }
    /**
     * Verify with a processor.
     * @param {string|SourceCode} textOrSourceCode The source code.
     * @param {Config} config The config array.
     * @param {VerifyOptions&ProcessorOptions} options The options.
     * @param {FlatConfigArray} [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.
     * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.
     */
    _verifyWithFlatConfigArrayAndProcessor(textOrSourceCode, config2, options, configForRecursive) {
      const slots = internalSlotsMap.get(this);
      const filename = options.filename || "<input>";
      const filenameToExpose = normalizeFilename(filename);
      const physicalFilename = options.physicalFilename || filenameToExpose;
      const text = ensureText(textOrSourceCode);
      const file = new VFile(filenameToExpose, text, {
        physicalPath: physicalFilename
      });
      const preprocess = options.preprocess || ((rawText) => [rawText]);
      const postprocess = options.postprocess || ((messagesList) => messagesList.flat());
      const processorService2 = new ProcessorService();
      const preprocessResult = processorService2.preprocessSync(file, {
        processor: {
          preprocess,
          postprocess
        }
      });
      if (!preprocessResult.ok) {
        return preprocessResult.errors;
      }
      const filterCodeBlock = options.filterCodeBlock || ((blockFilename) => blockFilename.endsWith(".js"));
      const originalExtname = path.extname(filename);
      const { files } = preprocessResult;
      const messageLists = files.map((block) => {
        debug("A code block was found: %o", block.path || "(unnamed)");
        if (typeof block === "string") {
          return this._verifyWithFlatConfigArrayAndWithoutProcessors(
            block,
            config2,
            options
          );
        }
        if (!filterCodeBlock(block.path, block.body)) {
          debug("This code block was skipped.");
          return [];
        }
        if (configForRecursive && (text !== block.rawBody || path.extname(block.path) !== originalExtname)) {
          debug(
            "Resolving configuration again because the file content or extension was changed."
          );
          return this._verifyWithFlatConfigArray(
            block.rawBody,
            configForRecursive,
            {
              ...options,
              filename: block.path,
              physicalFilename: block.physicalPath
            }
          );
        }
        slots.lastSourceCode = null;
        return this.#flatVerifyWithoutProcessors(block, config2, {
          ...options,
          filename: block.path,
          physicalFilename: block.physicalPath
        });
      });
      return processorService2.postprocessSync(file, messageLists, {
        processor: {
          preprocess,
          postprocess
        }
      });
    }
    /**
     * Verify using flat config and without any processors.
     * @param {VFile} file The file to lint.
     * @param {Config} providedConfig An ESLintConfig instance to configure everything.
     * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.
     * @throws {Error} If during rule execution.
     * @returns {(LintMessage|SuppressedLintMessage)[]} The results as an array of messages or an empty array if no messages.
     */
    #flatVerifyWithoutProcessors(file, providedConfig, providedOptions) {
      const slots = internalSlotsMap.get(this);
      const config2 = providedConfig || {};
      const { settings = {}, languageOptions } = config2;
      const options = normalizeVerifyOptions(providedOptions, config2);
      if (!slots.lastSourceCode) {
        let t2;
        if (options.stats) {
          t2 = startTime2();
        }
        const parserService2 = new ParserService();
        const parseResult = parserService2.parseSync(file, config2);
        if (options.stats) {
          const time = endTime(t2);
          storeTime(time, { type: "parse" }, slots);
        }
        if (!parseResult.ok) {
          return parseResult.errors;
        }
        slots.lastSourceCode = parseResult.sourceCode;
      } else {
        if (slots.lastSourceCode.scopeManager === null) {
          slots.lastSourceCode = new SourceCode({
            text: slots.lastSourceCode.text,
            ast: slots.lastSourceCode.ast,
            hasBOM: slots.lastSourceCode.hasBOM,
            parserServices: slots.lastSourceCode.parserServices,
            visitorKeys: slots.lastSourceCode.visitorKeys,
            scopeManager: analyzeScope(
              slots.lastSourceCode.ast,
              languageOptions
            )
          });
        }
      }
      const sourceCode2 = slots.lastSourceCode;
      const report = new FileReport({
        ruleMapper: (ruleId) => config2.getRuleDefinition(ruleId),
        language: config2.language,
        sourceCode: sourceCode2,
        disableFixes: options.disableFixes
      });
      sourceCode2.applyLanguageOptions?.(languageOptions);
      const mergedInlineConfig = {
        rules: {}
      };
      if (options.allowInlineConfig) {
        if (options.warnInlineConfig) {
          if (sourceCode2.getInlineConfigNodes) {
            sourceCode2.getInlineConfigNodes().forEach((node2) => {
              const loc = sourceCode2.getLoc(node2);
              const range = sourceCode2.getRange(node2);
              report.addWarning({
                message: `'${sourceCode2.text.slice(range[0], range[1])}' has no effect because you have 'noInlineConfig' setting in ${options.warnInlineConfig}.`,
                loc
              });
            });
          }
        } else {
          const inlineConfigResult = sourceCode2.applyInlineConfig?.();
          if (inlineConfigResult) {
            inlineConfigResult.problems.forEach((problem) => {
              report.addFatal(problem);
            });
            for (const {
              config: inlineConfig,
              loc
            } of inlineConfigResult.configs) {
              Object.keys(inlineConfig.rules).forEach((ruleId) => {
                const rule = config2.getRuleDefinition(ruleId);
                const ruleValue = inlineConfig.rules[ruleId];
                if (!rule) {
                  report.addError({
                    ruleId,
                    loc
                  });
                  return;
                }
                if (Object.hasOwn(mergedInlineConfig.rules, ruleId)) {
                  report.addError({
                    message: `Rule "${ruleId}" is already configured by another configuration comment in the preceding code. This configuration is ignored.`,
                    loc
                  });
                  return;
                }
                try {
                  const ruleOptionsInline = asArray(ruleValue);
                  let ruleOptions = ruleOptionsInline;
                  assertIsRuleSeverity(ruleId, ruleOptions[0]);
                  let shouldValidateOptions = true;
                  if (
                    /*
                     * If inline config for the rule has only severity
                     */
                    ruleOptions.length === 1 && /*
                    * And the rule was already configured
                    */
                    config2.rules && Object.hasOwn(config2.rules, ruleId)
                  ) {
                    ruleOptions = [
                      ruleOptions[0],
                      // severity from the inline config
                      ...config2.rules[ruleId].slice(1)
                      // options from the provided config
                    ];
                    if (config2.rules[ruleId][0] > 0) {
                      shouldValidateOptions = false;
                    }
                  } else {
                    const slicedOptions = ruleOptions.slice(1);
                    const mergedOptions = deepMergeArrays(
                      rule.meta?.defaultOptions,
                      slicedOptions
                    );
                    if (mergedOptions.length) {
                      ruleOptions = [
                        ruleOptions[0],
                        ...mergedOptions
                      ];
                    }
                  }
                  if (options.reportUnusedInlineConfigs !== "off") {
                    addProblemIfSameSeverityAndOptions(
                      config2,
                      loc,
                      report,
                      ruleId,
                      ruleOptions,
                      ruleOptionsInline,
                      options.reportUnusedInlineConfigs
                    );
                  }
                  if (shouldValidateOptions) {
                    config2.validateRulesConfig({
                      [ruleId]: ruleOptions
                    });
                  }
                  mergedInlineConfig.rules[ruleId] = ruleOptions;
                } catch (err) {
                  if (err.code === "ESLINT_INVALID_RULE_OPTIONS_SCHEMA") {
                    throw err;
                  }
                  let baseMessage = err.message.slice(
                    err.message.startsWith('Key "rules":') ? err.message.indexOf(":", 12) + 1 : err.message.indexOf(":") + 1
                  ).trim();
                  if (err.messageTemplate) {
                    baseMessage += ` You passed "${ruleValue}".`;
                  }
                  report.addError({
                    ruleId,
                    message: `Inline configuration for rule "${ruleId}" is invalid:
	${baseMessage}
`,
                    loc
                  });
                }
              });
            }
          }
        }
      }
      const commentDirectives = options.allowInlineConfig && !options.warnInlineConfig ? getDirectiveCommentsForFlatConfig(
        sourceCode2,
        (ruleId) => config2.getRuleDefinition(ruleId),
        config2.language,
        report
      ) : [];
      const configuredRules = Object.assign(
        {},
        config2.rules,
        mergedInlineConfig.rules
      );
      sourceCode2.finalize?.();
      try {
        runRules(
          sourceCode2,
          configuredRules,
          (ruleId) => config2.getRuleDefinition(ruleId),
          void 0,
          config2.language,
          languageOptions,
          settings,
          options.filename,
          false,
          slots.cwd,
          providedOptions.physicalFilename,
          options.ruleFilter,
          options.stats,
          slots,
          report
        );
      } catch (err) {
        err.message += `
Occurred while linting ${options.filename}`;
        debug("An error occurred while traversing");
        debug("Filename:", options.filename);
        if (err.currentNode) {
          const { line } = sourceCode2.getLoc(err.currentNode).start;
          debug("Line:", line);
          err.message += `:${line}`;
        }
        debug("Parser Options:", languageOptions.parserOptions);
        debug("Settings:", settings);
        if (err.ruleId) {
          err.message += `
Rule: "${err.ruleId}"`;
        }
        throw err;
      }
      return applyDisableDirectives2({
        language: config2.language,
        sourceCode: sourceCode2,
        directives: commentDirectives,
        disableFixes: options.disableFixes,
        problems: report.messages.sort(
          (problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column
        ),
        reportUnusedDisableDirectives: options.reportUnusedDisableDirectives,
        ruleFilter: options.ruleFilter,
        configuredRules
      });
    }
    /**
     * Same as linter.verify, except without support for processors.
     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.
     * @param {Config} providedConfig An ESLintConfig instance to configure everything.
     * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.
     * @throws {Error} If during rule execution.
     * @returns {(LintMessage|SuppressedLintMessage)[]} The results as an array of messages or an empty array if no messages.
     */
    _verifyWithFlatConfigArrayAndWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {
      const slots = internalSlotsMap.get(this);
      const filename = normalizeFilename(
        providedOptions.filename || "<input>"
      );
      let text;
      if (typeof textOrSourceCode === "string") {
        slots.lastSourceCode = null;
        text = textOrSourceCode;
      } else {
        slots.lastSourceCode = textOrSourceCode;
        text = textOrSourceCode.text;
      }
      const file = new VFile(filename, text, {
        physicalPath: providedOptions.physicalFilename
      });
      return this.#flatVerifyWithoutProcessors(
        file,
        providedConfig,
        providedOptions
      );
    }
    /**
     * Verify a given code with `ConfigArray`.
     * @param {string|SourceCode} textOrSourceCode The source code.
     * @param {ConfigArray} configArray The config array.
     * @param {VerifyOptions&ProcessorOptions} options The options.
     * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.
     */
    _verifyWithConfigArray(textOrSourceCode, configArray, options) {
      debug("With ConfigArray: %s", options.filename);
      internalSlotsMap.get(this).lastConfigArray = configArray;
      const config2 = configArray.extractConfig(options.filename);
      const processor = config2.processor && configArray.pluginProcessors.get(config2.processor);
      if (processor) {
        debug("Apply the processor: %o", config2.processor);
        const { preprocess, postprocess, supportsAutofix } = processor;
        const disableFixes = options.disableFixes || !supportsAutofix;
        return this._verifyWithProcessor(
          textOrSourceCode,
          config2,
          { ...options, disableFixes, postprocess, preprocess },
          configArray
        );
      }
      return this._verifyWithoutProcessors(textOrSourceCode, config2, options);
    }
    /**
     * Verify a given code with a flat config.
     * @param {string|SourceCode} textOrSourceCode The source code.
     * @param {FlatConfigArray} configArray The config array.
     * @param {VerifyOptions&ProcessorOptions} options The options.
     * @param {boolean} [firstCall=false] Indicates if this is being called directly
     *      from verify(). (TODO: Remove once eslintrc is removed.)
     * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.
     */
    _verifyWithFlatConfigArray(textOrSourceCode, configArray, options, firstCall = false) {
      debug("With flat config: %s", options.filename);
      const filename = options.filename || "__placeholder__.js";
      internalSlotsMap.get(this).lastConfigArray = configArray;
      const config2 = configArray.getConfig(filename);
      if (!config2) {
        return [
          {
            ruleId: null,
            severity: 1,
            message: `No matching configuration found for ${filename}.`,
            line: 0,
            column: 0,
            nodeType: null
          }
        ];
      }
      if (config2.processor) {
        debug("Apply the processor: %o", config2.processor);
        const { preprocess, postprocess, supportsAutofix } = config2.processor;
        const disableFixes = options.disableFixes || !supportsAutofix;
        return this._verifyWithFlatConfigArrayAndProcessor(
          textOrSourceCode,
          config2,
          { ...options, filename, disableFixes, postprocess, preprocess },
          configArray
        );
      }
      if (firstCall && (options.preprocess || options.postprocess)) {
        return this._verifyWithFlatConfigArrayAndProcessor(
          textOrSourceCode,
          config2,
          options
        );
      }
      return this._verifyWithFlatConfigArrayAndWithoutProcessors(
        textOrSourceCode,
        config2,
        options
      );
    }
    /**
     * Verify with a processor.
     * @param {string|SourceCode} textOrSourceCode The source code.
     * @param {ConfigData|ExtractedConfig} config The config array.
     * @param {VerifyOptions&ProcessorOptions} options The options.
     * @param {ConfigArray} [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.
     * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.
     */
    _verifyWithProcessor(textOrSourceCode, config2, options, configForRecursive) {
      const slots = internalSlotsMap.get(this);
      const filename = options.filename || "<input>";
      const filenameToExpose = normalizeFilename(filename);
      const physicalFilename = options.physicalFilename || filenameToExpose;
      const text = ensureText(textOrSourceCode);
      const file = new VFile(filenameToExpose, text, {
        physicalPath: physicalFilename
      });
      const preprocess = options.preprocess || ((rawText) => [rawText]);
      const postprocess = options.postprocess || ((messagesList) => messagesList.flat());
      const processorService2 = new ProcessorService();
      const preprocessResult = processorService2.preprocessSync(file, {
        processor: {
          preprocess,
          postprocess
        }
      });
      if (!preprocessResult.ok) {
        return preprocessResult.errors;
      }
      const filterCodeBlock = options.filterCodeBlock || ((blockFilePath) => blockFilePath.endsWith(".js"));
      const originalExtname = path.extname(filename);
      const { files } = preprocessResult;
      const messageLists = files.map((block) => {
        debug("A code block was found: %o", block.path ?? "(unnamed)");
        if (typeof block === "string") {
          return this._verifyWithoutProcessors(block, config2, options);
        }
        if (!filterCodeBlock(block.path, block.body)) {
          debug("This code block was skipped.");
          return [];
        }
        if (configForRecursive && (text !== block.rawBody || path.extname(block.path) !== originalExtname)) {
          debug(
            "Resolving configuration again because the file content or extension was changed."
          );
          return this._verifyWithConfigArray(
            block.rawBody,
            configForRecursive,
            {
              ...options,
              filename: block.path,
              physicalFilename: block.physicalPath
            }
          );
        }
        slots.lastSourceCode = null;
        return this.#eslintrcVerifyWithoutProcessors(block, config2, {
          ...options,
          filename: block.path,
          physicalFilename: block.physicalPath
        });
      });
      return processorService2.postprocessSync(file, messageLists, {
        processor: {
          preprocess,
          postprocess
        }
      });
    }
    /**
     * Given a list of reported problems, distinguish problems between normal messages and suppressed messages.
     * The normal messages will be returned and the suppressed messages will be stored as lastSuppressedMessages.
     * @param {Array<LintMessage|SuppressedLintMessage>} problems A list of reported problems.
     * @returns {LintMessage[]} A list of LintMessage.
     */
    _distinguishSuppressedMessages(problems) {
      const messages = [];
      const suppressedMessages = [];
      const slots = internalSlotsMap.get(this);
      for (const problem of problems) {
        if (problem.suppressions) {
          suppressedMessages.push(problem);
        } else {
          messages.push(problem);
        }
      }
      slots.lastSuppressedMessages = suppressedMessages;
      return messages;
    }
    /**
     * Gets the SourceCode object representing the parsed source.
     * @returns {SourceCode} The SourceCode object.
     */
    getSourceCode() {
      return internalSlotsMap.get(this).lastSourceCode;
    }
    /**
     * Gets the times spent on (parsing, fixing, linting) a file.
     * @returns {{ passes: TimePass[]; }} The times.
     */
    getTimes() {
      return internalSlotsMap.get(this).times ?? { passes: [] };
    }
    /**
     * Gets the number of autofix passes that were made in the last run.
     * @returns {number} The number of autofix passes.
     */
    getFixPassCount() {
      return internalSlotsMap.get(this).fixPasses ?? 0;
    }
    /**
     * Gets the list of SuppressedLintMessage produced in the last running.
     * @returns {SuppressedLintMessage[]} The list of SuppressedLintMessage
     */
    getSuppressedMessages() {
      return internalSlotsMap.get(this).lastSuppressedMessages;
    }
    /**
     * Defines a new linting rule.
     * @param {string} ruleId A unique rule identifier
     * @param {Rule} rule A rule object
     * @returns {void}
     */
    defineRule(ruleId, rule) {
      assertEslintrcConfig(this);
      internalSlotsMap.get(this).ruleMap.define(ruleId, rule);
    }
    /**
     * Defines many new linting rules.
     * @param {Record<string, Rule>} rulesToDefine map from unique rule identifier to rule
     * @returns {void}
     */
    defineRules(rulesToDefine) {
      assertEslintrcConfig(this);
      Object.getOwnPropertyNames(rulesToDefine).forEach((ruleId) => {
        this.defineRule(ruleId, rulesToDefine[ruleId]);
      });
    }
    /**
     * Gets an object with all loaded rules.
     * @returns {Map<string, Rule>} All loaded rules
     */
    getRules() {
      assertEslintrcConfig(this);
      const { lastConfigArray, ruleMap } = internalSlotsMap.get(this);
      return new Map(
        (function* () {
          yield* ruleMap;
          if (lastConfigArray) {
            yield* lastConfigArray.pluginRules;
          }
        })()
      );
    }
    /**
     * Define a new parser module
     * @param {string} parserId Name of the parser
     * @param {Parser} parserModule The parser object
     * @returns {void}
     */
    defineParser(parserId, parserModule) {
      assertEslintrcConfig(this);
      internalSlotsMap.get(this).parserMap.set(parserId, parserModule);
    }
    /**
     * Performs multiple autofix passes over the text until as many fixes as possible
     * have been applied.
     * @param {string} text The source text to apply fixes to.
     * @param {ConfigData|ConfigArray|FlatConfigArray} config The ESLint config object to use.
     * @param {VerifyOptions&ProcessorOptions&FixOptions} options The ESLint options object to use.
     * @returns {{fixed:boolean,messages:LintMessage[],output:string}} The result of the fix operation as returned from the
     *      SourceCodeFixer.
     */
    verifyAndFix(text, config2, options) {
      let messages, fixedResult, fixed = false, passNumber = 0, currentText = text, secondPreviousText, previousText;
      const debugTextDescription = options && options.filename || `${text.slice(0, 10)}...`;
      const shouldFix = options && typeof options.fix !== "undefined" ? options.fix : true;
      const stats2 = options?.stats;
      const slots = internalSlotsMap.get(this);
      if (stats2) {
        delete slots.times;
        slots.fixPasses = 0;
      }
      do {
        passNumber++;
        let tTotal;
        if (stats2) {
          tTotal = startTime2();
        }
        debug(
          `Linting code for ${debugTextDescription} (pass ${passNumber})`
        );
        messages = this.verify(currentText, config2, options);
        debug(
          `Generating fixed text for ${debugTextDescription} (pass ${passNumber})`
        );
        let t2;
        if (stats2) {
          t2 = startTime2();
        }
        fixedResult = SourceCodeFixer.applyFixes(
          currentText,
          messages,
          shouldFix
        );
        if (stats2) {
          if (fixedResult.fixed) {
            const time = endTime(t2);
            storeTime(time, { type: "fix" }, slots);
            slots.fixPasses++;
          } else {
            storeTime(0, { type: "fix" }, slots);
          }
        }
        if (messages.length === 1 && messages[0].fatal) {
          break;
        }
        fixed = fixed || fixedResult.fixed;
        secondPreviousText = previousText;
        previousText = currentText;
        currentText = fixedResult.output;
        if (stats2) {
          tTotal = endTime(tTotal);
          const passIndex = slots.times.passes.length - 1;
          slots.times.passes[passIndex].total = tTotal;
        }
        if (passNumber > 1 && currentText.length === secondPreviousText.length && currentText === secondPreviousText) {
          debug(
            `Circular fixes detected after pass ${passNumber}. Exiting fix loop.`
          );
          slots.warningService.emitCircularFixesWarning(
            options?.filename ?? "text"
          );
          break;
        }
      } while (fixedResult.fixed && passNumber < MAX_AUTOFIX_PASSES);
      if (fixedResult.fixed) {
        let tTotal;
        if (stats2) {
          tTotal = startTime2();
        }
        fixedResult.messages = this.verify(currentText, config2, options);
        if (stats2) {
          storeTime(0, { type: "fix" }, slots);
          slots.times.passes.at(-1).total = endTime(tTotal);
        }
      }
      fixedResult.fixed = fixed;
      fixedResult.output = currentText;
      return fixedResult;
    }
  }
  linter = {
    Linter: Linter2,
    /**
     * Get the internal slots of a given Linter instance for tests.
     * @param {Linter} instance The Linter instance to get.
     * @returns {LinterInternalSlots} The internal slots.
     */
    getLinterInternalSlots(instance) {
      return internalSlotsMap.get(instance);
    }
  };
  return linter;
}
function getLinter() {
  return requireLinter().Linter;
}
var Linter = eslintLinterBrowserify.Linter = getLinter();
export {
  Linter,
  eslintLinterBrowserify as default
};
